-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------GGGGGGG----------EEEEEEEEE-------EEEEEEEEE-----------------------SSSSSSS-------KK------KK-------III-------DDDDDDD--------------------
-------------------GGG-------GGG-------EE--------------EE---------------------------ssss-------------KK-----KK--------III-------DD----DD-------------------
------------------GG-------------------EE--------------EE--------------------------sss---------------KK----KK---------III-------DD-----DD------------------
-----------------GG--------------------EE--------------EE--------------------------ss----------------KK---KK----------III-------DD------DD-----------------
-----------------GG--------------------EE--------------EE---------------------------ss---------------KK--KK-----------III-------DD------DD-----------------
-----------------GG-------GGGG---------EEEEEEEE--------EEEEEEEE-------=======--------sssssss---------KKKKK------------III-------DD------DD-----------------
-----------------GG----------GG--------EE--------------EE----------------------------------ss--------KK--KK-----------III-------DD------DD-----------------
-----------------GG-----------GG-------EE--------------EE-----------------------------------ss-------KK---KK----------III-------DD------DD-----------------
------------------GG----------GG-------EE--------------EE----------------------------------sss-------KK----KK---------III-------DD-----DD------------------
-------------------GG-------GG---------EE--------------EE--------------------------------ssss--------KK-----KK--------III-------DD----DD-------------------
--------------------GGGGGGGGG----------EEEEEEEEE-------EEEEEEEEE--------------------SSSSSSS----------KK------KK-------III-------DDDDDDD--------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------

menu.create_thread(function()


local __GV__ = "Gee-Skid v2.02"
local g = {}
g.prnt = {}
g.feat = {}
g.var = {}
g.tbl = {}
g.o = {}
g.o.prnt = {}
g.o.feat = {}
g.o.var = {}
g.o.tbl = {}
g.paths  = {}
g.paths._popstar=utils.get_appdata_path("PopstarDevs", "")
g.paths._2t1=g.paths._popstar.."\\2Take1Menu\\"
g.paths._vehs=g.paths._2t1.."moddedVehicles\\"
g.paths._scripts=g.paths._2t1.."scripts\\"
g.paths._v2=g.paths._scripts.."GeeSkid_v2\\"
g.paths._lua_lib=g.paths._v2.."Lua Library\\"
g.paths._cfg=g.paths._2t1.."cfg\\"
g.paths._radar = g.paths._v2.."Images\\2T1 Radar\\"
g.paths._reticle = g.paths._v2.."Images\\Custom Reticle\\"
g.paths._user=g.paths._cfg.."Gee-Skid - "..os.getenv("USERNAME").."\\"
local API,ped_models,glbls,veh_stuff,inputs,ntv,intrr,funcs,mddrs,weap_info,tp_pos
local mth={}
mth.flr = math.floor
mth.ceil = math.ceil
mth.rad = math.rad
mth.sin = math.sin
mth.cos = math.cos
mth.rndm = math.random
mth.abs = math.abs
mth.pi = math.pi
mth.atan = math.atan
mth.acos = math.acos
mth.asin = math.asin
mth.fmod = math.fmod
mth.deg = math.deg
g.script_load_time = utils.time_ms()
g.script_load_time_temp = g.script_load_time
g.tbl.pid_kicked_mem = {}
g.og_notif = menu.notify
g.N_P_colors = {
["Red"] = 0x0040FF,
["Yellow"] = 0x42F5F5,
["Green"] = 0x42F551,
["Blue"] = 0xF5424B}
		
function g.N_P(_print_notif,_text,_title,_time,_color)
	-- 1 to print, 2 to notify, 3 to both
	if _print_notif ~= 2 then
		print(_text)
	end
	if _print_notif ~= 1 then
		g.og_notif(tostring(_text),_title,_time,g.N_P_colors[_color])
	end
end

if _GS_has_started_loading then
	g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\n(Already loaded)",__GV__,10,"Red")
	menu.exit() return
elseif not menu.is_trusted_mode_enabled(1 << 1) then
	g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nTrusted mode for globals required.",__GV__,10,"Red")
	menu.exit() return
elseif not menu.is_trusted_mode_enabled(1 << 2) then
	g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nTrusted mode for natives required.",__GV__,10,"Red")
	menu.exit() return
else
	for k,v in ipairs({ 
	"GeeSkid_v2",
	"GeeSkid_v2\\Images",
	"GeeSkid_v2\\Images\\Custom Reticle",
	"GeeSkid_v2\\Images\\Vehicle ESP",
	"GeeSkid_v2\\Images\\2T1 Radar",
	"GeeSkid_v2\\Images\\Voidkot",
	"GeeSkid_v2\\Lua Library"
	}) do
		if not utils.dir_exists(g.paths._scripts..v.."\\") then
			g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nYou must re-install Gee-Skid. You are missing a folder:\n\\2Take1Menu\\scripts\\"..v,__GV__,10,"Red")
			menu.exit() return
		end
	end
end

_GS_has_started_loading = true

g.load_break_time = utils.time_ms()
function g.load_break()
	if API.util.t_ms() > g.load_break_time then
		system.yield(0)
		g.load_break_time=utils.time_ms()+10 -- i run the game at 120fps  which is basically 8ms so this SHOULD make it not go lower than around 100 when loading but somehow it goes down to 40-45
	end
end
		
function g.print_load_info(_text,_time,_line,_skip)
	local text = __GV__.." loaded: ".._text
	local length = (50-string.len(text))
	for i=1,length do
		text=text.." "
	end
	text = text .."- ".._time.." ms"
	length = (7-string.len(_time))
	for i=1,length do
		text=text.." "
	end
	text = text .."- Line: ".._line
	print(text)
	if not _skip then 
		g.script_load_time_temp = utils.time_ms()
	end
	g.load_break()
end

function g.script_file_check(_file)
	if not utils.file_exists(g.paths._lua_lib.._file..".lua") then
		g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nYou must re-install Gee-Skid. You are missing:\n\\2Take1Menu\\scripts\\GeeSkid_v2\\Lua Library\\".._file..".lua",__GV__,10,"Red")
		return false
	end
	return true
end

function g.script_load_check(_var,_file)
	if _var == nil then
		g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nYou must re-install Gee-Skid. ".._file..".lua is corrupt.",__GV__,10,"Red")
		return false
	elseif _var.ver_text ~= __GV__ then
		g.N_P(3,"Oh noes!\nGee-Skid loading cancelled.\nYou must re-install Gee-Skid. ".._file..".lua version doesn't match.",__GV__,10,"Red")
		return false
	end
	return true
end


print("--- "..__GV__..os.date("   %Y-%m-%d %H:%M:%S ---"))

if not g.script_file_check("API List") then	menu.exit() return else
	API = require("GeeSkid_v2/Lua Library/API List")
	if not g.script_load_check(API,"API List") then menu.exit() return	end
	g.print_load_info("API List.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

if not g.script_file_check("Ped Data") then	menu.exit() return else
	ped_models = require("GeeSkid_v2/Lua Library/Ped Data")
	if not g.script_load_check(ped_models,"Ped Data") then	menu.exit() return end
	g.print_load_info("Ped Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

if not g.script_file_check("Oh No GTA Updated") then menu.exit() return else
	glbls = require("GeeSkid_v2/Lua Library/Oh No GTA Updated")
	if not g.script_load_check(glbls,"Oh No GTA Updated") then menu.exit() return end
	g.print_load_info("Oh No GTA Updated.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

if not g.script_file_check("Vehicle Data") then	menu.exit() return else
	veh_stuff = require("GeeSkid_v2/Lua Library/Vehicle Data")
	if not g.script_load_check(veh_stuff,"Vehicle Data") then menu.exit() return end
	g.print_load_info("Vehicle Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

if not g.script_file_check("Inputs Data") then menu.exit() return else
	inputs = require("GeeSkid_v2/Lua Library/Inputs Data")
	if not g.script_load_check(inputs,"Inputs Data") then menu.exit() return end
	g.print_load_info("Inputs Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

if not g.script_file_check("Natives") then menu.exit() return else
	ntv = require("GeeSkid_v2/Lua Library/Natives")
	if not g.script_load_check(ntv,"Natives") then menu.exit() return end
	g.print_load_info("Natives.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end
if not g.script_file_check("Interior Data") then menu.exit() return else
	intrr = require("GeeSkid_v2/Lua Library/Interior Data")
	if not g.script_load_check(intrr,"Interior Data") then menu.exit() return end
	g.print_load_info("Interior Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end
if not g.script_file_check("Modder Data") then menu.exit() return else
	mddrs = require("GeeSkid_v2/Lua Library/Modder Data")
	if not g.script_load_check(mddrs,"Modder Data") then menu.exit() return end
	g.print_load_info("Modder Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end
if not g.script_file_check("Weapon Data") then menu.exit() return else
	weap_info = require("GeeSkid_v2/Lua Library/Weapon Data")
	if not g.script_load_check(weap_info,"Weapon Data") then menu.exit() return end
	g.print_load_info("Weapon Data.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end
if not g.script_file_check("GTA v3 List") then menu.exit() return else
	tp_pos = require("GeeSkid_v2/Lua Library/GTA v3 List")
	if not g.script_load_check(weap_info,"GTA v3 List") then menu.exit() return end
	g.print_load_info("GTA v3 List.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end
if not g.script_file_check("Functions") then menu.exit() return else
	funcs = require("GeeSkid_v2/Lua Library/Functions")
	if not g.script_load_check(funcs,"Functions") then menu.exit() return end
	g.print_load_info("Functions.lua",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
end

local API_time=time

g.tbl.S_L_FEAT = {}
g.tbl.S_L_NAME = {}

function funcs.add_to_S_L(_feat,_str)
	g.tbl.S_L_FEAT[_str]=_feat
	g.tbl.S_L_NAME[#g.tbl.S_L_NAME+1]=_str
end

function funcs.set_feat_i_f(_feat,_min,_max,_mod,_val,_str)
	_feat.min = _min
	_feat.max = _max
	_feat.mod = _mod
	_feat.value = _val
	if _str then
		funcs.add_to_S_L(_feat,_str)
	end
end




function funcs.is.GS_loaded()
	if g._silent_start.on then
		if g.var.GS_has_loaded then
			return true
		end
		return false
	end
	return true
end

function funcs.get.text_input(_title,_default,_max,_type)
	local status,str=1
	g.var.GS_feature_type_input=true
	while status == 1 do 
		system.yield(0)
		status, str = input.get(_title, _default, _max, _type)
	end
	g.var.GS_feature_type_input=false
	funcs.is.vk_key_down_with_delay("RETURN")
	if str == "" or str == " " then
		return 2,str
	end
	return status,str
end

function funcs.is.feature_keys_down(_key_sett,_val1,_val2,_val3)
	if not g.var.GS_feature_type_input and funcs.is.GW_mouse_right(g.feat.gw_main.on) and not ntv.is.chat_active() then
		if _key_sett.value == 0 then
			if funcs.is.vk_key_down(inputs.vk_list[_val1.value+1]) then
				return true
			end
		elseif _key_sett.value == 1 then
			if funcs.is.vk_key_down(inputs.vk_list[_val1.value+1]) and funcs.is.vk_key_down(inputs.vk_list[_val2.value+1]) then
				return true
			end
		elseif funcs.is.vk_key_down(inputs.vk_list[_val1.value+1]) and funcs.is.vk_key_down(inputs.vk_list[_val2.value+1]) and funcs.is.vk_key_down(inputs.vk_list[_val3.value+1]) then
			return true
		end
	end
	return false
end


function funcs.doo.capture_key_pressed(_num,_str)
	local time = API.util.t_ms() + 10000
	local key1,key2,key3 = -1,-1,-1
	local stop=false
	local timer
	g.var.GS_feature_type_input=true
	while time > API.util.t_ms() and not stop do
		system.yield(0)
		timer = funcs.get.round_num((time - API.util.t_ms())/1000)
		timer=tostring(timer)
		ui.draw_rect(0.5, 0.5, 1.0,1.0, 0, 0, 0, 155)
		funcs.doo.overlay(timer,255,255,255,255,.75,0,.5,.3)
		if funcs.is.vk_key_down("ESCAPE") then stop = true end
		if key1 == -1 then
			funcs.doo.overlay("".._str.." ",255,255,255,255,.75,0,.5,.5)
			for i=1,#inputs.vk_list-1 do
				if funcs.is.vk_key_down(inputs.vk_list[i]) then
					key1=i
					while funcs.is.vk_key_down(inputs.vk_list[i]) and time > API.util.t_ms() do
						ui.draw_rect(0.5, 0.5, 1.0,1.0, 0, 0, 0, 155)
						timer = funcs.get.round_num((time - API.util.t_ms())/1000)
						funcs.doo.overlay(timer,255,255,255,255,.75,0,.5,.3)
						funcs.doo.overlay("".._str.." "..inputs.vk_list[key1],255,255,255,255,.75,0,.5,.5)
						system.yield(0)
					end
					break
				end
			end
		end
		if _num > 1 and key1 ~= -1 and key2 == -1 and key3 == -1 then
			funcs.doo.overlay("".._str.." "..inputs.vk_list[key1].." ",255,255,255,255,.75,0,.5,.5)
			for i=1,#inputs.vk_list-1 do
				if funcs.is.vk_key_down(inputs.vk_list[i]) and i ~= key1 then
					key2=i
					while funcs.is.vk_key_down(inputs.vk_list[i]) and time > API.util.t_ms() do
						ui.draw_rect(0.5, 0.5, 1.0,1.0, 0, 0, 0, 155)
						timer = funcs.get.round_num((time - API.util.t_ms())/1000)
						funcs.doo.overlay(timer,255,255,255,255,.75,0,.5,.3)
						funcs.doo.overlay("".._str.." "..inputs.vk_list[key1].." "..inputs.vk_list[key2],255,255,255,255,.75,0,.5,.5)
						system.yield(0)
					end
					break
				end
			end
		end
		if _num == 3 and key1 ~= -1 and key2 ~= -1 and key3 == -1 then
			funcs.doo.overlay("".._str.." "..inputs.vk_list[key1].." "..inputs.vk_list[key2],255,255,255,255,.75,0,.5,.5)
			for i=1,#inputs.vk_list-1 do
				if funcs.is.vk_key_down(inputs.vk_list[i]) and i ~= key1 and i ~= key2 then
					key3=i
					while funcs.is.vk_key_down(inputs.vk_list[i]) and time > API.util.t_ms() do
						ui.draw_rect(0.5, 0.5, 1.0,1.0, 0, 0, 0, 155)
						timer = funcs.get.round_num((time - API.util.t_ms())/1000)
						funcs.doo.overlay(timer,255,255,255,255,.75,0,.5,.3)
						funcs.doo.overlay("".._str.." "..inputs.vk_list[key1].." "..inputs.vk_list[key2].." "..inputs.vk_list[key3],255,255,255,255,.75,0,.5,.5)
						system.yield(0)
					end
					break
				end
			end
		end
		if _num == 1 and key1 ~= -1 then
			stop=true
		elseif _num == 2 and key2 ~= -1 then
			stop=true
		elseif _num == 3 and key3 ~= -1 then
			stop=true
		end
	end
	g.var.GS_feature_type_input=false
	return key1,key2,key3
end

function funcs.doo.set_keybinds(_num,_str,_val1,_val2,_val3)
	funcs.is.vk_key_down_any(true)
	system.yield(200)
	local key1,key2,key3 = funcs.doo.capture_key_pressed(_num,_str)
	if _num == 1 then
		if key1 == -1 then
			funcs.N_P(2,"No input recorded.",funcs.ver_text,4,"Yellow")
		else
			_val1.value=key1-1
			funcs.N_P(2,_str.." set to: "..inputs.vk_list[_val1.value+1],funcs.ver_text,4,"Green")
			return true
		end
	elseif _num == 2 then
		if key1 == -1 or key2 == -1 then
			funcs.N_P(2,"No input recorded.",funcs.ver_text,4,"Yellow")
		else
			_val1.value=key1-1
			_val2.value=key2-1
			funcs.N_P(2,_str.." set to: "..inputs.vk_list[_val1.value+1].." "..inputs.vk_list[_val2.value+1],funcs.ver_text,4,"Green")
			return true
		end
	elseif _num == 3 then
		if key1 == -1 or key2 == -1 or key3 == -1 then
			funcs.N_P(2,"No input recorded.",funcs.ver_text,4,"Yellow")
		else
			_val1.value=key1-1
			_val2.value=key2-1
			_val3.value=key3-1
			funcs.N_P(2,_str.." set to: "..inputs.vk_list[_val1.value+1].." "..inputs.vk_list[_val2.value+1].." "..inputs.vk_list[_val3.value+1],funcs.ver_text,4,"Green")
			return true
		end
	end
	return false
end

g.var.GS_has_loaded=false
g.var.GS_feature_type_input=false

g.prnt.gs_main = menu.add_feature("Gee-Skid", "parent", 0)
g.prnt.self = menu.add_feature("Self", "parent", g.prnt.gs_main.id)
	g.prnt.self_teleport = menu.add_feature("Teleports", "parent", g.prnt.self.id)
		g.prnt.self_teleport_seat = menu.add_feature("Auto-TP to seat in my veh", "parent", g.prnt.self_teleport.id)
		g.prnt.self_teleport_veh_out = menu.add_feature("TP out of vehicle", "parent", g.prnt.self_teleport.id)
		g.prnt.self_teleport_veh_in = menu.add_feature("TP into vehicle", "parent", g.prnt.self_teleport.id)
		g.prnt.self_teleport_veh_auto = menu.add_feature("Instant-enter vehicles", "parent", g.prnt.self_teleport.id)
	g.prnt.self_weapons = menu.add_feature("Weapons", "parent", g.prnt.self.id)
		g.prnt.self_weapons_ge = menu.add_feature("Gee-Eye", "parent", g.prnt.self_weapons.id, function()
			g.tbl.ge.aim.frwd_foot_offst.hidden=g.tbl.ge.aim.fire_pos.value==1
			g.tbl.ge.aim.frwd_cam_offst.hidden=g.tbl.ge.aim.fire_pos.value==0
		end)
			g.prnt.self_weapons_ge_gf = menu.add_feature("Gee-Flare", "parent", g.prnt.self_weapons_ge.id)
		g.prnt.self_weapons_s_a_b = menu.add_feature("Special Aim-Bot", "parent", g.prnt.self_weapons.id)
		g.prnt.self_weapons_r_f = menu.add_feature("Rapid-Fire", "parent", g.prnt.self_weapons.id)
	g.prnt.self_veh = menu.add_feature("Vehicle", "parent", g.prnt.self.id)
		g.prnt.self_veh_pers = menu.add_feature("Personal Vehicle", "parent", g.prnt.self_veh.id)
		g.prnt.self_veh_last = menu.add_feature("Last Vehicle", "parent", g.prnt.self_veh.id)
		g.prnt.self_veh_crrnt = menu.add_feature("Current Vehicle", "parent", g.prnt.self_veh.id)
			g.prnt.self_veh_crrnt_auto = menu.add_feature("Automatic", "parent", g.prnt.self_veh_crrnt.id)
			g.prnt.self_veh_crrnt_upgr = menu.add_feature("Upgrades", "parent", g.prnt.self_veh_crrnt.id)
				g.prnt.self_veh_crrnt_upgr_pnt = menu.add_feature("Paintjob", "parent", g.prnt.self_veh_crrnt_upgr.id)
					g.prnt.self_veh_crrnt_upgr_pnt_rgb = menu.add_feature("Custom RGB", "parent", g.prnt.self_veh_crrnt_upgr_pnt.id)
				g.prnt.self_veh_crrnt_upgr_lights = menu.add_feature("Headlights", "parent", g.prnt.self_veh_crrnt_upgr.id)
				g.prnt.self_veh_crrnt_upgr_neons = menu.add_feature("Neon Lights", "parent", g.prnt.self_veh_crrnt_upgr.id)
			g.prnt.self_veh_crrnt_drive = menu.add_feature("Gee-Drive", "parent", g.prnt.self_veh_crrnt.id)
				g.prnt.self_veh_crrnt_boost_stop = menu.add_feature("Boost/Stop", "parent", g.prnt.self_veh_crrnt_drive.id)
					g.prnt.self_veh_crrnt_boost_stop_dsply = menu.add_feature("Display Options", "parent", g.prnt.self_veh_crrnt_boost_stop.id)
			g.prnt.self_veh_crrnt_drift = menu.add_feature("Driftmod v1.1", "parent", g.prnt.self_veh_crrnt.id)
				g.prnt.self_veh_crrnt_drift_optns = menu.add_feature("DriftMod v1.1 Options", "parent", g.prnt.self_veh_crrnt_drift.id)
			g.prnt.self_veh_crrnt_info = menu.add_feature("Display vehicle info", "parent", g.prnt.self_veh_crrnt.id)
			g.prnt.self_veh_crrnt_plate = menu.add_feature("Custom plate", "parent", g.prnt.self_veh_crrnt.id)
			g.prnt.self_veh_crrnt_mk2=menu.add_feature("Mk2 inverted flight","parent",g.prnt.self_veh_crrnt.id)
	g.prnt.self_ped = menu.add_feature("Ped", "parent", g.prnt.self.id)		
	g.prnt.gee_watch = menu.add_feature("Gee-Watch", "parent", g.prnt.self.id)	
		g.prnt.optns_gw_b = menu.add_feature("Options", "parent", g.prnt.gee_watch.id)
			g.prnt.optns_gw_b_dsply = menu.add_feature("Display", "parent", g.prnt.optns_gw_b.id,function()
				g._W_B_settings_hide()
			end)
			g.prnt.optns_gw_b_htky = menu.add_feature("Hotkeys", "parent", g.prnt.optns_gw_b.id, function()
				funcs.doo.gw_keys_set_names()
			end)
g.prnt.sssn = menu.add_feature("Session", "parent", g.prnt.gs_main.id,function()
	funcs.doo.sssn_plyr_feat_force_name(g.feat.sssn_pid_plyr_affect_force.on)
	funcs.doo.sssn_veh_feat_force_name(g.tbl.sssn_veh_plyr_affect.force.on)
end)
	g.prnt.sssn_peds = menu.add_feature("Peds", "parent", g.prnt.sssn.id)
	g.prnt.sssn_plyrs = menu.add_feature("Players", "parent", g.prnt.sssn.id)
	g.prnt.sssn_vehs = menu.add_feature("Vehicles", "parent", g.prnt.sssn.id)
	g.prnt.sssn_kicks = menu.add_feature("Kicks", "parent", g.prnt.sssn.id)
g.prnt.spawn = menu.add_feature("Spawn Vehicle", "parent", g.prnt.gs_main.id)
g.prnt.spawn2t1 = menu.add_feature("Saved 2T1 Vehicle", "parent", g.prnt.gs_main.id)
g.prnt.utils = menu.add_feature("Utilities", "parent", g.prnt.gs_main.id)
	g.prnt.utils_info = menu.add_feature("Information", "parent", g.prnt.utils.id)
		g.prnt.utils_info_overlay = menu.add_feature("Player Overlay", "parent", g.prnt.utils_info.id)
		g.prnt.utils_info_esp = menu.add_feature("Vehicle ESP","parent",g.prnt.utils_info.id)
		g.prnt.utils_info_aim = menu.add_feature("Aim Display", "parent", g.prnt.utils_info.id)
		g.prnt.utils_info_ldrbrd = menu.add_feature("Leaderboard", "parent", g.prnt.utils_info.id)
		g.prnt.utils_info_los = menu.add_feature("Players facing me", "parent", g.prnt.utils_info.id)
		g.prnt.utils_info_wp = menu.add_feature("Waypoint","parent",g.prnt.utils_info.id)
		g.prnt.utils_info_radar = menu.add_feature("2T1 Radar v2.0","parent",g.prnt.utils_info.id)
	g.prnt.utils_trffc = menu.add_feature("Traffic", "parent", g.prnt.utils.id)
	g.prnt.utils_prtx = menu.add_feature("Protex", "parent", g.prnt.utils.id)
		g.prnt.utils_prtx_veh_grf = menu.add_feature("Vehicle Grief", "parent", g.prnt.utils_prtx.id)
		g.prnt.utils_prtx_aim = menu.add_feature("Aim Protex", "parent", g.prnt.utils_prtx.id)
		g.prnt.utils_mod_dtx = menu.add_feature("Modder Detection", "parent", g.prnt.utils_prtx.id)
	g.prnt.utils_rtcle=menu.add_feature("Custom reticle", "parent",g.prnt.utils.id)
	g.prnt.utils_clear = menu.add_feature("Clear area", "parent", g.prnt.utils.id)
g.prnt.optns = menu.add_feature("Options", "parent", g.prnt.gs_main.id)
	g.prnt.optns_plate = menu.add_feature("Repair/Upgrade plate","parent",g.prnt.optns.id, function()
		g.N_P(2,"When repairing or upgrading a vehicle the plate will change to what you select here.",__GV__,7,"Yellow")
	end)

g.o.prnt.gs_main = menu.add_player_feature(__GV__, "parent", 0)
	g.o.prnt.tp = menu.add_player_feature("Teleports", "parent", g.o.prnt.gs_main.id)
	g.o.prnt.plyr = menu.add_player_feature("Player", "parent", g.o.prnt.gs_main.id, function()
		while not g.o._mod_toggle  do
			system.yield(0)
		end
		mddrs.str = {}
		mddrs.str_is_int = {}
		mddrs.list={}
		--thank you toph
		local flag = 1
		while flag < player.get_modder_flag_ends() do
			mddrs.list[flag]=player.get_modder_flag_text(flag)
			mddrs.str[#mddrs.str+1]=player.get_modder_flag_text(flag)
			mddrs.str_is_int[player.get_modder_flag_text(flag)]=flag
			flag = flag * 2
		end
		g.o._mod_toggle:set_str_data(mddrs.str)
	end)
	g.o.prnt.veh = menu.add_player_feature("Vehicle", "parent", g.o.prnt.gs_main.id)
	g.o.prnt.spwn = menu.add_player_feature("Spawn Vehicle", "parent", g.o.prnt.gs_main.id)
	g.o.prnt.spawn2t1 = menu.add_player_feature("Saved 2T1 Vehicle", "parent", g.o.prnt.gs_main.id)
	
	g.o._veh_tp_check=menu.add_player_feature(">> Force check for position/vehicle if needed", "toggle", g.o.prnt.gs_main.id, function(f,pid)
		g.tbl.PID_INFO.tp_sett[pid+1] = f.on
	end)
		
		
		
	
g.print_load_info("Main parents",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
g.tbl.threads = {}
g.tbl.entities = {}


g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	while true do
		g.RES_W = (API.gfx.get_w()/3840)
		g.RES_H = (API.gfx.get_h()/2160)
		g.RES = (g.RES_W+g.RES_H)*0.5
		system.yield(5000)
	end
end)
-----------------------------------------------------------------------------------------GEE-SKID
---------------------------------------------------------------------------------------------SELF
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g.tbl.reticle_files = utils.get_all_files_in_directory(g.paths._reticle,"png")
g.tbl.reticle_sprites = {}
for i=1,#g.tbl.reticle_files do
	g.tbl.reticle_sprites[i] = scriptdraw.register_sprite(g.paths._reticle..i..".png")
end

g.tbl.a_b ={}

function g.tbl.a_b.kosatka_show(prjctl)
	local ent,coords
	if funcs.is.ent(prjctl) then
		ent = prjctl
		coords = API.ent.get.coords(prjctl)
	elseif funcs.ME._in_veh() then
		ent=funcs.ME._veh()
		coords=funcs.ME._veh_crds()
	else
		ent=funcs.ME._ped()
		coords=funcs.ME._crds()
	end
	local all_peds=API.Ped.get.all()
	for i=1,#all_peds do
		if g.tbl.a_b.peds[all_peds[i]] ~= nil and g.tbl.a_b.peds[all_peds[i]].GOOD and not API.ent.is.dead(all_peds[i]) and funcs.is.in_grid(API.ent.get.coords(all_peds[i]),coords,1000) then
			if (API.Ped.is.in_veh(all_peds[i]) and ntv.is.ents_in_los(ent,API.Ped.is.in_veh(all_peds[i]),3,true)) or ntv.is.ents_in_los(ent,all_peds[i],3,true) then
				g.tbl.a_b.show_ped(all_peds[i])
			end
		end
	end
end
	
function g.tbl.a_b.kosatka_do(obj)
	local prjctl = g.tbl.a_b.get_prjctl2(true,obj)
	if funcs.is.ent(prjctl) then
		local trgt_crds_do=nil
		g.tbl.a_b.kosatka_cam=nil
		local aircrft_help = (funcs.ME._in_veh() and (API.strm.is.valid_helo(API.ent.get.model_hash(funcs.ME._veh())) or API.strm.is.valid_plane(API.ent.get.model_hash(funcs.ME._veh()))))
		local my_pos = funcs.ME._veh_crds()
		while funcs.is.ent(prjctl) and not funcs.is.vk_key_down(inputs.vk_list[g.tbl.a_b.speed_stop_key_k.value+1]) do
			g.tbl.a_b.kosatka_show(prjctl)
			if not ntv.cam.is.exist(g.tbl.a_b.kosatka_cam) then
				ntv.cam.doo.destroy_all()
				g.tbl.a_b.kosatka_cam = ntv.cam.doo.create_w_params("DEFAULT_SCRIPTED_CAMERA", v3(),v3(), 90.0, 1, 2)
				ntv.cam.doo.attach_to_ent(g.tbl.a_b.kosatka_cam, prjctl,v3(),1)
				ntv.cam.set.active(g.tbl.a_b.kosatka_cam,1)
				ntv.cam.set.render_script(1, 0, 0, 0, 0)
			end
			if aircrft_help and g.tbl.a_b.aircrft_k.value == 2 then
				API.veh.set.forward_speed(funcs.ME._veh(),0)
			elseif aircrft_help and g.tbl.a_b.aircrft_k.value == 1 then
				if funcs.ME._veh_crds().z < my_pos.z then
					API.ent.force(funcs.ME._veh(), 3, 0,0,(my_pos.z-funcs.ME._veh_crds().z)*0.5, 0,0,0, true, true)
				end
			end
			API.ent.set.rotation(prjctl,API.cam.get.rot())
			trgt_crds_do = g.tbl.a_b.rot_to_dir(API.ent.get.coords(prjctl),API.cam.get.rot(),g.tbl.a_b.speed_k.value*50)
			trgt_crds_do = g.tbl.a_b.dir_to_pos(API.ent.get.coords(prjctl),trgt_crds_do)
			ntv.cam.set.rot(g.tbl.a_b.kosatka_cam,API.cam.get.rot(),2)
			if funcs.is.vk_key_down(inputs.vk_list[g.tbl.a_b.speed_up_key_k.value+1]) then
				API.ent.set.velocity(prjctl,trgt_crds_do*g.tbl.a_b.speed_up_k.value)
			elseif funcs.is.vk_key_down(inputs.vk_list[g.tbl.a_b.speed_dwn_key_k.value+1]) then
				API.ent.set.velocity(prjctl,trgt_crds_do*g.tbl.a_b.speed_dwn_k.value)
			else
				API.ent.set.velocity(prjctl,trgt_crds_do)
			end
			g.tbl.a_b.auto_sticky_do(false,prjctl,nil)
			ntv.map.lock_mini_pos(API.ent.get.coords(prjctl))
			ntv.cam.set.focus_pos(API.ent.get.coords(prjctl))
			system.yield(5)
		end
		if aircrft_help and funcs.ME._in_veh() then
			API.ent.force(funcs.ME._veh(), 3, 0,0,2, 0,0,0, true, true)
		end
		ntv.cam.set.render_script(0, 0, 0, 0, 0)
		ntv.cam.set.active(g.tbl.a_b.kosatka_cam,0)
		ntv.cam.doo.destroy_all()
	end
	ntv.cam.set.no_focus_pos()
	ntv.map.unlock_mini_pos()
end

function g.tbl.a_b.show_fov_box(veh_weap,alpha)
	if (veh_weap and g.tbl.a_b.fov_show_v.on) or (not veh_weap and g.tbl.a_b.fov_show.on) then
		local x_size,y_size,color
		if not veh_weap and g.tbl.a_b.fov_show.on then
			alpha = alpha or g.tbl.a_b.box_a.value
			x_size,y_size = g.tbl.a_b.fov_x.value, g.tbl.a_b.fov_y.value
			color = funcs.get.rgb_to_int(g.tbl.a_b.box_r.value,g.tbl.a_b.box_g.value,g.tbl.a_b.box_b.value,alpha)
		else
			alpha = alpha or g.tbl.a_b.box_a_v.value
			x_size,y_size = g.tbl.a_b.fov_x_v.value, g.tbl.a_b.fov_y_v.value
			color = funcs.get.rgb_to_int(g.tbl.a_b.box_r_v.value,g.tbl.a_b.box_g_v.value,g.tbl.a_b.box_b_v.value,alpha)
		end
		API.SD.draw_line(v2(-(x_size*.01),(y_size*.01)),v2((x_size*.01),(y_size*.01)), 1, color)
		API.SD.draw_line(v2((x_size*.01),(y_size*.01)),v2((x_size*.01),-(y_size*.01)), 1, color)
		API.SD.draw_line(v2((x_size*.01),-(y_size*.01)),v2(-(x_size*.01),-(y_size*.01)), 1, color)
		API.SD.draw_line(v2(-(x_size*.01),-(y_size*.01)),v2(-(x_size*.01),(y_size*.01)), 1,color)
	end
end

function g.tbl.a_b.show_fov_box2(veh_weap,alpha)
	local x_size,y_size,color
	if veh_weap then
		alpha = alpha or g.tbl.a_b.box_a_v.value
		x_size,y_size = g.tbl.a_b.fov_x_v.value, g.tbl.a_b.fov_y_v.value
		color = funcs.get.rgb_to_int(g.tbl.a_b.box_r_v.value,g.tbl.a_b.box_g_v.value,g.tbl.a_b.box_b_v.value,alpha)
	else
		alpha = alpha or g.tbl.a_b.box_a.value
		x_size,y_size = g.tbl.a_b.fov_x.value, g.tbl.a_b.fov_y.value
		color = funcs.get.rgb_to_int(g.tbl.a_b.box_r.value,g.tbl.a_b.box_g.value,g.tbl.a_b.box_b.value,alpha)
	end
	API.SD.draw_line(v2(-(x_size*.01),(y_size*.01)),v2((x_size*.01),(y_size*.01)), 1, color)
	API.SD.draw_line(v2((x_size*.01),(y_size*.01)),v2((x_size*.01),-(y_size*.01)), 1, color)
	API.SD.draw_line(v2((x_size*.01),-(y_size*.01)),v2(-(x_size*.01),-(y_size*.01)), 1, color)
	API.SD.draw_line(v2(-(x_size*.01),-(y_size*.01)),v2(-(x_size*.01),(y_size*.01)), 1,color)
end
	
function g.tbl.a_b.get_movement(trgt_crds_do,prjctl_crds_do,_val)
	local vec_to_trgt = funcs.get.vctr_to_pos3(trgt_crds_do,prjctl_crds_do)
	local new_pos = g.tbl.a_b.rot_to_dir(prjctl_crds_do,vec_to_trgt,69*_val)
	return g.tbl.a_b.dir_to_pos(prjctl_crds_do,new_pos),vec_to_trgt
end

function g.tbl.a_b.rot_to_dir(prjctl_crds_do,vec_to_trgt,dist)
	local new_pos = prjctl_crds_do
	local rot = vec_to_trgt
	rot:transformRotToDir()
	rot=rot	* dist
	new_pos = new_pos + rot
	return new_pos
end

function g.tbl.a_b.dir_to_pos(prjctl_crds_do,new_pos)
	return v3((prjctl_crds_do.x-new_pos.x)*-1,(prjctl_crds_do.y-new_pos.y)*-1,(prjctl_crds_do.z-new_pos.z)*-1)
end



g.tbl.a_b.bombs_table={
[0]=3298955569,
[1]=890925600,
[2]=602296248,
[3]=3604002190,
}

function g.tbl.a_b.get_veh_dmnsns2()
	local _min,_max = API.ent.get.dimensions(funcs.ME._veh())
	if _min ~= nil and _max ~= nil then
		return 2 + (_max.y+mth.abs(_min.y))/2
	end
	return 4
end
		
function g.tbl.a_b.get_pos_front2()
	if g.tbl.a_b.veh_weap then	
		if g.tbl.a_b.weap_dir == "Turret" then
			return funcs.get.front_of_dir(funcs.ME._veh_crds(),API.cam.get.rot(),g.tbl.a_b.get_veh_dmnsns2())--g.tbl.a_b.weap_ofst)
		elseif g.tbl.a_b.weap_dir == "Down" then	
			return funcs.ME._veh_crds()+v3(0,0,-2)
		end
		return funcs.get.front_of_dir(funcs.ME._veh_crds(),API.ent.get.rotation(funcs.ME._veh()),g.tbl.a_b.weap_ofst)
	end
	return funcs.get.front_of_dir(funcs.ME._crds(),API.cam.get.rot(),1.5)
end

function g.tbl.a_b.get_my_weap2()
	local weap_obj,weap_type,seek_type,weap_dir,weap_ofst,veh_weap=nil,nil,0,nil,0,false
	if weap_info.hand.obj[funcs.ME._weap()] ~= nil and g.tbl.a_b.wpn_trgt[funcs.ME._weap()] ~= 0 then
		weap_obj = weap_info.hand.obj[funcs.ME._weap()]
		weap_type = weap_info.hand.type[funcs.ME._weap()]
		seek_type = g.tbl.a_b.wpn_trgt[funcs.ME._weap()]
	elseif funcs.ME._in_veh() then
		if g.tbl.a_b.veh_wpn.bomb.value ~=0 and veh_stuff.has_bombs[API.ent.get.model_hash(funcs.ME._veh())] and g.tbl.a_b.bombs_table[API.veh.get.mod(funcs.ME._veh(), 9)] ~= nil and ntv.is.veh_bomb_open(funcs.ME._veh()) then
			veh_weap = true
			weap_obj = g.tbl.a_b.bombs_table[API.veh.get.mod(funcs.ME._veh(), 9)]
			weap_type = "Bomb"
			seek_type = g.tbl.a_b.veh_wpn.bomb.value
			weap_dir = "Down"
			weap_ofst = 0
		elseif weap_info.veh.obj[ntv.get.ped_veh_weap(funcs.ME._ped())] ~= nil and g.tbl.a_b.wpn_trgt[ntv.get.ped_veh_weap(funcs.ME._ped())] ~= 0 then
			veh_weap = true
			weap_obj = weap_info.veh.obj[ntv.get.ped_veh_weap(funcs.ME._ped())]
			weap_type = weap_info.veh.type[ntv.get.ped_veh_weap(funcs.ME._ped())]
			seek_type = g.tbl.a_b.wpn_trgt[ntv.get.ped_veh_weap(funcs.ME._ped())]
			weap_dir = weap_info.veh.dir[ntv.get.ped_veh_weap(funcs.ME._ped())]
			weap_ofst = weap_info.veh.ofst[ntv.get.ped_veh_weap(funcs.ME._ped())]
		elseif weap_info.veh.type[ntv.get.ped_veh_weap(funcs.ME._ped())] == "MG" and g.tbl.a_b.wpn_trgt[ntv.get.ped_veh_weap(funcs.ME._ped())] ~= 0 then
			veh_weap = true
			weap_type = "MG"
			seek_type = g.tbl.a_b.wpn_trgt[ntv.get.ped_veh_weap(funcs.ME._ped())]
		end
	end
	g.tbl.a_b.good = (weap_type ~= nil and seek_type ~= 0)
	g.tbl.a_b.weap_obj = weap_obj
	g.tbl.a_b.weap_type = weap_type
	g.tbl.a_b.seek_type = seek_type
	g.tbl.a_b.veh_weap = veh_weap
	g.tbl.a_b.weap_dir = weap_dir
	g.tbl.a_b.weap_ofst = weap_ofst
end

function g.tbl.a_b.auto_sticky_do(_bool,_ent,_target_coords)
	if (_bool or g.tbl.a_b.auto_sticky.on) and API.ent.get.model_hash(_ent)==3184763647 and not funcs.is.in_grid(API.ent.get.coords(_ent),funcs.ME._crds(),1.5) then
		if (API.ent.is.attached(_ent) or funcs.get.total_velocity(_ent) < 1) then
			controls.set_control_normal(0,47,1.0)
			system.yield(50)
		elseif _target_coords ~= nil and funcs.is.in_grid(API.ent.get.coords(_ent),_target_coords,1.5) then
			controls.set_control_normal(0,47,1.0)
			system.yield(50)
		end
	end
end
	
function g.tbl.a_b.homing_do(trgt_ent,trgt_ped,_val,obj)	
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		if g.tbl.a_b.good_ents2(trgt_ent,trgt_ped) and g.tbl.a_b.peds[trgt_ped].SHOTS < g.tbl.a_b.max_shots.value then
			local trgt_ent_do = trgt_ent
			local trgt_ped_do = trgt_ped
			g.tbl.a_b.peds[trgt_ped_do].SHOTS = g.tbl.a_b.peds[trgt_ped_do].SHOTS + 1
			local prjctl_do=g.tbl.a_b.get_prjctl2(false,obj)
			if funcs.is.ent(prjctl_do) then
				g.tbl.a_b.prev_obj[prjctl_do]=true
				g.tbl.a_b.homing_guts_do(trgt_ent_do,trgt_ped_do,prjctl_do,API.ent.get.coords(prjctl_do))	
				g.tbl.a_b.prev_obj[prjctl_do]=false
			end
			if not funcs.is.ent(trgt_ped_do) or API.ent.is.dead(trgt_ped_do) then
				g.tbl.a_b.peds[trgt_ped_do].SHOTS = 0
			else
				g.tbl.a_b.peds[trgt_ped_do].SHOTS = g.tbl.a_b.peds[trgt_ped_do].SHOTS - 1
			end
		end
	end, nil)
end

function g.tbl.a_b.hopeful_do(obj)	
	g.tbl.a_b.hopeful_total=g.tbl.a_b.hopeful_total+1
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local prjctl_do=g.tbl.a_b.get_prjctl2(false,obj)
		local delay = g.tbl.a_b.hopeful_total
		if funcs.is.ent(prjctl_do) then
			g.tbl.a_b.prev_obj[prjctl_do]=true
			local trgt_ped_do,trgt_ent_do,trgt_crds_do,vec_to_trgt,all_peds = nil,nil,nil,nil,nil
			local time,_table = API.util.t_ms() + 10000
			local my_rot,start_pos = API.cam.get.rot(),API.ent.get.coords(prjctl_do)
			local stop,fake_pos=false
			local function get_target()
				if g.tbl.a_b.hopeful_flight.value == 0 then
					return true
				elseif g.tbl.a_b.hopeful_flight.value == 1 and funcs.get.dist_pospos_v3(start_pos,API.ent.get.coords(prjctl_do)) > g.tbl.a_b.hopeful_straight.value then
					return true
				elseif g.tbl.a_b.hopeful_flight.value == 2 and API.ent.get.coords(prjctl_do).z-start_pos.z > g.tbl.a_b.hopeful_javelin.value then
					return true
				end
				return false
			end
			if g.tbl.a_b.hopeful_flight.value ~= 0 then
				if g.tbl.a_b.veh_weap and g.tbl.a_b.weap_dir ~= "Turret" then
					fake_pos = funcs.get.front_of_dir(funcs.ME._veh_crds(),API.ent.get.rotation(funcs.ME._veh()),1000)
				else
					fake_pos = funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),1000)
				end
				API.ent.set.coords(prjctl_do,API.ent.get.coords(prjctl_do)+v3(0,0,0.5))
			end
			while funcs.is.ent(prjctl_do) and not g.tbl.a_b.good_ents2(trgt_ent_do,trgt_ped_do) and time > API.util.t_ms() do
				if g.tbl.a_b.hopeful_flight.value ~= 0 then
					if funcs.ntwrk.ask_quick(prjctl_do) then
						trgt_crds_do,vec_to_trgt = g.tbl.a_b.get_movement(fake_pos,API.ent.get.coords(prjctl_do),g.tbl.a_b.hopeful_speed.value)
						if g.tbl.a_b.hopeful_flight.value == 2 then
							trgt_crds_do=v3(trgt_crds_do.x*0.5,trgt_crds_do.y*0.5,50*g.tbl.a_b.hopeful_speed.value)
						end
						API.ent.set.rotation(prjctl_do,funcs.get.vctr_to_pos3(fake_pos,API.ent.get.coords(prjctl_do)))
						API.ent.set.velocity(prjctl_do,trgt_crds_do)
					end
				end
				if get_target() then
					all_peds,_table=API.Ped.get.all(),{}
					for i=1,#all_peds do
						if g.tbl.a_b.peds[all_peds[i]] ~= nil and g.tbl.a_b.peds[all_peds[i]].GOOD and g.tbl.a_b.peds[all_peds[i]].SHOTS < g.tbl.a_b.max_shots.value then
							funcs.doo.delay(delay)
							if g.tbl.a_b.peds[all_peds[i]] ~= nil and g.tbl.a_b.peds[all_peds[i]].GOOD and g.tbl.a_b.peds[all_peds[i]].SHOTS < g.tbl.a_b.max_shots.value then
								if not API.ent.is.dead(all_peds[i]) and funcs.is.in_grid(API.ent.get.coords(all_peds[i]),API.ent.get.coords(prjctl_do),1000) then
									if API.Ped.is.in_veh(all_peds[i]) and ntv.is.ents_in_los(prjctl_do,API.Ped.get.veh(all_peds[i]),3,true) then
										_table[#_table+1]={TRGT = API.Ped.get.veh(all_peds[i]),PED = all_peds[i]}
									elseif ntv.is.ents_in_los(prjctl_do,all_peds[i],3,true) then
										_table[#_table+1]={TRGT = all_peds[i],PED = all_peds[i]}
									end
								end
							end
						end
					end
					if #_table > 0 then
						table.sort(_table, function(a, b) return funcs.get.dist_pospos_v3(API.ent.get.coords(a.TRGT),API.ent.get.coords(prjctl_do)) <funcs.get.dist_pospos_v3(API.ent.get.coords(b.TRGT),API.ent.get.coords(prjctl_do))  end)
						if _table[1] ~= nil and  funcs.is.ent(prjctl_do) and funcs.is.ent(_table[1].TRGT) and funcs.is.ent(_table[1].PED) and ntv.is.ents_in_los(prjctl_do,_table[1].TRGT,3,true) then
							funcs.doo.delay(delay)
							if g.tbl.a_b.peds[_table[1].PED] ~= nil and g.tbl.a_b.peds[_table[1].PED].GOOD and g.tbl.a_b.peds[_table[1].PED].SHOTS < g.tbl.a_b.max_shots.value then
								trgt_ent_do=_table[1].TRGT
								trgt_ped_do=_table[1].PED
							end
						end
					end
				end
				system.yield(5)
			end
			system.yield(5)
			if funcs.is.ent(prjctl_do) then
				g.tbl.a_b.homing_guts_do(trgt_ent_do,trgt_ped_do,prjctl_do,API.ent.get.coords(prjctl_do))	
			end
			g.tbl.a_b.prev_obj[prjctl_do]=false
		end
		g.tbl.a_b.hopeful_total=g.tbl.a_b.hopeful_total-1
	end, nil)
end

function g.tbl.a_b.homing_guts_do(trgt,trgt_ped,prjctl,start_crds)	
	if funcs.is.ent(prjctl) and funcs.is.ent(trgt) and funcs.is.ent(trgt_ped)then
		local trgt_ent_do,trgt_ped_do,prjctl_do = trgt,trgt_ped,prjctl
		local stop,current_trgt,speed_do,trgt_crds_do,vec_to_trgt = false,trgt_ped,g.tbl.a_b.speed.value
		local time,init_count = API.util.t_ms() + (g.tbl.a_b.max_guide.value*1000),0
		if g.tbl.a_b.home_type.value == 1 then 
			speed_do=speed_do*1.5
			API.ent.set.coords(prjctl_do,API.ent.get.coords(trgt_ped)+v3(mth.rndm(-1,1),mth.rndm(-1,1),g.tbl.a_b.orb_height.value+1))
		end
		while funcs.is.ent(prjctl_do) and not stop and time > API.util.t_ms() do
			trgt_crds_do,vec_to_trgt = g.tbl.a_b.get_movement(API.ent.get.coords(current_trgt),API.ent.get.coords(prjctl_do),speed_do)
			g.tbl.a_b.rmv_god(current_trgt,false)
			if funcs.ntwrk.ask_quick(prjctl_do) then
				if g.tbl.a_b.home_type.value == 0 and not funcs.is.in_grid_xy(API.ent.get.coords(prjctl_do),API.ent.get.coords(current_trgt),7) then
					trgt_crds_do=trgt_crds_do+v3(0,0,1.5*g.tbl.a_b.hght_crv.value*speed_do)
					if g.tbl.a_b.hght_init.value > 0 and init_count < 10  and funcs.is.in_grid(API.ent.get.coords(prjctl_do),start_crds,3) then
						trgt_crds_do=v3(trgt_crds_do.x*0.5,trgt_crds_do.y*0.5,10*g.tbl.a_b.hght_init.value*0.666*speed_do)
						init_count=init_count+1
					end
				end
				API.ent.set.rotation(prjctl_do,funcs.get.vctr_to_pos(API.ent.get.coords(current_trgt),prjctl_do))
				API.ent.set.velocity(prjctl_do,trgt_crds_do)
			end
			g.tbl.a_b.auto_sticky_do(false,prjctl_do,API.ent.get.coords(current_trgt))
			if g.tbl.a_b.mrkr_show_line.on then
				ui.draw_line(API.ent.get.coords(prjctl_do), API.ent.get.coords(current_trgt),mth.rndm(0,255),mth.rndm(0,255),mth.rndm(0,255),255)
			end
			if g.tbl.a_b.mrkr_show_stay.on and funcs.is.ent(trgt_ped_do) then
				g.tbl.a_b.show_ped(trgt_ped_do,mth.flr((255*0.333)))
			end
			system.yield(5)
			if funcs.is.ent(trgt_ped_do) then	current_trgt=trgt_ped_do
			elseif funcs.is.ent(trgt_ent_do) then current_trgt=trgt_ent_do
			else stop=true
			end
		end
	end
end

function g.tbl.a_b.get_mg_ofst()
	local mg_ofst=v3(0,0,0)
	if weap_info.veh.mg_pitch_ofst[API.ent.get.model_hash(funcs.ME._veh())] ~= nil then
		mg_ofst.x=weap_info.veh.mg_pitch_ofst[API.ent.get.model_hash(funcs.ME._veh())]
	end
	if g.tbl.a_b.mg_trgt_type.value ~= 0 then
		local heading = mth.rad((g.tbl.a_b.mg_rot - 180) * -1)
		if g.tbl.a_b.mg_trgt_type.value == 1 then
			mg_ofst.x = mg_ofst.x + (mth.sin(heading) * -g.tbl.a_b.mg_trgt_height.value)
			mg_ofst.z = mg_ofst.z + (mth.cos(heading) * -g.tbl.a_b.mg_trgt_width.value)
		else
			mg_ofst.x = mg_ofst.x + (mth.sin(heading) * -g.tbl.a_b.mg_height)
			mg_ofst.z = mg_ofst.z + (mth.cos(heading) * -g.tbl.a_b.mg_width)
		end
		if g.tbl.a_b.mg_rot >= 360 then
			g.tbl.a_b.mg_rot = g.tbl.a_b.mg_rot - 360
		else
			g.tbl.a_b.mg_rot=g.tbl.a_b.mg_rot+g.tbl.a_b.mg_trgt_speed.value
		end
		if g.tbl.a_b.mg_trgt_type.value == 2 then
			if g.tbl.a_b.mg_spiral >= 360 then
				g.tbl.a_b.mg_spiral = g.tbl.a_b.mg_spiral - 360
			else
				g.tbl.a_b.mg_spiral=g.tbl.a_b.mg_spiral+(g.tbl.a_b.mg_trgt_speed.value+mth.rndm(1,2))
			end
			g.tbl.a_b.mg_height=g.tbl.a_b.mg_spiral/360*g.tbl.a_b.mg_trgt_height.value
			g.tbl.a_b.mg_width=g.tbl.a_b.mg_spiral/360*g.tbl.a_b.mg_trgt_width.value
		end
	end
	return mg_ofst
end

function g.tbl.a_b.rmv_god(_ent,_bool)
	local function chk_rmv(ent)
		if API.ent.get.god(ent) and funcs.ntwrk.ask_quick(ent) then
			API.ent.set.god(ent,false)
		end
	end
	if (g.tbl.a_b.god.on or _bool) and funcs.is.ent(_ent) then
		if (API.ent.is.ped(_ent) and API.Ped.is.in_veh(_ent)) or API.ent.is.veh(_ent) then
			local veh
			if API.ent.is.veh(_ent) then veh = _ent else veh = API.Ped.get.veh(_ent) end
			chk_rmv(veh)
			for i=1,funcs.get.veh_seats(veh) do
				if funcs.is.ent(API.veh.get.ped_in_seat(veh, i-2)) and not API.Ped.is.plyr(API.veh.get.ped_in_seat(veh, i-2)) then
					chk_rmv(API.veh.get.ped_in_seat(veh, i-2))
				end
			end
		elseif API.ent.is.ped(_ent) and not API.Ped.is.plyr(_ent) then
			chk_rmv(_ent)
		end
	end
end

function g.tbl.a_b.show_ped(_ped,alpha)
	local screen_pos = funcs.get.screen_pos_3d(API.ent.get.coords(_ped))
	if screen_pos then
		g.tbl.a_b.show_that_marker2(screen_pos,alpha)
		if g.tbl.a_b.peds[_ped] ~= nil then
			g.tbl.a_b.show_that_name2(g.tbl.a_b.peds[_ped].PED,screen_pos,g.tbl.a_b.peds[_ped].NAME,alpha)
		end
	end
end

function g.tbl.a_b.show_that_name2(ent,pos,name,alpha)
	if g.tbl.a_b.show_name.on then
		alpha = alpha or 255
		pos.x=pos.x*g.tbl.a_b.name_x_flag
		pos.x=pos.x+g.tbl.a_b.name_x.value
		pos.y=pos.y+g.tbl.a_b.name_y.value
		local _r,_g,_b = g.tbl.a_b.name_r.value,g.tbl.a_b.name_g.value,g.tbl.a_b.name_b.value
		if funcs.is.ent(ent) and API.ent.is.ped(ent) and API.Ped.is.plyr(ent) and glbls.team_rgb_int(API.plyr.get.plyr_from_ped(ent)) > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.get.plyr_from_ped(ent)+1,nil)
		end
		API.SD.draw_text(name,pos,pos,g.tbl.a_b.name_s.value*g.RES,funcs.get.rgb_to_int(_r,_g,_b,mth.flr(alpha/255*g.tbl.a_b.name_a.value)),g.tbl.a_b.name_flags,nil)
	end
end

function g.tbl.a_b.show_that_marker2(pos,alpha)
	if g.tbl.a_b.mrkr_show.on then
		if g.tbl.a_b.seek_type == 2 then
			alpha = alpha or g.tbl.a_b.mrkr_a_k.value
			if g.tbl.a_b.mrkr_rot_k.on then
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct_k.value],pos,1*g.tbl.a_b.mrkr_s_k.value*g.RES,g.tbl.a_b.mrkr_val_k, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r_k.value,g.tbl.a_b.mrkr_g_k.value,g.tbl.a_b.mrkr_b_k.value,alpha))
			else
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct_k.value],pos,1*g.tbl.a_b.mrkr_s_k.value*g.RES,0, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r_k.value,g.tbl.a_b.mrkr_g_k.value,g.tbl.a_b.mrkr_b_k.value,alpha))
			end
		else
			alpha = alpha or g.tbl.a_b.mrkr_a.value
			if g.tbl.a_b.mrkr_rot.on then
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct.value],pos,1*g.tbl.a_b.mrkr_s.value*g.RES,g.tbl.a_b.mrkr_val, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r.value,g.tbl.a_b.mrkr_g.value,g.tbl.a_b.mrkr_b.value,alpha))
			else
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct.value],pos,1*g.tbl.a_b.mrkr_s.value*g.RES,0, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r.value,g.tbl.a_b.mrkr_g.value,g.tbl.a_b.mrkr_b.value,alpha))
			end
		end
	end
end

function g.tbl.a_b.in_fov2(_ent)
	g.tbl.a_b.scrn_bool,g.tbl.a_b.scrn_pos = graphics.project_3d_coord(API.ent.get.coords(_ent))
	if g.tbl.a_b.scrn_bool then
		g.tbl.a_b.scrn_pos = funcs.get.screen_pos_math(g.tbl.a_b.scrn_pos)
	end
	if g.tbl.a_b.fov_limits.value == 0 then
		if g.tbl.a_b.veh_weap then
			return (g.tbl.a_b.scrn_bool and mth.abs(g.tbl.a_b.scrn_pos.x)<=(g.tbl.a_b.fov_x_v.value*0.01) and mth.abs(g.tbl.a_b.scrn_pos.y)<= (g.tbl.a_b.fov_y_v.value*0.01))
		end
		return (g.tbl.a_b.scrn_bool and mth.abs(g.tbl.a_b.scrn_pos.x)<=(g.tbl.a_b.fov_x.value*0.01) and mth.abs(g.tbl.a_b.scrn_pos.y)<= (g.tbl.a_b.fov_y.value*0.01))
	elseif g.tbl.a_b.fov_limits.value== 1 then
		return g.tbl.a_b.scrn_bool
	end
	return true
end

function g.tbl.a_b.in_los2(_ent)
	if g.tbl.a_b.use_los.value == 0 then
		if funcs.ME._in_veh() then
			return ntv.is.ents_in_los(funcs.ME._veh(),_ent,3,true)
		end
		return ntv.is.ents_in_los(funcs.ME._ped(),_ent,3,true)
	end
	return true
end

function g.tbl.a_b.invis2(_ent)
	if g.tbl.a_b.use_los.value == 0 then
		return API.ent.is.visible(_ent)
	end
	return true
end

function g.tbl.a_b.check_visibility(_ent)
	return (g.tbl.a_b.invis2(_ent) and g.tbl.a_b.in_fov2(_ent) and g.tbl.a_b.in_los2(_ent,nil))
end
	

function g.tbl.a_b.defaults()
	g.tbl.a_b.trgt_ent=nil
	g.tbl.a_b.trgt_name=""
	g.tbl.a_b.trgt_los=false
	g.tbl.a_b.trgt_vis=false
	g.tbl.a_b.good = false
	g.tbl.a_b.weap_obj = nil
	g.tbl.a_b.weap_type = nil
	g.tbl.a_b.seek_type = 0
	g.tbl.a_b.veh_weap = false
	g.tbl.a_b.weap_dir = nil
	g.tbl.a_b.weap_ofst = 0
	g.tbl.a_b.peds={}
	g.tbl.a_b.prev_obj = {}
	g.tbl.a_b.scrn_bool = false
	g.tbl.a_b.scrn_pos = v2(0,0)
	g.tbl.a_b.ped_name = ""
	g.tbl.a_b.mg_rot=0
	g.tbl.a_b.mg_spiral=0
	g.tbl.a_b.mg_width=g.tbl.a_b.mg_trgt_width.value
	g.tbl.a_b.mg_height=g.tbl.a_b.mg_trgt_height.value
	g.tbl.a_b.gta_lock=false
	g.tbl.a_b.prjctl=nil
	g.tbl.a_b.hopeful_total=0
end

function g.tbl.a_b.record_ped_info()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local all_peds,this_ped
		local function name_dead(_ped,_name)
			g.tbl.a_b.peds[_ped].NAME = _name
			if API.ent.is.dead(_ped) then
				g.tbl.a_b.peds[_ped].NAME = g.tbl.a_b.peds[_ped].NAME.." (DEAD)"
				g.tbl.a_b.peds[_ped].SHOTS = 0
			end
		end
		while g.tbl.a_b.feat.on do
			all_peds=API.Ped.get.all()
			for i=1,#all_peds do
				this_ped=all_peds[i]
				if g.tbl.a_b.peds[this_ped]== nil or this_ped == funcs.ME._ped() or API.ent.get.coords(this_ped).z < -49 then 
					g.tbl.a_b.peds[this_ped]={PED=this_ped,NAME="",GOOD=false,SHOTS = 0}
				elseif API.Ped.is.plyr(this_ped) then 
					local pid = API.plyr.get.plyr_from_ped(this_ped)
					name_dead(this_ped,funcs.get.pid_name(pid))
					if not g.tbl.a_b.type_plyr.on then
						g.tbl.a_b.peds[this_ped].GOOD=false
					else
						local frnd = API.plyr.is.friend(pid)
						local orgmc = funcs.is.same_orgmc(funcs.ME._id(),pid)
						local other  = (not frnd and not orgmc)
						local in_veh  = API.plyr.is.in_veh(pid)
						if (not in_veh and g.tbl.a_b.type_only_veh.on) or
							(frnd and g.tbl.a_b.type_frnd.value == 0) or
							(orgmc and g.tbl.a_b.type_org.value == 0) or
							(other and g.tbl.a_b.type_othr_plyr.value == 0) then
							g.tbl.a_b.peds[this_ped].GOOD = false
						else
							g.tbl.a_b.peds[this_ped].GOOD = true
						end
					end
				elseif not g.tbl.a_b.type_npc.on then
					g.tbl.a_b.peds[this_ped].GOOD=false
					g.tbl.a_b.peds[this_ped].NAME = ""
				elseif ped_models.rltshp_csa[API.Ped.get.rel_group_hash(this_ped)] then
					name_dead(this_ped,"COP")
					if g.tbl.a_b.type_mssn.value == 0 and (ped_models.rltshp_mssn[API.Ped.get.rel_group_hash(this_ped)] or ntv.is.ped_dislikes(this_ped,API.plyr.get.ped(API.plyr.my_id())) or ntv.is.ped_attack_ped(this_ped,API.plyr.get.ped(API.plyr.my_id()))) then
						g.tbl.a_b.peds[this_ped].GOOD=true
					else
						g.tbl.a_b.peds[this_ped].GOOD=(g.tbl.a_b.type_csa.value == 0)
					end
				elseif (ped_models.rltshp_mssn[API.Ped.get.rel_group_hash(this_ped)] or ntv.is.ped_dislikes(this_ped,API.plyr.get.ped(API.plyr.my_id())) or ntv.is.ped_attack_ped(this_ped,API.plyr.get.ped(API.plyr.my_id()))) then
					name_dead(this_ped,"ANGRY")
					if g.tbl.a_b.type_csa.value == 0  and ped_models.rltshp_csa[API.Ped.get.rel_group_hash(this_ped)] then
						g.tbl.a_b.peds[this_ped].GOOD=true
					else
						g.tbl.a_b.peds[this_ped].GOOD=(g.tbl.a_b.type_mssn.value == 0)
					end
				else
					name_dead(this_ped,"PED")
					g.tbl.a_b.peds[this_ped].GOOD=(g.tbl.a_b.type_othr_npc.value == 0)
				end
			end
			system.yield(100)
			for _,Ped in pairs(g.tbl.a_b.peds) do
				if Ped ~= nil and not funcs.is.ent(Ped.PED) then
					Ped=nil
				end
			end
		end
	end, nil)
end
	
function g.tbl.a_b.get_prjctl2(_bool,obj)
	local pos_front = g.tbl.a_b.get_pos_front2()
	local time,all_obj = API.util.t_ms() + 250
	while time > API.util.t_ms() do
		system.yield(0)
		if _bool then
			g.tbl.a_b.kosatka_show(nil)
		end
		all_obj=object.get_all_objects()
		for i=1,#all_obj do
			if not API.ent.is.attached(all_obj[i]) and API.ent.get.model_hash(all_obj[i])==obj and not g.tbl.a_b.prev_obj[all_obj[i]] and funcs.is.in_grid(API.ent.get.coords(all_obj[i]),pos_front,g.tbl.a_b.get_veh_dmnsns2()) then
				API.ent.set.max_speed(all_obj[i],45000)
				local blip = ui.add_blip_for_entity(all_obj[i])
				ntv.set.blip_sprite(blip,368) 
				ntv.set.blip_scale(blip,0.75)
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local ent,blip,time,head,speed  = all_obj[i],blip, API.util.t_ms() + 10000
					while time > API.util.t_ms() and funcs.is.ent(ent) and ntv.is.blip_exist(blip) do
						speed = entity.get_entity_velocity(ent)
						head = mth.atan(speed.x, speed.y)* -180 / mth.pi  
						ntv.set.blip_rot(blip,mth.ceil(head))
						system.yield(0)
					end
					if ntv.is.blip_exist(blip) then --every so often one object wont disappear after explosion
						ui.remove_blip(blip)
					end
				end)
				return all_obj[i]
			end
		end
	end
	return nil
end
	
function g.tbl.a_b.get_current_target()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local _table,_table2,this_ped,all_peds,time,_bool,screen_pos,this_ent,my_vec
		local function get_target()
			return (g.tbl.a_b.good and (funcs.ME._aim() or g.tbl.a_b.veh_weap))
		end
		local function get_gta_lock()
			this_ent = ntv.get.my_veh_lock_trgt()
			if funcs.is.ent(this_ent) then
				if API.ent.is.ped(this_ent) then
					if g.tbl.a_b.peds[this_ent] ~= nil and g.tbl.a_b.peds[this_ent].GOOD then
						g.tbl.a_b.trgt_ent = this_ent
						g.tbl.a_b.trgt_ped = this_ent
						g.tbl.a_b.gta_lock=true
						return true
					end
				elseif API.ent.is.veh(this_ent) then
					for i=1,funcs.get.veh_seats(this_ent) do
						this_ped = API.veh.get.ped_in_seat(this_ent, i-2)
						if funcs.is.ent(this_ped) and g.tbl.a_b.peds[this_ped] ~= nil and g.tbl.a_b.peds[this_ped].GOOD then
							g.tbl.a_b.trgt_ent = this_ent
							g.tbl.a_b.trgt_ped = this_ped
							g.tbl.a_b.gta_lock=true
							return true
						end
					end
				end
			end
			return false
		end
		local function get_gta_or_target()
			if g.tbl.a_b.seek_type == 1 and g.tbl.a_b.veh_trgt_lock.value == 1 and g.tbl.a_b.veh_weap and g.tbl.a_b.weap_type=="Missile" and get_gta_lock() then
				return false
			end
			g.tbl.a_b.gta_lock=false
			return get_target()
		end
		local function max_dist(_ent)
			if g.tbl.a_b.seek_type == 1 and g.tbl.a_b.weap_type == "MG" then 
				return funcs.get.dist_pospos_v3(funcs.ME._veh_crds(),API.ent.get.coords(_ent)) <= (weap_info.veh.list_mg_dist[ntv.get.ped_veh_weap(funcs.ME._ped())] or 100)
			end
			return funcs.is.in_grid(API.ent.get.coords(_ent),funcs.ME._crds(),2000)
		end
		while g.tbl.a_b.feat.on do
			system.yield(0)
			if g.tbl.a_b.seek_type == 1 and g.tbl.a_b.veh_trgt_lock.value == 2 and g.tbl.a_b.veh_weap and g.tbl.a_b.weap_type=="Missile" then
				if not get_gta_lock() then
					g.tbl.a_b.trgt_ent = nil
					g.tbl.a_b.trgt_ped = nil
					g.tbl.a_b.gta_lock=false
				end
			elseif get_gta_or_target() then
				_table,_table2 = {},{}
				all_peds=API.Ped.get.all()
				for i=1,#all_peds do
					this_ped = all_peds[i]
					if g.tbl.a_b.peds[this_ped] ~= nil and g.tbl.a_b.peds[this_ped].GOOD and g.tbl.a_b.peds[all_peds[i]].SHOTS < g.tbl.a_b.max_shots.value and not API.ent.is.dead(this_ped) and  max_dist(this_ped) then
						if API.Ped.is.in_veh(this_ped) and g.tbl.a_b.check_visibility(API.Ped.get.veh(this_ped)) then
							if g.tbl.a_b.fov_limits.value== 2 then
								_table[#_table+1]={API.Ped.get.veh(this_ped),this_ped,g.tbl.a_b.scrn_pos,funcs.get.vctr_to_pos(API.ent.get.coords(API.Ped.get.veh(this_ped)),funcs.ME._ped())}
							else
								_table[#_table+1]={API.Ped.get.veh(this_ped),this_ped,g.tbl.a_b.scrn_pos}
							end
						elseif g.tbl.a_b.check_visibility(this_ped) then
							if g.tbl.a_b.fov_limits.value== 2 then
								_table[#_table+1]={this_ped,this_ped,g.tbl.a_b.scrn_pos,funcs.get.vctr_to_pos(API.ent.get.coords(this_ped),funcs.ME._ped())}
							else
								_table[#_table+1]={this_ped,this_ped,g.tbl.a_b.scrn_pos}
							end
						end
					end
				end
				if #_table == 0 then
					g.tbl.a_b.trgt_ent = nil
					g.tbl.a_b.trgt_ped = nil
				else
					if g.tbl.a_b.close_or_aim.value == 1  then
						table.sort(_table, function(a, b) return funcs.get.dist_me_ent_3d(a[1])<funcs.get.dist_me_ent_3d(b[1])  end)
					elseif g.tbl.a_b.fov_limits.value== 2 then
						for i=1,#_table do
							if _table[i][3]~= nil then
								_table2[#_table2+1]=_table[i]
							end
						end
						if #_table2 > 0 then
							table.sort(_table2, function(a, b) return mth.abs(a[3].x)+mth.abs(a[3].y) <  mth.abs(b[3].x)+mth.abs(b[3].y) end)
							_table={}
							for i=1,#_table2 do
								_table[i]=_table2[i]
							end
						else
							table.sort(_table, function(a, b) return funcs.get.v3_total_compare(API.cam.get.rot(),a[4])<funcs.get.v3_total_compare(API.cam.get.rot(),b[4])  end)
						end
					elseif g.tbl.a_b.close_or_aim.value == 0  then
						table.sort(_table, function(a, b) return mth.abs(a[3].x)+mth.abs(a[3].y) <  mth.abs(b[3].x)+mth.abs(b[3].y) end)
					end
					g.tbl.a_b.trgt_ent = _table[1][1]
					g.tbl.a_b.trgt_ped = _table[1][2]
				end
			end
			time = API.util.t_ms() + g.tbl.a_b.max_trgt_swtch.value					
			while time > API.util.t_ms() and get_target() and g.tbl.a_b.good_ents(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped) and g.tbl.a_b.peds[g.tbl.a_b.trgt_ped] ~= nil and g.tbl.a_b.peds[g.tbl.a_b.trgt_ped].SHOTS < g.tbl.a_b.max_shots.value and g.tbl.a_b.check_visibility(g.tbl.a_b.trgt_ent) do
				system.yield(0)
			end 
		end
	end, nil)
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		while g.tbl.a_b.feat.on do
			if g.tbl.a_b.seek_type == 1 and (g.tbl.a_b.good and (funcs.ME._aim() or g.tbl.a_b.veh_weap)) then
				if g.tbl.a_b.good_ents(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped) and g.tbl.a_b.peds[g.tbl.a_b.trgt_ped] ~= nil and g.tbl.a_b.peds[g.tbl.a_b.trgt_ped].SHOTS < g.tbl.a_b.max_shots.value then
					if (g.tbl.a_b.gta_lock or g.tbl.a_b.check_visibility(g.tbl.a_b.trgt_ent)) then
						g.tbl.a_b.show_ped(g.tbl.a_b.trgt_ped)
					end
				end
				if g.tbl.a_b.fov_limits.value == 0 then
					if (g.tbl.a_b.veh_weap and g.tbl.a_b.fov_show_v.on) or (not g.tbl.a_b.veh_weap and g.tbl.a_b.fov_show.on) then
						g.tbl.a_b.show_fov_box2(g.tbl.a_b.veh_weap)
					end
				end
			end
			system.yield(0)
		end
	end, nil)
end

function g.tbl.a_b.good_ents(_trgt,_t_ped)
	return (funcs.is.ent(_trgt) and funcs.is.ent(_t_ped) and not API.ent.is.dead(_t_ped))
end
	
function g.tbl.a_b.good_ents2(_trgt,_t_ped)
	return ((funcs.is.ent(_trgt) and not API.ent.is.dead(_trgt)) or (funcs.is.ent(_t_ped) and not API.ent.is.dead(_t_ped)))
end

g.tbl.a_b.feat=menu.add_feature("Enable Special Aim-Bot 2.0","toggle",g.prnt.self_weapons_s_a_b.id,function(f)
	local prjctl,trgt_ent,trgt_crds,all_peds,my_weap,time,cam_,veh_weap,front,name,pos_front,new_front,all_obj,_bool,screen_pos,trgt_ped
	local bad_obj,my_pos,aircrft_help,mg_dist,current_trgt
	g.tbl.a_b.defaults()
	if f.on then
		funcs.doo.yield_while_true(not g.var.GS_has_loaded,500)
		g.tbl.a_b.veh_wpn_set(nil)
		g.tbl.a_b.throw_wpn_set(nil)
		g.tbl.a_b.hand_wpn_set(nil)
		g.tbl.a_b.name_flags_do()
		g.tbl.a_b.get_current_target()
		g.tbl.a_b.record_ped_info()
	end
	while f.on do
		g.tbl.a_b.get_my_weap2()
		system.yield(0)
		if g.tbl.a_b.good then
			if g.tbl.a_b.seek_type == 2 then
				if funcs.ME._aim() or g.tbl.a_b.veh_weap then
					g.tbl.a_b.kosatka_show(nil)
				end
				if (funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) then
					g.tbl.a_b.kosatka_do(g.tbl.a_b.weap_obj)
				end
			elseif g.tbl.a_b.seek_type == 1 then
				if g.tbl.a_b.weap_type == "MG" then
					if (funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) then
						if funcs.is.ent(g.tbl.a_b.trgt_ped) and not API.ent.is.dead(g.tbl.a_b.trgt_ped) then
							trgt_ped = g.tbl.a_b.trgt_ped
							my_pos = funcs.ME._veh_crds()
							aircrft_help = (API.strm.is.valid_helo(API.ent.get.model_hash(funcs.ME._veh())) or API.strm.is.valid_plane(API.ent.get.model_hash(funcs.ME._veh())))
							while (funcs.ME._shoot() or (g.tbl.a_b.veh_weap and (funcs.is.key_active(330,1.0) or funcs.ME._aircrft_shoot()))) and funcs.is.ent(trgt_ped) and not API.ent.is.dead(trgt_ped) and funcs.ME._in_veh() do
								API.ent.set.rotation(funcs.ME._veh(),funcs.get.vctr_to_pos(API.ent.get.coords(trgt_ped),funcs.ME._veh())+g.tbl.a_b.get_mg_ofst())
								if aircrft_help and g.tbl.a_b.aircrft_mg.value == 2 then
									API.veh.set.forward_speed(funcs.ME._veh(),0)
								elseif aircrft_help and g.tbl.a_b.aircrft_mg.value == 1 then
									if funcs.ME._veh_crds().z < my_pos.z then
										API.ent.force(funcs.ME._veh(), 3, 0,0,(my_pos.z-funcs.ME._veh_crds().z)*0.5, 0,0,0, true, true)
									end
								end
								if g.tbl.a_b.keep.on and funcs.is.ent(trgt_ped) then
									g.tbl.a_b.show_ped(trgt_ped)
								else
									trgt_ped = g.tbl.a_b.trgt_ped
								end
								system.yield(5)
							end
							if aircrft_help then
								API.ent.force(funcs.ME._veh(), 3, 0,0,2, 0,0,0, true, true)
							end
						end
					end
				elseif (funcs.ME._aim() or funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) and g.tbl.a_b.good_ents(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped) then
					while (funcs.ME._aim() or funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) and g.tbl.a_b.good_ents(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped) do
						if funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot()) then
							if g.tbl.a_b.keep.on then
								trgt_ent =g.tbl.a_b.trgt_ent
								trgt_ped = g.tbl.a_b.trgt_ped
								while (funcs.ME._aim() or funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) and g.tbl.a_b.good_ents(trgt_ent,trgt_ped) do
									if funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot()) then
										g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
											if g.tbl.a_b.good_ents2(trgt_ent,trgt_ped) then
												local trgt_ent_do = trgt_ent
												local trgt_ped_do = trgt_ped
												g.tbl.a_b.peds[trgt_ped_do].SHOTS = 0
												local prjctl_do=g.tbl.a_b.get_prjctl2(false,obj)
												if funcs.is.ent(prjctl_do) then
													g.tbl.a_b.prev_obj[prjctl_do]=true
													g.tbl.a_b.homing_guts_do(trgt_ent_do,trgt_ped_do,prjctl_do,API.ent.get.coords(prjctl_do))	
													g.tbl.a_b.prev_obj[prjctl_do]=false
												end
											end
										end, nil)
	
										g.tbl.a_b.homing_do(trgt_ent,trgt_ped,g.tbl.a_b.speed.value,g.tbl.a_b.weap_obj)	
									end
									system.yield(0)
								end
							else
								g.tbl.a_b.homing_do(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped,g.tbl.a_b.speed.value,g.tbl.a_b.weap_obj)			
							end
						end
						system.yield(0)
					end
				elseif not g.tbl.a_b.good_ents(g.tbl.a_b.trgt_ent,g.tbl.a_b.trgt_ped) and g.tbl.a_b.hopeful_feat.on and (funcs.ME._shoot() or (g.tbl.a_b.veh_weap and funcs.ME._aircrft_shoot())) then
					g.tbl.a_b.hopeful_do(g.tbl.a_b.weap_obj)	
				end
			end
		end
	end
end)
funcs.add_to_S_L(g.tbl.a_b.feat,"g.tbl.a_b.feat")


g.tbl.a_b.weapons_prnt=menu.add_feature("Weapon Options","parent",g.prnt.self_weapons_s_a_b.id)

g.tbl.a_b.weapons_set_all=menu.add_feature("Change all to:","autoaction_value_str",g.tbl.a_b.weapons_prnt.id,function(f)
	g.tbl.a_b.set_all_weap_seek(f.value)
end)g.tbl.a_b.weapons_set_all:set_str_data({"None","Gee-Seek","Kosatka"})
g.tbl.a_b.weapons_set_all.value=1
funcs.add_to_S_L(g.tbl.a_b.weapons_set_all,"g.tbl.a_b.weapons_set_all")

g.tbl.a_b.wpn_trgt={}

g.tbl.a_b.hand_wpn_prnt=menu.add_feature("Handheld weapons","parent",g.tbl.a_b.weapons_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)

g.tbl.a_b.hand_wpn={}

function g.tbl.a_b.hand_wpn_set(_val)
	if _val ~= nil then
		for _,feat in pairs(g.tbl.a_b.hand_wpn) do
			feat.value=_val
		end
	end
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_rpg")] = g.tbl.a_b.hand_wpn.rpg.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_stinger")] = g.tbl.a_b.hand_wpn.rpg.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_compactlauncher")] = g.tbl.a_b.hand_wpn.cgl.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_grenadelauncher")] = g.tbl.a_b.hand_wpn.gl.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_hominglauncher")] = g.tbl.a_b.hand_wpn.hl.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_firework")] = g.tbl.a_b.hand_wpn.fl.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_emplauncher")] = g.tbl.a_b.hand_wpn.emp.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_flaregun")] = g.tbl.a_b.hand_wpn.fg.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_raypistol")] = g.tbl.a_b.hand_wpn.atom.value
end

g.tbl.a_b.hand_wpn_all=menu.add_feature("Change all to:","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(f.value)
end)
g.tbl.a_b.hand_wpn_all:set_str_data({"None","Gee-Seek","Kosatka"})

g.tbl.a_b.hand_wpn.rpg=menu.add_feature("RPG","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.rpg:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.rpg,"g.tbl.a_b.hand_wpn.rpg")

g.tbl.a_b.hand_wpn.cgl=menu.add_feature("Compact Grenade Launcher","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.cgl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.cgl,"g.tbl.a_b.hand_wpn.cgl")

g.tbl.a_b.hand_wpn.gl=menu.add_feature("Grenade Launcher","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.gl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.gl,"g.tbl.a_b.hand_wpn.gl")

g.tbl.a_b.hand_wpn.hl=menu.add_feature("Homing Launcher","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.hl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.hl,"g.tbl.a_b.hand_wpn.hl")

g.tbl.a_b.hand_wpn.fl=menu.add_feature("Firework Launcher","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.fl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.fl,"g.tbl.a_b.hand_wpn.fl")

g.tbl.a_b.hand_wpn.emp=menu.add_feature("EMP Launcher","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.emp:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.emp,"g.tbl.a_b.hand_wpn.emp")

g.tbl.a_b.hand_wpn.fg=menu.add_feature("Flare gun","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.fg:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.fg,"g.tbl.a_b.hand_wpn.fg")

g.tbl.a_b.hand_wpn.atom=menu.add_feature("Up-N-Atomizer","autoaction_value_str",g.tbl.a_b.hand_wpn_prnt.id,function(f)
	g.tbl.a_b.hand_wpn_set(nil)
end)
g.tbl.a_b.hand_wpn.atom:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.hand_wpn.atom,"g.tbl.a_b.hand_wpn.atom")


g.tbl.a_b.throw_wpn_prnt=menu.add_feature("Throwable weapons","parent",g.tbl.a_b.weapons_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)

g.tbl.a_b.throw_wpn={}

function g.tbl.a_b.throw_wpn_set(_val)
	if _val ~= nil then
		for _,feat in pairs(g.tbl.a_b.throw_wpn) do
			feat.value=_val
		end
	end
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_grenade")] = g.tbl.a_b.throw_wpn.grnd.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_bzgas")] = g.tbl.a_b.throw_wpn.bzg.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_molotov")] = g.tbl.a_b.throw_wpn.mltv.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_stickybomb")] = g.tbl.a_b.throw_wpn.stky.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_proxmine")] = g.tbl.a_b.throw_wpn.pxm.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_snowball")] = g.tbl.a_b.throw_wpn.snbl.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_pipebomb")] = g.tbl.a_b.throw_wpn.ppbm.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_ball")] = g.tbl.a_b.throw_wpn.ball.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_smokegrenade")] = g.tbl.a_b.throw_wpn.smkgnd.value
	g.tbl.a_b.wpn_trgt[API.get_hash_key("weapon_flare")] = g.tbl.a_b.throw_wpn.flare.value
end

g.tbl.a_b.auto_sticky=menu.add_feature("Auto-explode sticky bomb","toggle",g.tbl.a_b.throw_wpn_prnt.id)
funcs.add_to_S_L(g.tbl.a_b.auto_sticky,"g.tbl.a_b.auto_sticky")

g.tbl.a_b.throw_wpn_all=menu.add_feature("Change all to:","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(f.value)
end)
g.tbl.a_b.throw_wpn_all:set_str_data({"None","Gee-Seek","Kosatka"})

g.tbl.a_b.throw_wpn.grnd=menu.add_feature("Grenade","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.grnd:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.grnd,"g.tbl.a_b.throw_wpn.grnd")

g.tbl.a_b.throw_wpn.bzg=menu.add_feature("BZ Gas","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.bzg:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.bzg,"g.tbl.a_b.throw_wpn.bzg")

g.tbl.a_b.throw_wpn.mltv=menu.add_feature("Molotov","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.mltv:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.mltv,"g.tbl.a_b.throw_wpn.mltv")

g.tbl.a_b.throw_wpn.stky=menu.add_feature("Sticky Bomb","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.stky:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.stky,"g.tbl.a_b.throw_wpn.stky")

g.tbl.a_b.throw_wpn.pxm=menu.add_feature("Proximity Mine","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.pxm:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.pxm,"g.tbl.a_b.throw_wpn.pxm")

g.tbl.a_b.throw_wpn.snbl=menu.add_feature("Snowball","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.snbl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.snbl,"g.tbl.a_b.throw_wpn.snbl")

g.tbl.a_b.throw_wpn.ppbm=menu.add_feature("Pipebomb","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.ppbm:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.ppbm,"g.tbl.a_b.throw_wpn.ppbm")

g.tbl.a_b.throw_wpn.ball=menu.add_feature("Ball","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.ball:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.ball,"g.tbl.a_b.throw_wpn.ball")

g.tbl.a_b.throw_wpn.smkgnd=menu.add_feature("Smoke Grenade","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.smkgnd:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.smkgnd,"g.tbl.a_b.throw_wpn.smkgnd")

g.tbl.a_b.throw_wpn.flare=menu.add_feature("Flare","autoaction_value_str",g.tbl.a_b.throw_wpn_prnt.id,function(f)
	g.tbl.a_b.throw_wpn_set(nil)
end)
g.tbl.a_b.throw_wpn.flare:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.throw_wpn.flare,"g.tbl.a_b.throw_wpn.flare")


g.tbl.a_b.veh_wpn_prnt=menu.add_feature("Vehicle weapons","parent",g.tbl.a_b.weapons_prnt.id)

g.tbl.a_b.veh_wpn={}
function g.tbl.a_b.veh_wpn_set(_val)
	if _val ~= nil then
		for _,feat in pairs(g.tbl.a_b.veh_wpn) do
			if feat.name == "Fixed machine guns" then
				if _val == 0 or _val == 1 then
					feat.value = _val
				else
					feat.value = 0
				end 
			else
				feat.value=_val
			end
		end
	end
	for i=1,#weap_info.veh.list_prjctl do
		if weap_info.veh.type[weap_info.veh.list_prjctl[i]]=="Missile" then
			g.tbl.a_b.wpn_trgt[weap_info.veh.list_prjctl[i]]=g.tbl.a_b.veh_wpn.mssl.value
		elseif weap_info.veh.type[weap_info.veh.list_prjctl[i]]=="Grenade" then
			g.tbl.a_b.wpn_trgt[weap_info.veh.list_prjctl[i]]=g.tbl.a_b.veh_wpn.grnde.value
		elseif weap_info.veh.type[weap_info.veh.list_prjctl[i]]=="Mortar" then
			g.tbl.a_b.wpn_trgt[weap_info.veh.list_prjctl[i]]=g.tbl.a_b.veh_wpn.mrtr.value
		elseif weap_info.veh.type[weap_info.veh.list_prjctl[i]]=="Tank" then
			g.tbl.a_b.wpn_trgt[weap_info.veh.list_prjctl[i]]=g.tbl.a_b.veh_wpn.tank.value
		end
	end
	for i=1,#weap_info.veh.list_mg do
		g.tbl.a_b.wpn_trgt[weap_info.veh.list_mg[i]]=g.tbl.a_b.veh_wpn.mg.value
	end
end

g.tbl.a_b.veh_wpn_all=menu.add_feature("Change all to:","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(f.value)
end)
g.tbl.a_b.veh_wpn_all:set_str_data({"None","Gee-Seek","Kosatka"})

g.tbl.a_b.veh_wpn.mssl=menu.add_feature("Missiles/Torpedos","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.mssl:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.mssl,"g.tbl.a_b.veh_wpn.mssl")

g.tbl.a_b.veh_wpn.grnde=menu.add_feature("Grenades","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.grnde:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.grnde,"g.tbl.a_b.veh_wpn.grnde")

g.tbl.a_b.veh_wpn.mrtr=menu.add_feature("Mortars","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.mrtr:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.mrtr,"g.tbl.a_b.veh_wpn.mrtr")

g.tbl.a_b.veh_wpn.tank=menu.add_feature("Tank cannons","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.tank:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.tank,"g.tbl.a_b.veh_wpn.tank")

g.tbl.a_b.veh_wpn.bomb=menu.add_feature("Aircraft bombs","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.bomb:set_str_data({"None","Gee-Seek","Kosatka"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.bomb,"g.tbl.a_b.veh_wpn.bomb")

g.tbl.a_b.veh_wpn.mg=menu.add_feature("Fixed machine guns","autoaction_value_str",g.tbl.a_b.veh_wpn_prnt.id,function(f)
	g.tbl.a_b.veh_wpn_set(nil)
end)
g.tbl.a_b.veh_wpn.mg:set_str_data({"None","Gee-Seek"})
funcs.add_to_S_L(g.tbl.a_b.veh_wpn.mg,"g.tbl.a_b.veh_wpn.mg")

function g.tbl.a_b.set_all_weap_seek(_val)
	g.tbl.a_b.hand_wpn_all.value=_val
	g.tbl.a_b.throw_wpn_all.value=_val
	g.tbl.a_b.veh_wpn_all.value=_val
	g.tbl.a_b.veh_wpn_set(_val)
	g.tbl.a_b.throw_wpn_set(_val)
	g.tbl.a_b.hand_wpn_set(_val)
end
g.tbl.a_b.set_all_weap_seek(1)

g.tbl.a_b.gee_seek_prnt=menu.add_feature("Gee-Seek Options","parent",g.prnt.self_weapons_s_a_b.id)
	
	g.tbl.a_b.veh_mg_prnt=menu.add_feature("Vehicle MG Options","parent",g.tbl.a_b.gee_seek_prnt.id)

		g.tbl.a_b.aircrft_mg=menu.add_feature("Plane/Helo assistance","action_value_str",g.tbl.a_b.veh_mg_prnt.id)
		g.tbl.a_b.aircrft_mg:set_str_data({"No help","Maintain elevation","Hold position"})
		funcs.add_to_S_L(g.tbl.a_b.aircrft_mg,"g.tbl.a_b.aircrft_mg")

		g.tbl.a_b.mg_trgt_type=menu.add_feature("Aiming assistance","action_value_str",g.tbl.a_b.veh_mg_prnt.id)
		g.tbl.a_b.mg_trgt_type:set_str_data({"No help","Draw a circle","Draw a spiral"})
		funcs.add_to_S_L(g.tbl.a_b.mg_trgt_type,"g.tbl.a_b.mg_trgt_type")

		g.tbl.a_b.mg_trgt_width=menu.add_feature("Circle/Spiral max width","action_value_f",g.tbl.a_b.veh_mg_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.mg_trgt_width,0.05,2,0.05,0.5,"g.tbl.a_b.mg_trgt_width")

		g.tbl.a_b.mg_trgt_height=menu.add_feature("Circle/Spiral max height","action_value_f",g.tbl.a_b.veh_mg_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.mg_trgt_height,0.05,2,0.05,0.5,"g.tbl.a_b.mg_trgt_height")

		g.tbl.a_b.mg_trgt_speed=menu.add_feature("Circle/Spiral speed","action_value_i",g.tbl.a_b.veh_mg_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.mg_trgt_speed,1,10,1,5,"g.tbl.a_b.mg_trgt_speed")

	g.tbl.a_b.hopeful_prnt=menu.add_feature("Hopeful shot","parent",g.tbl.a_b.gee_seek_prnt.id)
		
		g.tbl.a_b.hopeful_feat=menu.add_feature("Auto seek target you can't see","toggle",g.tbl.a_b.hopeful_prnt.id)
		funcs.add_to_S_L(g.tbl.a_b.hopeful_feat,"g.tbl.a_b.hopeful_feat")

		g.tbl.a_b.hopeful_flight=menu.add_feature("Trajectory while searching","action_value_str",g.tbl.a_b.hopeful_prnt.id)
		g.tbl.a_b.hopeful_flight:set_str_data({"No change","Camera-Straight","Camera-Javelin",})
		funcs.add_to_S_L(g.tbl.a_b.hopeful_flight,"g.tbl.a_b.hopeful_flight")

		g.tbl.a_b.hopeful_straight=menu.add_feature("Straight minimum travel","action_value_i",g.tbl.a_b.hopeful_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.hopeful_straight,0,250,5,5,"g.tbl.a_b.hopeful_straight")

		g.tbl.a_b.hopeful_javelin=menu.add_feature("Javelin minimum height","action_value_i",g.tbl.a_b.hopeful_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.hopeful_javelin,0,250,5,100,"g.tbl.a_b.hopeful_javelin")

		g.tbl.a_b.hopeful_speed=menu.add_feature("Straight/Javelin speed","action_value_f",g.tbl.a_b.hopeful_prnt.id)
		funcs.set_feat_i_f(g.tbl.a_b.hopeful_speed,0.25,10,.25,3,"g.tbl.a_b.hopeful_speed")

	g.tbl.a_b.mrkr_show_line=menu.add_feature("Show trajectory on screen","toggle",g.tbl.a_b.gee_seek_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.mrkr_show_line,"g.tbl.a_b.mrkr_show_line")
	g.tbl.a_b.mrkr_show_line.on = true

	g.tbl.a_b.keep=menu.add_feature("Keep same target while shooting","toggle",g.tbl.a_b.gee_seek_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.keep,"g.tbl.a_b.keep")

	g.tbl.a_b.max_shots=menu.add_feature("Max shots per target","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.max_shots,1,25,1,3,"g.tbl.a_b.max_shots")

	g.tbl.a_b.god=menu.add_feature("Auto-remove target god","toggle",g.tbl.a_b.gee_seek_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.god,"g.tbl.a_b.god")

	g.tbl.a_b.veh_trgt_lock=menu.add_feature("GTA vehicle homing lock:","action_value_str",g.tbl.a_b.gee_seek_prnt.id)
	g.tbl.a_b.veh_trgt_lock:set_str_data({"Ignore","Prefer","Exclusive"})
	funcs.add_to_S_L(g.tbl.a_b.veh_trgt_lock,"g.tbl.a_b.veh_trgt_lock")

	g.tbl.a_b.close_or_aim=menu.add_feature("Seek target closest to:","action_value_str",g.tbl.a_b.gee_seek_prnt.id)
	g.tbl.a_b.close_or_aim:set_str_data({"Center of FOV","My position"})
	funcs.add_to_S_L(g.tbl.a_b.close_or_aim,"g.tbl.a_b.close_or_aim")

	g.tbl.a_b.fov_limits=menu.add_feature("Limit targets to:","action_value_str",g.tbl.a_b.gee_seek_prnt.id)
	g.tbl.a_b.fov_limits:set_str_data({"Selected FOV limit","Anywhere on screen","Any direction"})
	funcs.add_to_S_L(g.tbl.a_b.fov_limits,"g.tbl.a_b.fov_limits")

	g.tbl.a_b.use_los=menu.add_feature("Line-of-sight to target:","action_value_str",g.tbl.a_b.gee_seek_prnt.id)
	g.tbl.a_b.use_los:set_str_data({"Required","Not required"})
	funcs.add_to_S_L(g.tbl.a_b.use_los,"g.tbl.a_b.use_los")

	g.tbl.a_b.home_type=menu.add_feature("Seek type:","action_value_str",g.tbl.a_b.gee_seek_prnt.id)
	g.tbl.a_b.home_type:set_str_data({"Homing","Orbital"})
	funcs.add_to_S_L(g.tbl.a_b.home_type,"g.tbl.a_b.home_type")

	g.tbl.a_b.max_guide=menu.add_feature("Seek time (Max seconds)","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.max_guide,1,30,1,10,"g.tbl.a_b.max_guide")

	g.tbl.a_b.speed=menu.add_feature("Seek flight speed","action_value_f",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.speed,0.25,10,.25,2,"g.tbl.a_b.speed")

	g.tbl.a_b.orb_height=menu.add_feature("Orbital height","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.orb_height,0,250,5,250,"g.tbl.a_b.orb_height")

	g.tbl.a_b.max_trgt_swtch=menu.add_feature("Target switch time (ms)","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.max_trgt_swtch,25,1000,25,150,"g.tbl.a_b.max_trgt_swtch")

	g.tbl.a_b.hght_init=menu.add_feature("Homing height curve - At launch","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.hght_init,0,10,1,1,"g.tbl.a_b.hght_init")

	g.tbl.a_b.hght_crv=menu.add_feature("Homing height curve - In flight","action_value_i",g.tbl.a_b.gee_seek_prnt.id)
	funcs.set_feat_i_f(g.tbl.a_b.hght_crv,0,10,1,1,"g.tbl.a_b.hght_crv")


	
	g.tbl.a_b.fov_prnt=menu.add_feature("Hand/Throwable Weapons FOV","parent",g.tbl.a_b.gee_seek_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
		g.tbl.a_b.hand_fov_hide()
	end)

	function g.tbl.a_b.hand_fov_hide()
		g.tbl.a_b.box_r.hidden=(not g.tbl.a_b.fov_show.on)
		g.tbl.a_b.box_g.hidden=(not g.tbl.a_b.fov_show.on)
		g.tbl.a_b.box_b.hidden=(not g.tbl.a_b.fov_show.on)
		g.tbl.a_b.box_a.hidden=(not g.tbl.a_b.fov_show.on)
	end
	
	g.tbl.a_b.fov_x=menu.add_feature("FOV X limit","autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.fov_x,1,100,1,18,"g.tbl.a_b.fov_x")

	g.tbl.a_b.fov_y=menu.add_feature("FOV Y limit","autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.fov_y,1,100,1,32,"g.tbl.a_b.fov_y")

	g.tbl.a_b.fov_show=menu.add_feature("Show FOV box when aiming","toggle",g.tbl.a_b.fov_prnt.id,function(f)
		g.tbl.a_b.test_fov_start(f.on,false)
		g.tbl.a_b.hand_fov_hide()
	end)
	funcs.add_to_S_L(g.tbl.a_b.fov_show,"g.tbl.a_b.fov_show")

	g.tbl.a_b.box_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.box_r,0,255,1,255,"g.tbl.a_b.box_r")

	g.tbl.a_b.box_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.box_g,0,255,1,0,"g.tbl.a_b.box_g")
	
	g.tbl.a_b.box_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.box_b,0,255,1,0,"g.tbl.a_b.box_b")
	
	g.tbl.a_b.box_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.a_b.fov_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show.on,false)
	end)
	funcs.set_feat_i_f(g.tbl.a_b.box_a,0,255,1,255,"g.tbl.a_b.box_a")

	g.tbl.a_b.test_fov_show=false
	g.tbl.a_b.test_fov_show_v=false
	g.tbl.a_b.test_fov=menu.add_feature("Show  fov box HIDDEN", "toggle", g.tbl.a_b.fov_prnt.id,function(f)
		if g.var.GS_has_loaded then
			local time = API.util.t_ms() + 3000
			local hand_time = API.util.t_ms()-1
			local veh_time = API.util.t_ms()-1
			while time > API.util.t_ms() do
				if g.tbl.a_b.test_fov_show then
					g.tbl.a_b.test_fov_show=false
					time = API.util.t_ms() + 3000
					hand_time = API.util.t_ms() + 3000
				elseif g.tbl.a_b.test_fov_show_v then
					g.tbl.a_b.test_fov_show_v=false
					time = API.util.t_ms() + 3000
					veh_time = API.util.t_ms() + 3000
				end
				if hand_time > API.util.t_ms() then
					g.tbl.a_b.show_fov_box(false,mth.flr((hand_time-API.util.t_ms()) /3000*g.tbl.a_b.box_a.value))
				end
				if veh_time > API.util.t_ms() then
					g.tbl.a_b.show_fov_box(true,mth.flr((veh_time-API.util.t_ms()) /3000*g.tbl.a_b.box_a_v.value))
				end
				system.yield(5)
			end
		end
		f.on=false
	end)
	g.tbl.a_b.test_fov.hidden=true
	g.tbl.a_b.fov_show.on=true
---------------------------------------------------------------------------------------------------------------------------
	g.tbl.a_b.fov_prnt_v=menu.add_feature("Vehicle Weapons FOV","parent",g.tbl.a_b.gee_seek_prnt.id,function()
		g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		g.tbl.a_b.veh_fov_hide()
	end)

		function g.tbl.a_b.test_fov_start(_bool,_veh)
			if _bool then
				if _veh then
					g.tbl.a_b.test_fov_show_v=true
				else
					g.tbl.a_b.test_fov_show=true
				end
				g.tbl.a_b.test_fov.on=true
			end
		end
		
		function g.tbl.a_b.veh_fov_hide()
			g.tbl.a_b.box_r_v.hidden=(not g.tbl.a_b.fov_show_v.on)
			g.tbl.a_b.box_g_v.hidden=(not g.tbl.a_b.fov_show_v.on)
			g.tbl.a_b.box_b_v.hidden=(not g.tbl.a_b.fov_show_v.on)
			g.tbl.a_b.box_a_v.hidden=(not g.tbl.a_b.fov_show_v.on)
		end

		g.tbl.a_b.fov_x_v=menu.add_feature("FOV X limit","autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.fov_x_v,1,100,1,45,"g.tbl.a_b.fov_x_v")
		
		g.tbl.a_b.fov_y_v=menu.add_feature("FOV Y limit","autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.fov_y_v,1,100,1,80,"g.tbl.a_b.fov_y_v")

		g.tbl.a_b.fov_show_v=menu.add_feature("Show FOV box for vehicle weapons","toggle",g.tbl.a_b.fov_prnt_v.id,function(f)
			g.tbl.a_b.test_fov_start(f.on,true)
			g.tbl.a_b.veh_fov_hide()
		end)
		funcs.add_to_S_L(g.tbl.a_b.fov_show_v,"g.tbl.a_b.fov_show_v")
		
		g.tbl.a_b.box_r_v = menu.add_feature("Red", "autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.box_r_v,0,255,1,255,"g.tbl.a_b.box_r_v")
		
		g.tbl.a_b.box_g_v = menu.add_feature("Green", "autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.box_g_v,0,255,1,0,"g.tbl.a_b.box_g_v")
		
		g.tbl.a_b.box_b_v = menu.add_feature("Blue", "autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.box_b_v,0,255,1,0,"g.tbl.a_b.box_b_v")
		
		g.tbl.a_b.box_a_v = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.a_b.fov_prnt_v.id,function()
			g.tbl.a_b.test_fov_start(g.tbl.a_b.fov_show_v.on,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.box_a_v,0,255,1,255,"g.tbl.a_b.box_a_v")
		g.tbl.a_b.fov_show_v.on=true
------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------Kosatka
------------------------------------------------------------------------------------------------------------------

g.tbl.a_b.flight_cntrls_k=menu.add_feature("Kosatka Options","parent",g.prnt.self_weapons_s_a_b.id,function()
	g.tbl.a_b.speed_up_set_k.name = "Set key for increase ("..inputs.vk_list[g.tbl.a_b.speed_up_key_k.value+1]..")"
	g.tbl.a_b.speed_dwn_set_k.name = "Set key for decrease ("..inputs.vk_list[g.tbl.a_b.speed_dwn_key_k.value+1]..")"
	g.tbl.a_b.speed_stop_set_k.name = "Set key for cancel ("..inputs.vk_list[g.tbl.a_b.speed_stop_key_k.value+1]..")"
end)

		g.tbl.a_b.aircrft_k=menu.add_feature("Plane/Helo help","action_value_str",g.tbl.a_b.flight_cntrls_k.id)
		g.tbl.a_b.aircrft_k:set_str_data({"No help","Maintain elevation","Hold position"})
		funcs.add_to_S_L(g.tbl.a_b.aircrft_k,"g.tbl.a_b.aircrft_k")
		
		g.tbl.a_b.speed_k=menu.add_feature("Flight speed","action_value_f",g.tbl.a_b.flight_cntrls_k.id)
		funcs.set_feat_i_f(g.tbl.a_b.speed_k,0.1,10,.1,1,"g.tbl.a_b.speed_k")

		g.tbl.a_b.speed_up_k=menu.add_feature("Speed increase multiplier","action_value_f",g.tbl.a_b.flight_cntrls_k.id)
		funcs.set_feat_i_f(g.tbl.a_b.speed_up_k,1.25,10,.25,3,"g.tbl.a_b.speed_up_k")

		g.tbl.a_b.speed_dwn_k=menu.add_feature("Speed decrease multiplier","action_value_f",g.tbl.a_b.flight_cntrls_k.id)
		funcs.set_feat_i_f(g.tbl.a_b.speed_dwn_k,0.0,.9,.05,0.25,"g.tbl.a_b.speed_dwn_k")

		g.tbl.a_b.speed_up_key_k=menu.add_feature("Key1 for Speed increase","action_value_str",g.tbl.a_b.flight_cntrls_k.id)
		g.tbl.a_b.speed_up_key_k:set_str_data(inputs.vk_list)
		funcs.add_to_S_L(g.tbl.a_b.speed_up_key_k,"g.tbl.a_b.speed_up_key_k")
		g.tbl.a_b.speed_up_key_k.hidden=true
		g.tbl.a_b.speed_up_key_k.value=53

		g.tbl.a_b.speed_up_set_k=menu.add_feature("Set key for speed increase","action",g.tbl.a_b.flight_cntrls_k.id,function(f)
			funcs.doo.set_keybinds(1,"Speed increase",g.tbl.a_b.speed_up_key_k)
			f.name = "Set key for increase ("..inputs.vk_list[g.tbl.a_b.speed_up_key_k.value+1]..")"
		end)

		g.tbl.a_b.speed_dwn_key_k=menu.add_feature("Key1 for Speed decrease","action_value_str",g.tbl.a_b.flight_cntrls_k.id)
		g.tbl.a_b.speed_dwn_key_k:set_str_data(inputs.vk_list)
		funcs.add_to_S_L(g.tbl.a_b.speed_dwn_key_k,"g.tbl.a_b.speed_dwn_key_k")
		g.tbl.a_b.speed_dwn_key_k.hidden=true
		g.tbl.a_b.speed_dwn_key_k.value=55

		g.tbl.a_b.speed_dwn_set_k=menu.add_feature("Set key for speed decrease","action",g.tbl.a_b.flight_cntrls_k.id,function(f)
			funcs.doo.set_keybinds(1,"Speed decrease",g.tbl.a_b.speed_dwn_key_k)
			f.name = "Set key for decrease ("..inputs.vk_list[g.tbl.a_b.speed_dwn_key_k.value+1]..")"
		end)

		g.tbl.a_b.speed_stop_key_k=menu.add_feature("Key1 for flight cancel","action_value_str",g.tbl.a_b.flight_cntrls_k.id)
		g.tbl.a_b.speed_stop_key_k:set_str_data(inputs.vk_list)
		funcs.add_to_S_L(g.tbl.a_b.speed_stop_key_k,"g.tbl.a_b.speed_stop_key_k")
		g.tbl.a_b.speed_stop_key_k.hidden=true
		g.tbl.a_b.speed_stop_key_k.value=84

		g.tbl.a_b.speed_stop_set_k=menu.add_feature("Set key for cancel","action",g.tbl.a_b.flight_cntrls_k.id,function(f)
			funcs.doo.set_keybinds(1,"Flight cancel",g.tbl.a_b.speed_stop_key_k)
			f.name = "Set key for cancel ("..inputs.vk_list[g.tbl.a_b.speed_stop_key_k.value+1]..")"
		end)

---------------------------------------------------------------------------------------------------------------------------
g.tbl.a_b.type_prnt=menu.add_feature("Target Selection","parent",g.prnt.self_weapons_s_a_b.id,function(f)
	g.tbl.a_b.ped_hide()
end)
	
	function g.tbl.a_b.ped_hide()
		g.tbl.a_b.type_csa.hidden=(not g.tbl.a_b.type_npc.on)
		g.tbl.a_b.type_mssn.hidden=(not g.tbl.a_b.type_npc.on)
		g.tbl.a_b.type_othr_npc.hidden=(not g.tbl.a_b.type_npc.on)
		g.tbl.a_b.type_frnd.hidden=(not g.tbl.a_b.type_plyr.on)
		g.tbl.a_b.type_org.hidden=(not g.tbl.a_b.type_plyr.on)
		g.tbl.a_b.type_othr_plyr.hidden=(not g.tbl.a_b.type_plyr.on)
		g.tbl.a_b.type_only_veh.hidden=(not g.tbl.a_b.type_plyr.on)
	end

	g.tbl.a_b.type_npc=menu.add_feature("NPC", "toggle", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.ped_hide()
		if not f.on and not g.tbl.a_b.type_plyr.on then
			g.tbl.a_b.type_plyr.on=true
		end
	end)
	funcs.add_to_S_L(g.tbl.a_b.type_npc,"g.tbl.a_b.type_npc")
	
	function g.tbl.a_b.npc_no_option(_bool,_feat)
		if _bool and g.tbl.a_b.type_csa.value==1 and g.tbl.a_b.type_mssn.value==1 and g.tbl.a_b.type_othr_npc.value==1 then
			_feat.value = 0
		end
	end

	g.tbl.a_b.type_csa=menu.add_feature("Cops/Security/Army", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.npc_no_option(f.value==1,g.tbl.a_b.type_mssn)
	end)
	g.tbl.a_b.type_csa:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.a_b.type_csa,"g.tbl.a_b.type_csa")
	
	g.tbl.a_b.type_mssn=menu.add_feature("Mission/Angry", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.npc_no_option(f.value==1,g.tbl.a_b.type_othr_npc)
	end)
	g.tbl.a_b.type_mssn:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.a_b.type_mssn,"g.tbl.a_b.type_mssn")
	
	g.tbl.a_b.type_othr_npc=menu.add_feature("All other NPC", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.npc_no_option(f.value==1,g.tbl.a_b.type_csa)
	end)
	g.tbl.a_b.type_othr_npc:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.a_b.type_othr_npc,"g.tbl.a_b.type_othr_npc")
	
	g.tbl.a_b.type_plyr=menu.add_feature("Players", "toggle", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.ped_hide()
		if not f.on and not g.tbl.a_b.type_npc.on then
			g.tbl.a_b.type_npc.on=true
		end
	end)
	funcs.add_to_S_L(g.tbl.a_b.type_plyr,"g.tbl.a_b.type_plyr")
	
	function g.tbl.a_b.plyr_show_or_hide(_bool,_feat)
		if _bool and g.tbl.a_b.type_frnd.value==0 and g.tbl.a_b.type_org.value==0 and g.tbl.a_b.type_othr_plyr.value==0 then
			_feat.value = 1
		end
	end

	g.tbl.a_b.type_only_veh=menu.add_feature("Only players in vehicles", "toggle", g.tbl.a_b.type_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.type_only_veh,"g.tbl.a_b.type_only_veh")
	
	g.tbl.a_b.type_frnd=menu.add_feature("My friends", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.plyr_show_or_hide(f.value==0,g.tbl.a_b.type_org)
	end)
	g.tbl.a_b.type_frnd:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.a_b.type_frnd,"g.tbl.a_b.type_frnd")
	
	g.tbl.a_b.type_org=menu.add_feature("My Org/MC", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.plyr_show_or_hide(f.value==0,g.tbl.a_b.type_othr_plyr)
	end)
	g.tbl.a_b.type_org:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.a_b.type_org,"g.tbl.a_b.type_org")
	
	g.tbl.a_b.type_othr_plyr=menu.add_feature("All other players", "autoaction_value_str", g.tbl.a_b.type_prnt.id,function(f)
		g.tbl.a_b.plyr_show_or_hide(f.value==0,g.tbl.a_b.type_frnd)
	end)
	g.tbl.a_b.type_othr_plyr:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.a_b.type_othr_plyr,"g.tbl.a_b.type_othr_plyr")
	

	g.tbl.a_b.type_npc.on=true
	g.tbl.a_b.type_plyr.on=true
	g.tbl.a_b.type_othr_plyr.value=1
	
g.tbl.a_b.trgt_optns_prnt=menu.add_feature("Target Information","parent",g.prnt.self_weapons_s_a_b.id)

	g.tbl.a_b.mrkr_show=menu.add_feature("Show target icon on screen","toggle",g.tbl.a_b.trgt_optns_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.mrkr_show,"g.tbl.a_b.mrkr_show")
	g.tbl.a_b.mrkr_show.on=true
	
	g.tbl.a_b.show_name=menu.add_feature("Show name on screen","toggle",g.tbl.a_b.trgt_optns_prnt.id)
	funcs.add_to_S_L(g.tbl.a_b.show_name,"g.tbl.a_b.show_name")
	g.tbl.a_b.show_name.on=true
	
	function g.tbl.a_b.start_test_display(_bool,_k)
		if  g.var.GS_has_loaded and _bool then
			if _k then 
				g.tbl.a_b.test_geeseek=false
				g.tbl.a_b.test_kosatka=true
			else
				g.tbl.a_b.test_kosatka=false
				g.tbl.a_b.test_geeseek=true
			end
			g.tbl.a_b.test_display=true
			g.tbl.a_b.test_display_feat.on=true
		end
	end

	g.tbl.a_b.test_display=false
	g.tbl.a_b.test_geeseek=false
	g.tbl.a_b.test_kosatka=false
	g.tbl.a_b.test_display_feat=menu.add_feature("Gee-Seek Show icon/name HIDDEN", "toggle", g.tbl.a_b.trgt_optns_prnt.id,function(f)
		local time,ent,alpha = API.util.t_ms() + 3000
		while time > API.util.t_ms() do
			if g.tbl.a_b.test_display then
				g.tbl.a_b.test_display=false
				time = API.util.t_ms() + 3000
			end
			if g.tbl.a_b.test_kosatka then
				g.tbl.a_b.test_geeseek=false
				if g.tbl.a_b.mrkr_rot_k.on then
					API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct_k.value],v2(0,0),1*g.tbl.a_b.mrkr_s_k.value,g.tbl.a_b.mrkr_val_k, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r_k.value,g.tbl.a_b.mrkr_g_k.value,g.tbl.a_b.mrkr_b_k.value,mth.flr((time-API.util.t_ms())/3000*g.tbl.a_b.mrkr_a_k.value)))
				else
					API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct_k.value],v2(0,0),1*g.tbl.a_b.mrkr_s_k.value,0, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r_k.value,g.tbl.a_b.mrkr_g_k.value,g.tbl.a_b.mrkr_b_k.value,mth.flr((time-API.util.t_ms())/3000*g.tbl.a_b.mrkr_a_k.value)))
				end
			elseif g.tbl.a_b.test_geeseek then
				g.tbl.a_b.test_kosatka=false
				if g.tbl.a_b.mrkr_rot.on then
					API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct.value],v2(0,0),1*g.tbl.a_b.mrkr_s.value,g.tbl.a_b.mrkr_val, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r.value,g.tbl.a_b.mrkr_g.value,g.tbl.a_b.mrkr_b.value,mth.flr((time-API.util.t_ms())/3000*g.tbl.a_b.mrkr_a.value)))
				else
					API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.a_b.slct.value],v2(0,0),1*g.tbl.a_b.mrkr_s.value,0, funcs.get.rgb_to_int(g.tbl.a_b.mrkr_r.value,g.tbl.a_b.mrkr_g.value,g.tbl.a_b.mrkr_b.value,mth.flr((time-API.util.t_ms())/3000*g.tbl.a_b.mrkr_a.value)))
				end
			end
			g.tbl.a_b.show_that_name2(funcs.ME._ped(),v2(0,0),funcs.get.pid_name(funcs.ME._id()),mth.flr((time-API.util.t_ms())/3000*g.tbl.a_b.name_a.value))
			system.yield(5)
		end
		f.on=false
	end)
	g.tbl.a_b.test_display_feat.hidden=true
	


g.tbl.a_b.mrkr_prnt=menu.add_feature("Gee-Seek Icon Options","parent",g.tbl.a_b.trgt_optns_prnt.id,function()
	g.tbl.a_b.homing_target_hide()
end)

		function g.tbl.a_b.homing_target_hide()
			g.tbl.a_b.mrkr_wbl.hidden=(g.tbl.a_b.mrkr_rot.value~=0 or not g.tbl.a_b.mrkr_rot.on)
			g.tbl.a_b.mrkr_rot_spd.hidden=(not g.tbl.a_b.mrkr_rot.on)
		end
		


		g.tbl.a_b.mrkr_show_stay=menu.add_feature("Retain icon after homing launch","toggle",g.tbl.a_b.mrkr_prnt.id)
		funcs.add_to_S_L(g.tbl.a_b.mrkr_show_stay,"g.tbl.a_b.mrkr_show_stay")
		g.tbl.a_b.mrkr_show_stay.on=true

		g.tbl.a_b.slct = menu.add_feature("Select icon", "autoaction_value_i", g.tbl.a_b.mrkr_prnt.id, function(f)
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.slct,1,#g.tbl.reticle_files,1,35,"g.tbl.a_b.slct")

		g.tbl.a_b.mrkr_s = menu.add_feature("Icon size", "autoaction_value_f",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_s,0,3,0.01,1,"g.tbl.a_b.mrkr_s")

		g.tbl.a_b.mrkr_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_r,0,255,1,255,"g.tbl.a_b.mrkr_r")
		
		g.tbl.a_b.mrkr_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_g,0,255,1,0,"g.tbl.a_b.mrkr_g")
		
		g.tbl.a_b.mrkr_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_b,0,255,1,0,"g.tbl.a_b.mrkr_b")
		
		g.tbl.a_b.mrkr_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_a,0,255,1,255,"g.tbl.a_b.mrkr_a")

		g.tbl.a_b.mrkr_val = 0
		g.tbl.a_b.mrkr_rot = menu.add_feature("Icon rotation", "value_str",g.tbl.a_b.mrkr_prnt.id,function(f)
			local flip,f_value,_min,_max = true
			g.tbl.a_b.start_test_display(f.on,false)
			while f.on do
				if f_value ~= f.value then
					g.tbl.a_b.start_test_display(true,false)
					f_value = f.value
					g.tbl.a_b.mrkr_val=0
				end
				if f.value == 0 then
					_max = g.tbl.a_b.mrkr_wbl.value/360*2*mth.pi
					_min = _max*-1
					if flip then
						if g.tbl.a_b.mrkr_val <= _min then
							flip = false
						else
							g.tbl.a_b.mrkr_val=g.tbl.a_b.mrkr_val-(0.02*g.tbl.a_b.mrkr_rot_spd.value)
						end
					elseif g.tbl.a_b.mrkr_val >= _max then
						flip = true
					else
						g.tbl.a_b.mrkr_val=g.tbl.a_b.mrkr_val+(0.02*g.tbl.a_b.mrkr_rot_spd.value)
					end
					if not funcs.is.num_in_range(g.tbl.a_b.mrkr_val,_min,_max) then
						flip=funcs.get.opp_bool(flip)
					end
				elseif f.value == 1 then
					if g.tbl.a_b.mrkr_val >= (2*mth.pi) then
						g.tbl.a_b.mrkr_val = g.tbl.a_b.mrkr_val -(2*mth.pi) 
					else
						g.tbl.a_b.mrkr_val=g.tbl.a_b.mrkr_val+(0.02*g.tbl.a_b.mrkr_rot_spd.value)
					end
				elseif g.tbl.a_b.mrkr_val <= (-2*mth.pi) then
					g.tbl.a_b.mrkr_val = g.tbl.a_b.mrkr_val+(-2*mth.pi)
				else
					g.tbl.a_b.mrkr_val=g.tbl.a_b.mrkr_val-(0.02*g.tbl.a_b.mrkr_rot_spd.value)
				end
				g.tbl.a_b.homing_target_hide()
				system.yield(25)
			end
			g.tbl.a_b.mrkr_wbl.hidden=true
			g.tbl.a_b.mrkr_rot_spd.hidden=true
		end)
		g.tbl.a_b.mrkr_rot:set_str_data({"Wobble","Clockwise","Counter-Clockwise"})
		funcs.add_to_S_L(g.tbl.a_b.mrkr_rot,"g.tbl.a_b.mrkr_rot")
		
		g.tbl.a_b.mrkr_wbl = menu.add_feature("Wobble range", "autoaction_value_i",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
			g.tbl.a_b.mrkr_val=0
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_wbl,0,360,5,15,"g.tbl.a_b.mrkr_wbl")

		g.tbl.a_b.mrkr_rot_spd = menu.add_feature("Rotation speed", "autoaction_value_f",g.tbl.a_b.mrkr_prnt.id,function()
			g.tbl.a_b.start_test_display(true,false)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_rot_spd,0.1,3,0.1,1,"g.tbl.a_b.mrkr_rot_spd")


g.tbl.a_b.mrkr_prnt_k=menu.add_feature("Kosatka Icon Options","parent",g.tbl.a_b.trgt_optns_prnt.id,function()
	g.tbl.a_b.kosatka_target_hide()
end)

		function g.tbl.a_b.kosatka_target_hide()
			g.tbl.a_b.mrkr_wbl_k.hidden=(g.tbl.a_b.mrkr_rot_k.value~=0 or not g.tbl.a_b.mrkr_rot_k.on)
			g.tbl.a_b.mrkr_rot_spd_k.hidden=(not g.tbl.a_b.mrkr_rot_k.on)
		end

		g.tbl.a_b.slct_k = menu.add_feature("Select icon", "autoaction_value_i", g.tbl.a_b.mrkr_prnt_k.id, function(f)
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.slct_k,1,#g.tbl.reticle_files,1,28,"g.tbl.a_b.slct_k")

		g.tbl.a_b.mrkr_s_k = menu.add_feature("Icon size", "autoaction_value_f",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_s_k,0,3,0.01,1,"g.tbl.a_b.mrkr_s_k")

		g.tbl.a_b.mrkr_r_k = menu.add_feature("Red", "autoaction_value_i",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_r_k,0,255,1,255,"g.tbl.a_b.mrkr_r_k")
		
		g.tbl.a_b.mrkr_g_k = menu.add_feature("Green", "autoaction_value_i",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_g_k,0,255,1,0,"g.tbl.a_b.mrkr_g_k")
		
		g.tbl.a_b.mrkr_b_k = menu.add_feature("Blue", "autoaction_value_i",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_b_k,0,255,1,0,"g.tbl.a_b.mrkr_b_k")
		
		g.tbl.a_b.mrkr_a_k = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_a_k,0,255,1,255,"g.tbl.a_b.mrkr_a_k")

		g.tbl.a_b.mrkr_val_k = 0
		g.tbl.a_b.mrkr_rot_k = menu.add_feature("Icon rotation", "value_str",g.tbl.a_b.mrkr_prnt_k.id,function(f)
			local flip,f_value,_min,_max = true
			g.tbl.a_b.start_test_display(f.on,true)
			while f.on do
				if f_value ~= f.value then
					g.tbl.a_b.start_test_display(true,true)
					f_value = f.value
					g.tbl.a_b.mrkr_val_k=0
				end
				if f.value == 0 then
					_max = g.tbl.a_b.mrkr_wbl.value/360*2*mth.pi
					_min = _max*-1
					if flip then
						if g.tbl.a_b.mrkr_val_k <= _min then
							flip = false
						else
							g.tbl.a_b.mrkr_val_k=g.tbl.a_b.mrkr_val_k-(0.02*g.tbl.a_b.mrkr_rot_spd_k.value)
						end
					elseif g.tbl.a_b.mrkr_val_k >= _max then
						flip = true
					else
						g.tbl.a_b.mrkr_val_k=g.tbl.a_b.mrkr_val_k+(0.02*g.tbl.a_b.mrkr_rot_spd_k.value)
					end
					if not funcs.is.num_in_range(g.tbl.a_b.mrkr_val_k,_min,_max) then
						flip=funcs.get.opp_bool(flip)
					end
				elseif f.value == 1 then
					if g.tbl.a_b.mrkr_val_k >= (2*mth.pi) then
						g.tbl.a_b.mrkr_val_k = g.tbl.a_b.mrkr_val_k-(2*mth.pi)
					else
						g.tbl.a_b.mrkr_val_k=g.tbl.a_b.mrkr_val_k+(0.02*g.tbl.a_b.mrkr_rot_spd_k.value)
					end
				elseif g.tbl.a_b.mrkr_val_k <= (-2*mth.pi) then
					g.tbl.a_b.mrkr_val_k = g.tbl.a_b.mrkr_val_k+(-2*mth.pi)
				else
					g.tbl.a_b.mrkr_val_k=g.tbl.a_b.mrkr_val_k-(0.02*g.tbl.a_b.mrkr_rot_spd_k.value)
				end
				g.tbl.a_b.mrkr_wbl_k.hidden=(f.value~=0)
				system.yield(25)
			end
			g.tbl.a_b.mrkr_wbl_k.hidden=true
			g.tbl.a_b.mrkr_rot_spd_k.hidden=true
		end)g.tbl.a_b.mrkr_rot_k:set_str_data({"Wobble","Clockwise","Counter-Clockwise"})
		funcs.add_to_S_L(g.tbl.a_b.mrkr_rot_k,"g.tbl.a_b.mrkr_rot_k")
		g.tbl.a_b.mrkr_rot_k.value=1
		
		g.tbl.a_b.mrkr_wbl_k = menu.add_feature("Wobble range", "autoaction_value_i",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
			g.tbl.a_b.mrkr_val_k=0
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_wbl_k,0,360,5,15,"g.tbl.a_b.mrkr_wbl_k")

		g.tbl.a_b.mrkr_rot_spd_k = menu.add_feature("Rotation speed", "autoaction_value_f",g.tbl.a_b.mrkr_prnt_k.id,function()
			g.tbl.a_b.start_test_display(true,true)
		end)
		funcs.set_feat_i_f(g.tbl.a_b.mrkr_rot_spd_k,0.1,3,0.1,2,"g.tbl.a_b.mrkr_rot_spd_k")

		g.tbl.a_b.mrkr_rot_k.on=true
		

-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
g.tbl.a_b.name_prnt=menu.add_feature("Name Options","parent",g.tbl.a_b.trgt_optns_prnt.id,function()
	 g.tbl.a_b.name_xy_do()
end)

g.tbl.a_b.name_flags=(1<<1)+(1<<0)
g.tbl.a_b.name_x_flag=(2/3)

function g.tbl.a_b.name_flags_do()
	if g.tbl.a_b.name_just.value == 0 then
		g.tbl.a_b.name_flags=(1<<1)
		g.tbl.a_b.name_x_flag=1
	elseif g.tbl.a_b.name_just.value == 1 then
		g.tbl.a_b.name_flags=(1<<1)+(1<<0)
		g.tbl.a_b.name_x_flag=(2/3)
	else
		g.tbl.a_b.name_flags=(1<<1)+(1<<4)
		g.tbl.a_b.name_x_flag=1
	end
end


function g.tbl.a_b.show_that_name(ent,pos,name,alpha)
	if g.tbl.a_b.show_name.on then
		pos.x=pos.x*g.tbl.a_b.name_x_flag
		pos.x=pos.x+g.tbl.a_b.name_x.value
		pos.y=pos.y+g.tbl.a_b.name_y.value
		local _r,_g,_b = g.tbl.a_b.name_r.value,g.tbl.a_b.name_g.value,g.tbl.a_b.name_b.value
		if funcs.is.ent(ent) and API.ent.is.ped(ent) and API.Ped.is.plyr(ent) and glbls.team_rgb_int(API.plyr.get.plyr_from_ped(ent)) > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.get.plyr_from_ped(ent)+1,nil)
		end
		API.SD.draw_text(name,pos,pos,g.tbl.a_b.name_s.value,funcs.get.rgb_to_int(_r,_g,_b,mth.flr(alpha/255*g.tbl.a_b.name_a.value)),g.tbl.a_b.name_flags,nil)
	end
end

function g.tbl.a_b.name_xy_do()
	g.tbl.a_b.name_x.name = "X Pos Offset: "..funcs.get._3_dec(g.tbl.a_b.name_x.value)
	g.tbl.a_b.name_y.name = "Y Pos Offset: "..funcs.get._3_dec(g.tbl.a_b.name_y.value)
end

g.tbl.a_b.name_just = menu.add_feature("Justification", "autoaction_value_str",g.tbl.a_b.name_prnt.id,function(f)
	g.tbl.a_b.name_flags_do()
end)
g.tbl.a_b.name_just:set_str_data({"Left","Center","Right"})
funcs.add_to_S_L(g.tbl.a_b.name_just,"g.tbl.a_b.name_just")
g.tbl.a_b.name_just.value=1

g.tbl.a_b.name_s=menu.add_feature("Size","action_value_f",g.tbl.a_b.name_prnt.id)
funcs.set_feat_i_f(g.tbl.a_b.name_s,0,3,0.01,1,"g.tbl.a_b.name_s")

g.tbl.a_b.name_x=menu.add_feature("X Pos Offset: ","autoaction_value_f",g.tbl.a_b.name_prnt.id,function(f)
	g.tbl.a_b.name_xy_do()
end)
funcs.set_feat_i_f(g.tbl.a_b.name_x,-1,1,0.0025,0,"g.tbl.a_b.name_x")

g.tbl.a_b.name_y=menu.add_feature("Y Pos Offset: ","autoaction_value_f",g.tbl.a_b.name_prnt.id,function(f)
	g.tbl.a_b.name_xy_do()
end)
funcs.set_feat_i_f(g.tbl.a_b.name_y,-1,1,0.0025,-0.025,"g.tbl.a_b.name_y")

g.tbl.a_b.name_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.a_b.name_prnt.id)
funcs.set_feat_i_f(g.tbl.a_b.name_r,0,255,1,255,"g.tbl.a_b.name_r")

g.tbl.a_b.name_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.a_b.name_prnt.id)
funcs.set_feat_i_f(g.tbl.a_b.name_g,0,255,1,255,"g.tbl.a_b.name_g")

g.tbl.a_b.name_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.a_b.name_prnt.id)
funcs.set_feat_i_f(g.tbl.a_b.name_b,0,255,1,255,"g.tbl.a_b.name_b")

g.tbl.a_b.name_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.a_b.name_prnt.id)
funcs.set_feat_i_f(g.tbl.a_b.name_a,0,255,1,255,"g.tbl.a_b.name_a")
g.tbl.a_b.defaults()




g.tbl.r_f ={}

function g.tbl.r_f._do(temp_weap,_delay)
	local my_weap = funcs.ME._weap()
	if temp_weap[my_weap] ~= nil then
		if not API.wpn.ped_has(funcs.ME._ped(), temp_weap[my_weap]) then
			funcs.doo.give_ped_weap(funcs.ME._ped(),temp_weap[my_weap])
		end
		funcs.doo.give_ped_ammo(funcs.ME._ped(),my_weap)
		ntv.set.ped_weap(funcs.ME._ped(),temp_weap[my_weap])
		funcs.doo.delay(_delay+30)
		funcs.doo.give_ped_ammo(funcs.ME._ped(),temp_weap[my_weap])
		ntv.set.ped_weap(funcs.ME._ped(),my_weap)
	end
end

g.tbl.r_f.lnchr_prnt=menu.add_feature("Launchers","parent",g.prnt.self_weapons_r_f.id)

g.tbl.r_f.heavy=menu.add_feature("Rapid-Fire launchers","value_i",g.tbl.r_f.lnchr_prnt.id,function(f)
	local temp_weap = {
	[API.get_hash_key("weapon_rpg")] = API.get_hash_key("weapon_grenade"),
	[API.get_hash_key("weapon_stinger")] = API.get_hash_key("weapon_grenade"),
	[API.get_hash_key("weapon_compactlauncher")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_grenadelauncher")] = API.get_hash_key("weapon_compactlauncher"),
	[API.get_hash_key("weapon_hominglauncher")] = API.get_hash_key("weapon_grenade"),
	[API.get_hash_key("weapon_firework")] = API.get_hash_key("weapon_grenade"),
	[API.get_hash_key("weapon_emplauncher")] = API.get_hash_key("weapon_grenade"),	
	[API.get_hash_key("weapon_railgun")] = API.get_hash_key("weapon_grenade"),
	}
	local grnd_weap = {
	[API.get_hash_key("weapon_rpg")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_stinger")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_compactlauncher")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_grenadelauncher")] = API.get_hash_key("weapon_compactlauncher"),
	[API.get_hash_key("weapon_hominglauncher")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_firework")] = API.get_hash_key("weapon_grenadelauncher"),
	[API.get_hash_key("weapon_emplauncher")] = API.get_hash_key("weapon_grenadelauncher"),	
	[API.get_hash_key("weapon_railgun")] = API.get_hash_key("weapon_grenadelauncher"),
	}
	while f.on do
		system.yield(0)
		if funcs.ME._shoot() then
			if g.tbl.r_f.grenade.on then
				g.tbl.r_f._do(grnd_weap,f.value)
			else
				g.tbl.r_f._do(temp_weap,f.value)
			end
		end
	end
end)
funcs.set_feat_i_f(g.tbl.r_f.heavy,0,250,10,50,"g.tbl.r_f.heavy")

g.tbl.r_f.grenade=menu.add_feature("Use grenade launcher as secondary for all","toggle",g.tbl.r_f.lnchr_prnt.id)
funcs.add_to_S_L(g.tbl.r_f.grenade,"g.tbl.r_f.grenade")

g.tbl.r_f.shtgn_msk=menu.add_feature("Rapid-Fire Shotguns/Musket","value_i",g.prnt.self_weapons_r_f.id,function(f)
	local temp_weap = {}
	for i=1,#weap_info.hand.info.shotgun do
		temp_weap[weap_info.hand.info.shotgun[i][1]] = API.get_hash_key("weapon_grenade")
	end
	while f.on do
		system.yield(0)
		if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
			g.tbl.r_f._do(temp_weap,f.value)
		end
	end
end)
funcs.set_feat_i_f(g.tbl.r_f.shtgn_msk,0,250,10,50,"g.tbl.r_f.shtgn_msk")

g.tbl.r_f.hndgn=menu.add_feature("Rapid-Fire Handguns","value_i",g.prnt.self_weapons_r_f.id,function(f)
	local temp_weap = {}
	for i=1,#weap_info.hand.info.handgun do
		temp_weap[weap_info.hand.info.handgun[i][1]] = API.get_hash_key("weapon_grenade")
	end
	while f.on do
		system.yield(0)
		if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
			g.tbl.r_f._do(temp_weap,f.value)
		end
	end
end)
funcs.set_feat_i_f(g.tbl.r_f.hndgn,0,250,10,50,"g.tbl.r_f.hndgn")

g._veh_rapid_fire=menu.add_feature("Vehicle Rapid Fire","slider",g.prnt.self_weapons_r_f.id,function(f)
	if f.on then 
		g._veh_rapid_fire_tank.on=false
		g._veh_rapid_fire_tank2.on=false
	end
	while f.on do
		system.yield(0)
		if funcs.ME._in_veh() then
			API.veh.set.fixed(funcs.ME._veh())
			if f.value == 500 then system.wait(75)
			elseif f.value == 400 then system.wait(150)
			elseif f.value == 300 then system.wait(225)
			elseif f.value == 200 then system.wait(300)
			elseif f.value == 100 then system.wait(375)
			else system.wait(425)
			end		
		end
	end
end)
funcs.set_feat_i_f(g._veh_rapid_fire,0,500,100,0,"g._veh_rapid_fire")

g._veh_rapid_fire_tank=menu.add_feature("Vehicle Rapid Fire (Tanks/APC)","toggle",g.prnt.self_weapons_r_f.id,function(f)
	if f.on then
		g._veh_rapid_fire.on=false
		g._veh_rapid_fire_tank2.on=false
	end
	while f.on do
		system.yield(0)
		if funcs.ME._in_veh() and funcs.ME._shoot() then
			if funcs.is.this_veh(funcs.ME._veh(),"rhino") and funcs.ME._in_seat(funcs.ME._veh(),-1) then
				API.veh.set.fixed(funcs.ME._veh())
				system.wait(50)
			elseif funcs.is.this_veh(funcs.ME._veh(),"apc") and funcs.ME._in_seat(funcs.ME._veh(),0) then
				if funcs.ntwrk.ask_long(funcs.ME._veh(),50) then
					API.veh.set.fixed(funcs.ME._veh())
				end
			elseif funcs.is.this_veh(funcs.ME._veh(),"khanjali") and funcs.ME._in_seat(funcs.ME._veh(),-1) then
				API.veh.set.fixed(funcs.ME._veh())
				system.wait(100)
			end
		end	
	end
end)
funcs.add_to_S_L(g._veh_rapid_fire_tank,"g._veh_rapid_fire_tank")

g._veh_rapid_fire_tank2=menu.add_feature("Vehicle Rapid Fire v2 (Tanks/APC/Chernobog)","toggle",g.prnt.self_weapons_r_f.id,function(f)
	if f.on then 
		g._veh_rapid_fire.on=false
		g._veh_rapid_fire_tank.on=false
	end
	local cam_z,in_seat,my_seat
	while f.on do
		system.yield(250)
		in_seat,my_seat = funcs.is.pid_in_turret_seat(funcs.ME._id())
		if in_seat then
			while API.veh.get.ped_in_seat(funcs.ME._veh(), my_seat) == funcs.ME._ped() and f.on do
				system.yield(5)
				if funcs.ME._shoot() then
					cam_z = (API.cam.get.rot().z-API.ent.get.heading(funcs.ME._veh()))/360*mth.pi*2
					API.veh.set.fixed(funcs.ME._veh())
					ntv.set.veh_turret_rot(funcs.ME._veh(),cam_z)
					API.ent.force(funcs.ME._veh(), 3, 0,0,-2, 0,0,0, false, true)
				end
			end
		end	
	end
end)
funcs.add_to_S_L(g._veh_rapid_fire_tank2,"g._veh_rapid_fire_tank2")

g.tbl.rtcl={}
g.tbl.rtcl.ent_bool=nil
g.tbl.rtcl.is_active=false



g.tbl.rtcl.feat = menu.add_feature("Show reticle", "toggle", g.prnt.utils_rtcle.id, function(f)
	local g_time,s_time,size = API.util.t_ms(),API.util.t_ms(),1
	while f.on do
		system.yield(5)
		if g.tbl.rtcl.shld_show() then
			g.tbl.rtcl.is_active=true
			if g.tbl.rtcl.rtcl_react.on then
				if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
					g_time = API.util.t_ms()+125
					s_time = API.util.t_ms()
					size=1
				end
				if g_time > API.util.t_ms() or s_time > API.util.t_ms() then
					if g_time > API.util.t_ms() then size = size *1.01
					else size = size *.99
					end
				else size=1
				end
				if size >= 1.25 then
					s_time = API.util.t_ms()+125
					g_time = API.util.t_ms()
				end
			else
				size=1
			end
			if g.tbl.rtcl.ent_bool then 
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.rtcl.slct.value],v2(0,0),g.tbl.rtcl.size.value*size,0,funcs.get.rgb_to_int(g.tbl.rtcl.ent_r.value,g.tbl.rtcl.ent_g.value,g.tbl.rtcl.ent_b.value,g.tbl.rtcl.ent_a.value))
			else
				API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.rtcl.slct.value],v2(0,0),g.tbl.rtcl.size.value*size,0,funcs.get.rgb_to_int(g.tbl.rtcl.no_ent_r.value,g.tbl.rtcl.no_ent_g.value,g.tbl.rtcl.no_ent_b.value,g.tbl.rtcl.no_ent_a.value))
			end
		end
		g.tbl.rtcl.ent_bool=nil------future reference for gee-watch
	end
	g.tbl.rtcl.is_active=false
end)
funcs.add_to_S_L(g.tbl.rtcl.feat,"g.tbl.rtcl.feat")

function g.tbl.rtcl.shld_show()
	if g.tbl.rtcl.rtcl_slct.value==2 then
		g.tbl.rtcl.ent_bool=g.tbl.rtcl.is_ent()
		return true
	elseif funcs.ME._aim() then
		if g.tbl.rtcl.rtcl_slct.value==1 then
			g.tbl.rtcl.ent_bool=g.tbl.rtcl.is_ent()
			return true
		end
		g.tbl.rtcl.ent_bool=g.tbl.rtcl.is_ent()
		return g.tbl.rtcl.ent_bool
	end
	g.tbl.rtcl.is_active=false
	return false
end

function g.tbl.rtcl.is_ent()
	local aim = API.plyr.get.aim_at(API.plyr.my_id())
	return (funcs.is.ent(aim) and API.ent.is.ped(aim))
end

g.tbl.rtcl.splash=false
g.tbl.rtcl.slct = menu.add_feature("Select reticle", "autoaction_value_i", g.prnt.utils_rtcle.id, function(f)
	if g.var.GS_has_loaded then
		g.tbl.rtcl.splash=true
		g.tbl.rtcl.splash_feat.on=true
	end
end)
funcs.set_feat_i_f(g.tbl.rtcl.slct,1,#g.tbl.reticle_files,1,1,"g.tbl.rtcl.slct")

g.tbl.rtcl.splash_feat=menu.add_feature("Show  reticles HIDDEN", "toggle", g.prnt.utils_rtcle.id,function(f)
	local function get_int(_num)
		if g.tbl.reticle_sprites[g.tbl.rtcl.slct.value+_num] ~= nil then
			return g.tbl.reticle_sprites[g.tbl.rtcl.slct.value+_num]
		elseif g.tbl.rtcl.slct.value+_num > #g.tbl.reticle_files then
			return g.tbl.reticle_sprites[g.tbl.rtcl.slct.value+_num-#g.tbl.reticle_files]
		end
		return g.tbl.reticle_sprites[#g.tbl.reticle_files+g.tbl.rtcl.slct.value+_num]
	end
	local time,alpha_t,x_pos,y_pos,alpha = API.util.t_ms() + 4000,API.util.t_ms() + 1000
	while time > API.util.t_ms() do
		if g.tbl.rtcl.splash then
			g.tbl.rtcl.splash=false
			time = API.util.t_ms() + 4000
			alpha_t = API.util.t_ms() + 1000
		end
		if alpha_t > API.util.t_ms() then
			alpha = 255
		else
			alpha = mth.flr((time-API.util.t_ms()) /1000/3*255)
		end
		x_pos=API.gfx.get_w()/69000*g.tbl.rtcl.size.value
		y_pos=API.gfx.get_h()/40000*g.tbl.rtcl.size.value
		for i=-3,3 do
			API.SD.draw_sprt(get_int(i),v2(0+(x_pos*i),0),g.tbl.rtcl.size.value,0,funcs.get.rgb_to_int(g.tbl.rtcl.no_ent_r.value,g.tbl.rtcl.no_ent_g.value,g.tbl.rtcl.no_ent_b.value,alpha))
		end
		API.SD.draw_line(v2(x_pos*-.5,y_pos),v2(x_pos*.5,y_pos), 1, funcs.get.rgb_to_int(255,0,0,alpha))
		API.SD.draw_line(v2(x_pos*.5,y_pos),v2(x_pos*.5,y_pos*-1), 1, funcs.get.rgb_to_int(255,0,0,alpha))
		API.SD.draw_line(v2(x_pos*.5,y_pos*-1),v2(x_pos*-.5,y_pos*-1), 1, funcs.get.rgb_to_int(255,0,0,alpha))
		API.SD.draw_line(v2(x_pos*-.5,y_pos*-1),v2(x_pos*-.5,y_pos), 1, funcs.get.rgb_to_int(255,0,0,alpha))
		if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then time = API.util.t_ms() end
		system.yield(5)
	end
	f.on=false
end)
g.tbl.rtcl.splash_feat.hidden=true

g.tbl.rtcl.size = menu.add_feature("Reticle size", "action_value_f", g.prnt.utils_rtcle.id)
funcs.set_feat_i_f(g.tbl.rtcl.size,0.01,2,0.01,1,"g.tbl.rtcl.size")

g.tbl.rtcl.rtcl_slct=menu.add_feature("Conditions:", "action_value_str",g.prnt.utils_rtcle.id)
g.tbl.rtcl.rtcl_slct:set_str_data({"Aiming at ped","If aiming","Always"})
funcs.add_to_S_L(g.tbl.rtcl.rtcl_slct,"g.tbl.rtcl.rtcl_slct")

g.tbl.rtcl.rtcl_react=menu.add_feature("Reactive", "toggle",g.prnt.utils_rtcle.id)
funcs.add_to_S_L(g.tbl.rtcl.rtcl_react,"g.tbl.rtcl.rtcl_react")

g.tbl.rtcl.no_ent_r = menu.add_feature("R", "action_value_i",g.prnt.utils_rtcle.id)
funcs.set_feat_i_f(g.tbl.rtcl.no_ent_r,0,255,5,255,"g.tbl.rtcl.no_ent_r")

g.tbl.rtcl.no_ent_g = menu.add_feature("G", "action_value_i",g.prnt.utils_rtcle.id)
funcs.set_feat_i_f(g.tbl.rtcl.no_ent_g,0,255,5,255,"g.tbl.rtcl.no_ent_g")

g.tbl.rtcl.no_ent_b = menu.add_feature("B", "action_value_i",g.prnt.utils_rtcle.id)
funcs.set_feat_i_f(g.tbl.rtcl.no_ent_b,0,255,5,255,"g.tbl.rtcl.no_ent_b")

g.tbl.rtcl.no_ent_a = menu.add_feature("A", "action_value_i",g.prnt.utils_rtcle.id)
funcs.set_feat_i_f(g.tbl.rtcl.no_ent_a,0,255,5,255,"g.tbl.rtcl.no_ent_a")

g.tbl.rtcl.ent_prnt=menu.add_feature("Color while aiming at ped", "parent",g.prnt.utils_rtcle.id)

g.tbl.rtcl.ent_r = menu.add_feature("R", "action_value_i",g.tbl.rtcl.ent_prnt.id)
funcs.set_feat_i_f(g.tbl.rtcl.ent_r,0,255,5,255,"g.tbl.rtcl.ent_r")

g.tbl.rtcl.ent_g = menu.add_feature("G", "action_value_i",g.tbl.rtcl.ent_prnt.id)
funcs.set_feat_i_f(g.tbl.rtcl.ent_g,0,255,5,255,"g.tbl.rtcl.ent_g")

g.tbl.rtcl.ent_b = menu.add_feature("B", "action_value_i",g.tbl.rtcl.ent_prnt.id)
funcs.set_feat_i_f(g.tbl.rtcl.ent_b,0,255,5,255,"g.tbl.rtcl.ent_b")

g.tbl.rtcl.ent_a = menu.add_feature("A", "action_value_i",g.tbl.rtcl.ent_prnt.id)
funcs.set_feat_i_f(g.tbl.rtcl.ent_a,0,255,5,255,"g.tbl.rtcl.ent_a")

g.tbl.spwn = {}
g.tbl.spwn.history = {}
g.tbl.spwn.qck_srch_table = {}
g.tbl.spwn.feat_srch_table = {}
g.tbl.spwn.old_veh=nil
g.tbl.spwn.plt_directory = g.paths._user.."\\Vehicle License Plate\\"
function g.tbl.spwn.spwn_plate_write(_text,_file)
	local file = io.open(g.tbl.spwn.plt_directory.._file..".txt", "w")
	file:write(_text)
	file:close()
end

function g.tbl.spwn.spwn_plate_get(_file)
	local file = io.open(g.tbl.spwn.plt_directory.._file..".txt", "r")
	local text = nil
	for line in file:lines() do
		if line ~= nil and string.len(tostring(line)) > 0 and string.len(tostring(line)) < 9 then
			text = tostring(line)
			break
		end
	end
	file:close()
	return text
end

function g.tbl.spwn.spwn_plate_check(_file)
	funcs.doo.check_create_dir(g.paths._user) 
	funcs.doo.check_create_dir(g.tbl.spwn.plt_directory)
	if not utils.file_exists(g.tbl.spwn.plt_directory.._file..".txt") then
		g.tbl.spwn.spwn_plate_write("GeeSpawn",_file)
	end
	local text = g.tbl.spwn.spwn_plate_get(_file)
	if text == nil then
		g.tbl.spwn.spwn_plate_write("GeeSpawn",_file)
	end
end
g.tbl.spwn.spwn_plate_check("Self Vehicle Spawn")
g.tbl.spwn.spwn_plate_txt = g.tbl.spwn.spwn_plate_get("Self Vehicle Spawn")

function g.tbl.spwn.quick_spawn_write(_text)
	local file = io.open(g.paths._user.."Vehicle Quick Spawn List.txt", "w")
	file:write(_text)
	file:close()
end

function g.tbl.spwn.quick_spawn_get()
	local file = io.open(g.paths._user.."Vehicle Quick Spawn List.txt", "r")
	local list = {}
	for line in file:lines() do
		if API.strm.is.valid(API.get_hash_key(line)) then
			list[#list+1] = line
		end
	end
	file:close()
	return list
end

function g.tbl.spwn.quick_spawn_check()
	funcs.doo.check_create_dir(g.paths._user) 
	if not utils.file_exists(g.paths._user.."Vehicle Quick Spawn List.txt") then
		g.tbl.spwn.quick_spawn_write(g.var.quick_spawn_default)
	end
	local list = g.tbl.spwn.quick_spawn_get()
	if #list == 0 then
		g.tbl.spwn.quick_spawn_write(g.var.quick_spawn_default)
	end
end

g.var.quick_spawn_default = ""

g.tbl.spwn.quick_spawn_default_table={
"oppressor",
"oppressor2",
"deluxo",
"toreador",
"rhino",
"khanjali",
"menacer",
"nightshark",
"insurgent3",
"phantom2",
"dune4",
"buzzard",
"savage",
"akula",
"hunter",
"nokota",
"seabreeze",
"rogue",
"molotok",
"strikeforce",
"hydra",
"lazer",
}

for i=1,#g.tbl.spwn.quick_spawn_default_table do
	g.var.quick_spawn_default=g.var.quick_spawn_default..g.tbl.spwn.quick_spawn_default_table[i].."\n"
end

g.tbl.spwn.quick_spawn_check()
g.tbl.spwn.quick_spawn_list = g.tbl.spwn.quick_spawn_get() --had plans to make this update-able in game

function g.tbl.spwn.apply_upgrades(_veh)
	if funcs.is.ent(_veh) then
		funcs.ntwrk.ask_quick(_veh)
		API.veh.set.kit_type(_veh, 0)
		if g.tbl.spwn.spwn_god.on then
			API.ent.set.god(_veh,true)
		end
		if g.tbl.spwn.spwn_upg.on then
			if g.tbl.spwn.spwn_upg.value == 0 then
				funcs.doo.veh_upgr_basic(_veh)
				funcs.doo.veh_upgr_perf(_veh)
				funcs.doo.veh_upgr_wheels(_veh)			
				funcs.doo.veh_upgr_lights(_veh,"random")
				funcs.doo.veh_upgr_neons(_veh,"random")
				funcs.doo.veh_upgr_paint(_veh,"random")
				funcs.doo.veh_upgr_livery(_veh)
				funcs.doo.veh_weap_best(_veh)
				funcs.doo.veh_upgr_bombs(_veh)
				funcs.doo.veh_upgr_cntrmsrs(_veh)
			else
				funcs.doo.veh_upgr_perf(_veh)
			end
		end
		if g.tbl.spwn.spwn_f1.on then
			funcs.doo.veh_upgr_wheels(_veh,"f1")	
		end
		API.ent.set.max_speed(_veh, 45000)
		API.veh.set.top_speed(_veh, (g.tbl.spwn.spwn_spd_tq.value/100 - 1) * 100)
		if g.tbl.spwn.spwn_rand_paint.on then
			if g.tbl.spwn.spwn_rand_paint.value == 0 then
				funcs.doo.veh_upgr_paint(_veh,"random")
			elseif g.tbl.spwn.spwn_rand_paint.value == 1 then
				funcs.doo.veh_upgr_paint(_veh,"random_solid")
			elseif g.tbl.spwn.spwn_rand_paint.value == 2 then
				funcs.doo.veh_upgr_paint(_veh,funcs.get.rand_paint_shade("Dark")) 
			else
				funcs.doo.veh_upgr_paint(_veh,funcs.get.rand_paint_shade("Bright")) 
			end
		elseif g.tbl.spwn.spwn_cust_paint.value == 0 then
			funcs.doo.veh_upgr_paint(_veh,(g.tbl.spwn.spwn_cust_paint_r.value * 65536 + g.tbl.spwn.spwn_cust_paint_g.value * 256 + g.tbl.spwn.spwn_cust_paint_b.value)) 
		else
			funcs.doo.veh_upgr_paint(_veh,g.tbl.spwn.paint_list_slct)
		end
		if g.tbl.spwn.neon.choose.value == 0 then
			funcs.doo.veh_upgr_neons(_veh,"random")
		else
			funcs.doo.veh_upgr_neons(_veh,g.tbl.spwn.neon_slct)
		end
		if g.tbl.spwn.h_light.choose.value == 0 then
			funcs.doo.veh_upgr_lights(_veh,"random")
		else
			funcs.doo.veh_upgr_lights(_veh,g.tbl.spwn.h_light_slct)
		end
		if g.tbl.spwn.spwn_max_tint.on then
			vehicle.set_vehicle_window_tint(_veh,1)
		end
		if g.tbl.spwn.spwn_invcn_wind.on then
			ntv.set.veh_invncbl_wndws(_veh,1)
		end
		if g.tbl.spwn.spwn_in_veh.on then
			API.Ped.set.into_veh(API.plyr.get.ped(API.plyr.my_id()),_veh,-1)
		end
		if g.tbl.spwn.spwn_plate_i.on then
			API.veh.set.plate_index(_veh, g.tbl.spwn.spwn_plate_i.value)
		end
		if g.tbl.spwn.spwn_plate.on then
			API.veh.set.plate_text(_veh, g.tbl.spwn.spwn_plate_txt )
		end
		system.yield(0)
		if g.tbl.spwn.remove_old.on and funcs.is.ent(g.tbl.spwn.old_veh) then
			funcs.doo.kick_all_from_veh(g.tbl.spwn.old_veh,false)
			funcs.doo.remove_ent(g.tbl.spwn.old_veh,1000)
		end
		g.tbl.spwn.old_veh=_veh
		g.tbl.spwn.history[#g.tbl.spwn.history+1]=_veh
	end
end

g.tbl.spwn.optns_prnt=menu.add_feature("Options", "parent", g.prnt.spawn.id)
	
g.tbl.spwn.mk_mdl_clss_prnt=menu.add_feature("All vehicles by type", "parent", g.prnt.spawn.id)
g.tbl.spwn.temp_list_sort = {}
for i=1,#veh_stuff.class_list do
	g.tbl.spwn.temp_list_sort[i]={}
	for ii=1,#veh_stuff.master do
		if veh_stuff.master[ii][6] == veh_stuff.class_list[i] then
			g.tbl.spwn.temp_list_sort[i][#g.tbl.spwn.temp_list_sort[i]+1]=veh_stuff.master[ii]
		end
	end
	table.sort(g.tbl.spwn.temp_list_sort[i], function(a, b) return a[1]:lower() <  b[1]:lower() end)
end
for i=1,#veh_stuff.class_list do
	g.tbl.spwn.feat_srch_table[#g.tbl.spwn.feat_srch_table+1] = menu.add_feature(veh_stuff.class_list[i], "parent",g.tbl.spwn.mk_mdl_clss_prnt.id)
	for ii=1,#g.tbl.spwn.temp_list_sort[i] do
		g.tbl.spwn.temp_list_name = ""
		if g.tbl.spwn.temp_list_sort[i][ii][2] == "" then
			g.tbl.spwn.temp_list_name = g.tbl.spwn.temp_list_sort[i][ii][1]
		else
			g.tbl.spwn.temp_list_name = g.tbl.spwn.temp_list_sort[i][ii][1].." - "..g.tbl.spwn.temp_list_sort[i][ii][2]
		end
		menu.add_feature(g.tbl.spwn.temp_list_name, "action", g.tbl.spwn.feat_srch_table[i].id,function()
			if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
				API.ent.set.no_need(g.tbl.spwn.old_veh)
				API.ent.delete(g.tbl.spwn.old_veh)
			end
			funcs.doo.req_model(g.tbl.spwn.temp_list_sort[i][ii][5])
			local veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),g.tbl.spwn.temp_list_sort[i][ii][5],false,g.tbl.spwn.spwn_front.value==0)
			g.tbl.spwn.apply_upgrades(veh)
		end)
	end
end
g.tbl.spwn.mk_mdl_srch_prnt=menu.add_feature("Make/Model search list", "parent", g.prnt.spawn.id)

g.tbl.spwn.quick_spwn_prnt=menu.add_feature("Quick spawn list", "parent", g.prnt.spawn.id)

g.tbl.spwn.quick_spawn_feats = {}

menu.add_feature("Quick search on-screen", "action", g.prnt.spawn.id, function(f)
	g.tbl.spwn.quick_start(g.tbl.spwn.qck_srch_table,"Vehicle Spawn - Self",false)
end)
	
g.tbl.spwn.mk_mdl_search_feat = {}
g.tbl.spwn.mk_mdl_search_temp = {}
g.tbl.spwn.inpt_srch=menu.add_feature("Search for vehicles", "action_value_str", g.tbl.spwn.mk_mdl_srch_prnt.id, function(f)
	local status,str,veh = 1
	status,str = funcs.get.text_input("Vehicle Make/Model","",25,0)
	if status == 0 then
		g.tbl.spwn.mk_mdl_search_temp = {}
		g.tbl.spwn.ovrly_srch_do(str,f.value,g.tbl.spwn.mk_mdl_search_temp)
		if #g.tbl.spwn.mk_mdl_search_temp > 0 then
			for i=1,#g.tbl.spwn.mk_mdl_search_feat do
				system.yield(0)
				if g.tbl.spwn.mk_mdl_search_feat[i] ~= nil then menu.delete_feature(g.tbl.spwn.mk_mdl_search_feat[i].id) end
			end
			g.tbl.spwn.mk_mdl_search_feat = {}
			for i=1,#g.tbl.spwn.mk_mdl_search_temp do
				if f.value == 0 then
					g.tbl.spwn.mk_mdl_search_feat[#g.tbl.spwn.mk_mdl_search_feat+1]=menu.add_feature(g.tbl.spwn.mk_mdl_search_temp[i][1], "action", g.tbl.spwn.mk_mdl_srch_prnt.id,function()
						if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
							API.ent.set.no_need(g.tbl.spwn.old_veh)
							API.ent.delete(g.tbl.spwn.old_veh)
						end
						funcs.doo.req_model(g.tbl.spwn.mk_mdl_search_temp[i][5])
						local veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),g.tbl.spwn.mk_mdl_search_temp[i][5],false,g.tbl.spwn.spwn_front.value==0)
						g.tbl.spwn.apply_upgrades(veh)
					end)
				else
					g.tbl.spwn.mk_mdl_search_feat[#g.tbl.spwn.mk_mdl_search_feat+1]=menu.add_feature(g.tbl.spwn.mk_mdl_search_temp[i][3], "action", g.tbl.spwn.mk_mdl_srch_prnt.id,function()
						if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
							API.ent.set.no_need(g.tbl.spwn.old_veh)
							API.ent.delete(g.tbl.spwn.old_veh)
						end
						funcs.doo.req_model(g.tbl.spwn.mk_mdl_search_temp[i][5])
						local veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),g.tbl.spwn.mk_mdl_search_temp[i][5],false,g.tbl.spwn.spwn_front.value==0)
						g.tbl.spwn.apply_upgrades(veh)
					end)
				end
			end
		end
	end
end)
g.tbl.spwn.inpt_srch:set_str_data({"Model", "Make","Make or Model"})

g.tbl.spwn.qck_srch_optns = menu.add_feature("Quick Search Options", "parent", g.tbl.spwn.optns_prnt.id)

menu.add_feature("Display 'quick search' test", "action", g.tbl.spwn.qck_srch_optns.id, function()
	local time = API.util.t_ms() + 10000
	local _table = {}
	for i=1,7 do
		_table[i] = veh_stuff.master[mth.rndm(1,#veh_stuff.master)]
	end
	while time > API.util.t_ms() do
		system.yield(0)
		g.tbl.spwn.ovrly_srch_show(_table, "Vehicle test - Self "..funcs.get.round_num((time - API.util.t_ms())/1000),0,g.tbl.spwn.qck_srch_optns_x.value/300, g.tbl.spwn.qck_srch_optns_y.value/300,false)
	end
end)

g.tbl.spwn.qck_srch_optns_x = menu.add_feature("Quick search X Pos", "action_slider", g.tbl.spwn.qck_srch_optns.id)
funcs.set_feat_i_f(g.tbl.spwn.qck_srch_optns_x,0,300,1,150,"g.tbl.spwn.qck_srch_optns_x")

g.tbl.spwn.qck_srch_optns_y = menu.add_feature("Quick search Y Pos", "action_slider", g.tbl.spwn.qck_srch_optns.id, function()
end)funcs.set_feat_i_f(g.tbl.spwn.qck_srch_optns_y,0,300,1,135,"g.tbl.spwn.qck_srch_optns_y")

g.tbl.spwn.spwn_in_veh = menu.add_feature("Spawn in vehicle", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.spwn_in_veh,"g.tbl.spwn.spwn_in_veh")

g.tbl.spwn.spwn_upg = menu.add_feature("Upgrades", "value_str", g.tbl.spwn.optns_prnt.id)
g.tbl.spwn.spwn_upg:set_str_data({"All","Only performance"})
funcs.add_to_S_L(g.tbl.spwn.spwn_upg,"g.tbl.spwn.spwn_upg")
g.tbl.spwn.spwn_upg.on=true

g.tbl.spwn.spwn_f1 = menu.add_feature("Always F1 Wheels", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.spwn_f1,"g.tbl.spwn.spwn_f1")

g.tbl.spwn.spwn_god = menu.add_feature("God-Mode", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.spwn_god,"g.tbl.spwn.spwn_god")

g.tbl.spwn.spwn_max_tint = menu.add_feature("Max tint", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.spwn_max_tint,"g.tbl.spwn.spwn_max_tint")

g.tbl.spwn.spwn_invcn_wind = menu.add_feature("Invincible windows", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.spwn_invcn_wind,"g.tbl.spwn.spwn_invcn_wind")

g.tbl.spwn.spwn_plate_i=menu.add_feature("Plate color", "value_str", g.tbl.spwn.optns_prnt.id)
g.tbl.spwn.spwn_plate_i:set_str_data({"Blue/White","Yellow/black","Yellow/Blue","Blue/White2","Blue/White3","Yankton"})
funcs.add_to_S_L(g.tbl.spwn.spwn_plate_i,"g.tbl.spwn.spwn_plate_i")
g.tbl.spwn.spwn_plate_i.value=1
g.tbl.spwn.spwn_plate_i.on=true

g.tbl.spwn.spwn_plate = menu.add_feature("Plate text - "..g.tbl.spwn.spwn_plate_txt, "toggle", g.tbl.spwn.optns_prnt.id,function(f)
	if f.on and g.var.GS_has_loaded then
		local status,str = 1,""
		status,str = funcs.get.text_input("Non alpha-numeric characters act as blank space",g.tbl.spwn.spwn_plate_txt,8,0)
		if status == 0 then
			g.tbl.spwn.spwn_plate_check("Self Vehicle Spawn")
			g.tbl.spwn.spwn_plate_write(str,"Self Vehicle Spawn")
			g.tbl.spwn.spwn_plate_txt=str
			f.name="Plate text - "..g.tbl.spwn.spwn_plate_txt
		else
			f.on=false
		end
	end
end)
funcs.add_to_S_L(g.tbl.spwn.spwn_plate,"g.tbl.spwn.spwn_plate")
g.tbl.spwn.spwn_plate.on=true

g.tbl.spwn.remove_old = menu.add_feature("Remove previous vehicle", "toggle", g.tbl.spwn.optns_prnt.id)
funcs.add_to_S_L(g.tbl.spwn.remove_old,"g.tbl.spwn.remove_old")

g.tbl.spwn.spwn_front=menu.add_feature("Spawn using heading of my: ", "action_value_str", g.tbl.spwn.optns_prnt.id)
g.tbl.spwn.spwn_front:set_str_data({"Cam","Ped"})
funcs.add_to_S_L(g.tbl.spwn.spwn_front,"g.tbl.spwn.spwn_front")

g.tbl.spwn.spwn_spd_tq=menu.add_feature("Vehicle max speed/torque %","action_value_i", g.tbl.spwn.optns_prnt.id)
funcs.set_feat_i_f(g.tbl.spwn.spwn_spd_tq,0,700,5,100,"g.tbl.spwn.spwn_spd_tq")	

g.tbl.spwn.paint_prnt = menu.add_feature("Paint", "parent", g.tbl.spwn.optns_prnt.id, function ()
	g.tbl.spwn.hide_paint(true)
end)

function g.tbl.spwn.hide_paint(_bool)
	system.yield(0)
	if _bool then
		for _,feat in pairs(g.tbl.spwn.paint_list) do
			feat.hidden=(not g.tbl.spwn.spwn_cust_paint.on or g.tbl.spwn.spwn_cust_paint.value==0)
		end
		g.tbl.spwn.spwn_cust_paint_r.hidden=(not g.tbl.spwn.spwn_cust_paint.on or g.tbl.spwn.spwn_cust_paint.value==1)
		g.tbl.spwn.spwn_cust_paint_g.hidden=(not g.tbl.spwn.spwn_cust_paint.on or g.tbl.spwn.spwn_cust_paint.value==1)
		g.tbl.spwn.spwn_cust_paint_b.hidden=(not g.tbl.spwn.spwn_cust_paint.on or g.tbl.spwn.spwn_cust_paint.value==1)
	end
end

g.tbl.spwn.spwn_rand_paint = menu.add_feature("Random paint", "value_str", g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.spwn_cust_paint.on=not f.on
	g.tbl.spwn.hide_paint(f.on)
end)
g.tbl.spwn.spwn_rand_paint:set_str_data({"Non-matching", "Matching","Dark","Bright"})
funcs.add_to_S_L(g.tbl.spwn.spwn_rand_paint,"g.tbl.spwn.spwn_rand_paint")
g.tbl.spwn.spwn_rand_paint.on=true

g.tbl.spwn.spwn_cust_paint = menu.add_feature("Custom paint", "value_str", g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.spwn_rand_paint.on=not f.on
	g.tbl.spwn.hide_paint(f.on)
end)
g.tbl.spwn.spwn_cust_paint:set_str_data({"RGB","List"})
funcs.add_to_S_L(g.tbl.spwn.spwn_cust_paint,"g.tbl.spwn.spwn_cust_paint")

g.tbl.spwn.spwn_cust_paint_r=menu.add_feature("Custom Red","autoaction_value_i",g.tbl.spwn.paint_prnt.id)
funcs.set_feat_i_f(g.tbl.spwn.spwn_cust_paint_r,0,255,1,0,"g.tbl.spwn.spwn_cust_paint_r")

g.tbl.spwn.spwn_cust_paint_g=menu.add_feature("Custom Green","autoaction_value_i",g.tbl.spwn.paint_prnt.id)
funcs.set_feat_i_f(g.tbl.spwn.spwn_cust_paint_g,0,255,1,0,"g.tbl.spwn.spwn_cust_paint_g")

g.tbl.spwn.spwn_cust_paint_b=menu.add_feature("Custom Blue","autoaction_value_i",g.tbl.spwn.paint_prnt.id)
funcs.set_feat_i_f(g.tbl.spwn.spwn_cust_paint_b,0,255,1,0,"g.tbl.spwn.spwn_cust_paint_b")

function g.tbl.spwn.paint_tog_do(_bool,_feat,_paint)
	if _bool then
		g.tbl.spwn.paint_list_slct=_paint
		for _, feat in pairs(g.tbl.spwn.paint_list) do
			if feat ~=_feat then
				feat.on = false
			end
		end
	end
end

g.tbl.spwn.paint_list_slct = nil
g.tbl.spwn.paint_list={}

g.tbl.spwn.paint_list.pnt_Purewhite=menu.add_feature("Pure white","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Purewhite,16777215)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Purewhite,"g.tbl.spwn.paint_list.pnt_Purewhite")

g.tbl.spwn.paint_list.pnt_White=menu.add_feature("White","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_White,13487565)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_White,"g.tbl.spwn.paint_list.pnt_White")

g.tbl.spwn.paint_list.pnt_Cream=menu.add_feature("Cream","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Cream,10197915)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Cream,"g.tbl.spwn.paint_list.pnt_Cream")

g.tbl.spwn.paint_list.pnt_Grey=menu.add_feature("Grey","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Grey,5066061)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Grey,"g.tbl.spwn.paint_list.pnt_Grey")

g.tbl.spwn.paint_list.pnt_Black=menu.add_feature("Black","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Black,0)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Black,"g.tbl.spwn.paint_list.pnt_Black")

g.tbl.spwn.paint_list.pnt_PastelPink=menu.add_feature("Pastel Pink","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_PastelPink,15767961)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_PastelPink,"g.tbl.spwn.paint_list.pnt_PastelPink")

g.tbl.spwn.paint_list.pnt_Pink=menu.add_feature("Pink","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Pink,13317780)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Pink,"g.tbl.spwn.paint_list.pnt_Pink")

g.tbl.spwn.paint_list.pnt_PinkRed=menu.add_feature("Pink/Red","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_PinkRed,14692914)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_PinkRed,"g.tbl.spwn.paint_list.pnt_PinkRed")

g.tbl.spwn.paint_list.pnt_WineRed=menu.add_feature("Wine Red","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_WineRed,3014656)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_WineRed,"g.tbl.spwn.paint_list.pnt_WineRed")

g.tbl.spwn.paint_list.pnt_Red=menu.add_feature("Red","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Red,7346457)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Red,"g.tbl.spwn.paint_list.pnt_Red")

g.tbl.spwn.paint_list.pnt_BrightRed=menu.add_feature("Bright Red","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_BrightRed,16711680)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_BrightRed,"g.tbl.spwn.paint_list.pnt_BrightRed")

g.tbl.spwn.paint_list.pnt_Salmon=menu.add_feature("Salmon","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Salmon,16761514)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Salmon,"g.tbl.spwn.paint_list.pnt_Salmon")

g.tbl.spwn.paint_list.pnt_BrightBlue=menu.add_feature("Bright Blue","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_BrightBlue,56306)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_BrightBlue,"g.tbl.spwn.paint_list.pnt_BrightBlue")

g.tbl.spwn.paint_list.pnt_LightBlue=menu.add_feature("Light Blue","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_LightBlue,6141669)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_LightBlue,"g.tbl.spwn.paint_list.pnt_LightBlue")

g.tbl.spwn.paint_list.pnt_Teal=menu.add_feature("Teal","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Teal,3103859)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Teal,"g.tbl.spwn.paint_list.pnt_Teal")

g.tbl.spwn.paint_list.pnt_RoyalBlue=menu.add_feature("Royal Blue","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_RoyalBlue,18309)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_RoyalBlue,"g.tbl.spwn.paint_list.pnt_RoyalBlue")

g.tbl.spwn.paint_list.pnt_CreamYellow=menu.add_feature("Cream Yellow","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_CreamYellow,16706473)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_CreamYellow,"g.tbl.spwn.paint_list.pnt_CreamYellow")

g.tbl.spwn.paint_list.pnt_Yellow=menu.add_feature("Yellow","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Yellow,15779920)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Yellow,"g.tbl.spwn.paint_list.pnt_Yellow")

g.tbl.spwn.paint_list.pnt_Mustard=menu.add_feature("Mustard","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Mustard,8284969)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Mustard,"g.tbl.spwn.paint_list.pnt_Mustard")

g.tbl.spwn.paint_list.pnt_Brightyellow=menu.add_feature("Bright yellow","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Brightyellow,16757504)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Brightyellow,"g.tbl.spwn.paint_list.pnt_Brightyellow")

g.tbl.spwn.paint_list.pnt_Schoolbus=menu.add_feature("Schoolbus","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_Schoolbus,16750350)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_Schoolbus,"g.tbl.spwn.paint_list.pnt_Schoolbus")

g.tbl.spwn.paint_list.pnt_DarkOrange=menu.add_feature("Dark Orange","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_DarkOrange,8340010)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_DarkOrange,"g.tbl.spwn.paint_list.pnt_DarkOrange")

g.tbl.spwn.paint_list.pnt_CreamGreen=menu.add_feature("Cream Green","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_CreamGreen,12183225)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_CreamGreen,"g.tbl.spwn.paint_list.pnt_CreamGreen")

g.tbl.spwn.paint_list.pnt_LightGreen=menu.add_feature("Light Green","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_LightGreen,7523442)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_LightGreen,"g.tbl.spwn.paint_list.pnt_LightGreen")

g.tbl.spwn.paint_list.pnt_BrightGreen=menu.add_feature("Bright Green","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_BrightGreen,2803792)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_BrightGreen,"g.tbl.spwn.paint_list.pnt_BrightGreen")

g.tbl.spwn.paint_list.pnt_DarkGreen=menu.add_feature("Dark Green","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_DarkGreen,3761721)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_DarkGreen,"g.tbl.spwn.paint_list.pnt_DarkGreen")

g.tbl.spwn.paint_list.pnt_CreamPurple=menu.add_feature("Cream Purple","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_CreamPurple,12628975)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_CreamPurple,"g.tbl.spwn.paint_list.pnt_CreamPurple")

g.tbl.spwn.paint_list.pnt_BrightPurple=menu.add_feature("Bright Purple","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_BrightPurple,8677090)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_BrightPurple,"g.tbl.spwn.paint_list.pnt_BrightPurple")

g.tbl.spwn.paint_list.pnt_DarkPurple=menu.add_feature("Dark Purple","toggle",g.tbl.spwn.paint_prnt.id,function(f)
	g.tbl.spwn.paint_tog_do(f.on,g.tbl.spwn.paint_list.pnt_DarkPurple,4405615)
end)
funcs.add_to_S_L(g.tbl.spwn.paint_list.pnt_DarkPurple,"g.tbl.spwn.paint_list.pnt_DarkPurple")

g.tbl.spwn.paint_list.pnt_DarkGreen.on=true

g.tbl.spwn.neon = {}
g.tbl.spwn.neon.list={}
g.tbl.spwn.neon_slct=nil 
function g.tbl.spwn.neon_tog_do(_bool,_feat,_neon)
	if _bool then
		g.tbl.spwn.neon_slct=_neon
		for _, feat in pairs(g.tbl.spwn.neon.list) do
			if feat ~=_feat then
				feat.on = false
			end
		end
	end
end

function g.tbl.spwn.hide_neon(_bool)
	system.yield(0)
	if _bool then
		for _, feat in pairs (g.tbl.spwn.neon.list) do
			feat.hidden=(g.tbl.spwn.neon.choose.value==0)
		end
	end
end

g.tbl.spwn.neon.prnt = menu.add_feature("Neon lights", "parent", g.tbl.spwn.optns_prnt.id, function (f)
	g.tbl.spwn.hide_neon(g.tbl.spwn.neon.choose.value==0)
end)


g.tbl.spwn.neon.choose=menu.add_feature("Neon color","autoaction_value_str",g.tbl.spwn.neon.prnt.id,function(f)
	g.tbl.spwn.hide_neon(true)
end)
g.tbl.spwn.neon.choose:set_str_data({"Random","List"})
funcs.add_to_S_L(g.tbl.spwn.neon.choose,"g.tbl.spwn.neon.choose")

g.tbl.spwn.neon.list.White=menu.add_feature("White", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.White,4292796159)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.White,"g.tbl.spwn.neon.list.White")

g.tbl.spwn.neon.list.Blue=menu.add_feature("Blue", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.Blue,4278326783)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.Blue,"g.tbl.spwn.neon.list.Blue")

g.tbl.spwn.neon.list.ElectricBlue=menu.add_feature("Electric Blue", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.ElectricBlue,4278408191)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.ElectricBlue,"g.tbl.spwn.neon.list.ElectricBlue")

g.tbl.spwn.neon.list.MintGreen=menu.add_feature("Mint Green", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.MintGreen,4278255500)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.MintGreen,"g.tbl.spwn.neon.list.MintGreen")

g.tbl.spwn.neon.list.LimeGreen=menu.add_feature("Lime Green", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.LimeGreen,4284415745)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.LimeGreen,"g.tbl.spwn.neon.list.LimeGreen")

g.tbl.spwn.neon.list.Yellow=menu.add_feature("Yellow", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.Yellow,4294967040)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.Yellow,"g.tbl.spwn.neon.list.Yellow")

g.tbl.spwn.neon.list.GoldenShower=menu.add_feature("Golden Shower", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.GoldenShower,4294940165)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.GoldenShower,"g.tbl.spwn.neon.list.GoldenShower")

g.tbl.spwn.neon.list.Orange=menu.add_feature("Orange", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.Orange,4294917632)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.Orange,"g.tbl.spwn.neon.list.Orange")

g.tbl.spwn.neon.list.Red=menu.add_feature("Red", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.Red,4294902017)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.Red,"g.tbl.spwn.neon.list.Red")

g.tbl.spwn.neon.list.PonyPink=menu.add_feature("Pony Pink", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.PonyPink,4294914660)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.PonyPink,"g.tbl.spwn.neon.list.PonyPink")

g.tbl.spwn.neon.list.HotPink=menu.add_feature("Hot Pink", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.HotPink,4294903230)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.HotPink,"g.tbl.spwn.neon.list.HotPink")

g.tbl.spwn.neon.list.Purple=menu.add_feature("Purple", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.Purple,4280484351)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.Purple,"g.tbl.spwn.neon.list.Purple")

g.tbl.spwn.neon.list.BlackLight=menu.add_feature("Black Light", "toggle", g.tbl.spwn.neon.prnt.id, function (f)
	g.tbl.spwn.neon_tog_do(f.on,g.tbl.spwn.neon.list.BlackLight,4279174143)
end)
funcs.add_to_S_L(g.tbl.spwn.neon.list.BlackLight,"g.tbl.spwn.neon.list.BlackLight")

g.tbl.spwn.neon.list.MintGreen.on=true

g.tbl.spwn.h_light={}
g.tbl.spwn.h_light.list={}
g.tbl.spwn.h_light_slct=nil 

function g.tbl.spwn.h_light_tog_do(_bool,_feat,_h_light)
	if _bool then
		g.tbl.spwn.h_light_slct=_h_light
		for _, feat in pairs(g.tbl.spwn.h_light.list) do
			if feat ~=_feat then
				feat.on = false
			end
		end
	end
end

function g.tbl.spwn.hide_h_light(_bool)
	system.yield(0)
	if _bool then
		for _, feat in pairs(g.tbl.spwn.h_light.list) do
			feat.hidden=(g.tbl.spwn.h_light.choose.value==0)
		end
	end
end

g.tbl.spwn.h_light.prnt = menu.add_feature("Headlights", "parent", g.tbl.spwn.optns_prnt.id, function (f)
	g.tbl.spwn.hide_h_light(g.tbl.spwn.h_light.choose.value==0)
end)


g.tbl.spwn.h_light.choose=menu.add_feature("Headlight color","autoaction_value_str",g.tbl.spwn.h_light.prnt.id,function(f)
	g.tbl.spwn.hide_h_light(true)
end)
g.tbl.spwn.h_light.choose:set_str_data({"Random","List"})
funcs.add_to_S_L(g.tbl.spwn.h_light.choose,"g.tbl.spwn.h_light.choose")

g.tbl.spwn.h_light.list.White=menu.add_feature("White", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.White,0)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.White,"g.tbl.spwn.h_light.list.White")

g.tbl.spwn.h_light.list.Blue=menu.add_feature("Blue", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.Blue,1)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.Blue,"g.tbl.spwn.h_light.list.Blue")

g.tbl.spwn.h_light.list.ElectricBlue=menu.add_feature("Electric Blue", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.ElectricBlue,2)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.ElectricBlue,"g.tbl.spwn.h_light.list.ElectricBlue")

g.tbl.spwn.h_light.list.MintGreen=menu.add_feature("Mint Green", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.MintGreen,3)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.MintGreen,"g.tbl.spwn.h_light.list.MintGreen")

g.tbl.spwn.h_light.list.LimeGreen=menu.add_feature("Lime Green", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.LimeGreen,4)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.LimeGreen,"g.tbl.spwn.h_light.list.LimeGreen")

g.tbl.spwn.h_light.list.Yellow=menu.add_feature("Yellow", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.Yellow,5)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.Yellow,"g.tbl.spwn.h_light.list.Yellow")

g.tbl.spwn.h_light.list.GoldenShower=menu.add_feature("Golden Shower", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.GoldenShower,6)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.GoldenShower,"g.tbl.spwn.h_light.list.GoldenShower")

g.tbl.spwn.h_light.list.Orange=menu.add_feature("Orange", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.Orange,7)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.Orange,"g.tbl.spwn.h_light.list.Orange")

g.tbl.spwn.h_light.list.Red=menu.add_feature("Red", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.Red,8)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.Red,"g.tbl.spwn.h_light.list.Red")

g.tbl.spwn.h_light.list.PonyPink=menu.add_feature("Pony Pink", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.PonyPink,9)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.PonyPink,"g.tbl.spwn.h_light.list.PonyPink")

g.tbl.spwn.h_light.list.HotPink=menu.add_feature("Hot Pink", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.HotPink,10)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.HotPink,"g.tbl.spwn.h_light.list.HotPink")

g.tbl.spwn.h_light.list.Purple=menu.add_feature("Purple", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.Purple,11)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.Purple,"g.tbl.spwn.h_light.list.Purple")

g.tbl.spwn.h_light.list.BlackLight=menu.add_feature("Black Light", "toggle", g.tbl.spwn.h_light.prnt.id, function (f)
	g.tbl.spwn.h_light_tog_do(f.on,g.tbl.spwn.h_light.list.BlackLight,12)
end)
funcs.add_to_S_L(g.tbl.spwn.h_light.list.BlackLight,"g.tbl.spwn.h_light.list.BlackLight")

g.tbl.spwn.h_light.list.MintGreen.on=true

function g.tbl.spwn.ovrly_srch_do(_str,_type,_table)
	for i=1,#veh_stuff.master do
		if #_table < 50 then
			if _type == 0 then
				if string.match(string.lower(veh_stuff.master[i][1]), string.lower(_str)) ~= nil then
					_table[#_table+1]= veh_stuff.master[i]
				end
			elseif _type == 1 then
				if string.match(string.lower(veh_stuff.master[i][2]), string.lower(_str)) ~= nil then
					_table[#_table+1]= veh_stuff.master[i]
				end
			elseif string.match(string.lower(veh_stuff.master[i][3]), string.lower(_str)) ~= nil then
				_table[#_table+1]= veh_stuff.master[i]
			end
		end
	end
	if #_table > 1 then
		if _type == 0 then
			table.sort(_table, function(a, b) return a[1]:lower() <  b[1]:lower() end)
		else
			table.sort(_table, function(a, b) return a[3]:lower() <  b[3]:lower() end)
		end
	end
end

function g.tbl.spwn.ovrly_srch_show(_table,_title,selection,x_val_box,y_val,_session)
	ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.0175, 0, 0, 0, 155)
	funcs.doo.overlay(_title,75,150,75,255,.2,0,x_val_box,y_val)
	y_val=y_val+0.0171
	-- if _session then
		-- ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.0175, 0, 0, 0, 155)
		-- funcs.doo.overlay(g.tbl.sssn_stf.old.veh_or_plyr_string(),75,150,75,255,.2,0,0.5,y_val)
		-- y_val=y_val+0.0171
	-- end
	for i=1, #_table do
		if i < 8 then
			ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.0175, 0, 0, 0, 155)
			if i == selection then
				ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.017, 155, 155, 155, 155)
			end
			funcs.doo.overlay_left(i.."  ".._table[i][1],255,255,255,255,.2,0,x_val_box-0.045,y_val)
			y_val=y_val+0.0171
		end
	end
end

function g.tbl.spwn.quick_start(_table,_title,_session)
	local vk_1_7 = {"1","2","3","4","5","6","7",}
	local status,num_name,str,y_val,x_val_box,selection,name,veh = 1,"",""
	local search,key_time=true,API.util.t_ms()
	_table = {}
	status, str = funcs.get.text_input(_title,"",25,0)
	local function key_press(_key)
		if API.util.t_ms() > key_time and funcs.is.vk_key_down(_key) then
			key_time = API.util.t_ms() + 100
			return true
		end
		return false
	end
	if status == 0 then
		g.tbl.spwn.ovrly_srch_do(str,0,_table)
		if #_table > 0 then
			for i=1, #_table do
				if i > 7 then _table[i]=nil end
			end
			selection = 1
			if _session then
				y_val = g.tbl.sssn_stf.new.quick_y.value/300
				x_val_box = g.tbl.sssn_stf.new.quick_x.value/300
			else
				y_val = g.tbl.spwn.qck_srch_optns_y.value/300
				x_val_box = g.tbl.spwn.qck_srch_optns_x.value/300
			end
			while search do
				system.yield(0)
				ntv.doo.hide_weapon_wheel_from_mouse()
				g.tbl.spwn.ovrly_srch_show(_table,_title,selection,x_val_box,y_val,_session)
				if funcs.is.key_active(14,1) or API.cntrl.is.just_pressed(1, 187) or key_press("S") then
					if _table[selection+1] ~= nil then selection = selection+1
					else selection = 1
					end
				elseif funcs.is.key_active(15,1) or API.cntrl.is.just_pressed(1, 188) or key_press("W") then
					if _table[selection-1] ~= nil then selection = selection-1
					else selection = #_table
					end
				end
				for i=1,#vk_1_7 do
					if funcs.is.vk_key_down(vk_1_7[i]) and _table[i] ~= nil then
						if _session then
							funcs.doo.sssn_spawn_vehs(_table[i][5])
						else
							if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
								API.ent.set.no_need(g.tbl.spwn.old_veh)
								API.ent.delete(g.tbl.spwn.old_veh)
							end
							funcs.doo.req_model(_table[i][5])
							veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),_table[i][5],false,g.tbl.spwn.spwn_front.value==0)
							g.tbl.spwn.apply_upgrades(veh)
						end
						search = false
						break
					end
				end
				if funcs.is.vk_key_down("RETURN") then
					if _session then
						funcs.doo.sssn_spawn_vehs(_table[selection][5])
					else
						if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
							API.ent.set.no_need(g.tbl.spwn.old_veh)
							API.ent.delete(g.tbl.spwn.old_veh)
						end
						funcs.doo.req_model(_table[selection][5])
						veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),_table[selection][5],false,g.tbl.spwn.spwn_front.value==0)
						g.tbl.spwn.apply_upgrades(veh)
					end
					search = false
				elseif funcs.is.vk_key_down("ESCAPE") then
					search = false
				end
			end
		end
	end
end
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------


g.tbl.plate_anim={}
g.tbl.plate_anim.list_feat = {}
g.tbl.plate_anim.index=nil
g.tbl.plate_anim.plate=nil
g.tbl.plate_anim.my_veh=nil
g.tbl.plate_anim.plyr_delay=false
g.tbl.plate_anim.plate_delay=false
g.tbl.plate_anim.directory = g.paths._user.."\\Vehicle License Plate\\"
g.tbl.plate_anim.list_optns = menu.add_feature("String list options", "parent", g.prnt.self_veh_crrnt_plate.id)
g.tbl.plate_anim.list_prnt=menu.add_feature("String list", "parent", g.tbl.plate_anim.list_optns.id)

g.tbl.plate_anim.str_scrl={}
g.tbl.plate_anim.str_scrl.new_dly=false
g.tbl.plate_anim.str_scrl.new_txt=false
g.tbl.plate_anim.str_scrl.optns = menu.add_feature("String scroll options", "parent", g.prnt.self_veh_crrnt_plate.id, function()
	g.tbl.plate_anim.str_scrl.updt_name()
end)

function g.tbl.plate_anim.str_scrl.updt_name()
	g.tbl.plate_anim.str_scrl.check()
	local text,name = g.tbl.plate_anim.str_scrl.text(),"Update text"
	for i=1,31 do
		if i == 31 then
			name = string.sub(text,1,30)
		elseif string.len(text) == i then
			name = string.sub(text,1,i)
			break
		end
	end
	if string.len(name) >= 30 then
		name=name.."..."
	end
	g.tbl.plate_anim.str_scrl.update.name = name
end

g.tbl.plate_anim.spdo={}
g._Disp_Cust_Plate_Speedo = menu.add_feature("Speedometer options", "parent", g.prnt.self_veh_crrnt_plate.id, function()
	g.tbl.plate_anim.spdo.dick_lngth.hidden=(g.tbl.plate_anim.spdo.type.value~=2)
end)

g.tbl.plate_anim.plyr={}
g.tbl.plate_anim.plyr.name=""
g.tbl.plate_anim.plyr.dist=10000
g._Disp_Cust_Plate_Plyr = menu.add_feature("Closest player options", "parent", g.prnt.self_veh_crrnt_plate.id, function()
	g.tbl.plate_anim.plyr.dist_type.hidden=(not g.tbl.plate_anim.plyr.show_dist.on)
end)

g.tbl.plate_anim.wp={}
g.tbl.plate_anim.wp.blink=false
g.tbl.plate_anim.wp.blnk_new=false
g.tbl.plate_anim.wp.const=false
g.tbl.plate_anim.wp.dist=0
g.tbl.plate_anim.wp.prnt=menu.add_feature("Waypoint option", "parent", g.prnt.self_veh_crrnt_plate.id)




function g.tbl.plate_anim.file_check()
	funcs.doo.check_create_dir(g.paths._user)
	funcs.doo.check_create_dir(g.tbl.plate_anim.directory)
	if not utils.file_exists(g.tbl.plate_anim.directory.."String List Animation.txt") then
		g.tbl.plate_anim.file_write()
	end
end

function g.tbl.plate_anim.file_write()
	local file = io.open(g.tbl.plate_anim.directory.."String List Animation.txt", "w")
	file:write("g       \nge      \ngee     \ngeee    \ngeeee   \ngeeeee  \ngeeeeee \ngeeeeeee\n\nskid    \n    skid\nskid    \n    skid\n\ngee-skid\n\ngee-skid\n")
	file:close()
end

function g.tbl.plate_anim.file_get()
	g.tbl.plate_anim.file_check()
	::start::
	local file = io.open(g.tbl.plate_anim.directory.."String List Animation.txt", "r")
	local strings = {}
	for line in file:lines() do
		if line ~= nil and string.len(tostring(line)) < 9 then
			strings[#strings+1] = tostring(line)
		end
	end
	file:close()
	if # strings == 0 then
		g.tbl.plate_anim.file_write()
		goto start
	end
	return strings
end

g.tbl.plate_anim.plate_refresh=false
function g.tbl.plate_anim.do_text(val,last,first,index,add)
	local status,str,continue = 1,"",false
	if val == 0 or add then
		status,str = funcs.get.text_input("Non alpha-numeric characters act as blank space","",8,0)
	end
	if add then
		if status == 0 then
			continue = true
		end
	elseif val ~= 0 or status == 0 then
		continue=true
	end
	if continue then
		local _table={}
		if add then
			if val == 4 then
				for i=1,#g.tbl.plate_anim.strings do
					if i < index then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					elseif i == index then
						_table[#_table+1]=str
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					else
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					end
				end
			else
				if val == 0 then
					_table[#_table+1]=str
				end
				for i=1,#g.tbl.plate_anim.strings do
					_table[#_table+1]=g.tbl.plate_anim.strings[i]
				end
				if val == 1 then
					_table[#_table+1]=str
				end
			end
		elseif val == 0 or val == 1 then
			for i=1,#g.tbl.plate_anim.strings do
				if val == 0 then
					if i == index then
						_table[#_table+1]=str
					else
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					end
				else
					if i ~= index then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					end
				end
			end
		else
			if val == 3 and last then
				_table[#_table+1]=g.tbl.plate_anim.strings[index]
			end
			for i=1,#g.tbl.plate_anim.strings do
				if val == 2 then
					if first then
						if i ~= index then
							_table[#_table+1]=g.tbl.plate_anim.strings[i]
						end
					elseif i < index-1 then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					elseif i == index-1 then
						if g.tbl.plate_anim.strings[index] ~= nil then
							_table[#_table+1]=g.tbl.plate_anim.strings[index]
						end
						if g.tbl.plate_anim.strings[index-1] ~= nil then
							_table[#_table+1]=g.tbl.plate_anim.strings[index-1]
						end
					elseif i > index then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					end
				else
					if last then
						if i ~= index then
							_table[#_table+1]=g.tbl.plate_anim.strings[i]
						end
					elseif i < index then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					elseif i == index then
						if g.tbl.plate_anim.strings[index+1] ~= nil then
							_table[#_table+1]=g.tbl.plate_anim.strings[index+1]
						end
						if g.tbl.plate_anim.strings[index] ~= nil then
							_table[#_table+1]=g.tbl.plate_anim.strings[index]
						end
					elseif i > index+1 then
						_table[#_table+1]=g.tbl.plate_anim.strings[i]
					end
				end
			end
			if val == 2 and first then
				_table[#_table+1]=g.tbl.plate_anim.strings[index]
			end
		end
		g.tbl.plate_rpr_upgr.file_check()
		local contents = ""
		for i=1,#_table do
			contents = contents.._table[i]
			if _table[i+1] ~= nil then
				contents = contents.."\n"
			end
		end
		local file = io.open(g.tbl.plate_anim.directory.."String List Animation.txt", "w")
		file:write(contents)
		file:close()
		g.tbl.plate_anim.list_delete()
		g.tbl.plate_anim.list_add()
		g.tbl.plate_anim.plate_refresh=true
	end
end
	
function g.tbl.plate_anim.list_delete()
	for i=1,#g.tbl.plate_anim.list_feat do
		menu.delete_feature(g.tbl.plate_anim.list_feat[i].id)
		if #g.tbl.plate_anim.list_feat % 100 == 0 then
			system.wait(0)
		end
	end
	menu.delete_feature(g.tbl.plate_anim.add_str_bttm_feat.id)
	g.tbl.plate_anim.list_feat={}
end

g.tbl.plate_anim.add_str_top_feat=menu.add_feature("Add entry to top", "action", g.tbl.plate_anim.list_prnt.id, function(f)
	g.tbl.plate_anim.do_text(0,nil,nil,nil,true)
end)
		
function g.tbl.plate_anim.list_add()
	g.tbl.plate_anim.strings=g.tbl.plate_anim.file_get()
	for i=1,#g.tbl.plate_anim.strings do
		local _last = (i==#g.tbl.plate_anim.strings)
		local _first = (i==1)
		g.tbl.plate_anim.list_feat[i]=menu.add_feature(g.tbl.plate_anim.strings[i], "action_value_str", g.tbl.plate_anim.list_prnt.id, function(f)
			local last,first,index=_last,_first,i
			g.tbl.plate_anim.do_text(f.value,last,first,index,f.value==4)
		end)
		if 1 == #g.tbl.plate_anim.strings then
			g.tbl.plate_anim.list_feat[i]:set_str_data({"Replace"})
		else
			g.tbl.plate_anim.list_feat[i]:set_str_data({"Replace","Remove","Move up","Move down","Insert new"})
		end
	end
	g.tbl.plate_anim.add_str_bttm_feat=menu.add_feature("Add entry to bottom", "action", g.tbl.plate_anim.list_prnt.id, function(f)
		g.tbl.plate_anim.do_text(1,nil,nil,nil,true)
	end)
end
g.tbl.plate_anim.list_add()

function g.tbl.plate_anim.reset_plate()
	if funcs.is.veh(g.tbl.plate_anim.my_veh) then
		if g.tbl.plate_anim.index ~= nil then
			API.veh.set.plate_index(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.index)
		end
		if g.tbl.plate_anim.plate ~= nil then
			API.veh.set.plate_text(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.plate)
		end
	end
	g.tbl.plate_anim.index=nil
	g.tbl.plate_anim.plate=nil
	g.tbl.plate_anim.my_veh=nil
end

function g.tbl.plate_anim.record_plate()
	if g.tbl.plate_anim.index == nil then
		g.tbl.plate_anim.index = API.veh.get.plate_i(g.tbl.plate_anim.my_veh)
	end
	if g.tbl.plate_anim.plate == nil then
		g.tbl.plate_anim.plate = ntv.get.veh_plate_text(g.tbl.plate_anim.my_veh)
	end
end
function g.tbl.plate_anim.index_do()
	if g.tbl.plate_anim.style_tog.on then
		API.veh.set.plate_index(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.style_tog.value)
	elseif g.tbl.plate_anim.index ~= nil and API.veh.get.plate_i(g.tbl.plate_anim.my_veh) ~= g.tbl.plate_anim.index then
		API.veh.set.plate_index(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.index)
	end
end

g.tbl.plate_anim.tog=menu.add_feature("Custom license plate", "value_str", g.prnt.self_veh_crrnt_plate.id, function(f)
	local _table,do_once,f_value,time = {},false
	local function set_bools_false()
		g.tbl.plate_anim.str_scrl.new_txt=false
		g.tbl.plate_anim.str_scrl.new_dly=false
		g.tbl.plate_anim.plate_refresh=false
		g.tbl.plate_anim.plyr_delay=false
		g.tbl.plate_anim.plate_delay=false
	end
	local function reset_plate()
		g.tbl.plate_anim.reset_plate()
		set_bools_false()
		do_once=false
	end
	local function wp_show_const()
		g.tbl.plate_anim.wp.tog.on=(g.tbl.plate_anim.wp.select.value~=0)
		return (g.tbl.plate_anim.wp.select.value == 1 and g.tbl.plate_anim.wp.const and g.tbl.plate_anim.wp.dist ~= 0)
	end
	local function wp_show_blink()
		g.tbl.plate_anim.wp.tog.on=(g.tbl.plate_anim.wp.select.value~=0)
		return (g.tbl.plate_anim.wp.select.value == 2 and g.tbl.plate_anim.wp.blink and g.tbl.plate_anim.wp.dist ~= 0)
	end
	local function wp_show_any()
		g.tbl.plate_anim.wp.tog.on=(g.tbl.plate_anim.wp.select.value~=0)
		return (wp_show_const() or wp_show_blink())
	end
	local function wp_do_blink()
		while wp_show_any() and funcs.ME._in_veh() and f.on and not g.tbl.plate_anim.wp.blnk_new do
			API.veh.set.plate_text(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.dist_str(g.tbl.plate_anim.wp.dist_mtrc.value,g.tbl.plate_anim.wp.dist))
			system.yield(0)		
		end
		g.tbl.plate_anim.wp.blnk_new=false
	end
	while f.on do
		f_value = f.value
		g.tbl.plate_anim.plyr.hddn.on=(f.value==2)
		g.tbl.plate_anim.wp.tog.on=(g.tbl.plate_anim.wp.select.value~=0)
		if g.tbl.plate_anim.my_veh ~= nil and API.plyr.get.veh(API.plyr.my_id()) ~= g.tbl.plate_anim.my_veh then
			reset_plate()
			system.yield(250)
		elseif funcs.ME._in_veh() then
			g.tbl.plate_anim.my_veh=API.plyr.get.veh(API.plyr.my_id())
			if not do_once then
				system.yield(250)
				g.tbl.plate_anim.record_plate()
				do_once=true
			end
			g.tbl.plate_anim.index_do()
			if wp_show_const() then
				API.veh.set.plate_text(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.dist_str(g.tbl.plate_anim.wp.dist_mtrc.value,g.tbl.plate_anim.wp.dist))
				system.yield(100)
			elseif f.value == 0 then
				system.yield(5)
				_table = g.tbl.plate_anim.strings
				for i=1,#_table do
					if not funcs.ME._in_veh() or not f.on or g.tbl.plate_anim.plate_refresh or (f_value ~= f.value) or wp_show_const() then
						break
					else
						g.tbl.plate_anim.index_do()
						API.veh.set.plate_text(g.tbl.plate_anim.my_veh, _table[i])
						time = API.util.t_ms() + g.tbl.plate_anim.delay.value*1000
						while time > API.util.t_ms() and not g.tbl.plate_anim.plate_refresh and not g.tbl.plate_anim.plate_delay and (f_value == f.value) and not wp_show_any() do
							system.yield(5)
						end
						g.tbl.plate_anim.plate_delay=false
						wp_do_blink()
					end
				end
			elseif f.value == 1 then
				system.yield(50)
				API.veh.set.plate_text(g.tbl.plate_anim.my_veh, g.tbl.plate_anim.spdo.math())
				wp_do_blink()
			elseif f.value == 2 then
				system.yield(0)
				_table=g.tbl.plate_anim.plyr.scroll()
				for i=1,#_table do
					if not funcs.ME._in_veh() or not f.on or (f_value ~= f.value) or wp_show_const() then
						break
					else
						API.veh.set.plate_text(g.tbl.plate_anim.my_veh, _table[i])
						time = API.util.t_ms() + g.tbl.plate_anim.plyr.delay.value*1000
						while time > API.util.t_ms() and not g.tbl.plate_anim.plyr_delay and (f_value == f.value) and not wp_show_any() do
							system.yield(5)
						end
						wp_do_blink()
					end
					g.tbl.plate_anim.plyr_delay=false
				end
			else
				_table=g.tbl.plate_anim.str_scrl.get()
				for i=1,#_table do
					if not funcs.ME._in_veh() or not f.on or (f_value ~= f.value) or wp_show_const() or g.tbl.plate_anim.str_scrl.new_txt then
						break
					else
						API.veh.set.plate_text(g.tbl.plate_anim.my_veh, _table[i])
						time = API.util.t_ms() + g.tbl.plate_anim.str_scrl.spd.value*1000
						while time > API.util.t_ms() and not g.tbl.plate_anim.str_scrl.new_dly and not g.tbl.plate_anim.str_scrl.new_txt and (f_value == f.value) and not wp_show_any() do
							system.yield(5)
						end
						wp_do_blink()
					end
					g.tbl.plate_anim.str_scrl.new_dly=false
				end
			end
			set_bools_false()
		else
			reset_plate()
			system.yield(250)
		end
	end
	reset_plate()
end)
g.tbl.plate_anim.tog:set_str_data({"String list","Speedometer","Closest player","String scroll"})
funcs.add_to_S_L(g.tbl.plate_anim.tog,"g.tbl.plate_anim.tog")

function g.tbl.plate_anim.dist_str(_type,_dist)
	if _type==0 then
		if _dist >= 10000 then
			return tostring(funcs.get.round_num(_dist/1000).."km")
		end
		return tostring(funcs.get.round_num(_dist).."m")
	end
	if _dist*3.28084 >= 999999 then
		return tostring(funcs.get.round_num(_dist*3.28084/5280).."mls")
	end
	return tostring(funcs.get.round_num(_dist*3.28084).."ft")
end

function g.tbl.plate_anim.plyr.scroll()
	local _table,_table2 = {},{}
	local function max_num(_max,_num)
		if _num > _max then
			return _num-_max
		end
		return _num
	end
	if g.tbl.plate_anim.plyr.blank.on then
		for i=1,string.len(g.tbl.plate_anim.plyr.name) do
			_table[#_table+1]=string.sub(g.tbl.plate_anim.plyr.name,i,i)
		end
	else
		for char in g.tbl.plate_anim.plyr.name:gmatch("([a-zA-Z0-9])") do
			_table[#_table + 1] = char
		end
	end
	for i=1,g.tbl.plate_anim.plyr.space.value do
		_table[#_table+1]=" "
	end
	if g.tbl.plate_anim.plyr.show_dist.on then
		local text = g.tbl.plate_anim.dist_str(g.tbl.plate_anim.plyr.dist_type.value,g.tbl.plate_anim.plyr.dist)
		for i=1,string.len(text) do
			_table[#_table+1]=string.sub(text,i,i)
		end
		for i=1,g.tbl.plate_anim.plyr.space.value do
			_table[#_table+1]=" "
		end
	end
	if #_table< 9 then
		local limit = 9-#_table
		for i=1,limit do
			_table[#_table+1]=" "
		end
	end
	for i=1,#_table do
		local text=""
		for t=0,7 do
			if _table[max_num(#_table,i+t)] ~= nil then
				text=text.._table[max_num(#_table,i+t)]
			end
		end
		_table2[#_table2+1]=text
	end
	return _table2
end

g.tbl.plate_anim.plyr.hddn=menu.add_feature("Closest player HIDDEN", "toggle", g._Disp_Cust_Plate_Plyr.id, function(f)
	local _table,_bool,name,dist
	while f.on do
		if g.tbl.plate_anim.tog.value == 2 then
			_table = {}
			for i=1,32 do
				_table[i]=g.tbl.PID_OSD.dist_table[i]
			end
			table.sort(_table, function(a, b) return (a[1])<(b[1]) end)
			_bool = false
			for i=1,32 do
				if API.plyr.is.valid(_table[i][3]) and _table[i][3] ~= API.plyr.my_id() then
					name=funcs.get.pid_name(_table[i][3])
					dist=funcs.get.dist_me_pid_3d(_table[i][3])
					_bool = true
					break
				end
			end
			if _bool then
				g.tbl.plate_anim.plyr.name=name
				g.tbl.plate_anim.plyr.dist=dist
				_bool = false
			else
				g.tbl.plate_anim.plyr.name=funcs.get.pid_name(API.plyr.my_id())
				g.tbl.plate_anim.plyr.dist=0
			end
		end
		system.yield(100)
		f.on = (g.tbl.plate_anim.tog.on and g.tbl.plate_anim.tog.value == 2)
	end
end)g.tbl.plate_anim.plyr.hddn.hidden=true

g.tbl.plate_anim.plyr.show_dist=menu.add_feature("Show distance", "toggle", g._Disp_Cust_Plate_Plyr.id, function(f)
	g.tbl.plate_anim.plyr.dist_type.hidden=(not f.on)
end)
funcs.add_to_S_L(g.tbl.plate_anim.plyr.show_dist,"g.tbl.plate_anim.plyr.show_dist")

g.tbl.plate_anim.plyr.dist_type=menu.add_feature("Distance metric", "action_value_str", g._Disp_Cust_Plate_Plyr.id)
g.tbl.plate_anim.plyr.dist_type:set_str_data({"Meters/KM","Feet"})
funcs.add_to_S_L(g.tbl.plate_anim.plyr.dist_type,"g.tbl.plate_anim.plyr.dist_type")

g.tbl.plate_anim.plyr.space=menu.add_feature("Extra spaces between info", "action_value_i", g._Disp_Cust_Plate_Plyr.id)
funcs.set_feat_i_f(g.tbl.plate_anim.plyr.space,2,8,1,4,"g.tbl.plate_anim.plyr.space")


g.tbl.plate_anim.plyr.delay=menu.add_feature("Scroll speed", "autoaction_value_f", g._Disp_Cust_Plate_Plyr.id, function(f)
	g.tbl.plate_anim.plyr_delay=true
end)
funcs.set_feat_i_f(g.tbl.plate_anim.plyr.delay,0.01,1,0.05,.25,"g.tbl.plate_anim.plyr.delay")

g.tbl.plate_anim.plyr.blank=menu.add_feature("Make special characters blank spaces", "toggle", g._Disp_Cust_Plate_Plyr.id)
funcs.add_to_S_L(g.tbl.plate_anim.plyr.blank,"g.tbl.plate_anim.plyr.blank")

g.tbl.plate_anim.delay=menu.add_feature("Animation delay (seconds)", "autoaction_value_f", g.tbl.plate_anim.list_optns.id, function(f)
	g.tbl.plate_anim.plate_delay=true
end)
funcs.set_feat_i_f(g.tbl.plate_anim.delay,0.01,30,0.05,.25,"g.tbl.plate_anim.delay")

g.tbl.plate_anim.style_tog=menu.add_feature("Include plate color", "value_str", g.prnt.self_veh_crrnt_plate.id)
g.tbl.plate_anim.style_tog:set_str_data({"Blue/White","Yellow/black","Yellow/Blue","Blue/White2","Blue/White3","Yankton"})
funcs.add_to_S_L(g.tbl.plate_anim.style_tog,"g.tbl.plate_anim.style_tog")
g.tbl.plate_anim.style_tog.value=1



function g.tbl.plate_anim.spdo.math()
	if g.tbl.plate_anim.spdo.type.value==0 then
		return tostring(funcs.get.round_num(API.ent.get.speed(API.plyr.get.veh(API.plyr.my_id()))*2.23694)).." MPH"
	elseif g.tbl.plate_anim.spdo.type.value==1 then
		return tostring(funcs.get.round_num(API.ent.get.speed(API.plyr.get.veh(API.plyr.my_id()))*3.6)).." KPH" 
	else
		local fps = API.ent.get.speed(API.plyr.get.veh(API.plyr.my_id()))*11811.02
		if g.tbl.plate_anim.spdo.dick_lngth.value == 0 then
			if fps*(12/5) > 999 then
				return tostring(funcs.get.round_num(fps*(12/5)/1000).."k DPH")
			end
			return tostring(funcs.get.round_num(fps*(12/5)).." DPH")
		elseif g.tbl.plate_anim.spdo.dick_lngth.value == 1 then
			if fps*(12/7) > 999 then
				return tostring(funcs.get.round_num(fps*(12/7)/1000).."k DPH")
			end
			return tostring(funcs.get.round_num(fps*(12/7)).." DPH")
		end
		if fps*(12/10) > 999 then
			return tostring(funcs.get.round_num(fps*(12/10)/1000).."k DPH")
		end
		return tostring(funcs.get.round_num(fps*(12/10)).." DPH")
	end
end

g.tbl.plate_anim.spdo.type=menu.add_feature("Speed metric", "autoaction_value_str", g._Disp_Cust_Plate_Speedo.id, function(f)
	g.tbl.plate_anim.spdo.dick_lngth.hidden=(f.value~=2)
end)
g.tbl.plate_anim.spdo.type:set_str_data({"MPH","KPH","Dicks per hour"})
funcs.add_to_S_L(g.tbl.plate_anim.spdo.type,"g.tbl.plate_anim.spdo.type")

g.tbl.plate_anim.spdo.dick_lngth=menu.add_feature("Dick length", "autoaction_value_str", g._Disp_Cust_Plate_Speedo.id)
g.tbl.plate_anim.spdo.dick_lngth:set_str_data({"Asian","Average","BBC"})
funcs.add_to_S_L(g.tbl.plate_anim.spdo.dick_lngth,"g.tbl.plate_anim.spdo.dick_lngth")

g.tbl.plate_anim.wp.select=menu.add_feature("Waypoint distance", "action_value_str", g.tbl.plate_anim.wp.prnt.id)
g.tbl.plate_anim.wp.select:set_str_data({"Not shown","Always","Blink"})
funcs.add_to_S_L(g.tbl.plate_anim.wp.select,"g.tbl.plate_anim.wp.select")

g.tbl.plate_anim.wp.dist_mtrc=menu.add_feature("Distance metric", "action_value_str", g.tbl.plate_anim.wp.prnt.id)
g.tbl.plate_anim.wp.dist_mtrc:set_str_data({"Meters/KM","Feet"})
funcs.add_to_S_L(g.tbl.plate_anim.wp.dist_mtrc,"g.tbl.plate_anim.wp.dist_mtrc")

g.tbl.plate_anim.wp.blnk_spd=menu.add_feature("Blink time (seconds)", "autoaction_value_f", g.tbl.plate_anim.wp.prnt.id, function()
	g.tbl.plate_anim.wp.blnk_new=true
end)
funcs.set_feat_i_f(g.tbl.plate_anim.wp.blnk_spd,.5,5,.25,1,"g.tbl.plate_anim.wp.blnk_spd")

g.tbl.plate_anim.wp.tog=menu.add_feature("Show waypoint distance HIDDEN", "toggle", g.tbl.plate_anim.wp.prnt.id, function(f)
	local wp_pos,blink_time,dist_time,wp
	local function wp_reset()
		g.tbl.plate_anim.wp.blink=false
		g.tbl.plate_anim.wp.const=false
	end
	while f.on do
		if g.tbl.plate_anim.wp.select.value ~= 0 and funcs.ME._in_veh() then
			wp_pos = funcs.get.WP_coords2("anywhere")
			if wp_pos then
				wp = ui.get_waypoint_coord()
				blink_time,dist_time = API.util.t_ms(),API.util.t_ms()
				while wp == ui.get_waypoint_coord() and f.on and g.tbl.plate_anim.wp.select.value ~= 0 do
					system.yield(50)
					if dist_time < API.util.t_ms() then
						g.tbl.plate_anim.wp.dist = funcs.get.dist_pospos_v3(API.plyr.get.coords(API.plyr.my_id()),wp_pos)
						if mth.flr(g.tbl.plate_anim.wp.blnk_spd.value*1000*.15)<100 then
							dist_time = API.util.t_ms()+100
						else
							dist_time = mth.flr(g.tbl.plate_anim.wp.blnk_spd.value*1000*.15)
						end
					end
					if g.tbl.plate_anim.wp.select.value == 1 then
						g.tbl.plate_anim.wp.const=true
						g.tbl.plate_anim.wp.blink=false
					else
						g.tbl.plate_anim.wp.const=false
						if blink_time < API.util.t_ms() then
							g.tbl.plate_anim.wp.blink=funcs.get.opp_bool(g.tbl.plate_anim.wp.blink)
							blink_time = API.util.t_ms()+g.tbl.plate_anim.wp.blnk_spd.value*1000
						end
					end
				end
			end
		end
		wp_reset()
		f.on=(g.tbl.plate_anim.wp.select.value ~= 0 and g.tbl.plate_anim.tog.on)
		system.yield(500)
	end
	wp_reset()
end)g.tbl.plate_anim.wp.tog.hidden=true

function g.tbl.plate_anim.str_scrl.write(_text)
	local file = io.open(g.tbl.plate_anim.directory.."String Scroll Animation.txt", "w")
	file:write(_text)
	file:close()
end

function g.tbl.plate_anim.str_scrl.check()
	funcs.doo.check_create_dir(g.paths._user)
	funcs.doo.check_create_dir(g.tbl.plate_anim.directory)
	if not utils.file_exists(g.tbl.plate_anim.directory.."String Scroll Animation.txt") then
		g.tbl.plate_anim.str_scrl.write("OMG GeeSkid is the best")
	end
	local file = io.open(g.tbl.plate_anim.directory.."String Scroll Animation.txt", "r")
	local text = nil
	for line in file:lines() do
		if line ~= nil and string.len(tostring(line)) > 0 then
			text = tostring(line)
			break
		end
	end
	file:close()
	if text == nil then
		g.tbl.plate_anim.str_scrl.write("OMG GeeSkid is the best")
	end
end
g.tbl.plate_anim.str_scrl.check()

function g.tbl.plate_anim.str_scrl.text()
	local file = io.open(g.tbl.plate_anim.directory.."String Scroll Animation.txt", "r")
	local text = nil
	for line in file:lines() do
		if line ~= nil and string.len(tostring(line)) > 0 then
			text = tostring(line)
			break
		end
	end
	file:close()
	return text
end

function g.tbl.plate_anim.str_scrl.get()
	local _table,_table2 = {},{}
	local function max_num(_max,_num)
		if _num > _max then
			return _num-_max
		end
		return _num
	end
	g.tbl.plate_anim.str_scrl.check()
	local text = g.tbl.plate_anim.str_scrl.text()
	for char in text:gmatch("([a-zA-Z0-9 ])") do
		_table[#_table + 1] = char
	end
	for i=1,g.tbl.plate_anim.str_scrl.space.value do
		_table[#_table+1]=" "
	end
	if #_table< 9 then
		local limit = 9-#_table
		for i=1,limit do
			_table[#_table+1]=" "
		end
	end
	for i=1,#_table do
		text=""
		for t=0,7 do
			if _table[max_num(#_table,i+t)] ~= nil then
				text=text.._table[max_num(#_table,i+t)]
			end
		end
		_table2[#_table2+1]=text
	end
	return _table2
end

g.tbl.plate_anim.str_scrl.spd = menu.add_feature("Scroll speed", "autoaction_value_f", g.tbl.plate_anim.str_scrl.optns.id, function()
	g.tbl.plate_anim.str_scrl.new_dly=true
end)
funcs.set_feat_i_f(g.tbl.plate_anim.str_scrl.spd,.01,1,.01,.2,"g.tbl.plate_anim.str_scrl.spd")

g.tbl.plate_anim.str_scrl.space=menu.add_feature("Extra spaces added at the end", "action_value_i", g.tbl.plate_anim.str_scrl.optns.id)
funcs.set_feat_i_f(g.tbl.plate_anim.str_scrl.space,0,8,1,4,"g.tbl.plate_anim.str_scrl.space")

g.tbl.plate_anim.str_scrl.update = menu.add_feature("Update text", "action_value_str", g.tbl.plate_anim.str_scrl.optns.id, function(f)
	g.tbl.plate_anim.str_scrl.check()
	local continue,text = true,""
	if f.value == 1 then
		text = g.tbl.plate_anim.str_scrl.text()
		if string.len(text) > 128 then
			continue=false
			g.N_P(2,"The string is too long to edit",__GV__,4,"Red")
		end
	end
	if continue then
		local status,str = 1,""
		status,str = funcs.get.text_input("Non alpha-numeric characters act as blank space",text,128,0)
		if status == 0 then
			g.tbl.plate_anim.str_scrl.write(str)
			g.tbl.plate_anim.str_scrl.new_txt=true
			g.tbl.plate_anim.str_scrl.updt_name()
		end
	end
end)
g.tbl.plate_anim.str_scrl.update:set_str_data({"Replace","Edit"})
funcs.add_to_S_L(g.tbl.plate_anim.str_scrl.update,"g.tbl.plate_anim.str_scrl.update")







g.tbl.veh_clone={}
function funcs.get.record_clone_veh(_veh)
	if funcs.is.veh(_veh) then
		g.tbl.veh_clone[_veh]={}
		g.tbl.veh_clone[_veh]["hash"]=API.ent.get.model_hash(_veh)
		g.tbl.veh_clone[_veh]["god"]=API.ent.get.god(_veh)
		g.tbl.veh_clone[_veh]["primary_color"]=API.veh.get.primary_color(_veh)
		g.tbl.veh_clone[_veh]["primary_colors"]={}
		g.tbl.veh_clone[_veh]["primary_colors"]["r"],
		g.tbl.veh_clone[_veh]["primary_colors"]["g"],
		g.tbl.veh_clone[_veh]["primary_colors"]["b"] = ntv.get.veh_primary_color_custom_rgb(_veh)
		g.tbl.veh_clone[_veh]["primary_color_custom"]= API.veh.is.primary_color_custom(_veh)
		g.tbl.veh_clone[_veh]["secondary_color"]=API.veh.get.secondary_color(_veh)
		g.tbl.veh_clone[_veh]["secondary_colors"]={}
		g.tbl.veh_clone[_veh]["secondary_colors"]["r"],
		g.tbl.veh_clone[_veh]["secondary_colors"]["g"],
		g.tbl.veh_clone[_veh]["secondary_colors"]["b"] = ntv.get.veh_secondary_color_custom_rgb(_veh)
		g.tbl.veh_clone[_veh]["secondary_color_custom"]= API.veh.is.secondary_color_custom(_veh)
		g.tbl.veh_clone[_veh]["pearl_color"]=API.veh.get.pearl_color(_veh)
		g.tbl.veh_clone[_veh]["pearl_color_custom"]=API.veh.get.pearl_color_custom(_veh)
		g.tbl.veh_clone[_veh]["tint"]=API.veh.get.tint(_veh) 
		g.tbl.veh_clone[_veh]["wheel_type"]=API.veh.get.wheel_type(_veh)
		g.tbl.veh_clone[_veh]["wheel_color"]=API.veh.get.wheel_color(_veh)
		g.tbl.veh_clone[_veh]["wheel_color_custom"]=API.veh.get.wheel_color_custom(_veh)
		g.tbl.veh_clone[_veh]["bulletproof"]=ntv.get.veh_tires_can_burst(_veh)
		g.tbl.veh_clone[_veh]["headlight_color"]=API.veh.get.headlight_color(_veh)
		g.tbl.veh_clone[_veh]["interior_color"]=ntv.get.veh_interior_color(_veh) --doesnt actually work
		g.tbl.veh_clone[_veh]["dashboard_color"]=ntv.get.veh_dashboard_color(_veh) --doesnt actually work
		g.tbl.veh_clone[_veh]["plate_i"]=API.veh.get.plate_i(_veh)
		g.tbl.veh_clone[_veh]["plate_t"]=ntv.get.veh_plate_text(_veh)
		g.tbl.veh_clone[_veh]["neon_bool"]={}
		g.tbl.veh_clone[_veh]["tog_mods"] = {}
		g.tbl.veh_clone[_veh]["set_mods"] = {}
		g.tbl.veh_clone[_veh]["extras"] = {}
		g.tbl.veh_clone[_veh]["tire_smoke"]={}
		g.tbl.veh_clone[_veh]["tire_smoke"]["r"],
		g.tbl.veh_clone[_veh]["tire_smoke"]["g"],
		g.tbl.veh_clone[_veh]["tire_smoke"]["b"] =	ntv.get.veh_smoke_color(_veh)
		g.tbl.veh_clone[_veh]["drift"] = API.veh.get.drift_tires(_veh)
		for i=-1,5 do
			g.tbl.veh_clone[_veh]["neon_bool"][i] = API.veh.is.neon_on(_veh, i,true)
		end
		for i=-1,5 do
			if g.tbl.veh_clone[_veh]["neon_bool"][i] then
				g.tbl.veh_clone[_veh]["neon_color"]=API.veh.get.neon_color(_veh)
				break
			end
		end
		for i = 0, 65 do
			if funcs.is.num(API.veh.get.mod(_veh, i)) then
				g.tbl.veh_clone[_veh]["set_mods"][i]=API.veh.get.mod(_veh, i)
				g.tbl.veh_clone[_veh]["tog_mods"][i] = API.veh.is.tog_on(_veh, i) --{17,18,19,21,18,20,22}
			else
				g.tbl.veh_clone[_veh]["set_mods"][i]=nil
				g.tbl.veh_clone[_veh]["tog_mods"][i]=nil
			end
			
		end
		for i = 1, 14 do
			if API.veh.is.extra(_veh, i) and API.veh.is.extra_on(_veh, i) then
				g.tbl.veh_clone[_veh]["extras"][i] = true
			else
				g.tbl.veh_clone[_veh]["extras"][i] = false
			end
		end
		if API.strm.is.valid_helo(API.ent.get.model_hash(_veh)) then --because helos lose their "extras" when damaged/destroyed
			g.tbl.veh_clone[_veh]["extras"][1] = true
			g.tbl.veh_clone[_veh]["extras"][2] = true
			g.tbl.veh_clone[_veh]["extras"][7] = true
		end
	end
	return g.tbl.veh_clone[_veh]
end

function funcs.doo.create_clone_veh(VEH,_pos,_heading,_keep,_ntwrk,_cllsn)
	if VEH ~= nil and VEH["hash"] ~= nil and API.strm.is.valid(VEH["hash"]) then
		local veh = funcs.doo.spawn_veh(_pos,VEH["hash"],false,_heading,_keep,_ntwrk,_cllsn)
		if funcs.is.veh(veh) then
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local _veh,__keep = veh,_keep
				funcs.doo.id_migrate(_veh,0)
				API.veh.set.kit_type(_veh, 0)
				API.ent.set.god(_veh,VEH["god"])
				API.veh.set.colors(_veh, VEH["primary_color"], VEH["secondary_color"])
				API.veh.set.extra_colors(_veh, VEH["pearl_color"], VEH["wheel_color"])
				if VEH["primary_color_custom"] then
					ntv.set.veh_primary_color_custom_rgb(_veh, VEH["primary_colors"]["r"],VEH["primary_colors"]["g"],VEH["primary_colors"]["b"])
				end
				if VEH["secondary_color_custom"] then
					ntv.set.veh_secondary_color_custom_rgb(_veh, VEH["secondary_colors"]["r"],VEH["secondary_colors"]["g"],VEH["secondary_colors"]["b"])
				end
				API.veh.set.pearl_color_custom(_veh, VEH["pearl_color_custom"])
				system.yield(0)
				if funcs.is.ent(_veh) then
					for i = 0, 65 do
						if VEH["set_mods"][i] and funcs.is.ent(_veh) then
							API.veh.set.mod(_veh, i, VEH["set_mods"][i],true) -- couldnt figure  out how to check for custom tires
							if i % 10 == 0 then
								system.yield(0)
							end
						end
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					for i = 0, 65 do
						if VEH["tog_mods"][i] and funcs.is.ent(_veh) then
							API.veh.set.tog_mod(_veh, i, true) --{17,18,19,21,18,20,22}
							if i % 10 == 0 then
								system.yield(0)
							end
						end
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					for i = 1, 14 do
						if VEH["extras"][i] and funcs.is.ent(_veh) then
							API.veh.set.extra(_veh, i, false) -- seems backwards but  false is on
							system.yield(0)
						end
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					API.veh.set.tint(_veh,VEH["tint"]) 
					ntv.set.veh_interior_color(_veh, VEH["interior_color"])
					ntv.set.veh_dashboard_color(_veh, VEH["dashboard_color"])
					API.veh.set.headlight_color(_veh,VEH["headlight_color"])
					API.veh.set.fullbeam(_veh, true)
					for i=-1,5 do
						if VEH["neon_bool"][i] then
							API.veh.set.neon_on(_veh, i, true)
							API.veh.set.neon_color(_veh, VEH["neon_color"]) --only needs to happen once but whatever
						end
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					API.veh.set.wheel_type(_veh, VEH["wheel_type"])
					-- for some reason the wheels set sometimes if you dont double tap them
					if API.veh.get.num_mods(_veh, 23) > 0 and VEH["set_mods"][23] then
						API.veh.set.mod(_veh, 23, VEH["set_mods"][23],true) 
					end
					if API.veh.get.num_mods(_veh, 24) > 0 and VEH["set_mods"][24] then
						API.veh.set.mod(_veh, 24, VEH["set_mods"][24],true)
					end
					if API.veh.get.class(_veh) ~= 8 and API.veh.get.num_mods(_veh, 62) > 0 and VEH["set_mods"][62] then
						API.veh.set.mod(_veh, 62, VEH["set_mods"][62],true)
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					API.veh.set.drift_tires(_veh,VEH["drift"])
					API.veh.set.tire_smoke_color(_veh,VEH["tire_smoke"]["r"],VEH["tire_smoke"]["g"],VEH["tire_smoke"]["b"])
					API.veh.set.tires_can_burst(_veh,VEH["bulletproof"])
					API.veh.set.plate_index(_veh,VEH["plate_i"])
					API.veh.set.plate_text(_veh,VEH["plate_t"])
					API.veh.set.wheel_color_custom(_veh, VEH["wheel_color_custom"])
					API.veh.set.fixed(_veh)
					ntv.set.veh_dirt_level(_veh,0.0)
					API.veh.set.engine_on(_veh, true, true, false)
					if not __keep then
						funcs.doo.id_migrate(_veh,1)
					end
				end
			end)
		end
		return veh
	end
end
g.var.spawn2t1_prev_veh=nil

g.prnt.spawn2t1_options=menu.add_feature("Spawn Options", "parent",g.prnt.spawn2t1.id)
g.prnt.spawn2t1_display=menu.add_feature("Display Options", "parent",g.prnt.spawn2t1.id)
g.prnt.spawn2t1_vehs=menu.add_feature("Saved Vehicles", "parent",g.prnt.spawn2t1.id)



g.feat.spawn2t1_x = menu.add_feature("Overlay X Pos", "action_slider", g.prnt.spawn2t1_display.id)
funcs.set_feat_i_f(g.feat.spawn2t1_x,0,300,1,150,"g.feat.spawn2t1_x")

g.feat.spawn2t1_y = menu.add_feature("Overlay Y Pos", "action_slider", g.prnt.spawn2t1_display.id)
funcs.set_feat_i_f(g.feat.spawn2t1_y,0,300,1,135,"g.feat.spawn2t1_y")

g.feat.spawn2t1_in_veh = menu.add_feature("Spawn in vehicle", "toggle", g.prnt.spawn2t1_options.id)
funcs.add_to_S_L(g.feat.spawn2t1_in_veh,"g.feat.spawn2t1_in_veh")

g.feat.spawn2t1_god = menu.add_feature("God-Mode", "toggle", g.prnt.spawn2t1_options.id)
funcs.add_to_S_L(g.feat.spawn2t1_god,"g.feat.spawn2t1_god")

g.feat.spawn2t1_invcn_wind = menu.add_feature("Invincible windows", "toggle", g.prnt.spawn2t1_options.id)
funcs.add_to_S_L(g.feat.spawn2t1_invcn_wind,"g.feat.spawn2t1_invcn_wind")

g.feat.spawn2t1_remove_old = menu.add_feature("Remove previous vehicle", "toggle", g.prnt.spawn2t1_options.id)
funcs.add_to_S_L(g.feat.spawn2t1_remove_old,"g.feat.spawn2t1_remove_old")

g.feat.spawn2t1_front=menu.add_feature("Spawn using heading of my: ", "action_value_str", g.prnt.spawn2t1_options.id)
g.feat.spawn2t1_front:set_str_data({"Cam","Ped"})
funcs.add_to_S_L(g.feat.spawn2t1_front,"g.feat.spawn2t1_front")

g.feat.spawn2t1_spd_tq=menu.add_feature("Vehicle max speed/torque %","action_value_i", g.prnt.spawn2t1_options.id)
funcs.set_feat_i_f(g.feat.spawn2t1_spd_tq,0,700,5,100,"g.feat.spawn2t1_spd_tq")	

function funcs.doo.spawn_2t1_veh_with_options(VEH,_pid)
	if VEH ~= nil and VEH["hash"] ~= nil and API.strm.is.valid(VEH["hash"]) then
		local pos,head
		if g.feat.spawn2t1_front.value == 0 and funcs.ME._id() == _pid then
			pos = funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),funcs.get.spawn_front_dist(funcs.ME._id(),_veh) + funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos()))+1
			head = API.cam.get.rot().z
		else
			pos = funcs.get.front_of_pos(funcs.get.pid_pos_z_guess(_pid), API.plyr.get.heading(_pid), funcs.get.spawn_front_dist(_pid,nil), 184, 1.5)
			head = API.plyr.get.heading(_pid)
		end
		funcs.doo.req_model(VEH["hash"])
		local veh = funcs.doo.saved_2t1_veh(VEH,pos,head,false,true,false,_pid)
	end


end


menu.add_player_feature("**Refresh list**", "action", g.o.prnt.spawn2t1.id, function(f)
	funcs.doo.generate_2t1_veh_feats()
end)

menu.add_feature("**Refresh list**", "action", g.prnt.spawn2t1_vehs.id, function(f)
	funcs.doo.generate_2t1_veh_feats()
end)

g.tbl.modded_vehs ={}
g.tbl.modded_vehs_hist ={}
g.tbl.modded_vehs_feats ={}
g.var.vehfeatint=1
function funcs.doo.generate_2t1_veh_feats(_bool) --bool just for yield when first loading script
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		funcs.doo.check_create_dir(g.paths._vehs)
		g.tbl._2t1_veh_files = utils.get_all_files_in_directory(g.paths._vehs,"ini")
		for k,v in pairs(g.tbl._2t1_veh_files)do
			if not g.tbl.modded_vehs[funcs.get.text_no_ext(v)] and funcs.is.good_veh_file_name(v) then
				g.var.veh_file=io.open(g.paths._vehs..v,"r")
				if g.var.veh_file then
					g.tbl.modded_vehs[funcs.get.text_no_ext(v)] = {}
					for i in g.var.veh_file:lines() do
						g.var.veh_file_temp_gsub={}
						i:gsub(string.format("([^%s]+)", "="), function(c) g.var.veh_file_temp_gsub[#g.var.veh_file_temp_gsub+1]=c end)
						if g.var.veh_file_temp_gsub[1] and g.var.veh_file_temp_gsub[2] then
							if g.var.veh_file_temp_gsub[1] == "plate" then
								g.tbl.modded_vehs[funcs.get.text_no_ext(v)][g.var.veh_file_temp_gsub[1]]=g.var.veh_file_temp_gsub[2]
							else
								g.tbl.modded_vehs[funcs.get.text_no_ext(v)][g.var.veh_file_temp_gsub[1]]=tonumber(g.var.veh_file_temp_gsub[2])
							end
						end
					end
					g.var.veh_file:close()
				end
			end
			if _bool then
				system.yield(0)
			end
		end
		g.tbl.modded_vehs_temp1 ={}
		for k,v in pairs(g.tbl.modded_vehs)do
			g.tbl.modded_vehs_temp1[#g.tbl.modded_vehs_temp1+1]=k
		end
		table.sort(g.tbl.modded_vehs_temp1, function(a, b) return a:lower() < b:lower() end)
		for i=1,#g.tbl.modded_vehs_temp1 do
			if not g.tbl.modded_vehs_hist[g.tbl.modded_vehs_temp1[i]] then
				g.tbl.modded_vehs_hist[g.tbl.modded_vehs_temp1[i]]=true
				g.tbl.modded_vehs_feats[g.tbl.modded_vehs_temp1[i]]=menu.add_feature(g.tbl.modded_vehs_temp1[i], "action_value_str", g.prnt.spawn2t1_vehs.id, function(f)
					
					--local VEH = g.tbl.modded_vehs[g.tbl.modded_vehs_temp1[i]]
					if f.value == 0 then
						funcs.doo.spawn_2t1_veh_with_options(g.tbl.modded_vehs[g.tbl.modded_vehs_temp1[i]],funcs.ME._id())
					elseif funcs.ME._in_veh() then
						local msg,keep = funcs.doo.resave_2t1_veh(g.tbl.modded_vehs[g.tbl.modded_vehs_temp1[i]],funcs.ME._veh())
						if msg then
							g.var.veh_file=io.open(g.paths._vehs..g.tbl.modded_vehs_temp1[i]..".ini","w")
							g.var.veh_file:write(msg)
							g.var.veh_file:close()
						else
							g.N_P(2,"Failed to retrieve vehicle info.",__GV__,4,"Red")
						end
					else
						g.N_P(2,"You are not in a vehicle.",__GV__,4,"Yellow")
					end
				end)
				g.tbl.modded_vehs_feats[g.tbl.modded_vehs_temp1[i]]:set_str_data({"Spawn","Overwrite"})
				
				
				menu.add_player_feature(g.tbl.modded_vehs_temp1[i], "action", g.o.prnt.spawn2t1.id, function(f,pid)
					local VEH = g.tbl.modded_vehs[g.tbl.modded_vehs_temp1[i]]
					funcs.doo.spawn_2t1_veh_with_options(VEH,pid)
				end)
				if _bool then
					system.yield(0)
				end
			g.var.vehfeatint=g.var.vehfeatint+1
			end
		end
	end)
end
funcs.doo.generate_2t1_veh_feats(true)


function funcs.doo.saved_2t1_veh(VEH,_pos,_heading,_keep,_ntwrk,_cllsn,_pid)
	if VEH ~= nil and VEH["hash"] ~= nil and API.strm.is.valid(VEH["hash"]) then
		local veh = funcs.doo.spawn_veh(_pos,VEH["hash"],false,_heading,_keep,_ntwrk,_cllsn)
		if funcs.is.veh(veh) then
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local _veh,__keep,__pid = veh,_keep,_pid
				funcs.doo.id_migrate(_veh,0)
				API.veh.set.kit_type(_veh, 0)
				if funcs.is.num(VEH["primaryIndex"]) and funcs.is.num(VEH["secondaryIndex"]) then
					API.veh.set.colors(_veh, VEH["primaryIndex"], VEH["secondaryIndex"])
				end
				if funcs.is.num(VEH["pearl"]) and funcs.is.num(VEH["wheel"]) then
					API.veh.set.extra_colors(_veh, VEH["pearl"], VEH["wheel"])
				end
				if VEH["isPrimaryColorCostum"] == 1 then
					ntv.set.veh_primary_color_custom_rgb(_veh, VEH["primary_r"],VEH["primary_g"],VEH["primary_b"])
				end
				if VEH["isSecondaryColorCostum"] == 1 then
					ntv.set.veh_secondary_color_custom_rgb(_veh, VEH["secondary_r"],VEH["secondary_g"],VEH["secondary_b"])
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					for i = 0, 65 do
						if funcs.is.num(VEH["mod"..i]) and funcs.is.ent(_veh) then
							API.veh.set.mod(_veh, i, VEH["mod"..i],true) -- couldnt figure  out how to check for custom tires
							if i % 10 == 0 then
								system.yield(0)
							end
						end
					end
					if VEH["xenon"] == 1 then
						API.veh.set.tog_mod(_veh, 22, true)
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					for i = 1, 14 do
						if VEH["extra"..i] and funcs.is.ent(_veh) then
							API.veh.set.extra(_veh, i, VEH["extra"..i]==0) -- seems backwards but  false is on
							system.yield(0)
						end
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					if funcs.is.num(VEH["windowTint"]) then
						API.veh.set.tint(_veh,VEH["windowTint"]) 
					end
					if funcs.is.num(VEH["headlightColor"]) then
						API.veh.set.headlight_color(_veh,VEH["headlightColor"])
					end
					API.veh.set.fullbeam(_veh, true)
					API.veh.set.neon_on(_veh, 0, VEH["neonLeft"] == 1)
					API.veh.set.neon_on(_veh, 1, VEH["neonRight"] == 1)
					API.veh.set.neon_on(_veh, 2, VEH["neonFront"] == 1)
					API.veh.set.neon_on(_veh, 3, VEH["neonBack"] == 1)
					if funcs.is.num(VEH["neon_r"]) and funcs.is.num(VEH["neon_g"]) and funcs.is.num(VEH["neon_b"]) then
						API.veh.set.neon_color(_veh, funcs.get.rgb_to_int(VEH["neon_r"],VEH["neon_g"],VEH["neon_b"]))
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					if funcs.is.num(VEH["wheelType"]) then
						API.veh.set.wheel_type(_veh, VEH["wheelType"])
					end
					-- for some reason the wheels set sometimes if you dont double tap them
					if API.veh.get.num_mods(_veh, 23) > 0 and VEH["mod23"] then
						API.veh.set.mod(_veh, 23, VEH["mod23"],true) 
					end
					if API.veh.get.num_mods(_veh, 24) > 0 and VEH["mod24"] then
						API.veh.set.mod(_veh, 24, VEH["mod24"],true)
					end
					if API.veh.get.class(_veh) ~= 8 and API.veh.get.num_mods(_veh, 62) > 0 and VEH["mod62"]then
						API.veh.set.mod(_veh, 62, VEH["mod62"],true)
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					API.veh.set.drift_tires(_veh,VEH["hasDriftTires"]==1)
					if funcs.is.num(VEH["tyressmoke_r"]) and funcs.is.num(VEH["tyressmoke_g"]) and funcs.is.num(VEH["tyressmoke_b"]) then
						API.veh.set.tire_smoke_color(_veh,VEH["tyressmoke_r"],VEH["tyressmoke_g"],VEH["tyressmoke_b"])
					end
					API.veh.set.tires_can_burst(_veh,VEH["bulletproof"]==1)
					if funcs.is.num(VEH["plateIndex"]) then
						API.veh.set.plate_index(_veh,VEH["plateIndex"])
					end
					if funcs.is.str(VEH["plate"]) then
						API.veh.set.plate_text(_veh,VEH["plate"])
					end
					API.veh.set.fixed(_veh)
					ntv.set.veh_dirt_level(_veh,0.0)
					API.veh.set.engine_on(_veh, true, true, false)
				end
				system.yield(0)
				if __pid == funcs.ME._id() and funcs.is.ent(_veh) then
					API.ent.set.god(_veh,g.feat.spawn2t1_god.on)
					ntv.set.veh_invncbl_wndws(_veh,g.feat.spawn2t1_invcn_wind.on)
					API.ent.set.max_speed(_veh, 45000)
					API.veh.set.top_speed(_veh, (g.feat.spawn2t1_spd_tq.value/100 - 1) * 100)
					if g.feat.spawn2t1_in_veh.on then
						API.Ped.set.into_veh(funcs.ME._ped(),_veh,-1)
					end
				end
				system.yield(0)
				if funcs.is.ent(_veh) then
					if __pid == funcs.ME._id() then
						local veh2 = g.var.spawn2t1_prev_veh
						if g.feat.spawn2t1_remove_old.on and funcs.is.veh(veh2) then
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local _veh2 = veh2
								for i=1,funcs.get.veh_seats(_veh2) do
									if funcs.is.ent(API.veh.get.ped_in_seat(_veh2,i-2)) then
										API.Ped.clear_tasks(API.veh.get.ped_in_seat(_veh2, i-2))
									end
								end
								system.yield(500)
								if funcs.ntwrk.ask_long(_veh2,3000) then
									API.ent.set.no_need(_veh2)
									API.ent.delete(_veh2)
								end
							end)
						end
						g.var.spawn2t1_prev_veh = _veh
					end
					if not __keep then
						funcs.doo.id_migrate(_veh,1)
					end
				end
			end)
		end
		return veh
	end
end

function funcs.doo.resave_2t1_veh(VEH,_veh)
	if VEH ~= nil and funcs.is.veh(_veh) then
		local t,keep={},{}
		local msg="[VEHICLE]"
		t["hash"]=funcs.get.Int32(API.ent.get.model_hash(_veh))
		t["plateIndex"]=API.veh.get.plate_i(_veh)
		t["spawnInVehicle"]=((g.feat.spawn2t1_in_veh.on and 1) or 0)
		t["plate"]=(ntv.get.veh_plate_text(_veh):lower()).." " --idk why tf the  menu adds a space here  but whatever
		t["bypass"]=((ntv.get.veh_mod_kit(_veh) == 65535 and 0) or 1)
		t["primaryIndex"]=API.veh.get.primary_color(_veh)
		t["primary_b"],
		t["primary_g"],
		t["primary_r"] = ntv.get.veh_primary_color_custom_rgb(_veh) --yes its bgr
		t["isPrimaryColorCostum"]= ((API.veh.is.primary_color_custom(_veh) and 1) or 0)
		t["secondaryIndex"]=API.veh.get.secondary_color(_veh)
		t["secondary_b"],
		t["secondary_g"],
		t["secondary_r"] = ntv.get.veh_secondary_color_custom_rgb(_veh) --yes its bgr
		t["isSecondaryColorCostum"]= ((API.veh.is.secondary_color_custom(_veh) and 1) or 0)
		t["pearl"]=API.veh.get.pearl_color(_veh)
		t["wheel"]=API.veh.get.wheel_color(_veh)
		t["wheel_b"],
		t["wheel_g"],
		t["wheel_r"] = funcs.get.rgba_from_int(API.veh.get.wheel_color_custom(_veh)) --yes its bgr
		t["xenon"] = ((API.veh.is.tog_on(_veh, 22) and 1) or 255)
		t["windowTint"]=API.veh.get.tint(_veh) 
		t["headlightColor"]=((API.veh.get.headlight_color(_veh) == -1 and 255) or API.veh.get.headlight_color(_veh))
		t["neonLeft"] = ((API.veh.is.neon_on(_veh, 0,true) and 1) or 0)
		t["neonRight"] = ((API.veh.is.neon_on(_veh, 1,true) and 1) or 0)
		t["neonFront"] = ((API.veh.is.neon_on(_veh, 2,true) and 1) or 0)
		t["neonBack"] = ((API.veh.is.neon_on(_veh, 3,true) and 1) or 0)
		t["neon_r"],
		t["neon_g"],
		t["neon_b"] = funcs.get.rgba_from_int(API.veh.get.neon_color(_veh))
		t["wheelType"] = ((t["bypass"]== 0 and 255) or API.veh.get.wheel_type(_veh))
		t["hasDriftTires"]=((API.veh.get.drift_tires(_veh) and 1) or 0)
		t["tyressmoke_r"],
		t["tyressmoke_g"],
		t["tyressmoke_b"] = ntv.get.veh_smoke_color(_veh)
		t["hasTireSmoke"] = ((API.veh.is.tog_on(_veh, 20) and 1) or 0)
		t["bulletproof"]=((ntv.get.veh_tires_can_burst(_veh) and 0) or 1)
		t["model_r"]=255 --no way to get this :(
		t["model_g"]=255
		t["model_b"]=255
		t["seat_r"]=8 --no way to get this :(
		t["seat_g"]=8
		t["seat_b"]=8
		for  k,v in pairs(t) do
			msg=msg.."\n"..k.."="..v
			keep[k]=v
		end
		t={}
		for i = 0, 48 do
			if i == 18 or i == 20 or i == 22 then
				t["mod"..i]=((API.veh.is.tog_on(_veh, i) and 1) or 0)
			elseif i == 17 or i == 19 or i == 21 then
				t["mod"..i]=((API.veh.is.tog_on(_veh, i) and 0) or -1)
			else
				t["mod"..i]=((funcs.is.num(API.veh.get.mod(_veh, i)) and API.veh.get.mod(_veh, i)) or -1)
			end
		end
		msg=msg.."\n".."[MODS]"
		for  k,v in pairs(t) do
			msg=msg.."\n"..k.."="..v
			keep[k]=v
		end
		t={}
		local found=false
		for i = 1, 12 do
			if API.veh.is.extra(_veh,i) then
				t["extra"..i]=((API.veh.is.extra_on(_veh,i) and 1) or 0)
			end
		end
		for  k,v in pairs(t) do
			found=true
			keep[k]=v
		end
		if found then
			msg=msg.."\n".."[EXTRAS]"
			for  k,v in pairs(t) do
				msg=msg.."\n"..k.."="..v
			end
		end
		for k,v in pairs(VEH) do
			if keep[k] then
				VEH[k]=keep[k]
			else
				k=nil
			end
		end
		return msg
	end
end

menu.add_feature("Open overlay selection window", "action", g.prnt.spawn2t1.id, function(f)
	f.hidden=true
	funcs.doo.saved_2t1_search("Saved 2T1 Vehicles")
	f.hidden=false
end)

function funcs.doo.saved_2t1_search_show(_table,_title,selection,start,x_val_box,y_val)
	ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.0175, 0, 0, 0, 155)
	funcs.doo.overlay(_title,75,150,75,255,.2,0,x_val_box,y_val)
	y_val=y_val+0.0171
	local count = 1
	local t={}
	for i=1, #_table do
		if i >= start and i <= start+6 then
			t[tostring(count)]=i
			ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.0175, 0, 0, 0, 155)
			if i == selection then
				ui.draw_rect(x_val_box, y_val+0.0072, 0.1,0.017, 155, 155, 155, 155)
			end
			funcs.doo.overlay_left("["..count.."] "..i.."  ".._table[i],255,255,255,255,.2,0,x_val_box-0.045,y_val)
			y_val=y_val+0.0171
			count=count+1
		end
	end
	return t
end

function funcs.doo.saved_2t1_search(_title)
	local y_val,x_val_box,selection,start
	local search,key_time=true,API.util.t_ms()
	local count=0
	local vehs2t1,t = {}
	for k,v in  pairs(g.tbl.modded_vehs) do
		count=count+1
		vehs2t1[#vehs2t1+1]=k
	end
	table.sort(vehs2t1, function(a, b) return a:lower() < b:lower() end)
	local function key_press(_key)
		if API.util.t_ms() > key_time and funcs.is.vk_key_down(_key) then
			key_time = API.util.t_ms() + 100
			return true
		end
		return false
	end
	if #vehs2t1 > 0 then
		selection,start = 1,1
		while search do
			system.yield(0)
			y_val = g.feat.spawn2t1_y.value/300
			x_val_box = g.feat.spawn2t1_x.value/300
			ntv.doo.hide_weapon_wheel_from_mouse()
			t=funcs.doo.saved_2t1_search_show(vehs2t1,_title,selection,start,x_val_box,y_val)
			if funcs.is.key_active(14,1) or API.cntrl.is.just_pressed(1, 187) or key_press("S") then
				if vehs2t1[selection+1] ~= nil then selection = selection+1
				else selection = 1
				end
			elseif funcs.is.key_active(15,1) or API.cntrl.is.just_pressed(1, 188) or key_press("W") then
				if vehs2t1[selection-1] ~= nil then selection = selection-1
				else selection = #vehs2t1
				end
			end
			for k,v in pairs(t) do
				if funcs.is.vk_key_down(k) and vehs2t1[v] ~= nil then
					funcs.doo.spawn_2t1_veh_with_options(g.tbl.modded_vehs[vehs2t1[v]],funcs.ME._id())
					search = false
					break
				end
			end
			if funcs.is.vk_key_down("RETURN") and vehs2t1[selection] ~= nil then
				funcs.doo.spawn_2t1_veh_with_options(g.tbl.modded_vehs[vehs2t1[selection]],funcs.ME._id())
				search = false
			elseif funcs.is.vk_key_down("ESCAPE") then
				search = false
			end
			if selection > start+6 then
				repeat
					start = start+1
				until selection <= start+6
			elseif selection < start then
				start =  selection
			end
		end
	end
end


---------------------------------------------------------------------------------------------------------------------------------------------------
g.tbl.punish_traffic={}

function g.tbl.punish_traffic.func2(veh,_cllsn)
	if not g.tbl.punish_traffic.veh_active[veh] then
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local _veh = veh
			g.tbl.punish_traffic.veh_active[_veh]=true
			if g.tbl.punish_traffic.should_punish(_veh,_cllsn) then 
				if g.tbl.punish_traffic.feat.value == 0 then--------------------------------------------TP
					if funcs.ntwrk.ask_long(_veh,250) then
						g.tbl.punish_traffic.veh_time[_veh][1] =API.util.t_ms()
					end
					API.ent.set.coords(_veh, funcs.get.random_pos("land"))
					API.ent.set.no_need(_veh)
					API.ent.delete(_veh)
				elseif g.tbl.punish_traffic.feat.value == 1 then----------------------------------------Damage
					if funcs.ntwrk.ask_long(_veh,250) then
						g.tbl.punish_traffic.veh_time[_veh][2] =API.util.t_ms() + mth.rndm(4500,5500)
					end
					API.ent.set.god(_veh, false)
					funcs.doo.veh_tire_pop_guts(_veh,true)
					API.veh.set.engine_health(_veh, -4000)
					API.veh.set.plate_index(_veh, 1)
					API.veh.set.plate_text(_veh,"G-Damage")
					API.ent.set.velocity(_veh,API.ent.get.velocity(_veh)*0.5)
					ntv.set.veh_invncbl_wndws(_veh,0)
					ntv.doo.brk_veh_wndws(_veh)
				elseif g.tbl.punish_traffic.feat.value == 2 then----------------------------------------Launch
					if funcs.ntwrk.ask_long(_veh,250) then
						g.tbl.punish_traffic.veh_time[_veh][3]=API.util.t_ms() + mth.rndm(500,1000)
					end
					API.ent.set.velocity(_veh,v3(mth.rndm(-g.tbl.punish_traffic.launch.value*2,g.tbl.punish_traffic.launch.value*2),mth.rndm(-g.tbl.punish_traffic.launch.value*2,g.tbl.punish_traffic.launch.value*2),g.tbl.punish_traffic.launch.value*20))	
				elseif g.tbl.punish_traffic.feat.value == 3 then
					if not ntv.is.veh_emp_disabled(_veh) and API.ent.get.speed(_veh) > 0.2 and funcs.ntwrk.ask_long(_veh,250) then -----EMP
						API.ent.set.god(_veh, false)
						API.veh.set.forward_speed(_veh,0)
						fire.add_explosion(API.ent.get.coords(_veh), 65, true, false, 0, funcs.get.non_plyr_ped(false))
						g.tbl.punish_traffic.veh_time[_veh][4]=API.util.t_ms() + mth.rndm(2500,3000)
					end
				else
					local ent_crds,move = API.ent.get.coords(_veh)
					if funcs.ME._in_veh() then	-----------------------------------------------------------------------------------------------Push away
						if ent_crds.z <= funcs.ME._veh_crds().z+0.5 and ent_crds.z >= funcs.ME._veh_crds().z-1.5 then
							ent_crds.z = funcs.ME._veh_crds().z+0.25
						end
						move = g.tbl.a_b.get_movement(ent_crds,funcs.ME._veh_crds(),(g.tbl.PID_INFO.plyr_speed_pos_mps[API.plyr.my_id()+1]+10)*.01)
					else
						if ent_crds.z <= funcs.ME._crds().z+0.5 and ent_crds.z >= funcs.ME._crds().z-1.5 then
							ent_crds.z = funcs.ME._crds().z+0.25
						end
						move = g.tbl.a_b.get_movement(ent_crds,funcs.ME._crds(),(g.tbl.PID_INFO.plyr_speed_pos_mps[API.plyr.my_id()+1]+10)*.01)*1.25
					end
					if funcs.ntwrk.ask_long(_veh,250) then
					--API.ent.force(_veh, 3, move.x*0.25,move.y*0.25,move.z*0.333, 0,0,0, false, true)
						API.ent.set.velocity(_veh,v3(move.x*(g.tbl.punish_traffic.push_h.value/5),move.y*(g.tbl.punish_traffic.push_h.value/5),move.z*(g.tbl.punish_traffic.push_v.value/5)))
						g.tbl.punish_traffic.veh_time[_veh][5]=API.util.t_ms()
					end
				end
			end
			g.tbl.punish_traffic.veh_active[_veh]=false
		end, nil)
	end
end

function g.tbl.punish_traffic.collision_thread()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local all_veh,veh
		while g.tbl.punish_traffic.feat.on do
			system.yield(0)
			if g.tbl.punish_traffic.when_to_punish() then
				if funcs.ME._in_veh() then
					if API.ent.is.collided(funcs.ME._veh()) then
						veh = API.ent.get.collided_with(funcs.ME._veh())
						if funcs.is.veh(veh) then
							g.tbl.punish_traffic.func2(veh,true)
						end
					end
				else
					all_veh=API.veh.get.all()
					for i=1,#all_veh do
						if (ntv.is.ents_touch(funcs.ME._ped(),all_veh[i]) or API.ent.get.collided_with(funcs.ME._ped())==all_veh[i]) then
							g.tbl.punish_traffic.func2(all_veh[i],true)
						end
					end
				end
			end
		end
	end, nil)
end

function g.tbl.punish_traffic.get_my_pos()
	if funcs.ME._in_veh() then
		return funcs.ME._veh_crds(),funcs.ME._veh_crds()+(API.ent.get.velocity(funcs.ME._veh())*0.2269)
	end
	return funcs.ME._crds(),funcs.ME._crds()+(API.ent.get.velocity(funcs.ME._ped())*0.2269)
end

function g.tbl.punish_traffic.should_punish(_veh,_cllsn)
	if g.tbl.punish_traffic.veh_time[_veh]==nil then
		g.tbl.punish_traffic.veh_time[_veh]={API.util.t_ms(),API.util.t_ms(),API.util.t_ms(),API.util.t_ms(),API.util.t_ms()}
	end
	if g.tbl.punish_traffic.veh_time[_veh][g.tbl.punish_traffic.feat.value+1] > API.util.t_ms() then
		return false
	elseif _veh == funcs.ME._veh() or _veh == API.plyr.pers_veh() or _veh == g.tbl.PID_INFO.veh[funcs.ME._id()+1] then
		return false
	elseif not g.tbl.punish_traffic.plyrs.on and (API.veh.get.been_owned(_veh) or g.tbl.punish_traffic.pid_net_hash[decorator.decor_get_int(_veh, "Player_Vehicle")]) then
		return false
	elseif _cllsn and g.tbl.punish_traffic.feat.value == 3 then
		return false
	end
	for pid=0,31 do
		if g.tbl.punish_traffic.frnd_net_hash[pid]==decorator.decor_get_int(_veh, "Player_Vehicle") or
		g.tbl.punish_traffic.mddr_net_hash[pid]==decorator.decor_get_int(_veh, "Player_Vehicle") or
		g.tbl.punish_traffic.org_net_hash[pid]==decorator.decor_get_int(_veh, "Player_Vehicle") then
			return false
		end
	end
	for seat = 1,funcs.get.veh_seats(_veh) do
		if funcs.is.ent(API.veh.get.ped_in_seat(_veh, seat-2)) and API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, seat-2)) then
			local plyr = API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, seat-2))
			if g.tbl.punish_traffic.frnd_net_hash[plyr]~=nil or
			g.tbl.punish_traffic.mddr_net_hash[plyr]~=nil or
			g.tbl.punish_traffic.org_net_hash[plyr]~=nil then
				return false
			end
		end
	end
	if _cllsn then
		return true
	end
	local my_pos,vel_pos = g.tbl.punish_traffic.get_my_pos()
	local check_pos = nil
	local bubble,safe = g.tbl.punish_traffic.bubl.value+g.tbl.punish_traffic.veh_dmnsns+g.tbl.punish_traffic.get_veh_size_ofst(_veh),g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns-g.tbl.punish_traffic.get_veh_size_ofst(_veh)
	local ent_pos = API.ent.get.coords(_veh)
	if g.tbl.punish_traffic.below.on or g.tbl.punish_traffic.above.on then
		if funcs.get.dist_pospos_v3(v2(my_pos.x,my_pos.y),v2(ent_pos.x,ent_pos.y)) <= bubble then
			check_pos = my_pos
		elseif funcs.get.dist_pospos_v3(v2(vel_pos.x,vel_pos.y),v2(ent_pos.x,ent_pos.y)) <= bubble then
			check_pos = vel_pos
		end
		if check_pos == nil then
			return false
		else
			if g.tbl.punish_traffic.below.on and g.tbl.punish_traffic.above.on then
				if g.tbl.punish_traffic.feat.value == 3 then
					return (funcs.get.dist_pospos_v3(check_pos,ent_pos) >= safe)
				end
				return true
			else
				local v3dist = funcs.get.dist_pospos_v3(check_pos,ent_pos)
				if g.tbl.punish_traffic.below.on then
					if g.tbl.punish_traffic.feat.value == 3 then
						if v3dist >= safe then
							return ((ent_pos.z <= check_pos.z) or (v3dist <= bubble))
						end
						return false
					else
						return ((ent_pos.z <= check_pos.z) or (v3dist <= bubble))
					end
				else
					if g.tbl.punish_traffic.feat.value == 3 then
						if v3dist >=safe then
							return ((ent_pos.z >= check_pos.z) or (v3dist <= bubble))
						end
						return false
					else
						return ((ent_pos.z >= check_pos.z) or (v3dist <= bubble))
					end
				end
			end
		end
	else
		if funcs.get.dist_pospos_v3(my_pos,ent_pos) <= bubble then
			check_pos = my_pos
		elseif funcs.get.dist_pospos_v3(vel_pos,ent_pos) then
			check_pos = vel_pos
		end
		if check_pos == nil then
			return false
		else
			local v3dist = funcs.get.dist_pospos_v3(check_pos,ent_pos)
			if g.tbl.punish_traffic.feat.value == 3 then
				if v3dist >= safe then
					return (v3dist <= bubble)
				end
				return false
			else
				return (v3dist <= bubble)
			end
		end
	end
end

function g.tbl.punish_traffic.when_to_punish()
	local foot_or_veh = g.tbl.punish_traffic.foot_or_veh.value
	if foot_or_veh == 0 then
		return true
	elseif foot_or_veh == 1 then
		return funcs.ME._in_veh()
	end
	return (not funcs.ME._in_veh())
end
	
function g.tbl.punish_traffic.record_exclusions_thread()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		while g.tbl.punish_traffic.feat.on do
			for pid=0,31 do
				if funcs.is.valid_pid(pid) then
					if not g.tbl.punish_traffic.frnds.on and API.plyr.is.friend(pid) then
						g.tbl.punish_traffic.frnd_net_hash[pid]=network.network_hash_from_player(pid)
					else
						g.tbl.punish_traffic.frnd_net_hash[pid]=nil
					end
					if not g.tbl.punish_traffic.mddrs.on and API.plyr.is.modder(pid,-1) then
						g.tbl.punish_traffic.mddr_net_hash[pid]=network.network_hash_from_player(pid)
					else
						g.tbl.punish_traffic.mddr_net_hash[pid]=nil
					end
					if not g.tbl.punish_traffic.orgmc.on and funcs.is.same_orgmc(pid,API.plyr.my_id()) then
						g.tbl.punish_traffic.org_net_hash[pid]=network.network_hash_from_player(pid)
					else
						g.tbl.punish_traffic.org_net_hash[pid]=nil
					end
				else
					g.tbl.punish_traffic.frnd_net_hash[pid]=nil
					g.tbl.punish_traffic.mddr_net_hash[pid]=nil
					g.tbl.punish_traffic.org_net_hash[pid]=nil
				end
			end
			system.yield(1000)
		end
	end, nil)
end

g.tbl.punish_traffic.feat=menu.add_feature("Punish vehicles nearby", "value_str", g.prnt.utils_trffc.id, function(f)
	if f.on then
		g.tbl.punish_traffic.frnd_net_hash={}
		g.tbl.punish_traffic.mddr_net_hash={}
		g.tbl.punish_traffic.org_net_hash={}
		g.tbl.punish_traffic.veh_dmnsns=0
		g.tbl.punish_traffic.veh_active={}
		g.tbl.punish_traffic.veh_time={}
		g.tbl.punish_traffic.pid_net_hash={}
		g.tbl.punish_traffic.record_exclusions_thread()
		g.tbl.punish_traffic.collision_thread()
		if not g.tbl.punish_traffic.cllsn.on then
			g.tbl.punish_traffic.start_debug(true,true)
		end
	end
	local time,all_veh = API.util.t_ms()
    while f.on do
		--g.tbl.punish_traffic.start_debug(true,false)
		system.yield(0)
		if not g.tbl.punish_traffic.cllsn.on and g.tbl.punish_traffic.when_to_punish() then
			g.tbl.punish_traffic.get_my_veh_size()
			all_veh = API.veh.get.all()
			for i=1,#all_veh do
				if g.tbl.punish_traffic.should_punish(all_veh[i],false) then
					g.tbl.punish_traffic.func2(all_veh[i])
				end
			end
		end
    end
end)
g.tbl.punish_traffic.feat:set_str_data({"TP away","Damage","Launch","EMP","Push away"})
funcs.add_to_S_L(g.tbl.punish_traffic.feat,"g.tbl.punish_traffic.feat")

g.tbl.punish_traffic.foot_or_veh=menu.add_feature("When to punish", "action_value_str", g.prnt.utils_trffc.id)
g.tbl.punish_traffic.foot_or_veh:set_str_data({"Both","In vehicle", "On foot"})
funcs.add_to_S_L(g.tbl.punish_traffic.foot_or_veh,"g.tbl.punish_traffic.foot_or_veh")

function g.tbl.punish_traffic.hide(_bool)
	g.tbl.punish_traffic.frnds.hidden=_bool
	g.tbl.punish_traffic.orgmc.hidden=_bool
	g.tbl.punish_traffic.mddrs.hidden=_bool 
end

g.tbl.punish_traffic.push_h=menu.add_feature("Push force horizontally", "action_value_i", g.prnt.utils_trffc.id)
funcs.set_feat_i_f(g.tbl.punish_traffic.push_h,1,10,1,5,"g.tbl.punish_traffic.push_h")

g.tbl.punish_traffic.push_v=menu.add_feature("Push force vertically", "action_value_i", g.prnt.utils_trffc.id)
funcs.set_feat_i_f(g.tbl.punish_traffic.push_v,1,10,1,7,"g.tbl.punish_traffic.push_v")

g.tbl.punish_traffic.launch=menu.add_feature("Launch force", "action_value_i", g.prnt.utils_trffc.id)
funcs.set_feat_i_f(g.tbl.punish_traffic.launch,1,10,1,5,"g.tbl.punish_traffic.launch")

g.tbl.punish_traffic.plyrs=menu.add_feature("Include player vehicles", "toggle", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.hide(not f.on)
end)
funcs.add_to_S_L(g.tbl.punish_traffic.plyrs,"g.tbl.punish_traffic.plyrs")

g.tbl.punish_traffic.frnds=menu.add_feature("Include friends", "toggle", g.prnt.utils_trffc.id)
funcs.add_to_S_L(g.tbl.punish_traffic.frnds,"g.tbl.punish_traffic.frnds")

g.tbl.punish_traffic.orgmc=menu.add_feature("Include my org/mc", "toggle", g.prnt.utils_trffc.id)
funcs.add_to_S_L(g.tbl.punish_traffic.orgmc,"g.tbl.punish_traffic.orgmc")

g.tbl.punish_traffic.mddrs=menu.add_feature("Include modders", "toggle", g.prnt.utils_trffc.id)
funcs.add_to_S_L(g.tbl.punish_traffic.mddrs,"g.tbl.punish_traffic.mddrs")

g.tbl.punish_traffic.cllsn=menu.add_feature("Only punish vehicles that touch me", "toggle", g.prnt.utils_trffc.id)
funcs.add_to_S_L(g.tbl.punish_traffic.cllsn,"g.tbl.punish_traffic.cllsn")

g.tbl.punish_traffic.below=menu.add_feature("Include vehicles below my bubble", "toggle", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.start_debug(true,false)
end)
funcs.add_to_S_L(g.tbl.punish_traffic.below,"g.tbl.punish_traffic.below")

g.tbl.punish_traffic.above=menu.add_feature("Include vehicles above my bubble", "toggle", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.start_debug(true,false)
end)
funcs.add_to_S_L(g.tbl.punish_traffic.above,"g.tbl.punish_traffic.above")

g.tbl.punish_traffic.show_bubl=false
g.tbl.punish_traffic.bubl=menu.add_feature("Bubble size", "autoaction_value_i", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.start_debug(true,false)
end)
funcs.set_feat_i_f(g.tbl.punish_traffic.bubl,5,1000,5,15,"g.tbl.punish_traffic.bubl")

g.tbl.punish_traffic.show_safe=false
g.tbl.punish_traffic.safe=menu.add_feature("Safe zone for EMP", "autoaction_value_i", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.start_debug(false,true)
end)
funcs.set_feat_i_f(g.tbl.punish_traffic.safe,5,25,1,7,"g.tbl.punish_traffic.safe")

g.tbl.punish_traffic.veh_size=menu.add_feature("Increase bubble size in vehicle", "value_i", g.prnt.utils_trffc.id,function(f)
	g.tbl.punish_traffic.start_debug(true,true)
end)
funcs.set_feat_i_f(g.tbl.punish_traffic.veh_size,1,10,1,2,"g.tbl.punish_traffic.veh_size")

g.tbl.punish_traffic.veh_size_hist={}
function g.tbl.punish_traffic.get_my_veh_size()
	if g.tbl.punish_traffic.veh_size.on and funcs.ME._in_veh() then
		if g.tbl.punish_traffic.veh_size_hist[API.ent.get.model_hash(funcs.ME._veh())] == nil then
			local _min,_max = API.ent.get.dimensions(funcs.ME._veh())
			if _min ~= nil and _max ~= nil then
				g.tbl.punish_traffic.veh_size_hist[API.ent.get.model_hash(funcs.ME._veh())]=_max.y+mth.abs(_min.y)
				g.tbl.punish_traffic.veh_dmnsns = (_max.y+mth.abs(_min.y)+1)/6.9+((_max.y+mth.abs(_min.y)+1)*g.tbl.punish_traffic.veh_size.value/10)
			end
		else
			g.tbl.punish_traffic.veh_dmnsns = (g.tbl.punish_traffic.veh_size_hist[API.ent.get.model_hash(funcs.ME._veh())]+1)/6.9+((g.tbl.punish_traffic.veh_size_hist[API.ent.get.model_hash(funcs.ME._veh())]+1)*g.tbl.punish_traffic.veh_size.value/10)
		end
	else
		g.tbl.punish_traffic.veh_dmnsns=0
	end
end

g.tbl.punish_traffic.veh_size_ofst={}
function g.tbl.punish_traffic.get_veh_size_ofst(_veh)
	if g.tbl.punish_traffic.veh_size_ofst[API.ent.get.model_hash(_veh)] == nil then
		local _min,_max = API.ent.get.dimensions(_veh)
		if _min ~= nil and _max ~= nil then
			g.tbl.punish_traffic.veh_size_ofst[API.ent.get.model_hash(_veh)]=(_max.y+mth.abs(_min.y))/3
			return g.tbl.punish_traffic.veh_size_ofst[API.ent.get.model_hash(_veh)]
		end
		return 1
	end
	return g.tbl.punish_traffic.veh_size_ofst[API.ent.get.model_hash(_veh)]
end

function g.tbl.punish_traffic.start_debug(_bubl,_safe)
	g.tbl.punish_traffic.show_debug.on=true
	g.tbl.punish_traffic.show_bubl=_bubl
	g.tbl.punish_traffic.show_safe=_safe
end

g.tbl.punish_traffic.show_debug=menu.add_feature("Show  debugs HIDDEN", "toggle", g.prnt.utils_trffc.id,function(f)
	local time,red_time,green_time,my_pos,vel_pos,red_size = API.util.t_ms() + 5000,API.util.t_ms(),API.util.t_ms()
	while time > API.util.t_ms() do
		system.yield(5)
		g.tbl.punish_traffic.get_my_veh_size()
		my_pos,vel_pos = g.tbl.punish_traffic.get_my_pos()
		if g.tbl.punish_traffic.show_bubl then
			red_time = API.util.t_ms()+5000
			time = API.util.t_ms() + 5000
			g.tbl.punish_traffic.show_bubl=false
		end
		if g.tbl.punish_traffic.show_safe then
			green_time = API.util.t_ms()+5000
			time = API.util.t_ms() + 5000
			g.tbl.punish_traffic.show_safe=false
		end
		if red_time > API.util.t_ms() then 
			red_size = v3(
			g.tbl.punish_traffic.bubl.value+g.tbl.punish_traffic.veh_dmnsns,
			g.tbl.punish_traffic.bubl.value+g.tbl.punish_traffic.veh_dmnsns,
			g.tbl.punish_traffic.bubl.value+g.tbl.punish_traffic.veh_dmnsns)
			if g.tbl.punish_traffic.below.on then
				graphics.draw_marker(1, v3(my_pos.x,my_pos.y,my_pos.z-(0.01169*g.tbl.punish_traffic.bubl.value)), v3(0, -180, 0), v3(0, -180, 0),red_size*1.97099+v3(0,0,red_size.z*10),255,0, 0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeVerticalCylinder", false)
				graphics.draw_marker(1, v3(vel_pos.x,vel_pos.y,vel_pos.z-(0.01169*g.tbl.punish_traffic.bubl.value)), v3(0, -180, 0), v3(0, -180, 0),red_size*1.97099+v3(0,0,red_size.z*10),255,0, 0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeVerticalCylinder", false)
			end
			if g.tbl.punish_traffic.above.on then
				graphics.draw_marker(1, v3(my_pos.x,my_pos.y,my_pos.z+(0.01169*g.tbl.punish_traffic.bubl.value)), v3(0, 0, 0), v3(0, 0, 0),red_size*1.97099+v3(0,0,red_size.z*10),255,0,0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeVerticalCylinder", false)
				graphics.draw_marker(1, v3(vel_pos.x,vel_pos.y,vel_pos.z+(0.01169*g.tbl.punish_traffic.bubl.value)), v3(0, 0, 0), v3(0, 0, 0),red_size*1.97099+v3(0,0,red_size.z*10),255,0,0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeVerticalCylinder", false)
			end
			if not g.tbl.punish_traffic.below.on or not g.tbl.punish_traffic.above.on then
				graphics.draw_marker(28, my_pos, v3(0, 90, 0), v3(0, 90, 0),red_size,255, 0, 0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
				graphics.draw_marker(28, vel_pos, v3(0, 90, 0), v3(0, 90, 0),red_size,255, 0, 0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
			end
		end
		if green_time > API.util.t_ms() then 
			graphics.draw_marker(28, my_pos, v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns, g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns, g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns), 0, 255, 0, mth.flr((green_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
			graphics.draw_marker(28, vel_pos, v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns, g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns, g.tbl.punish_traffic.safe.value+g.tbl.punish_traffic.veh_dmnsns), 0, 255, 0, mth.flr((green_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
		end
	end
	f.on=false
end)
g.tbl.punish_traffic.show_debug.hidden=true
g.tbl.punish_traffic.hide(true)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp = {}
g.tbl.veh_esp.loaded=false
g.tbl.veh_esp.loadedtime=API.util.t_ms()
g.tbl.veh_esp.png_true = {}
g.tbl.veh_esp.png_int = {}
g.tbl.veh_esp.png_rot_true = {}
g.tbl.veh_esp.veh_table = {}

g.tbl.veh_esp.file_paths = {
"\\scripts\\GeeSkid_v2\\Images\\Vehicle ESP\\veh_rotate",
"\\scripts\\GeeSkid_v2\\Images\\Vehicle ESP\\veh_rotate\\generic",
"\\scripts\\GeeSkid_v2\\Images\\Vehicle ESP\\veh_no_rotate",
"\\scripts\\GeeSkid_v2\\Images\\Vehicle ESP\\veh_no_rotate\\generic"
}

--function g.tbl.veh_esp.register()
g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	local esptime=API.util.t_ms()
	local break_time=API.util.t_ms()
	local sprite_files, _start,_end,hash_string,sprite = {}
	for p=1,4 do
		sprite_files = utils.get_all_files_in_directory(g.paths._2t1..g.tbl.veh_esp.file_paths[p],"png")
		for i=1,#sprite_files do
			sprite = scriptdraw.register_sprite(g.paths._2t1..g.tbl.veh_esp.file_paths[p].."\\"..sprite_files[i])
			if sprite ~= nil then
				_start,_end = string.find(sprite_files[i], "png")
				hash_string = string.sub(sprite_files[i],1,_end-4)
				if p == 1 then
					g.tbl.veh_esp.png_true[API.get_hash_key(hash_string)] = true
					g.tbl.veh_esp.png_int[API.get_hash_key(hash_string)] = sprite
					g.tbl.veh_esp.png_rot_true[API.get_hash_key(hash_string)] = true
				elseif p == 2 then
					g.tbl.veh_esp.png_true[hash_string] = true
					g.tbl.veh_esp.png_int[hash_string] = sprite
					g.tbl.veh_esp.png_rot_true[hash_string] = true
				elseif p == 3 then
					g.tbl.veh_esp.png_true[API.get_hash_key(hash_string)] = true
					g.tbl.veh_esp.png_int[API.get_hash_key(hash_string)] = sprite
					g.tbl.veh_esp.png_rot_true[API.get_hash_key(hash_string)] = false
				else
					g.tbl.veh_esp.png_true[hash_string] = true
					g.tbl.veh_esp.png_int[hash_string] = sprite
					g.tbl.veh_esp.png_rot_true[hash_string] = false
				end
			end
			if API.util.t_ms() > break_time then
				system.yield(0)
				break_time=API.util.t_ms()+16
			end
		end	
	end
	g.tbl.veh_esp.loaded=true
end)
--g.tbl.veh_esp.register()

function g.tbl.veh_esp.line_color_get(is_me,frnd,dist)
	if is_me then
		return g.tbl.veh_esp.line_self_r.value,g.tbl.veh_esp.line_self_g.value,g.tbl.veh_esp.line_self_b.value,g.tbl.veh_esp.line_self_a.value
	elseif frnd then
		return g.tbl.veh_esp.line_frnd_r.value,g.tbl.veh_esp.line_frnd_g.value,g.tbl.veh_esp.line_frnd_b.value,g.tbl.veh_esp.line_frnd_a.value
	elseif dist < g.tbl.veh_esp.line_near_dist.value then
		return g.tbl.veh_esp.line_near_r.value,g.tbl.veh_esp.line_near_g.value,g.tbl.veh_esp.line_near_b.value,g.tbl.veh_esp.line_near_a.value
	end
	return g.tbl.veh_esp.line_far_r.value,g.tbl.veh_esp.line_far_g.value,g.tbl.veh_esp.line_far_b.value,g.tbl.veh_esp.line_far_a.value
end



g.tbl.veh_esp.feat=menu.add_feature("Vehicle ESP 2.0", "toggle", g.prnt.utils_info_esp.id, function(f)
	funcs.doo.yield_while_true((not g.var.GS_has_loaded or not g.tbl.veh_esp.loaded),2000)
	local dist,spin_z,bool,screen_x,screen_y,screen_pos,size,blip,_r,_g,_b,all_veh,veh,name,rot,name_pos_y,name_pos_y_G,name_pos_y_temp,text_size,text_x,text_y,text_x_offst,text_y_offst,_flags,show_name,show_veh,show_health,show_pssngr,show_dist,my_bool,_my_screen_pos,my_screen_x,my_screen_y = 0,0
	local do_g_blink_now,blink_time,all_veh_time,veh_name,plyr_name,pssngr_count,show_p,tr,tg,tb,lr,lg,lb,la,show_g,do_g_blink = false,API.util.t_ms()+669,API.util.t_ms()-2000
	local vehT
	local function show_line()
		if g.tbl.veh_esp.line_show_for.value == 2 then
			return true
		elseif g.tbl.veh_esp.line_show_for.value == 1 then
			return (g.tbl.veh_esp.veh_table[veh].PID_CNT==0)
		end
		return (g.tbl.veh_esp.veh_table[veh].PID_CNT>0)
	end
	local function x_pos_do(_pos)
		if g.tbl.veh_esp.text_jstfctn.value == 1 then
			_flags=_flags+(1<<0)
			return _pos*(2/3)
		elseif g.tbl.veh_esp.text_jstfctn.value == 2 then
			_flags=_flags+(1<<4)
		end
		return _pos
	end
	local function get_text_sort(_valt,_vals)
		if g.tbl.veh_esp.text_from_top.value == 0 then
			return _valt,_vals
		elseif g.tbl.veh_esp.text_from_top.value ==1 then
			local _table = {show_name,show_veh,show_pssngr,show_dist}
			local count = 0
			for i=1, #_table do
				if _table[i] then
					count=count+1
				end
			end
			return _valt,(_vals+(_valt *count*.5))
		else
			return _valt*-1,_vals
		end
	end
	local script_size = funcs.get.SD_size(f.on)
	if  f.on then
		funcs.doo.veh_esp_info_thread()
	end
	while f.on do
		
		system.yield(5)
		if all_veh_time+500 < API.util.t_ms() then
			all_veh_time = API.util.t_ms()
			all_veh=API.veh.get.all()
		end
		if blink_time < API.util.t_ms() then
			do_g_blink_now=funcs.get.opp_bool(do_g_blink_now)
			if do_g_blink_now then blink_time = API.util.t_ms()+250 else blink_time = API.util.t_ms()+750 end
		end
		if spin_z >= 360 then spin_z = 0 else spin_z = spin_z + 1.875 end
		for i=1,#all_veh do
			veh = all_veh[i]
			vehT = g.tbl.veh_esp.veh_table[veh]
			if vehT ~= nil and vehT.SHOW and API.ent.is.ent(veh) then
				screen_pos = funcs.get.screen_pos_3d(API.ent.get.coords(veh))
				if screen_pos then
					if vehT.SPIN then
						rot = funcs.get.sprt_rot_calc(spin_z)
					elseif vehT.ROT then
						rot = funcs.get.sprt_rot_calc(API.ent.get.rotation(veh).z-funcs.get.vctr_to_pos_z(v3(0,100000,0),veh).z+(API.cam.get.rot().z*-1))
					else
						rot = 0
					end
					show_g,do_g_blink=false,false
					if g.tbl.veh_esp.show_veh_god.on and vehT.GOD then
						if g.tbl.veh_esp.show_veh_god.value == 2 then show_g = true do_g_blink = true elseif  g.tbl.veh_esp.show_veh_god.value == 0 then show_g = true else do_g_blink = true end
					end
					show_p = false
					dist = vehT.DISTC
					if do_g_blink and do_g_blink_now then
						_r,_g,_b = 255,0,0
					else
						_r,_g,_b = vehT.R,vehT.G,vehT.B
					end
					tr,tg,tb = g.tbl.veh_esp.text_r.value,g.tbl.veh_esp.text_g.value,g.tbl.veh_esp.text_b.value
					size = (((g.tbl.veh_esp.dist.max-dist)/g.tbl.veh_esp.dist.max*3)+1.25)*.3*g.tbl.veh_esp.blip_size.value*g.RES
					for i=1, mth.flr(dist/(g.tbl.veh_esp.dist.max*0.0125)) do
						if i > g.tbl.veh_esp.blip_size_dist.value then break else size=size*.95	end
					end
					name_pos_y = (0.01169*size*g.tbl.veh_esp.text_size.value*g.tbl.veh_esp.text_space.value)*1.05*(2160/API.gfx.get_h())
					
					name_pos_y_G = (0.01169*size*g.tbl.veh_esp.text_size.value*g.tbl.veh_esp.text_space.value)*1.05*1.5
					show_name = (g.tbl.veh_esp.show_plyr_name.on and dist < g.tbl.veh_esp.show_plyr_name.value)
					show_veh = (g.tbl.veh_esp.show_veh_name.on and dist < g.tbl.veh_esp.show_veh_name.value)
					show_health = (g.tbl.veh_esp.show_veh_health.on and dist < g.tbl.veh_esp.show_veh_health.value)
					show_pssngr = (g.tbl.veh_esp.show_veh_pssngr.on and dist < g.tbl.veh_esp.show_veh_pssngr.value)
					show_dist = (g.tbl.veh_esp.show_veh_dist.on and dist < g.tbl.veh_esp.show_veh_dist.value)
					name_pos_y,text_y = get_text_sort(name_pos_y,screen_pos.y)
					text_size = .1*(size*1.1)*g.tbl.veh_esp.text_size.value
					name_pos_y_temp=name_pos_y
					if g.tbl.veh_esp.line_feat.on and show_line() then
						_my_screen_pos = funcs.get.screen_pos_3d(API.plyr.get.coords(API.plyr.my_id()))
						lr,lg,lb,la = g.tbl.veh_esp.line_color_get(vehT.ME,vehT.FRND,dist)
						if g.tbl.veh_esp.line_feat.value == 0 and _my_screen_pos then
							API.SD.draw_line(_my_screen_pos,screen_pos, mth.flr(size), funcs.get.rgb_to_int(lr,lg,lb,la))
						elseif g.tbl.veh_esp.line_feat.value == 1 then
							ui.draw_line(API.plyr.get.coords(API.plyr.my_id()), API.ent.get.coords(veh), lr,lg,lb,la)
						end
					end
					if text_size < 0.09 then text_size = 0.09 end
					text_size=text_size*script_size
					_flags=(1<<1)--shadow
					text_x = x_pos_do(screen_pos.x)
					text_x_offst = g.tbl.veh_esp.text_x.value*.01
					text_y_offst = g.tbl.veh_esp.text_y.value*.01
					if show_name then
						if g.tbl.veh_esp.show_veh_prsnl.on and vehT.PERS ~= nil and (vehT.PERS_DRVR or vehT.PID_CNT==0) then
							plyr_name = "*P* "
							show_p=true
						else
							plyr_name = ""
						end
						plyr_name = plyr_name..vehT.NAME
						API.SD.draw_text(plyr_name,v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						name_pos_y_temp = name_pos_y_temp + (name_pos_y)
					end
					if show_veh then
						if not show_p and g.tbl.veh_esp.show_veh_prsnl.on and (vehT.PERS ~= nil) then
							veh_name = "*P* "
						else
							veh_name = ""
						end
						veh_name = veh_name..funcs.get.veh_model_name(veh)
						API.SD.draw_text(veh_name,v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						name_pos_y_temp = name_pos_y_temp + (name_pos_y)
					end
					if show_health then
						if g.tbl.veh_esp.show_veh_health_type.value == 0 then
							API.SD.draw_text("Engine: "..funcs.get._1_dec(ntv.get.veh_engine_health(veh,true)).."%",v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						elseif g.tbl.veh_esp.show_veh_health_type.value == 1 then
							API.SD.draw_text("Body: "..funcs.get._1_dec(ntv.get.veh_body_health(veh,true)).."%",v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						else
							API.SD.draw_text("Health: "..funcs.get._1_dec(funcs.get.veh_cmbnd_health_prcnt(veh,true)).."%",v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						end
						name_pos_y_temp = name_pos_y_temp + (name_pos_y)
					end
					if show_pssngr then
						if vehT.PID_CNT == 0 and vehT.NPC_CNT == 0 then
							pssngr_count="<Empty>"
						elseif vehT.PID_CNT == 1 then
							pssngr_count="<1 player>"
						elseif vehT.PID_CNT > 1 then
							pssngr_count="<"..vehT.PID_CNT.." players>"
						elseif vehT.NPC_CNT == 1 then
							pssngr_count="<1 ped>"
						else
							pssngr_count="<"..vehT.NPC_CNT.." peds>"
						end
						API.SD.draw_text(pssngr_count,v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
						name_pos_y_temp = name_pos_y_temp + (name_pos_y)
					end
					if show_dist then
						API.SD.draw_text(funcs.get.dist_to_str(vehT.DISTM,g.tbl.dist_type_str[g.tbl.veh_esp.dist_type.value]),v2(text_x+text_x_offst,text_y-name_pos_y_temp+text_y_offst),v2(text_x,screen_pos.y),text_size*6,funcs.get.rgb_to_int(tr,tg,tb,mth.flr(255*g.tbl.veh_esp.text_vis.value)),_flags,nil)
					end
					API.SD.draw_sprt(vehT.BLIP,screen_pos,size,rot,funcs.get.rgb_to_int(_r,_g,_b,mth.flr(255*g.tbl.veh_esp.vis.value)))
					if show_g then
						API.SD.draw_text("G",v2(screen_pos.x*(2/3)+(g.tbl.veh_esp.god_x.value*0.01),screen_pos.y*2+(name_pos_y_G)+(g.tbl.veh_esp.god_y.value*0.01)),v2(screen_pos.x*(2/3),screen_pos.y*2),size,funcs.get.rgb_to_int(255,0,0,mth.flr(255*g.tbl.veh_esp.text_vis.value)),((1<<0)+(1<<2)+(1<<1)),nil)
					end
					
					
				end
			end
		end
	end
end)
funcs.add_to_S_L(g.tbl.veh_esp.feat,"g.tbl.veh_esp.feat")
g.tbl.veh_esp.feat.on=true

function g.tbl.veh_esp.get_veh_info(_veh,_veh_is_pid,_hash_is_name)
	local pid_once=false
	local pids,npcs,rgbs,name,frnd={},{},{R=255,G=255,B=255},"",false
	for s = 1, funcs.get.veh_seats(_veh) do
		if API.ent.is.ped(API.veh.get.ped_in_seat(_veh, s-2)) then
			if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, s-2)) then
				if not pid_once then
					pid_once=API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, s-2))
					local color = g.tbl.PID_INFO.color[pid_once+1]+2
					rgbs.R,rgbs.G,rgbs.B =g.tbl.PID_OSD.team_rgb[color][1],g.tbl.PID_OSD.team_rgb[color][2],g.tbl.PID_OSD.team_rgb[color][3]
					name=funcs.get.pid_name(pid_once)
					frnd=API.plyr.is.friend(pid_once)
				end
				pids[#pids+1]=API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, s-2))
			else
				npcs[#npcs+1]=API.veh.get.ped_in_seat(_veh, s-2)
			end
		end
	end
	
	if not pid_once and _veh_is_pid[_veh]~=nil then
		local color = g.tbl.PID_INFO.color[_veh_is_pid[_veh]+1]+2
		rgbs.R,rgbs.G,rgbs.B =g.tbl.PID_OSD.team_rgb[color][1],g.tbl.PID_OSD.team_rgb[color][2],g.tbl.PID_OSD.team_rgb[color][3]
		name=funcs.get.pid_name(_veh_is_pid[_veh])
	end
	if name == "" and #npcs > 0 then
		name="NPC"
	end
	local class = API.veh.get.class_name(_veh)
	local hash = API.ent.get.model_hash(_veh)
	local pers_name=_hash_is_name[decorator.decor_get_int(_veh, "Player_Vehicle")]
	local pers_driver = (pers_name==name)
	local spcfc = g.tbl.veh_esp.png_true[hash]
	local gnrc = g.tbl.veh_esp.png_true[class]
	local weap = ntv.is.veh_have_weap(_veh)
	local been_owned = API.veh.get.been_owned(_veh)
	return pids,npcs,rgbs,name,frnd,class,hash,pers_name,pers_driver,spcfc,gnrc,weap,been_owned
end

function funcs.doo.veh_esp_info_thread()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local all_veh,veh
		local pids,npcs,rgbs,name,frnd,class,hash,pers_name,pers_driver,spcfc,gnrc,weap,blip,rot,spin,show,been_owned
		local my_veh,my_pos,distm,distc
		local veh_is_pid,hash_is_name={},{}
		local Buzzard = API.get_hash_key("buzzard")
		local function show_non_plyr()
			if g.tbl.veh_esp.show_veh_non_plyr.on then
				if g.tbl.veh_esp.show_veh_non_plyr.value == 1 then
					return weap
				end
				return true
			end
			return false
		end
		while  g.tbl.veh_esp.feat.on do
			all_veh=API.veh.get.all()
			if funcs.ME._in_veh() then
				my_veh=funcs.ME._veh()
			else
				my_veh=nil
			end
			veh_is_pid,hash_is_name={},{}
			for i=0,31 do
				if API.plyr.is.valid(i) then
					veh_is_pid[g.tbl.PID_INFO.veh[i+1]]=i
					hash_is_name[network.network_hash_from_player(i)]=funcs.get.pid_name(i)
				end
			end
			for i=1,#all_veh do
				veh = all_veh[i]
				if not g.tbl.veh_esp.feat.on then
					break
				else
					show=false
					if API.ent.is.veh(veh) and not API.ent.is.dead(veh) and (g.tbl.veh_esp.show_veh_crrnt.on or veh~=my_veh) then
						distm=funcs.get.dist_me_ent_3d(veh)
						distc=g.tbl.veh_esp.math[g.tbl.veh_esp.dist_type.value+1]
						if distm*distc <= g.tbl.veh_esp.dist.value then 
							pids,npcs,rgbs,name,frnd,class,hash,pers_name,pers_driver,spcfc,gnrc,weap,been_owned = g.tbl.veh_esp.get_veh_info(veh,veh_is_pid,hash_is_name)
							if spcfc then
								if been_owned or show_non_plyr() then 
									show=true
									blip = g.tbl.veh_esp.png_int[hash]
									rot = g.tbl.veh_esp.png_rot_true[hash]
									spin = (hash == Buzzard and (#pids > 0 or #npcs > 0))
								end
							elseif gnrc and (show_non_plyr() or #pids>0 or pers_name~= nil or (name ~= "" and name ~= "NPC")) then
								show=true
								blip = g.tbl.veh_esp.png_int[class] 
								rot = g.tbl.veh_esp.png_rot_true[class]
								spin = (class == "Helicopters" and (#pids>0 or #npcs > 0))
							end
						end
					end
					if show then
						g.tbl.veh_esp.veh_table[veh] = {
						SHOW = true,
						DISTM = distm,
						DISTC = distc,
						SPCFC = spcfc,
						GNRC = gnrc,
						R = rgbs.R,
						G = rgbs.G,
						B = rgbs.B,
						NAME = name,
						BLIP = blip,
						ROT = rot,
						SPIN = spin,
						PERS = pers_name,
						PERS_DRVR = pers_driver,
						INVEH = (#pids>0),
						PID_CNT = #pids,
						GOD = API.ent.get.god(veh),
						FRND = frnd,
						ME = (veh==my_veh),
						NPC_CNT = #npcs,
						}
					
					else
						g.tbl.veh_esp.veh_table[veh]={SHOW=false}
					end
				end
				if i%20==0 then
					system.yield(0)
				end
			end
			system.yield(69)
			for k,v  in pairs (g.tbl.veh_esp.veh_table) do
				if not API.ent.is.veh(k) then
					g.tbl.veh_esp.veh_table[k]=nil
				end
			end
		end
	end)
end


function g.tbl.veh_esp.math_do()
	local function get_and_set_val(_feat)
		local _max = (g.tbl.veh_esp.math_max[g.tbl.veh_esp.dist_type.value+1])
		local _min = (_max*0.05)
		local _mod = (_max*0.05)
		local _val = (_max*(_feat.value/_feat.max))
		funcs.set_feat_i_f(_feat,_min,_max,_mod,_val)
	end
	get_and_set_val(g.tbl.veh_esp.dist)
	get_and_set_val(g.tbl.veh_esp.show_plyr_name)
	get_and_set_val(g.tbl.veh_esp.show_veh_name)
	get_and_set_val(g.tbl.veh_esp.show_veh_pssngr)
	get_and_set_val(g.tbl.veh_esp.show_veh_dist)
	get_and_set_val(g.tbl.veh_esp.line_near_dist)
	get_and_set_val(g.tbl.veh_esp.show_veh_health)
end

g.tbl.veh_esp.math = {
1, 				-- meter
0.001,			-- km
3.28084,		-- ft
1.09361,		-- yard
0.003645367,	-- footbal field
0.000621371,	-- mile
7.874016,		-- asian dick
3.937008		-- bbc
}

g.tbl.veh_esp.math_max ={}
for i=1,8 do
	g.tbl.veh_esp.math_max[i] = g.tbl.veh_esp.math[i]*2000
end

g.tbl.veh_esp.dist_type=menu.add_feature("Distance measurement","autoaction_value_str", g.prnt.utils_info_esp.id, function(f)
	g.tbl.veh_esp.math_do()
end)g.tbl.veh_esp.dist_type:set_str_data({"Meters","Kilometers","Feet","Yards","Football fields","Miles","Tiny dick","BBC"})
funcs.add_to_S_L(g.tbl.veh_esp.dist_type,"g.tbl.veh_esp.dist_type")

g.tbl.veh_esp.vis = menu.add_feature("Blip visibility","autoaction_value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.vis,.1,1,.05,1,"g.tbl.veh_esp.vis")

g.tbl.veh_esp.dist = menu.add_feature("Blip max distance","autoaction_value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.dist,0.0001,100000,0.0001,1000,"g.tbl.veh_esp.dist")

g.tbl.veh_esp.blip_size = menu.add_feature("Blip size","autoaction_value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.blip_size,.25,2,.05,1,"g.tbl.veh_esp.blip_size")

g.tbl.veh_esp.blip_size_dist = menu.add_feature("Blip size/distance impact","autoaction_value_i",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.blip_size_dist,1,10,1,1,"g.tbl.veh_esp.blip_size_dist")

g.tbl.veh_esp.show_plyr_name = menu.add_feature("Show player name|Max dist:","value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.show_plyr_name,0.0001,100000,0.0001,2000,"g.tbl.veh_esp.show_plyr_name")
g.tbl.veh_esp.show_plyr_name.on=true

g.tbl.veh_esp.show_veh_name = menu.add_feature("Show vehicle name|Max dist:","value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.show_veh_name,0.0001,100000,0.0001,700,"g.tbl.veh_esp.show_veh_name")
g.tbl.veh_esp.show_veh_name.on=true

g.tbl.veh_esp.show_veh_health = menu.add_feature("Show health|Max dist:","value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.show_veh_health,0.0001,100000,0.0001,700,"g.tbl.veh_esp.show_veh_health")
g.tbl.veh_esp.show_veh_health.on=true

g.tbl.veh_esp.show_veh_health_type=menu.add_feature("Vehicle health","action_value_str", g.prnt.utils_info_esp.id)
g.tbl.veh_esp.show_veh_health_type:set_str_data({"Engine","Body","Enhanced total"})
funcs.add_to_S_L(g.tbl.veh_esp.show_veh_health_type,"g.tbl.veh_esp.show_veh_health_type")
g.tbl.veh_esp.show_veh_health_type.value=2

g.tbl.veh_esp.show_veh_pssngr = menu.add_feature("Show passenger count|Max dist:","value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.show_veh_pssngr,0.0001,100000,0.0001,700,"g.tbl.veh_esp.show_veh_pssngr")
g.tbl.veh_esp.show_veh_pssngr.on=true

g.tbl.veh_esp.show_veh_dist = menu.add_feature("Show distance|Max dist:","value_f",g.prnt.utils_info_esp.id)
funcs.set_feat_i_f(g.tbl.veh_esp.show_veh_dist,0.0001,100000,0.0001,700,"g.tbl.veh_esp.show_veh_dist")
g.tbl.veh_esp.show_veh_dist.on=true

g.tbl.veh_esp.show_veh_prsnl = menu.add_feature("Show if personal vehicle (*P*)","toggle",g.prnt.utils_info_esp.id)
funcs.add_to_S_L(g.tbl.veh_esp.show_veh_prsnl,"g.tbl.veh_esp.show_veh_prsnl")
g.tbl.veh_esp.show_veh_prsnl.on=true

g.tbl.veh_esp.show_veh_crrnt = menu.add_feature("Show current vehicle","toggle",g.prnt.utils_info_esp.id)
funcs.add_to_S_L(g.tbl.veh_esp.show_veh_crrnt,"g.tbl.veh_esp.show_veh_crrnt")
g.tbl.veh_esp.show_veh_crrnt.on=true

g.tbl.veh_esp.show_veh_non_plyr = menu.add_feature("Show non-player vehicles","value_str",g.prnt.utils_info_esp.id)
g.tbl.veh_esp.show_veh_non_plyr:set_str_data({"Always","If has weapons"})
funcs.add_to_S_L(g.tbl.veh_esp.show_veh_non_plyr,"g.tbl.veh_esp.show_veh_non_plyr")
g.tbl.veh_esp.show_veh_non_plyr.on=true
g.tbl.veh_esp.show_veh_non_plyr.value=1
-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.god_prnt = menu.add_feature("Vehicle god","parent",g.prnt.utils_info_esp.id)

g.tbl.veh_esp.show_veh_god = menu.add_feature("Show vehicle god","value_str",g.tbl.veh_esp.god_prnt.id)
g.tbl.veh_esp.show_veh_god:set_str_data({"Red 'G'","Blink red","Both"})
funcs.add_to_S_L(g.tbl.veh_esp.show_veh_god,"g.tbl.veh_esp.show_veh_god")
g.tbl.veh_esp.show_veh_god.on=true

g.tbl.veh_esp.god_x = menu.add_feature("X Pos Offset", "action_value_f",g.tbl.veh_esp.god_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.god_x,-10,10,0.1,0,"g.tbl.veh_esp.god_x")

g.tbl.veh_esp.god_y = menu.add_feature("Y Pos Offset", "action_value_f",g.tbl.veh_esp.god_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.god_y,-10,10,0.1,0,"g.tbl.veh_esp.god_y")

-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.text_prnt = menu.add_feature("ESP Text","parent",g.prnt.utils_info_esp.id)

g.tbl.veh_esp.text_vis = menu.add_feature("Visibility","autoaction_value_f",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_vis,.1,1,.05,1,"g.tbl.veh_esp.text_vis")

g.tbl.veh_esp.text_size = menu.add_feature("Size","autoaction_value_f",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_size,.1,2,.05,1,"g.tbl.veh_esp.text_size")

g.tbl.veh_esp.text_space = menu.add_feature("Spacing","action_value_f",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_space,.1,10,.05,1,"g.tbl.veh_esp.text_space")

g.tbl.veh_esp.text_jstfctn = menu.add_feature("Justification", "action_value_str",g.tbl.veh_esp.text_prnt.id) 
g.tbl.veh_esp.text_jstfctn:set_str_data({"Left","Center","Right"})
funcs.add_to_S_L(g.tbl.veh_esp.text_jstfctn,"g.tbl.veh_esp.text_jstfctn")
g.tbl.veh_esp.text_jstfctn.value=1

g.tbl.veh_esp.text_from_top = menu.add_feature("Display info stack","action_value_str",g.tbl.veh_esp.text_prnt.id)
g.tbl.veh_esp.text_from_top:set_str_data({"From top","Center","From bottom"})
funcs.add_to_S_L(g.tbl.veh_esp.text_from_top,"g.tbl.veh_esp.text_from_top")

g.tbl.veh_esp.text_x = menu.add_feature("X Pos Offset", "action_value_f",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_x,-10,10,0.1,0,"g.tbl.veh_esp.text_x")
g.tbl.veh_esp.text_y = menu.add_feature("Y Pos Offset", "action_value_f",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_y,-10,10,0.1,0,"g.tbl.veh_esp.text_y")

g.tbl.veh_esp.text_r = menu.add_feature("Text R", "action_value_i",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_r,0,255,5,255,"g.tbl.veh_esp.text_r")

g.tbl.veh_esp.text_g = menu.add_feature("Text G", "action_value_i",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_g,0,255,5,255,"g.tbl.veh_esp.text_g")

g.tbl.veh_esp.text_b = menu.add_feature("Text B", "action_value_i",g.tbl.veh_esp.text_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.text_b,0,255,5,255,"g.tbl.veh_esp.text_b")

-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.line_prnt = menu.add_feature("ESP Lines","parent",g.prnt.utils_info_esp.id)

g.tbl.veh_esp.line_feat=menu.add_feature("Show ESP Lines","value_str", g.tbl.veh_esp.line_prnt.id)
g.tbl.veh_esp.line_feat:set_str_data({"Type 1","Type 2"})
funcs.add_to_S_L(g.tbl.veh_esp.line_feat,"g.tbl.veh_esp.line_feat")
g.tbl.veh_esp.line_feat.on=true

g.tbl.veh_esp.line_show_for=menu.add_feature("Vehicle selection","action_value_str", g.tbl.veh_esp.line_prnt.id)
g.tbl.veh_esp.line_show_for:set_str_data({"Has player","No player","Both"})
funcs.add_to_S_L(g.tbl.veh_esp.line_show_for,"g.tbl.veh_esp.line_show_for")

g.tbl.veh_esp.line_near_dist = menu.add_feature("'Near' distance", "action_value_f",g.tbl.veh_esp.line_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_near_dist,0.0001,100000,0.0001,300,"g.tbl.veh_esp.line_near_dist")

g.tbl.veh_esp.line_near_prnt = menu.add_feature("Near color","parent",g.tbl.veh_esp.line_prnt.id)
g.tbl.veh_esp.line_far_prnt = menu.add_feature("Far color","parent",g.tbl.veh_esp.line_prnt.id)
g.tbl.veh_esp.line_friend_prnt = menu.add_feature("Friend color","parent",g.tbl.veh_esp.line_prnt.id)
g.tbl.veh_esp.line_self_prnt = menu.add_feature("Self color","parent",g.tbl.veh_esp.line_prnt.id)
-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.line_near_r = menu.add_feature("Line R", "action_value_i",g.tbl.veh_esp.line_near_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_near_r,0,255,5,255,"g.tbl.veh_esp.line_near_r")
g.tbl.veh_esp.line_near_g = menu.add_feature("Line G", "action_value_i",g.tbl.veh_esp.line_near_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_near_g,0,255,5,0,"g.tbl.veh_esp.line_near_g")
g.tbl.veh_esp.line_near_b = menu.add_feature("Line B", "action_value_i",g.tbl.veh_esp.line_near_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_near_b,0,255,5,0,"g.tbl.veh_esp.line_near_b")
g.tbl.veh_esp.line_near_a = menu.add_feature("Line A", "action_value_i",g.tbl.veh_esp.line_near_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_near_a,0,255,5,255,"g.tbl.veh_esp.line_near_a")
-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.line_far_r = menu.add_feature("Line R", "action_value_i",g.tbl.veh_esp.line_far_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_far_r,0,255,5,255,"g.tbl.veh_esp.line_far_r")
g.tbl.veh_esp.line_far_g = menu.add_feature("Line G", "action_value_i",g.tbl.veh_esp.line_far_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_far_g,0,255,5,160,"g.tbl.veh_esp.line_far_g")
g.tbl.veh_esp.line_far_b = menu.add_feature("Line B", "action_value_i",g.tbl.veh_esp.line_far_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_far_b,0,255,5,0,"g.tbl.veh_esp.line_far_b")
g.tbl.veh_esp.line_far_a = menu.add_feature("Line A", "action_value_i",g.tbl.veh_esp.line_far_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_far_a,0,255,5,150,"g.tbl.veh_esp.line_far_a")
-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.line_frnd_r = menu.add_feature("Line R", "action_value_i",g.tbl.veh_esp.line_friend_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_frnd_r,0,255,5,93,"g.tbl.veh_esp.line_frnd_r")
g.tbl.veh_esp.line_frnd_g = menu.add_feature("Line G", "action_value_i",g.tbl.veh_esp.line_friend_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_frnd_g,0,255,5,182,"g.tbl.veh_esp.line_frnd_g")
g.tbl.veh_esp.line_frnd_b = menu.add_feature("Line B", "action_value_i",g.tbl.veh_esp.line_friend_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_frnd_b,0,255,5,229,"g.tbl.veh_esp.line_frnd_b")
g.tbl.veh_esp.line_frnd_a = menu.add_feature("Line A", "action_value_i",g.tbl.veh_esp.line_friend_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_frnd_a,0,255,5,150,"g.tbl.veh_esp.line_frnd_a")
-------------------------------------------------------------------------------------------------------------------------------
g.tbl.veh_esp.line_self_r = menu.add_feature("Line R", "action_value_i",g.tbl.veh_esp.line_self_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_self_r,0,255,5,0,"g.tbl.veh_esp.line_self_r")
g.tbl.veh_esp.line_self_g = menu.add_feature("Line G", "action_value_i",g.tbl.veh_esp.line_self_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_self_g,0,255,5,255,"g.tbl.veh_esp.line_self_g")
g.tbl.veh_esp.line_self_b = menu.add_feature("Line B", "action_value_i",g.tbl.veh_esp.line_self_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_self_b,0,255,5,0,"g.tbl.veh_esp.line_self_b")
g.tbl.veh_esp.line_self_a = menu.add_feature("Line A", "action_value_i",g.tbl.veh_esp.line_self_prnt.id)
funcs.set_feat_i_f(g.tbl.veh_esp.line_self_a,0,255,5,150,"g.tbl.veh_esp.line_self_a")

g.print_load_info("Vehicle ESP",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
g.tbl.plate_rpr_upgr={}
g.tbl.plate_rpr_upgr.text="Gee-Skid"

function g.tbl.plate_rpr_upgr.file_check()
	funcs.doo.check_create_dir(g.paths._user)
	funcs.doo.check_create_dir(g.tbl.plate_anim.directory)
	if not utils.file_exists(g.tbl.plate_anim.directory.."Repair or Upgrade.txt") then
		local file = io.open(g.tbl.plate_anim.directory.."Repair or Upgrade.txt", "a")
		file:write("Gee-Skid")
		file:close()
	end
end

function g.tbl.plate_rpr_upgr.file_get()
	g.tbl.plate_rpr_upgr.file_check()
	local file = io.open(g.tbl.plate_anim.directory.."Repair or Upgrade.txt", "r")
	local plate = "Gee-Skid"
	for line in file:lines() do
		if line ~= nil and string.len(tostring(line)) < 9 then
			plate = tostring(line)
			break
		end
	end
	file:close()
	return plate
end

function funcs.plate_t_or_nil()
	if g.tbl.plate_rpr_upgr.tog.on then
		return g.tbl.plate_rpr_upgr.text
	end
	return nil
end

function funcs.plate_i_or_nil()
	if g.tbl.plate_rpr_upgr.style_tog.on then
		return g.tbl.plate_rpr_upgr.style_tog.value
	end
	return nil
end

g.tbl.plate_rpr_upgr.tog=menu.add_feature("Use custom text", "toggle", g.prnt.optns_plate.id, function(f)
	if f.on then
		local plate = g.tbl.plate_rpr_upgr.file_get()
		f.name = "Use custom text: "..plate
		g.tbl.plate_rpr_upgr.text=plate
	end
end)
funcs.add_to_S_L(g.tbl.plate_rpr_upgr.tog,"g.tbl.plate_rpr_upgr.tog")
g.tbl.plate_rpr_upgr.tog.on=true

g.tbl.plate_rpr_upgr.set=menu.add_feature("Set custom license plate", "action_value_str", g.prnt.optns_plate.id, function(f)
	if f.value == 0 then
		g.tbl.plate_rpr_upgr.tog.name="Use custom text: Gee-Skid"
		g.tbl.plate_rpr_upgr.text="Gee-Skid"
	else
		local status,str = 1
		status,str = funcs.get.text_input("Non alpha-numeric characters act as blank space","Gee-Skid",8,0)
		if status == 0 then
			g.tbl.plate_rpr_upgr.file_check()
			local file = io.open(g.tbl.plate_anim.directory.."Repair or Upgrade.txt", "w")
			file:write(str)
			file:close()
			g.tbl.plate_rpr_upgr.tog.name="Use custom text: "..str
			g.tbl.plate_rpr_upgr.text=str
		end
	end
end)
g.tbl.plate_rpr_upgr.set:set_str_data({"Gee-Skid","Custom"})
funcs.add_to_S_L(g.tbl.plate_rpr_upgr.set,"g.tbl.plate_rpr_upgr.set")

g.tbl.plate_rpr_upgr.style_tog=menu.add_feature("Use plate style", "value_str", g.prnt.optns_plate.id)
g.tbl.plate_rpr_upgr.style_tog:set_str_data({"Blue/White","Yellow/black","Yellow/Blue","Blue/White2","Blue/White3","Yankton"})
funcs.add_to_S_L(g.tbl.plate_rpr_upgr.style_tog,"g.tbl.plate_rpr_upgr.style_tog")
g.tbl.plate_rpr_upgr.style_tog.value=1
g.tbl.plate_rpr_upgr.style_tog.on=true
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

menu.add_feature("Remove all spawned entities", "action", g.prnt.optns.id,function()
	local count = #g.tbl.entities+#g.tbl.spwn.history
	if count == 0 then
		g.N_P(2,"You have not spawned any entities.",__GV__,5,"Yellow")
	else
		for i=1,#g.tbl.entities do
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local ent,I = g.tbl.entities[i],i
				if funcs.is.ent(ent) then
					if funcs.doo.remove_ent(ent,5000) then
						g.tbl.entities[I]=nil
					end
				else
					g.tbl.spwn.history[I]=nil
				end
			end)
		end
		for i=1,#g.tbl.spwn.history do
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local ent,I = g.tbl.spwn.history[i],i
				if funcs.is.ent(ent) then
					if funcs.is.veh(ent) then
						for ii=1,funcs.get.veh_seats(ent) do
							if funcs.is.ent(API.veh.get.ped_in_seat(ent,ii-2)) then
								API.Ped.clear_tasks(API.veh.get.ped_in_seat(ent, ii-2))
							end
						end
					end
					if funcs.doo.remove_ent(ent,5000) then
						g.tbl.spwn.history[I]=nil
					end
				else
					g.tbl.spwn.history[I]=nil
				end
			end)
		end
		system.yield(1000)
		local total = count-(#g.tbl.entities+#g.tbl.spwn.history)
		g.N_P(2,total.."/"..count.." Entities removed.",__GV__,5,"Blue")
	end
end)

g.feat.plyr_JL_notif=menu.add_feature("Show player info notification", "value_str", g.prnt.optns.id)
g.feat.plyr_JL_notif:set_str_data({"Joining/Leaving","Joining","Leaving"})
funcs.add_to_S_L(g.feat.plyr_JL_notif,"g.feat.plyr_JL_notif")

g.feat.plyr_JL_print=menu.add_feature("Print player info to console", "value_str", g.prnt.optns.id)
g.feat.plyr_JL_print:set_str_data({"Joining/Leaving","Joining","Leaving"})
funcs.add_to_S_L(g.feat.plyr_JL_print,"g.feat.plyr_JL_print")

g.feat.ff_auto_kick=menu.add_feature("Auto-Kick fake friends with join timeout enabled", "toggle", g.prnt.optns.id, function(f)
	local file_path,file,contents,_start,_end,_last,scid_table,pid_table,_scid,_pid,_ff_sett,_ff_name
	file_path = "scid"
	while f.on do
		funcs.doo.yield_while_true(not g.var.check_fake_friends,2000)
		if g.var.check_fake_friends then
			system.yield(1000)
			g.var.check_fake_friends=false
		end
		scid_table,pid_table = funcs.get.scid_pid_tables()
		if not utils.file_exists(g.paths._cfg..file_path..".cfg") then
			file = io.open(g.paths._cfg..file_path..".cfg", "a")
			file:write("[SCID]")
			file:close()
		end
		file = io.open(g.paths._cfg..file_path..".cfg", "r")
		for line in file:lines() do
			if line == nil then
				break
			else
				_start,_end = string.find(line, ":")
				if _start ~= nil and _end ~= nil then
					--print(string.sub(line,1,_end-1))
					_ff_name = string.sub(line,1,_end-1)
					_last = _end+1
					_start,_end = string.find(line, ":",_last) 
					if _start ~= nil and _end ~= nil then
						--print(string.sub(line,_last,_end-1))
						if scid_table[tonumber(string.sub(line,_last,_end-1),16)] then
							_scid = tonumber(string.sub(line,_last,_end-1),16)
							_pid = pid_table[_scid]
							print("Match found "..string.sub(line,_last,_end-1).." ".._scid.." name "..funcs.get.pid_name(_pid).." PID ".._pid)
						else
							_scid = -1
							_pid = -1
						end
						if _scid ~= -1 then
							_last = _end+1
							if string.sub(line,_last,string.len(line)) ~= nil then
								--print(string.sub(line,_last,string.len(line)))
								_ff_sett = string.sub(line,_last,string.len(line))
								if g.tbl.fake_friend_timeout_list[_ff_sett] then
									print("Join timeout enabled "..string.sub(line,_last,_end-1).." ".._scid.." FF name ".._ff_name.." name "..funcs.get.pid_name(_pid).." PID ".._pid)
									funcs.doo.kick_plyr(_pid,true,"Fake friend",_ff_name)
									system.yield(250)
								end
							end
						end
					end
				end
			end
		end
		io.close(file)
		system.yield(0)
	end
end)
funcs.add_to_S_L(g.feat.ff_auto_kick,"g.feat.ff_auto_kick")

g.feat.auto_re_kick=menu.add_feature("Auto-Re-Kick", "value_str", g.prnt.optns.id, function(f)
	local scid_table,pid_table,file,_start,_end,_last,_scid,_pid,_prev_name
	while f.on do
		if g.var.check_re_kick then
			system.yield(1000)
			g.var.check_re_kick=false
			scid_table,pid_table = funcs.get.scid_pid_tables()
			if f.value ~= 2 then
				for i=1, #g.tbl.pid_kicked_mem do
					if scid_table[g.tbl.pid_kicked_mem[i]] then
						funcs.doo.kick_plyr(pid_table[g.tbl.pid_kicked_mem[i]])
						system.yield(250)
						break
					end
				end
			else
				if utils.dir_exists(g.paths._user.."Logs\\") then
					if utils.file_exists(g.paths._user.."Logs\\Player Kicks History.csv") then
						file = io.open(g.paths._user.."Logs\\Player Kicks History.csv", "r")
						for line in file:lines() do
							if line == nil then
								break
							else
								_start,_end = string.find(line, ",")
								if _start ~= nil and _end ~= nil then
									_date = string.sub(line,1,_end-1)
									_last = _end+1
									_start,_end = string.find(line, ",",_last) 
									if _start ~= nil and _end ~= nil then
										if scid_table[tonumber(string.sub(line,_last,_end-1))] then
											_scid = tonumber(string.sub(line,_last,_end-1))
											_pid = pid_table[_scid]
										else
											_scid = -1
											_pid = -1
										end
										if _scid ~= -1 then
											_last = _end+1
											_prev_name = "Unknown"
											if string.sub(line,_last,string.len(line)) ~= nil then
												_prev_name = string.sub(line,_last,string.len(line))
											end
											print("Previously kicked player "..string.sub(line,_last,_end-1).." ".._scid.." Previous name ".._prev_name.." Current name "..funcs.get.pid_name(_pid).." PID ".._pid)
											funcs.doo.kick_plyr(_pid,true,"Previously kicked",_prev_name)
											system.yield(250)
											break
										end
									end
								end
							end
						end
						io.close(file)
					end
				end
			end
		end
		system.yield(0)
	end
end)
g.feat.auto_re_kick:set_str_data({"This session", "Until Lua reset","All kick history"})
funcs.add_to_S_L(g.feat.auto_re_kick,"g.feat.auto_re_kick")
g.feat.auto_re_kick.value=1



	g.o.tbl.crashes = {}
	g.o.tbl.spectate = {}
	g.o.tbl.kicks = {}
	g.tbl.kicks_str = {}
	for i=0,31 do
		g.o.tbl.crashes[i]={}
		g.o.tbl.kicks[i] = {}
		g.o.tbl.spectate[i]=menu.get_feature_by_hierarchy_key("online.online_players.player_"..i..".spectate_player")
	end
	for k, v in pairs(menu.get_feature_by_hierarchy_key("online.online_players.player_0").children) do
		local text = tostring(v)
		
		local _start,_end = string.find(text, " ")
		if _start and _end then
			text=string.sub(text,_start+1,#text-1)
			if string.find(string.lower(text), "crash") then
				local str = string.lower(text:gsub(" ","_"))
				for i=0,31 do
					g.o.tbl.crashes[i][#g.o.tbl.crashes[i]+1]=menu.get_feature_by_hierarchy_key("online.online_players.player_"..i.."."..str)
				end
			end
		end
		text = tostring(v)
		_start,_end = string.find(text, " ")
		if _start and _end then
			text=string.sub(text,_start+1,#text-1)
			if string.find(string.lower(text), "kick") then
				local str = string.lower(text:gsub(" ","_"))
				for i=0,31 do
					g.o.tbl.kicks[i][#g.o.tbl.kicks[i]+1]=menu.get_feature_by_hierarchy_key("online.online_players.player_"..i.."."..str)
				end
				g.tbl.kicks_str[#g.tbl.kicks_str+1]=v.name
			end
		end
		system.yield(0)
	end

	
g.feat.kick_type=menu.add_feature("Select type of kick", "action_value_str", g.prnt.optns.id)
g.feat.kick_type:set_str_data(g.tbl.kicks_str)
g.feat.kick_type.hint="Affects all kicks used in this script"
funcs.add_to_S_L(g.feat.kick_type,"g.feat.kick_type")

g.feat.kick_if_host=menu.add_feature("Use host-kick if host", "toggle", g.prnt.optns.id)
g.feat.kick_if_host.hint="Affects all kicks used in this script"
funcs.add_to_S_L(g.feat.kick_if_host,"g.feat.kick_if_host")

g.feat.plyr_leave = event.add_event_listener("player_leave", function(listener)
	if listener.player == API.plyr.my_id() and g.feat.auto_re_kick.value == 0 then
		g.tbl.pid_kicked_mem={}
		if g.feat.auto_re_kick.on then
			g.N_P(2,"You have left the session.\nPlayers kicked memory reset",__GV__,10,"Yellow")
		end
	end
	funcs.doo.wipe_tbl(g.tbl.online_veh_grief[listener.player])
end)


g.feat.plyr_join = event.add_event_listener("player_join", function(listener)
	g.var.check_re_kick=true
	g.var.check_fake_friends=true
end)
		
function funcs.get.scid_pid_tables()
	local scid_table = {}
	local pid_table = {}
	for i=0,31 do
		if funcs.is.valid_pid(i) and i ~= API.plyr.my_id() and not API.plyr.is.friend(i) then
			scid_table[API.plyr.get.scid(i)] = true
			pid_table[API.plyr.get.scid(i)] = i
		end
	end
	return scid_table,pid_table
end

g.tbl.fake_friend_timeout_list = {
["4"] = true, -- 	timeout
["14"] = true, -- 	timeout	friend
["1c"] = true, -- 	timeout	friend	hide 
["1d"] = true, -- 	timeout	friend	hide	stalk 
["d"] = true,  -- 	timeout			hide	stalk 
["15"] = true,  -- 	timeout	friend			stalk 
["c"] = true,  --	timeout			hide
["5"] = true, --    timeout					stalk
}

g.feat.set_wnt_self=menu.add_feature("Set wanted level", "value_i", g.prnt.self.id, function(f)
	while f.on do
		system.yield(50)
		funcs.doo.wntd_all_psngrs(API.plyr.my_id(),f.value)
	end
end)
funcs.set_feat_i_f(g.feat.set_wnt_self,0,5,1,0,"g.feat.set_wnt_self")

g.feat.fake_passive=menu.add_feature("Fake passive", "toggle", g.prnt.self.id, function(f)
	local my_veh,all_veh,all_peds,time
	while f.on do
		API.ent.set.alpha(API.plyr.get.ped(API.plyr.my_id()), 153, false)
		if funcs.ME._in_veh() then
			my_veh = API.plyr.get.veh(API.plyr.my_id())
			API.ent.set.alpha(API.plyr.get.veh(API.plyr.my_id()), 153, false)
			all_veh = API.veh.get.all()
			for i=1, #all_veh do
				if funcs.is.plyr_driving(all_veh[i]) then
					API.ent.set.collision_ent(all_veh[i],API.plyr.get.veh(API.plyr.my_id()), true)
					API.ent.set.collision_ent(API.plyr.get.veh(API.plyr.my_id()),all_veh[i], true)
				end
			end
			all_peds = API.Ped.get.all()
			for i=1,#all_peds do	
				if API.Ped.is.plyr(all_peds[i]) then
					API.ent.set.collision_ent(all_peds[i], API.plyr.get.veh(API.plyr.my_id()), true)
					API.ent.set.collision_ent(API.plyr.get.veh(API.plyr.my_id()), all_peds[i], true)
				end
			end
		elseif funcs.is.veh(my_veh) then
			API.ent.set.collision(my_veh,true,true)
			API.ent.set.alpha(my_veh, 255, true)
			my_veh = -1
		else
			my_veh = -1
			all_veh = API.veh.get.all()
			for i =1, #all_veh do
				if funcs.is.plyr_driving(all_veh[i]) then
					API.ent.set.collision_ent(all_veh[i], API.plyr.get.ped(API.plyr.my_id()), true)
					API.ent.set.collision_ent(API.plyr.get.ped(API.plyr.my_id()), all_veh[i], true)
				end
			end
			all_peds = API.Ped.get.all()
			for i=1,#all_peds do	
				if API.Ped.is.plyr(all_peds[i]) then
					API.ent.set.collision_ent(all_peds[i], API.plyr.get.ped(API.plyr.my_id()), true)
					API.ent.set.collision_ent(API.plyr.get.ped(API.plyr.my_id()), all_peds[i], true)
				end
			end
		end
		system.yield(0)
	end
	API.ent.set.collision(API.plyr.get.ped(API.plyr.my_id()),true,true)
	API.ent.set.alpha(API.plyr.get.ped(API.plyr.my_id()), 255, true)
	if funcs.ME._in_veh() then
		API.ent.set.collision(API.plyr.get.veh(API.plyr.my_id()),true,true)
		API.ent.set.alpha(API.plyr.get.veh(API.plyr.my_id()), 255, true)
	elseif funcs.is.veh(my_veh) then
		API.ent.set.collision(my_veh,true,true)
		API.ent.set.alpha(my_veh, 255, true)
		my_veh = -1
	end
end)
funcs.add_to_S_L(g.feat.fake_passive,"g.feat.fake_passive")
-----------------------------------------------------------------------------------------------------------------------------
	
g.feat.ped_never_on_fire=menu.add_feature("Never on fire","toggle",g.prnt.self_ped.id,function(f)
	while f.on do
		system.yield(0)
		funcs.doo.ent_repair_fire(API.plyr.get.ped(API.plyr.my_id()))
	end
end)
funcs.add_to_S_L(g.feat.ped_never_on_fire,"g.feat.ped_never_on_fire")

g.feat.lock_cam_foot=menu.add_feature("Lock body/cam on foot", "value_str", g.prnt.self_ped.id, function(f)
	local time,my_ped,my_rot,rot=API.util.t_ms()
    while f.on do
		system.yield(0)
		if not funcs.ME._in_veh() then
			my_ped = API.plyr.get.ped(API.plyr.my_id())
			if not API.Ped.is.swimming(my_ped) and not API.Ped.is.ragdoll(my_ped) and not API.ent.is.in_air(my_ped) then
				if funcs.is.key_active(32,1) then
					time=API.util.t_ms()+3000
				end
				my_rot = API.ent.get.rotation(my_ped)
				rot = API.cam.get.rot()
				my_rot.z = rot.z
				if f.value == 0 and funcs.is.key_active(32,1) and funcs.is.key_active(21,0) then --While Walking
					if funcs.is.key_active(34,1) and funcs.is.key_active(35,0) then
						my_rot.z=my_rot.z+50
					elseif funcs.is.key_active(35,1) and funcs.is.key_active(34,0) then
						my_rot.z=my_rot.z-50
					end
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 1 and funcs.is.key_active(32,1) and funcs.is.key_active(21,1) then --While Running
					if funcs.is.key_active(34,1) and funcs.is.key_active(35,0) then
						my_rot.z=my_rot.z+50
					elseif funcs.is.key_active(35,1) and funcs.is.key_active(34,0) then
						my_rot.z=my_rot.z-50
					end
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 2 and funcs.is.key_active(32,1) then --Walking & Running
					if funcs.is.key_active(34,1) and funcs.is.key_active(35,0) then
						my_rot.z=my_rot.z+50
					elseif funcs.is.key_active(35,1) and funcs.is.key_active(34,0) then
						my_rot.z=my_rot.z-50
					end
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 3 and funcs.is.key_active(33,0) then --While on foot
					if time > API.util.t_ms() then
						if funcs.is.key_active(34,1) and funcs.is.key_active(35,0) then
							my_rot.z=my_rot.z+50
						elseif funcs.is.key_active(35,1) and funcs.is.key_active(34,0) then
							my_rot.z=my_rot.z-50
						end
						API.ent.set.rotation(my_ped,my_rot)
					end
				elseif f.value == 4 and funcs.is.key_active(32,0) and funcs.is.key_active(21,0) and funcs.is.key_active(33,0) and funcs.is.key_active(34,0) and funcs.is.key_active(35,0) then --Not running/walking
					if time > API.util.t_ms() then
						API.ent.set.rotation(my_ped,my_rot)
					end
				end
			end
		end
	end
end)
g.feat.lock_cam_foot:set_str_data({"While Walking", "While Running","Walking & Running","While on foot","Not running/walking"})
funcs.add_to_S_L(g.feat.lock_cam_foot,"g.feat.lock_cam_foot")

g.feat.lock_cam_water=menu.add_feature("Lock body/cam in water", "value_str", g.prnt.self_ped.id, function(f)
    local my_ped,my_rot,rot
	while f.on do
		system.yield(0)
		if not funcs.ME._in_veh() then
			my_ped = API.plyr.get.ped(API.plyr.my_id())
			if API.Ped.is.swimming(my_ped) and not API.Ped.is.ragdoll(my_ped) then
				my_rot = API.ent.get.rotation(my_ped)
				rot = API.cam.get.rot()
				my_rot.z = rot.z
				if f.value == 0 and API.Ped.is.swimming_underwater(my_ped) then
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 1 and not API.Ped.is.swimming_underwater(my_ped) then
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 2 then
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 3 and funcs.is.key_active(21,1) then
					API.ent.set.rotation(my_ped,my_rot)
				elseif f.value == 4 then
					if not API.Ped.is.swimming_underwater(my_ped) then
						if funcs.is.key_active(21,0) and funcs.is.key_active(32,0) then
							API.ent.set.rotation(my_ped,my_rot)
						end
					elseif funcs.is.key_active(21,0) then
						API.ent.set.rotation(my_ped,my_rot)
					end
				end
			end
		end
	end
end)
g.feat.lock_cam_water:set_str_data({"While underwater", "While above water","While in water", "While swimming","Not swimming"})
funcs.add_to_S_L(g.feat.lock_cam_water,"g.feat.lock_cam_water")

g.feat.lock_cam_air=menu.add_feature("Lock body/cam in air (not parachute)", "toggle", g.prnt.self_ped.id, function(f)
    local my_ped,my_rot,rot
    while f.on do
		system.yield(0)
		if not funcs.ME._in_veh() then
			my_ped = API.plyr.get.ped(API.plyr.my_id())
			if not API.Ped.is.swimming(my_ped) and not API.Ped.is.ragdoll(my_ped) and API.ent.is.in_air(my_ped) then
				my_rot = API.ent.get.rotation(my_ped)
				rot = API.cam.get.rot()
				my_rot.z = rot.z
				API.ent.set.rotation(my_ped,my_rot)
			end
		end
	end
end)
funcs.add_to_S_L(g.feat.lock_cam_air,"g.feat.lock_cam_air")

g.feat.auto_parachute=menu.add_feature("Auto-get parachute", "toggle", g.prnt.self_ped.id, function(f)
    while f.on do
		if not API.wpn.ped_has(API.plyr.get.ped(API.plyr.my_id()), API.get_hash_key("gadget_parachute")) then
			API.wpn.ped_give(API.plyr.get.ped(API.plyr.my_id()), API.get_hash_key("gadget_parachute"), 100, true)
		end
		system.yield(500)
	end
end)
funcs.add_to_S_L(g.feat.auto_parachute,"g.feat.auto_parachute")

g.feat.slow_fall=menu.add_feature("Limit speed while free-falling", "value_i", g.prnt.self_ped.id, function(f)
	local my_ped,velocity,fall_speed,val
    while f.on do
		system.yield(0)
		if not funcs.ME._in_veh() then
			my_ped = API.plyr.get.ped(API.plyr.my_id())
			if API.ent.is.in_air(my_ped) and funcs.is.key_active(32,0) then 
				velocity = API.ent.get.velocity(my_ped)
				fall_speed = velocity.z
				fall_speed = fall_speed * 2.236936
				val = f.value*-1
				if val > fall_speed then
					velocity.z=val
					API.ent.set.velocity(my_ped,velocity)
				end
			end
		end
	end
end)
funcs.set_feat_i_f(g.feat.slow_fall,0,70,5,40,"g.feat.slow_fall")


----------------------------------------------------------------------------------------Gee-Watch
----------------------------------------------------------------------------AKA-Universe Watchdog
-------------------------------------several improvements and corrections - so much fuckin better

function funcs.doo.gw_plyr_info(_pid) 
	if funcs.is.valid_pid(_pid) then
		local plyr_name=""
		if API.plyr.is.host(_pid) or (script.get_host_of_this_script()==_pid) or API.plyr.is.modder(_pid,-1) or API.plyr.is.friend(_pid) then
			if API.plyr.is.host(_pid) then plyr_name=plyr_name.."[H]" end
			if script.get_host_of_this_script()==_pid then plyr_name=plyr_name.."[S]" end
			if API.plyr.is.modder(_pid,-1) then	plyr_name=plyr_name.."[M]" end
			if API.plyr.is.friend(_pid) then plyr_name=plyr_name.."[F]"	end
			plyr_name = plyr_name.." "
		end
		plyr_name = plyr_name..funcs.get.pid_name(_pid).."\nPID:".._pid.."   Host Priority:"..g.tbl.PID_INFO.host_priority_str[_pid+1]
		if API.plyr.is.in_veh(_pid) then
			plyr_name = plyr_name.."\n"..funcs.get.veh_model_name(API.plyr.get.veh(_pid)).."   ".."Seats:"..funcs.get.num_empty_seats(API.plyr.get.veh(_pid)).."/"..funcs.get.veh_seats(API.plyr.get.veh(_pid))
			if API.plyr.is.god(_pid) and API.plyr.is.veh_god(_pid) then	plyr_name = plyr_name.."\nPlayer-GOD & Vehicle-GOD"
			elseif API.plyr.is.veh_god(_pid) then plyr_name = plyr_name.."\nVehicle-GOD"
			end
		elseif API.plyr.is.god(_pid) then plyr_name=plyr_name.."\nPlayer-GOD"
		end
		plyr_name=plyr_name.."\nRank:"..glbls.get_pid_rank(_pid).."   K/D: "..funcs.get._2_dec(glbls.get_pid_kd(_pid)) --i just split these up so they fit on the screen
		plyr_name=plyr_name.."\nMoney: $"..funcs.get.add_commas(glbls.get_pid_total_money(_pid))
		plyr_name=plyr_name.."\nHealth: "..mth.flr(API.plyr.get.health(_pid)).."/"..mth.flr(API.plyr.get.max_health(_pid)).."   Armor:"..mth.flr(API.plyr.get.armor(_pid)).."/50"
		plyr_name=plyr_name.."\nWanted: "..API.plyr.get.wanted(_pid).."/5"
		g.N_P(2,plyr_name,__GV__,14,"Blue")
		return true
	end
	return false
end

function funcs.doo.GW_overlay_text(aim_ent)
	if g._Watch_display.on then
		local text = ""
		if funcs.is.GW_GE_no_interfere(g.feat.gw_expld_key) then
			text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_expld_key.value+1])..":Explode  "
		end
		if funcs.is.GW_GE_no_interfere(g.feat.gw_damdes_key) then
			if (API.ent.is.ped(aim_ent) and API.Ped.is.in_veh(aim_ent)) or API.ent.is.veh(aim_ent) then
				if g._gee_watch_destroy.on then	text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_damdes_key.value+1]).. ":Destroy  "
				else text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_damdes_key.value+1]).. ":Damage  "
				end
			elseif API.ent.is.ped(aim_ent) and not API.Ped.is.plyr(aim_ent) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_damdes_key.value+1]).. ":Delete  "
			end
		end
		if API.ent.is.ped(aim_ent) and API.Ped.is.plyr(aim_ent) and funcs.is.GW_GE_no_interfere(g.feat.gw_kick_key) then
			text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_kick_key.value+1])..":Kick  "
		end
		if funcs.is.GW_GE_no_interfere(g.feat.gw_burn_key) then
			text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_burn_key.value+1])..":Burn  "
		end
		if (API.ent.is.ped(aim_ent) and API.Ped.is.in_veh(aim_ent)) or API.ent.is.veh(aim_ent) then	
			if funcs.is.GW_GE_no_interfere(g.feat.gw_board_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_board_key.value+1])..":Hijack  "
			end
			if funcs.is.GW_GE_no_interfere(g.feat.gw_accel_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_accel_key.value+1])..":Accel  "
			end
			if funcs.is.GW_GE_no_interfere(g.feat.gw_rvrs_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_rvrs_key.value+1])..":Reverse  "
			end	
			if funcs.is.GW_GE_no_interfere(g.feat.gw_rpr_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_rpr_key.value+1])..":Repair  "
			end	
			if funcs.is.GW_GE_no_interfere(g.feat.gw_upgr_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_upgr_key.value+1])..":Upgrade  "
			end	
			if funcs.is.GW_GE_no_interfere(g.feat.gw_ele_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_ele_key.value+1])..":Up  "
			end	
		end
		if (API.ent.is.ped(aim_ent) and API.Ped.is.in_veh(aim_ent)) or API.ent.is.veh(aim_ent) or (API.ent.is.ped(aim_ent) and not API.Ped.is.plyr(aim_ent)) then	
			if funcs.is.GW_GE_no_interfere(g.feat.gw_god_key) then
				text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_god_key.value+1])..":God  "
			end
		end
		if funcs.is.GW_GE_no_interfere(g.feat.gw_ntr_key) then
			text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_ntr_key.value+1])..":Ntr  "
		end
		if funcs.is.GW_GE_no_interfere(g.feat.gw_d_ele_key) then
			if (API.ent.is.ped(aim_ent) and not API.Ped.is.plyr(aim_ent)) then text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_d_ele_key.value+1])..":Ragdoll"
			elseif API.ent.is.veh(aim_ent) then text = text .. funcs.is.char_check(inputs.vk_list[g.feat.gw_d_ele_key.value+1])..":Down"
			end
		end
		funcs.doo.overlay(text,g._W_B_cr.value,g._W_B_cg.value,g._W_B_cb.value,g._W_B_a.value,g._W_B_s.value/300,g._W_B_f.value,g._W_B_x.value/300,g._W_B_y.value/300)
	end
end


g.tbl.GW_ent_history={}
function funcs.doo.GW_action_list(_key,_ent,_action)
	if g.tbl.GW_ent_history[_ent]==nil then
		g.tbl.GW_ent_history[_ent]={}
	end
	if not g.tbl.GW_ent_history[_ent][_action] then
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local __key,__ent,__action = inputs.vk_list[_key.value+1],_ent,_action
			g.tbl.GW_ent_history[__ent][__action]=true
			
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local time=API.util.t_ms()+5000
				local ___ent,___action = __ent,__action
				local stop=false
				while time>API.util.t_ms() and funcs.is.ent(___ent) and not stop do
					if not g.tbl.GW_ent_history[___ent][___action] then
						stop=true
					else
						if API.ent.is.veh(___ent) then
							funcs.doo.GW_highlight(___ent,true)
						elseif API.ent.is.ped(___ent) then
							if API.Ped.is.in_veh(___ent) then
								funcs.doo.GW_highlight(API.Ped.get.veh(___ent),true)
							else
								funcs.doo.GW_highlight(___ent,true)
							end
						end
					end
					system.yield(5)
				end
				if not stop then
					g.tbl.GW_ent_history[___ent][___action]=false
				end
			end)
			
			if __action == "board" then
				funcs.doo.GW_board(__key,__ent)
			elseif __action == "dam_des" then
				if g._gee_watch_destroy.on then
					funcs.doo.veh_destroy(__ent, 1000)
				else 
					funcs.doo.veh_damage(__ent, 1000)
				end
			elseif __action == "veh_boost" then
				if funcs.ntwrk.ask_long(__ent,1000) then
					API.veh.set.forward_speed(__ent,g._ped_veh_accel.value) 
				end
			elseif __action == "veh_rvrs" then
				if funcs.ntwrk.ask_long(__ent,1000) then
					API.veh.set.forward_speed(__ent,(g._ped_veh_revers.value*-1)) 
				end
			elseif __action == "repair" then
				funcs.doo.veh_repair_all(__ent, 1000,nil,false,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
			elseif __action == "veh_up" then
				if funcs.ntwrk.ask_long(__ent,1000) then
					API.ent.set.velocity(__ent,v3(0,0,g._ped_veh_up.value))	
				end
			elseif __action == "veh_and_ped_upgr" then
				if API.ent.is.dead(__ent) then
					funcs.doo.veh_action_list(__ent,1000,"repair",nil)
				end
				funcs.doo.veh_action_list(__ent,1000,"upgrades",nil)
				local veh_peds = funcs.get.all_peds_in_veh(__ent,false,nil)
				for i=1, #veh_peds do
					fire.stop_entity_fire(veh_peds[i])
					funcs.doo.ped_combat_attrib(veh_peds[i],true,100,true)
					funcs.doo.set_ped_health(veh_peds[i],2500,100)
					funcs.doo.give_ped_weap(veh_peds[i],API.get_hash_key("weapon_machinepistol"))
					funcs.doo.give_ped_weap(veh_peds[i],API.get_hash_key("weapon_combatmg_mk2"))
				end
			elseif __action == "ped_veh_down" then
				if funcs.ntwrk.ask_long(__ent,1000) then
					API.ent.set.velocity(__ent,v3(0,0,-g._ped_veh_down.value))
				end
			elseif __action == "burn" or __action == "explode" then
				local boom = 0
				if __action == "burn" then
					boom = 3
				end
				local ents={}
				if funcs.is.veh(__ent) then
					ents = funcs.get.all_peds_in_veh(__ent,nil,false)
				elseif funcs.is.ped(__ent) and API.Ped.is.in_veh(__ent) then
					ents = funcs.get.all_peds_in_veh(API.Ped.get.veh(__ent),nil,false)
				end
				if not funcs.is.dead(__ent) then
					ents[#ents+1]=__ent
				end
				for i=1, #ents do
					funcs.doo.expl_ent_pid(ents[i], 0, 180, mth.rndm(0,2), boom, 0)
					fire.start_entity_fire(ents[i])
				end
			elseif __action == "ped_veh_god" then
				funcs.doo.ent_god_tog(__ent,1000,nil)
				local veh_peds = funcs.get.all_peds_in_veh(__ent,false,false)
				for i=1, #veh_peds do
					funcs.doo.ent_god_tog(veh_peds[i],100,API.ent.get.god(__ent))
				end
				system.yield(150)
			elseif __action == "ped_veh_ntr" then
				funcs.doo.GW_neuter(__ent,1000)
				local veh_peds = funcs.get.all_peds_in_veh(__ent,false,false)
				for i=1, #veh_peds do
					funcs.doo.GW_neuter(veh_peds[i],250)
				end
				system.yield(150)
			--npc peds
			elseif __action == "rmv_ped" then
				funcs.doo.remove_ent(__ent,1000)
			elseif __action == "ped_forward" then
				funcs.doo.ped_force(__ent, 1000,"forward",g._ped_veh_accel.value)
			elseif __action == "ped_up" then
				funcs.doo.ped_force(__ent, 1000,"up",g._ped_veh_accel.value)
			elseif __action == "ped_ragdoll" then
				if funcs.doo.ped_ragdoll(__ent,true,1000) then
					API.Ped.set.ragdoll(__ent,1000,1000,0)
				end
			elseif __action == "ped_upgrade" then
				funcs.doo.ped_combat_attrib(__ent,true,1000,true)
				funcs.doo.set_ped_health(__ent,2500,1000)
				ntv.set.ped_critical_dmg(__ent,0)
				funcs.doo.give_ped_weap(__ent,API.get_hash_key("weapon_machinepistol"))
				funcs.doo.give_ped_weap(__ent,API.get_hash_key("weapon_combatmg_mk2"))
			elseif __action == "ped_god" then
				funcs.doo.ent_god_tog(__ent,1000,nil)
				system.yield(150)
			elseif __action == "ent_ntr" then
				funcs.doo.GW_neuter(__ent,1000)
				system.yield(150)
			-- vehicles
			elseif __action == "veh_upgrade" then
				funcs.doo.veh_action_list(__ent,1000,"upgrades",nil)
			elseif __action == "god_tog" then
				 funcs.doo.ent_god_tog(__ent,1000,nil)
				 system.yield(150)
			elseif __action == "kick_pid" then
				funcs.doo.kick_plyr(API.plyr.get.plyr_from_ped(__ent))
				system.yield(500)
			elseif __action == "kick_pids_in_veh" then
				funcs.doo.kick_plyrs_in_veh(API.plyr.get.plyr_from_ped(__ent))
				system.yield(500)
			end
			g.tbl.GW_ent_history[__ent][__action]=false
		end)
		system.yield(50)
	end
end

function funcs.is.GW_key_press(_feat)
	return (funcs.is.vk_key_down(inputs.vk_list[_feat.value+1]) and funcs.is.GW_GE_no_interfere(_feat))
end

function funcs.is.GW_GE_no_interfere(_key)
	if (inputs.vk_list[_key.value+1] ~= inputs.vk_list[g.tbl.ge.slct_key1.value+1]) or not  g._gee_eye_bypass.on or not g.tbl.ge.feat.on or not g.feat.gw_main.on then
		return true
	end
	return false
end

function funcs.doo.veh_flight(veh,boost,mult)
	local W = funcs.is.key_active(32,1)
	local A = funcs.is.key_active(34,1)
	local S = funcs.is.key_active(33,1)
	local D = funcs.is.key_active(35,1)
	local SHFT = funcs.is.key_active(209,1)
	local CNTRL = funcs.is.key_active(210,1)
	local SPC = funcs.is.key_active(143,1)
	local AD = (not A and not D) or (A and D)
	local camrot = API.cam.get.rot()
	local GO,Z,move,speed
	API.ent.set.rotation(veh,camrot)
	if W and not A and not S and not D and not CNTRL and not SPC then
		if SHFT then
			speed = boost * mult
		else
			speed = mult
		end
		API.ent.set.max_speed(veh, 45000)
		API.veh.set.forward_speed(veh, speed)
		return true
	elseif W or A or S or D or CNTRL or SPC then
		move = v3()
		if SHFT then
			GO = boost
		else
			GO = 1
		end
		if W then
			if AD then
				Z=0
			elseif A then
				Z=-45
			elseif D then
				Z=45
			end
		elseif S then
			if AD then
				Z=-180
			elseif A then
				Z=-135
			elseif D then
				Z=135
			end
		elseif A then
			Z=-90
		elseif D then
			Z=90
		else
			Z=0
		end
	
		Z = Z + (camrot.z*-1)
	
		if Z < -180 then
			Z=(mth.abs(Z)-360)*-1
		elseif Z > 180 then
			Z=mth.abs(Z)-360
		end
		
		if W or A or S or D then
			move.y = (90-math.abs(Z))/90*mult*GO
			move.x = (Z < 0 and (90-math.abs(Z+90))/-90*mult*GO) or (90-math.abs(Z-90))/90*mult*GO
		end
		if SPC then
			move.z = mult*GO
		elseif CNTRL then
			move.z = -mult*GO
		elseif S then
			move.z = (camrot.x*-1)/90*mult*GO
		elseif W then
			move.z = camrot.x/90*mult*GO
		end

		API.ent.set.max_speed(veh, 45000)
		API.ent.set.velocity(veh,move)
		return true
	end
	API.ent.set.max_speed(veh, 0)
	return false
end

g.var.gw_cam = nil
function funcs.doo.GW_cam()
	ntv.cam.doo.destroy_all()
	g.var.gw_cam = ntv.cam.doo.create_w_params("DEFAULT_SCRIPTED_CAMERA", v3(),v3(), 90.0, 1, 2)
	funcs.doo.req_model(API.get_hash_key("bmx"))
	local ent = vehicle.create_vehicle(API.get_hash_key("bmx"),API.cam.get.pos()+v3(0,0,25), 0.0,false,false) --add to clear exclusions
	--API.ent.freeze(ent,true)
	API.ent.set.collision(ent,false,false)
	API.ent.set.visible(ent,false)
	ntv.cam.doo.attach_to_ent(g.var.gw_cam, ent,v3(0,0,-25),1)
	ntv.cam.set.active(g.var.gw_cam,1)
	ntv.cam.set.render_script(1, 0, 0, 0, 0)
	while g.feat.gw_main.on and ntv.cam.is.exist(g.var.gw_cam) and funcs.is.ent(ent) and not funcs.is.vk_key_down("ESCAPE") and not funcs.is.vk_key_down("F6") do
		ntv.cam.set.rot(g.var.gw_cam,API.cam.get.rot(),2)
		funcs.doo.veh_flight(ent,3,5)
		coords = API.ent.get.coords(ent)
		ntv.map.lock_mini_pos(coords)
		ntv.cam.set.focus_pos(coords)
		system.yield(0)
	end
	ntv.cam.set.render_script(0, 0, 0, 0, 0)
	ntv.cam.set.active(g.var.gw_cam,0)
	ntv.cam.doo.destroy_all()
	ntv.cam.set.no_focus_pos()
	ntv.map.unlock_mini_pos()
	while funcs.is.vk_key_down("F6") do
		system.yield(25)
	end
end

g.var.gw_aim_ent=nil
g.var.gw_aim_rot=0
g.feat.gw_main=menu.add_feature("Gee-Watch mode", "toggle", g.prnt.gee_watch.id, function(f)
	local plyr_name_count=0
	local aim_ent,aim_veh,force,veh_peds,good,target_pos
	local ray_hit,dist,ray_start,tp_extra
	local temp_veh
	g.var.gw_aim_pos=nil
	g.var.gw_aim_active=false
	g.var.gw_aim_tp_show=false
	g.var.gw_aim_clone_veh=nil
	g.tbl.GW_ent_mark={}
	if f.on then
		if funcs.is.GS_loaded() then
			g.N_P(2,"Gee-Watch Enabled\nRight click to use",__GV__,10,"Blue")
		end
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function() --Mark
			local pos,veh,size
			while g.feat.gw_main.on do
				for k,v in pairs(g.tbl.GW_ent_mark) do
					size=nil
					if funcs.is.num(v) then
						if v<=31 then
							if API.plyr.is.valid(v) then
								size=1.25
								pos = API.plyr.get.coords(v)
								if API.plyr.is.in_veh(v) then
									pos = API.ent.get.coords(API.plyr.get.veh(v))
									size=funcs.get.basic_veh_dimensions(true,API.plyr.get.veh(v),1.5,3)
								end
							end
						elseif funcs.is.ent(v) then
							size=1.25
							if API.ent.is.veh(v) then
								pos = API.ent.get.coords(v)
								size=funcs.get.basic_veh_dimensions(true,v,1.5,3)
							elseif API.ent.is.ped(v) and API.Ped.is.in_veh(v) then
								pos = API.ent.get.coords(API.Ped.get.veh(v))
								size=funcs.get.basic_veh_dimensions(true,API.Ped.get.veh(v),1.5,3)
							else	
								pos = API.ent.get.coords(v)
							end
						end
					end
					if size then
						pos.z=pos.z+size
						graphics.draw_marker(2,pos, v3(0, 90, 0), v3(0, 180, g.var.gw_aim_rot),v3(size*0.5,size*0.5,size*0.5),255, math.random(0,50), math.random(0,50), 69, false, false, 2, false, nil, "MarkerTypeThickChevronUp", false)
					else
						k=nil
					end
				end
				system.yield(0)
			end
		end)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function() --clone
			local retain,aim=API.util.t_ms()
			local clone,tp_pos,bool,screen_pos,temp_veh
			local function remove_clone()
				if funcs.is.ent(clone) then
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						local ENT = clone
						funcs.doo.remove_ent(ENT,1000)
					end)
				end
			end
			while g.feat.gw_main.on do
				tp_pos=g.var.gw_aim_pos
				temp_veh=g.var.gw_aim_clone_veh
				if g.var.gw_aim_tp_show and tp_pos then
					if g.var.gw_aim_active then
						graphics.draw_marker(28, (tp_pos or g.var.gw_aim_pos), v3(0, 90, 0), v3(0, 90, 0),v3(1,1,1),255, math.random(0,50), math.random(0,50), 69, false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
						remove_clone()
					elseif funcs.is.veh(temp_veh) then
						if not funcs.is.veh(clone) then
							funcs.get.record_clone_veh(temp_veh)
							clone = funcs.doo.create_clone_veh(g.tbl.veh_clone[temp_veh],g.var.gw_aim_pos,0,true,false,true)
							API.ent.freeze(clone,true)
							API.ent.set.god(clone,true)
						else
							if g._W_B_highlight_show.on then
								ntv.doo.spotlight(tp_pos+v3(0,0,10),funcs.get.normalize_v3(tp_pos,tp_pos+v3(0,0,2)), 0, 255, 0, 20.0, g.tbl.GW_light_bright[time.get_clock_hours()]*g._W_B_highlight_bright.value, 6.0, 6.25*funcs.get.basic_veh_dimensions(true,temp_veh,2), 20.0)
							end
							API.ent.set.coords(clone,tp_pos)
							API.ent.set.rotation(clone,v3(0,0,API.ent.get.heading(temp_veh)))
						end
					elseif funcs.ME._in_veh() then
						if temp_veh ~= nil then
							remove_clone()
							temp_veh=nil
						end
						if not funcs.is.veh(clone) then
							funcs.get.record_clone_veh(funcs.ME._veh())
							clone = funcs.doo.create_clone_veh(g.tbl.veh_clone[funcs.ME._veh()],g.var.gw_aim_pos,0,true,false,true)
							API.ent.freeze(clone,true)
						else
							if g._W_B_highlight_show.on then
								ntv.doo.spotlight(tp_pos+v3(0,0,10),funcs.get.normalize_v3(tp_pos,tp_pos+v3(0,0,2)), 0, 255, 0, 20.0, g.tbl.GW_light_bright[time.get_clock_hours()]*g._W_B_highlight_bright.value, 6.0, 6.25*funcs.get.basic_veh_dimensions(true,funcs.ME._veh(),2), 20.0)
							end
							API.ent.set.coords(clone,tp_pos)
							API.ent.set.rotation(clone,v3(0,0,API.ent.get.heading(funcs.ME._veh())))
						end
					else
						remove_clone()
						temp_veh=nil
						graphics.draw_marker(28, tp_pos, v3(0, 90, 0), v3(0, 90, 0),v3(1,1,1),math.random(0,50), 255, math.random(0,50), 69, false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
					end
					screen_pos = funcs.get.screen_pos_3d(tp_pos)
					if screen_pos then
						API.SD.draw_text(math.floor(funcs.get.dist_pospos_v3(funcs.ME._veh_or_me_crds(),tp_pos)),
						screen_pos,screen_pos,API.gfx.get_h()/1300,funcs.get.rgb_to_int(255,255,255,255),((1<<1)+(1<<2)+(1<<0)),nil)
					end
				else
					remove_clone()
					if funcs.ME._aim() then
						aim = funcs.get.ray_vctr_all(nil,true)
						if not funcs.is.ent(aim) then
							aim=API.plyr.get.aim_at(API.plyr.my_id())
						end
						if funcs.is.ent(aim) then
							g.var.gw_aim_ent=aim
							retain=API.util.t_ms()+100
						end
					end
				end
				if funcs.is.ent(g.var.gw_aim_ent) and retain>API.util.t_ms() then
					funcs.doo.GW_overlay_start(g.var.gw_aim_ent)
				else
					g.var.gw_aim_ent=nil
					retain=API.util.t_ms()
				end
				if g.var.gw_aim_rot-0.25<-180 then
					g.var.gw_aim_rot = 180
				else
					g.var.gw_aim_rot=g.var.gw_aim_rot-0.25
				end
				system.yield(5)
			end
		end)
	end
	local function clone_veh(_VEH)
		g.var.gw_aim_tp_show=true
		g.var.gw_aim_clone_veh=_VEH
		while funcs.ME._aim() and funcs.is.vk_key_down(inputs.vk_list[g.feat.gw_clone_key.value+1]) and funcs.is.veh(_VEH) do
			ray_start = funcs.get.front_of_dir(nil,nil,funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos())*1.25)
			ray_hit,g.var.gw_aim_pos = funcs.get.ray_vctr_all(nil,nil,ray_start,nil,0.5,v3(0,0,1))
			if not ray_hit then
				ray_hit = true
				g.var.gw_aim_pos = funcs.get.front_of_dir(ray_start,nil,(dist or 100))
			elseif g.var.gw_aim_pos then
				dist = funcs.get.dist_pospos_v3(funcs.ME._crds(),g.var.gw_aim_pos)+4
			else
				dist = 100
			end
			system.yield(0)
		end
		if ray_hit and funcs.is.veh(_VEH) then
			g.var.gw_aim_active=true
			funcs.get.record_clone_veh(_VEH)
			local clone_veh = funcs.doo.create_clone_veh(g.tbl.veh_clone[_VEH],g.var.gw_aim_pos,API.ent.get.heading(_VEH),false,true)
			g.var.gw_aim_active=false
		end
		g.var.gw_aim_pos=nil
		g.var.gw_aim_tp_show=false
		g.var.gw_aim_clone_veh=nil
		funcs.doo.yield_while_true((funcs.ME._aim() or funcs.is.vk_key_down(inputs.vk_list[g.feat.gw_clone_key.value+1])),250)
	end
	
	
	-- g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function() --i was never happy with how it worked
		-- while g.feat.gw_main.on do
			-- if funcs.is.vk_key_down("F6") then
				-- while funcs.is.vk_key_down("F6") do
					-- system.yield(25)
				-- end
				-- funcs.doo.GW_cam()
			-- end
			-- system.yield(25)
		-- end
	-- end)
	
	
	while f.on do
		system.yield(0)
		if funcs.ME._aim() and funcs.is.GW_key_press(g.feat.gw_tp_key) and not g.var.gw_aim_active then --teleport
			g.var.gw_aim_tp_show=true
			while funcs.ME._aim() and funcs.is.vk_key_down(inputs.vk_list[g.feat.gw_tp_key.value+1]) do
				local use_cam = (g.var.gw_cam and ntv.cam.is.exist(g.var.gw_cam))
				if funcs.ME._in_veh() then
					temp_veh=funcs.ME._veh()
					tp_extra=2
					if use_cam then
						ray_start = cam.get_final_rendered_cam_pos()
					else
						ray_start = funcs.get.front_of_dir(nil,nil,funcs.get.dist_pospos_v3(funcs.ME._veh_crds(),API.cam.get.pos())*1.25)
					end
					ray_hit,g.var.gw_aim_pos = funcs.get.ray_vctr_all(nil,nil,ray_start,nil,2)
				else
					tp_extra=0.5
					if use_cam then
						ray_start = cam.get_final_rendered_cam_pos()
					else
						ray_start = funcs.get.front_of_dir(nil,nil,funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos())*1.25)
					end
					ray_hit,g.var.gw_aim_pos = funcs.get.ray_vctr_all(nil,nil,ray_start,nil,0.5)
				end
				if not ray_hit then
					ray_hit = true
					g.var.gw_aim_pos = funcs.get.front_of_dir(ray_start,nil,(dist or 100))
				elseif g.var.gw_aim_pos then
					dist = funcs.get.dist_pospos_v3(funcs.ME._crds(),g.var.gw_aim_pos)+tp_extra+2
				else
					dist = 100
				end
				system.yield(0)
			end
			if ray_hit then
				g.var.gw_aim_active=true
				if funcs.ME._in_veh() then
					if funcs.ntwrk.ask_long(funcs.ME._veh(),1000) then
						local speed = API.ent.get.velocity(funcs.ME._veh())
						if g._gee_watch_tp_speed.on then
							funcs.doo.id_migrate(funcs.ME._veh(),0)
						end
						API.ent.set.coords(funcs.ME._veh(),g.var.gw_aim_pos+v3(0,0,100))
						API.ent.set.rotation(funcs.ME._veh(),v3(0,0,API.ent.get.heading(funcs.ME._veh())))
						API.ent.set.coords(funcs.ME._veh(),g.var.gw_aim_pos)
						if g._gee_watch_tp_speed.on then
							system.yield(50)
							API.ent.set.velocity(funcs.ME._veh(),speed)
							API.veh.set.engine_on(funcs.ME._veh(), true, true, false)
							funcs.doo.id_migrate(funcs.ME._veh(),1)
						end
					end
				else
					API.ent.set.coords(funcs.ME._ped(),g.var.gw_aim_pos)
				end
				g.var.gw_aim_active=false
			end
			g.var.gw_aim_pos=nil
			g.var.gw_aim_tp_show=false
			funcs.doo.yield_while_true((funcs.ME._aim() or funcs.is.vk_key_down(inputs.vk_list[g.feat.gw_tp_key.value+1])),250)
		elseif funcs.is.ent(g.var.gw_aim_ent) then
			aim_ent=g.var.gw_aim_ent
			--for all ped/veh/player
			if API.ent.is.ped(aim_ent) or API.ent.is.veh(aim_ent) then
				if funcs.is.GW_key_press(g.feat.gw_mark_key) then --------------------------------------------------M:Mark
					if g.tbl.GW_ent_mark[aim_ent] then
						g.tbl.GW_ent_mark[aim_ent]=nil
					elseif API.ent.is.ped(aim_ent) and API.Ped.is.plyr(aim_ent) then
						g.tbl.GW_ent_mark[aim_ent]=API.plyr.get.plyr_from_ped(aim_ent)
					else
						g.tbl.GW_ent_mark[aim_ent]=aim_ent
					end
					funcs.doo.yield_while_true(funcs.is.vk_key_down(inputs.vk_list[g.feat.gw_mark_key.value+1]),500)
				elseif funcs.is.GW_key_press(g.feat.gw_burn_key) then ----------------------------------------------V:burn
					funcs.doo.GW_action_list(g.feat.gw_burn_key,aim_ent,"burn")
				elseif funcs.is.GW_key_press(g.feat.gw_expld_key) then ---------------------------------------------X:explode
					funcs.doo.GW_action_list(g.feat.gw_expld_key,aim_ent,"explode")
				end
			end
			--for ped cars
			if API.ent.is.ped(aim_ent) and not API.Ped.is.plyr(aim_ent) then
				if API.Ped.is.in_veh(aim_ent) then
					aim_veh = API.Ped.get.veh(aim_ent)
					if funcs.is.GW_key_press(g.feat.gw_board_key) then  -------------------------------------------F:boarding
						funcs.doo.GW_action_list(g.feat.gw_board_key,aim_veh,"board")
					elseif funcs.is.GW_key_press(g.feat.gw_damdes_key) and not funcs.is.dead(aim_veh) then --------~:damage/destroy
						funcs.doo.GW_action_list(g.feat.gw_damdes_key,aim_veh,"dam_des")
					elseif funcs.is.GW_key_press(g.feat.gw_accel_key) then --------------------------------------- E:accelerate
						funcs.doo.GW_action_list(g.feat.gw_accel_key,aim_veh,"veh_boost")
					elseif funcs.is.GW_key_press(g.feat.gw_rvrs_key) then -----------------------------------------C:Reversing
						funcs.doo.GW_action_list(g.feat.gw_rvrs_key,aim_veh,"veh_rvrs")
					elseif funcs.is.GW_key_press(g.feat.gw_rpr_key) then ------------------------------------------R:Repair
						funcs.doo.GW_action_list(g.feat.gw_rpr_key,aim_veh,"repair")
					elseif funcs.is.GW_key_press(g.feat.gw_ele_key) then ------------------------------------------Q for elevate
						funcs.doo.GW_action_list(g.feat.gw_ele_key,aim_veh,"veh_up")
					elseif funcs.is.GW_key_press(g.feat.gw_upgr_key) then -----------------------------------------U for upgrade
						funcs.doo.GW_action_list(g.feat.gw_upgr_key,aim_veh,"veh_and_ped_upgr")
					elseif funcs.is.GW_key_press(g.feat.gw_d_ele_key) then  ---------------------------------------z for de-elevate
						funcs.doo.GW_action_list(g.feat.gw_d_ele_key,aim_veh,"ped_veh_down")
					elseif funcs.is.GW_key_press(g.feat.gw_god_key) then ------------------------------------------H: God toggle
						funcs.doo.GW_action_list(g.feat.gw_god_key,aim_veh,"ped_veh_god")
					elseif funcs.is.GW_key_press(g.feat.gw_ntr_key) then ------------------------------------------N: Neuter
						funcs.doo.GW_action_list(g.feat.gw_ntr_key,aim_veh,"ped_veh_ntr")
					elseif funcs.is.GW_key_press(g.feat.gw_clone_key) and not g.var.gw_aim_active then
						clone_veh(aim_veh)
					end
				--for peds
				elseif funcs.is.GW_key_press(g.feat.gw_damdes_key) then ------------------------------------------ ~:delete ped
					funcs.doo.GW_action_list(g.feat.gw_damdes_key,aim_ent,"rmv_ped")
				elseif funcs.is.GW_key_press(g.feat.gw_accel_key) then ------------------------------------------- E:accelerate
					funcs.doo.GW_action_list(g.feat.gw_accel_key,aim_ent,"ped_forward")
				elseif funcs.is.GW_key_press(g.feat.gw_ele_key) then-----------------------------------------------Q for elevate
					funcs.doo.GW_action_list(g.feat.gw_ele_key,aim_ent,"ped_up")
				elseif funcs.is.GW_key_press(g.feat.gw_d_ele_key) then  -------------------------------------------z for ragdoll
					funcs.doo.GW_action_list(g.feat.gw_d_ele_key,aim_ent,"ped_ragdoll")
				elseif funcs.is.GW_key_press(g.feat.gw_upgr_key) then ---------------------------------------------U for upgrade
					funcs.doo.GW_action_list(g.feat.gw_upgr_key,aim_ent,"ped_upgrade")
				elseif funcs.is.GW_key_press(g.feat.gw_god_key) then ----------------------------------------------H: God toggle
					funcs.doo.GW_action_list(g.feat.gw_god_key,aim_ent,"ped_god")
				elseif funcs.is.GW_key_press(g.feat.gw_ntr_key) then ----------------------------------------------N: Neuter
					funcs.doo.GW_action_list(g.feat.gw_ntr_key,aim_ent,"ent_ntr")
				end
			--for vehicles
			elseif API.ent.is.veh(aim_ent) then
				if funcs.is.GW_key_press(g.feat.gw_board_key) then ------------------------------------------------F:boarding
					funcs.doo.GW_action_list(g.feat.gw_board_key,aim_ent,"board")
				elseif funcs.is.GW_key_press(g.feat.gw_damdes_key) and not funcs.is.dead(aim_ent) then ------------~:damage/destroy
					funcs.doo.GW_action_list(g.feat.gw_damdes_key,aim_ent,"dam_des")
				elseif funcs.is.GW_key_press(g.feat.gw_accel_key) then --------------------------------------------E:accelerate
					funcs.doo.GW_action_list(g.feat.gw_accel_key,aim_ent,"veh_boost")
				elseif funcs.is.GW_key_press(g.feat.gw_rvrs_key) then ---------------------------------------------C:Reversing
					funcs.doo.GW_action_list(g.feat.gw_rvrs_key,aim_ent,"veh_rvrs")
				elseif funcs.is.GW_key_press(g.feat.gw_rpr_key) then ----------------------------------------------R:Repair
					funcs.doo.GW_action_list(g.feat.gw_rpr_key,aim_ent,"repair")
				elseif funcs.is.GW_key_press(g.feat.gw_ele_key) then ----------------------------------------------Q for elevate
					funcs.doo.GW_action_list(g.feat.gw_ele_key,aim_ent,"veh_up")
				elseif funcs.is.GW_key_press(g.feat.gw_upgr_key) then ---------------------------------------------U for upgrade
					funcs.doo.GW_action_list(g.feat.gw_upgr_key,aim_ent,"veh_upgrade")
				elseif funcs.is.GW_key_press(g.feat.gw_d_ele_key) then  -------------------------------------------z for de-elevate
					funcs.doo.GW_action_list(g.feat.gw_d_ele_key,aim_ent,"ped_veh_down")
				elseif funcs.is.GW_key_press(g.feat.gw_god_key) then ----------------------------------------------H: God toggle
					funcs.doo.GW_action_list(g.feat.gw_god_key,aim_ent,"god_tog")
				elseif funcs.is.GW_key_press(g.feat.gw_ntr_key) then ----------------------------------------------N: Neuter
					funcs.doo.GW_action_list(g.feat.gw_ntr_key,aim_ent,"ent_ntr")
				elseif funcs.is.GW_key_press(g.feat.gw_clone_key) and not g.var.gw_aim_active then
					clone_veh(aim_ent)
				end
			--for players
			elseif API.ent.is.ped(aim_ent) and API.Ped.is.plyr(aim_ent) then
				if g._gee_watch_player_info.on and plyr_name_count==0 and funcs.doo.gw_plyr_info(API.plyr.get.plyr_from_ped(aim_ent)) then
					plyr_name_count=1
				end
				if not API.Ped.is.in_veh(aim_ent) then
					if funcs.is.GW_key_press(g.feat.gw_kick_key) then	------------------------------------------K: Kick
						funcs.doo.GW_action_list(g.feat.gw_kick_key,aim_ent,"kick_pid")
					elseif funcs.is.GW_key_press(g.feat.gw_ntr_key) then -----------------------------------------N: Neuter
						funcs.doo.GW_action_list(g.feat.gw_ntr_key,aim_ent,"ent_ntr")
					end
				--for players in vehicles
				else
					aim_veh = API.Ped.get.veh(aim_ent)
					if funcs.is.GW_key_press(g.feat.gw_board_key) then -------------------------------------------F:boarding (hijack)
						funcs.doo.GW_action_list(g.feat.gw_board_key,aim_veh,"board")
					elseif funcs.is.GW_key_press(g.feat.gw_damdes_key) and not funcs.is.dead(aim_veh) then ------ ~:damage/destroy
						funcs.doo.GW_action_list(g.feat.gw_damdes_key,aim_veh,"dam_des")
					elseif funcs.is.GW_key_press(g.feat.gw_accel_key) then----------------------------------------E:accelerate
						funcs.doo.GW_action_list(g.feat.gw_accel_key,aim_veh,"veh_boost")
					elseif funcs.is.GW_key_press(g.feat.gw_rvrs_key) then --------------------------------------- C:Reversing
						funcs.doo.GW_action_list(g.feat.gw_rvrs_key,aim_veh,"veh_rvrs")
					elseif funcs.is.GW_key_press(g.feat.gw_rpr_key) then -----------------------------------------R:Repair
						funcs.doo.GW_action_list(g.feat.gw_rpr_key,aim_veh,"repair")
					elseif funcs.is.GW_key_press(g.feat.gw_ele_key) then -----------------------------------------Q for elevate
						funcs.doo.GW_action_list(g.feat.gw_ele_key,aim_veh,"veh_up")
					elseif funcs.is.GW_key_press(g.feat.gw_upgr_key) then ----------------------------------------U for upgrade
						funcs.doo.GW_action_list(g.feat.gw_upgr_key,aim_veh,"veh_upgrade")
					elseif funcs.is.GW_key_press(g.feat.gw_d_ele_key) then ---------------------------------------z for de-elevate
						funcs.doo.GW_action_list(g.feat.gw_d_ele_key,aim_veh,"ped_veh_down")
					elseif funcs.is.GW_key_press(g.feat.gw_god_key) then -----------------------------------------H: God toggle
						funcs.doo.GW_action_list(g.feat.gw_god_key,aim_veh,"god_tog")
					elseif funcs.is.GW_key_press(g.feat.gw_kick_key) then	--------------------------------------K: Kick
						funcs.doo.GW_action_list(g.feat.gw_kick_key,aim_ent,"kick_pids_in_veh")
					elseif funcs.is.GW_key_press(g.feat.gw_ntr_key) then -----------------------------------------N: Neuter
						funcs.doo.GW_action_list(g.feat.gw_ntr_key,aim_veh,"ent_ntr")
					elseif funcs.is.GW_key_press(g.feat.gw_clone_key) and not g.var.gw_aim_active then
						clone_veh(aim_veh)
					end
				end
			end
		else
			plyr_name_count=0
		end
	end
end)
funcs.add_to_S_L(g.feat.gw_main,"g.feat.gw_main")

function funcs.doo.GW_board(_vk_key,_veh)
	local function board(_veh,_type)
		if _type == 0 then
			if not funcs.doo.veh_tp_into_free_seat(_veh) then
				funcs.N_P(2,"No free seat :(",funcs.ver_text,4,"Red")
			end
		elseif _type == 1 then
			if not funcs.doo.veh_tp_into_free_seat(_veh) then
				if not funcs.doo.veh_tp_into_hijack(_veh) then
					funcs.N_P(2,"No free seat\nFailed to hijack :(",funcs.ver_text,4,"Red")
				end
			end
		elseif _type == 2 then
			if not funcs.doo.veh_tp_into_hijack(_veh) then
				funcs.N_P(2,"Failed to hijack :(",funcs.ver_text,4,"Red")
			end
		end
	end
	for i=1,3 do
		if funcs.is.vk_key_down(_vk_key) or funcs.ME._aim() then --delay added to reduce chance of firing missiles in the vehicle when you enter
			system.yield(50)
		else
			break
		end
	end
	if funcs.is.ent(API.veh.get.ped_in_seat(_veh, -1)) then
		if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, -1)) then
			board(_veh,g._gee_watch_passenger.value)
		else
			board(_veh,g._gee_watch_passenger_npc.value)
		end
	else
		board(_veh,2)
	end
end

g.tbl.GW_light_bright={
	[0]=20.0,
	[1]=20.0,
	[2]=20.0,
	[3]=20.0,
	[4]=20.0,
	[5]=40.0,
	[6]=80.0,
	[7]=100.0,
	[8]=110.0,
	[9]=120.0,
	[10]=130.0,
	[11]=140.0,
	[12]=170.0,
	[13]=180.0,
	[14]=170.0,
	[15]=160.0,
	[16]=140.0,
	[17]=130.0,
	[18]=100.0,
	[19]=60.0,
	[20]=45.0,
	[21]=30.0,
	[22]=20.0,
	[23]=20.0,
	[24]=20.0,
}



function funcs.doo.GW_highlight(aim_ent,bypass)
	local pos = API.ent.get.coords(aim_ent)
	local size = funcs.get.basic_veh_dimensions(true,aim_ent,1)
	local show = true
	if not bypass and g.tbl.GW_ent_history[aim_ent] then
		for k,v in pairs(g.tbl.GW_ent_history[aim_ent]) do
			if v then
				show=false
				break
			end
		end
	end
	if show then
		local bright = g.tbl.GW_light_bright[time.get_clock_hours()]*g._W_B_highlight_bright.value
		if bypass then
			if g._W_B_highlight_show.on then
				ntv.doo.spotlight(pos+v3(0,0,10),funcs.get.normalize_v3(pos,pos+v3(0,0,2)), 255, 0, 0, 20.0,bright, 6.0, 6.25*size, 20.0)
			end
			if g._W_B_ring_show.on then
				graphics.draw_marker(27, pos, v3(0, -180, 0), v3(0, 180, g.var.gw_aim_rot),v3(2*size,2*size,2*size),255,0, 0, math.floor(125*g._W_B_ring_bright.value), false, false, 2, false, nil, "MarkerTypeHorizontalSplitArrowCircle", false)
			end
		else
			if g._W_B_highlight_show.on then
				ntv.doo.spotlight(pos+v3(0,0,10),funcs.get.normalize_v3(pos,pos+v3(0,0,2)), 0, 255, 0, 20.0, bright, 6.0, 6.25*size, 20.0)
			end
			if g._W_B_ring_show.on then
				graphics.draw_marker(27, pos, v3(0, -180, 0), v3(0, 180, g.var.gw_aim_rot),v3(2*size,2*size,2*size),0,255, 0, math.floor(125*g._W_B_ring_bright.value), false, false, 2, false, nil, "MarkerTypeHorizontalSplitArrowCircle", false)
			end
		end
	end
end

function funcs.doo.GW_overlay_start(aim_ent)
	if API.ent.is.ped(aim_ent) or API.ent.is.veh(aim_ent) then
		funcs.doo.GW_overlay_text(aim_ent)
		if API.ent.is.ped(aim_ent) then
			if API.Ped.is.in_veh(aim_ent) then
				funcs.doo.GW_highlight(API.Ped.get.veh(aim_ent))
			else
				funcs.doo.GW_highlight(aim_ent)
			end
			if API.Ped.is.plyr(aim_ent)  then
				if API.plyr.is.god(API.plyr.get.plyr_from_ped(aim_ent)) then
					funcs.doo.GW_god_show()
				elseif API.plyr.is.in_veh(API.plyr.get.plyr_from_ped(aim_ent)) and API.plyr.is.veh_god(API.plyr.get.plyr_from_ped(aim_ent)) then
					funcs.doo.GW_god_show()
				end
			elseif API.ent.get.god(aim_ent) then
				funcs.doo.GW_god_show()
			elseif API.Ped.is.in_veh(aim_ent) and API.ent.get.god(API.Ped.get.veh(aim_ent)) then
				funcs.doo.GW_god_show()
			end
		elseif API.ent.is.veh(aim_ent) then
			funcs.doo.GW_highlight(aim_ent)
			if API.ent.get.god(aim_ent) then
				funcs.doo.GW_god_show()
			end
		end
	end
end

function funcs.doo.GW_god_show()
	if g._W_B_god_show.on then
		funcs.doo.overlay("God",mth.abs(mth.rndm(g._W_B_cr.value-100,g._W_B_cr.value)),mth.abs(mth.rndm(g._W_B_cg.value-100,g._W_B_cg.value)),mth.abs(mth.rndm(g._W_B_cb.value-100,g._W_B_cb.value)),mth.abs(mth.rndm(g._W_B_a.value-100,g._W_B_a.value)),g._W_B_god_s.value/300,g._W_B_f.value,g._W_B_god_x.value/300,g._W_B_god_y.value/300)
	end
end

menu.add_feature("Apply recommended hotkeys?","action",g.prnt.optns_gw_b_htky.id,function()
funcs.doo.gw_keys_set_recc()
end)

g.feat.gw_expld_key=menu.add_feature("Key1 for GW vk_xpld","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_expld_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_expld_key,"g.feat.gw_expld_key")
g.feat.gw_expld_key.hidden=true

g.feat.gw_expld_set=menu.add_feature("Set key for Explode","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Explode",g.feat.gw_expld_key)
	f.name = "Set key for Explode ("..inputs.vk_list[g.feat.gw_expld_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_damdes_key=menu.add_feature("Key1 for GW vk_dmg","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_damdes_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_damdes_key,"g.feat.gw_damdes_key")
g.feat.gw_damdes_key.hidden=true

g.feat.gw_damdes_set=menu.add_feature("Set key for Damage/Destroy/Delete","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Damage/Destroy/Delete",g.feat.gw_damdes_key)
	f.name = "Set key for Damage/Destroy/Delete ("..inputs.vk_list[g.feat.gw_damdes_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_board_key=menu.add_feature("Key1 for GW vk_brd","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_board_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_board_key,"g.feat.gw_board_key")
g.feat.gw_board_key.hidden=true

g.feat.gw_board_set=menu.add_feature("Set key for Boarding","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Boarding",g.feat.gw_board_key)
	f.name = "Set key for Boarding ("..inputs.vk_list[g.feat.gw_board_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_accel_key=menu.add_feature("Key1 for GW vk_accl","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_accel_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_accel_key,"g.feat.gw_accel_key")
g.feat.gw_accel_key.hidden=true

g.feat.gw_accel_set=menu.add_feature("Set key for Accel","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Accel",g.feat.gw_accel_key)
	f.name = "Set key for Accel ("..inputs.vk_list[g.feat.gw_accel_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_rvrs_key=menu.add_feature("Key1 for GW vk_rvrs","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_rvrs_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_rvrs_key,"g.feat.gw_rvrs_key")
g.feat.gw_rvrs_key.hidden=true

g.feat.gw_rvrs_set=menu.add_feature("Set key for Stop/Reverse","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Stop/Reverse",g.feat.gw_rvrs_key)
	f.name = "Set key for Stop/Reverse ("..inputs.vk_list[g.feat.gw_rvrs_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_rpr_key=menu.add_feature("Key1 for GW vk_rpr","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_rpr_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_rpr_key,"g.feat.gw_rpr_key")
g.feat.gw_rpr_key.hidden=true

g.feat.gw_rpr_set=menu.add_feature("Set key for Repair","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Repair",g.feat.gw_rpr_key)
	f.name = "Set key for Repair ("..inputs.vk_list[g.feat.gw_rpr_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_ele_key=menu.add_feature("Key1 for GW vk_ele","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_ele_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_ele_key,"g.feat.gw_ele_key")
g.feat.gw_ele_key.hidden=true

g.feat.gw_ele_set=menu.add_feature("Set key for Elevate/Up","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Elevate/Up",g.feat.gw_ele_key)
	f.name = "Set key for Elevate/Up ("..inputs.vk_list[g.feat.gw_ele_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_d_ele_key=menu.add_feature("Key1 for GW vk_de_ele_rag","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_d_ele_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_d_ele_key,"g.feat.gw_d_ele_key")
g.feat.gw_d_ele_key.hidden=true

g.feat.gw_d_ele_set=menu.add_feature("Set key for De-Elevate/Down/Ragdoll","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch De-Elevate/Down/Ragdoll",g.feat.gw_d_ele_key)
	f.name = "Set key for De-Elevate/Down/Ragdoll ("..inputs.vk_list[g.feat.gw_d_ele_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_upgr_key=menu.add_feature("Key1 for GW vk_upgr","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_upgr_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_upgr_key,"g.feat.gw_upgr_key")
g.feat.gw_upgr_key.hidden=true

g.feat.gw_upgr_set=menu.add_feature("Set key for Upgrade","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Upgrade",g.feat.gw_upgr_key)
	f.name = "Set key for Upgrade ("..inputs.vk_list[g.feat.gw_upgr_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_burn_key=menu.add_feature("Key1 for GW vk_brn","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_burn_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_burn_key,"g.feat.gw_burn_key")
g.feat.gw_burn_key.hidden=true

g.feat.gw_burn_set=menu.add_feature("Set key for Burn","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Burn",g.feat.gw_burn_key)
	f.name = "Set key for Burn ("..inputs.vk_list[g.feat.gw_burn_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_kick_key=menu.add_feature("Key1 for GW vk_kck","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_kick_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_kick_key,"g.feat.gw_kick_key")
g.feat.gw_kick_key.hidden=true

g.feat.gw_kick_set=menu.add_feature("Set key for Kick","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Kick",g.feat.gw_kick_key)
	f.name = "Set key for Kick ("..inputs.vk_list[g.feat.gw_kick_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_god_key=menu.add_feature("Key1 for GW vk_god","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_god_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_god_key,"g.feat.gw_god_key")
g.feat.gw_god_key.hidden=true

g.feat.gw_god_set=menu.add_feature("Set key for God-Toggle","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch God-Toggle",g.feat.gw_god_key)
	f.name = "Set key for God-Toggle ("..inputs.vk_list[g.feat.gw_god_key.value+1]..")"
end)

-------------------------------------------------------------------------------------------------------------
g.feat.gw_ntr_key=menu.add_feature("Key1 for GW vk_ntr","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_ntr_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_ntr_key,"g.feat.gw_ntr_key")
g.feat.gw_ntr_key.hidden=true

g.feat.gw_ntr_set=menu.add_feature("Set key for Neuter","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Neuter",g.feat.gw_ntr_key)
	f.name = "Set key for Neuter ("..inputs.vk_list[g.feat.gw_ntr_key.value+1]..")"
end)

-------------------------------------------------------------------------------------------------------------
g.feat.gw_tp_key=menu.add_feature("Key1 for GW vk_tp","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_tp_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_tp_key,"g.feat.gw_tp_key")
g.feat.gw_tp_key.hidden=true

g.feat.gw_tp_set=menu.add_feature("Set key for Teleport","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Teleport",g.feat.gw_tp_key)
	f.name = "Set key for Teleport ("..inputs.vk_list[g.feat.gw_tp_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_clone_key=menu.add_feature("Key1 for GW vk_clone","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_clone_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_clone_key,"g.feat.gw_clone_key")
g.feat.gw_clone_key.hidden=true

g.feat.gw_clone_set=menu.add_feature("Set key for Clone","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Clone",g.feat.gw_clone_key)
	f.name = "Set key for Clone ("..inputs.vk_list[g.feat.gw_clone_key.value+1]..")"
end)
-------------------------------------------------------------------------------------------------------------
g.feat.gw_mark_key=menu.add_feature("Key1 for GW vk_mark","action_value_str",g.prnt.optns_gw_b_htky.id)
g.feat.gw_mark_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.gw_mark_key,"g.feat.gw_mark_key")
g.feat.gw_mark_key.hidden=true

g.feat.gw_mark_set=menu.add_feature("Set key for Mark","action",g.prnt.optns_gw_b_htky.id,function(f)
	funcs.doo.set_keybinds(1,"Gee-Watch Mark",g.feat.gw_mark_key)
	f.name = "Set key for Mark ("..inputs.vk_list[g.feat.gw_mark_key.value+1]..")"
end)
function funcs.doo.gw_keys_set_recc()
g.feat.gw_expld_key.value=23
g.feat.gw_damdes_key.value=63
g.feat.gw_board_key.value=5
g.feat.gw_accel_key.value=4
g.feat.gw_rvrs_key.value=2
g.feat.gw_rpr_key.value=17
g.feat.gw_ele_key.value=16
g.feat.gw_d_ele_key.value=25
g.feat.gw_upgr_key.value=20
g.feat.gw_burn_key.value=21
g.feat.gw_kick_key.value=10
g.feat.gw_god_key.value=7
g.feat.gw_ntr_key.value=13
g.feat.gw_tp_key.value=19
g.feat.gw_clone_key.value=85
g.feat.gw_mark_key.value=12
funcs.doo.gw_keys_set_names()
end

function funcs.doo.gw_keys_set_names()
g.feat.gw_expld_set.name = "Set key for Explode ("..inputs.vk_list[g.feat.gw_expld_key.value+1]..")"
g.feat.gw_damdes_set.name = "Set key for Damage/Destroy/Delete ("..inputs.vk_list[g.feat.gw_damdes_key.value+1]..")"
g.feat.gw_board_set.name = "Set key for Boarding ("..inputs.vk_list[g.feat.gw_board_key.value+1]..")"
g.feat.gw_accel_set.name = "Set key for Accel ("..inputs.vk_list[g.feat.gw_accel_key.value+1]..")"
g.feat.gw_rvrs_set.name = "Set key for Stop/Reverse ("..inputs.vk_list[g.feat.gw_rvrs_key.value+1]..")"
g.feat.gw_rpr_set.name = "Set key for Repair ("..inputs.vk_list[g.feat.gw_rpr_key.value+1]..")"
g.feat.gw_ele_set.name = "Set key for Elevate/Up ("..inputs.vk_list[g.feat.gw_ele_key.value+1]..")"
g.feat.gw_d_ele_set.name = "Set key for De-Elevate/Down/Ragdoll ("..inputs.vk_list[g.feat.gw_d_ele_key.value+1]..")"
g.feat.gw_upgr_set.name = "Set key for Upgrade ("..inputs.vk_list[g.feat.gw_upgr_key.value+1]..")"
g.feat.gw_burn_set.name = "Set key for Burn ("..inputs.vk_list[g.feat.gw_burn_key.value+1]..")"
g.feat.gw_kick_set.name = "Set key for Kick ("..inputs.vk_list[g.feat.gw_kick_key.value+1]..")"
g.feat.gw_god_set.name = "Set key for God-Toggle ("..inputs.vk_list[g.feat.gw_god_key.value+1]..")"
g.feat.gw_ntr_set.name = "Set key for Neuter ("..inputs.vk_list[g.feat.gw_ntr_key.value+1]..")"
g.feat.gw_tp_set.name = "Set key for Teleport ("..inputs.vk_list[g.feat.gw_tp_key.value+1]..")"
g.feat.gw_clone_set.name = "Set key for Clone ("..inputs.vk_list[g.feat.gw_clone_key.value+1]..")"
g.feat.gw_mark_set.name = "Set key for Mark ("..inputs.vk_list[g.feat.gw_mark_key.value+1]..")"
end
funcs.doo.gw_keys_set_recc()



function funcs.doo.GW_neuter(_ent,_time)
	if funcs.is.ent(_ent) then
		if g.tbl.gw_ntr.hist[_ent] ~= nil and g.tbl.gw_ntr.hist[_ent][1] then
			if funcs.is.veh(_ent) and funcs.ntwrk.ask_long(_ent,_time) then
				if g.tbl.gw_ntr.veh_hlth.on then
					API.veh.set.engine_health(_ent, 1000)
				end
				API.ent.set.max_speed(_ent,45000)
				g.tbl.gw_ntr.hist[_ent]={false,-1}
				return true
			elseif funcs.is.ped(_ent) then
				if g.tbl.gw_ntr.ped_weap.on and g.tbl.gw_ntr.hist[_ent][2] ~= -1 then
					funcs.doo.give_ped_weap2(_ent,g.tbl.gw_ntr.hist[_ent][2])
				end
				if not API.Ped.is.plyr(_ent) and funcs.ntwrk.ask_long(_ent,_time) then
					if g.tbl.gw_ntr.ped_hlth.on then
						funcs.doo.set_ped_health(_ent,200,100)
					end
					API.ent.set.max_speed(_ent,45000)
				end
				g.tbl.gw_ntr.hist[_ent]={false,-1}
				return true
			end
		else
			g.tbl.gw_ntr.hist[_ent]={false,-1}
			if funcs.is.veh(_ent) and funcs.ntwrk.ask_long(_ent,_time) then
				if g.tbl.gw_ntr.veh_weap.on and ntv.is.veh_have_weap(_ent) then
					ntv.doo.rmv_veh_weap(_ent)
				end
				if g.tbl.gw_ntr.veh_hlth.on then
					if ntv.get.veh_engine_health(_ent,false) ~= g.tbl.gw_ntr.veh_hlth.value then 
						API.veh.set.engine_health(_ent, g.tbl.gw_ntr.veh_hlth.value)
					end
				end
				if g.tbl.gw_ntr.veh_speed.on then
					API.ent.set.max_speed(_ent,g.tbl.gw_ntr.veh_speed.value)
				end
				g.tbl.gw_ntr.hist[_ent]={true,-1}
				return true
			elseif funcs.is.ped(_ent) then
				if g.tbl.gw_ntr.ped_weap.on and API.Ped.get.weapon(_ent) ~= API.get_hash_key("weapon_unarmed") then
					g.tbl.gw_ntr.hist[_ent]={true,API.Ped.get.weapon(_ent)}
					API.wpn.ped_remove(_ent, API.Ped.get.weapon(_ent))
				end
				if not API.Ped.is.plyr(_ent) then
					if g.tbl.gw_ntr.ped_hlth.on and API.Ped.get.health(_ent) ~= g.tbl.gw_ntr.ped_hlth.value then
						funcs.doo.set_ped_health(_ent,g.tbl.gw_ntr.ped_hlth.value,100)
					end
					if g.tbl.gw_ntr.ped_speed.on then
						API.ent.set.max_speed(_ent,g.tbl.gw_ntr.ped_speed.value)
					end
					g.tbl.gw_ntr.hist[_ent][1]=true
				end
				return true
			end
		end
	end
	return false
end

g.tbl.gw_ntr={}
g.tbl.gw_ntr.hist={}
g.tbl.gw_ntr.prnt = menu.add_feature("Gee-Watch Neuter", "parent", g.prnt.optns_gw_b.id)

g.tbl.gw_ntr.veh_hlth=menu.add_feature("Set vehicle engine health","value_f",g.tbl.gw_ntr.prnt.id)
funcs.set_feat_i_f(g.tbl.gw_ntr.veh_hlth,0,1000,50,500,"g.tbl.gw_ntr.veh_hlth")
g.tbl.gw_ntr.veh_hlth.on=true

g.tbl.gw_ntr.veh_speed=menu.add_feature("Set vehicle speed","value_f",g.tbl.gw_ntr.prnt.id)
funcs.set_feat_i_f(g.tbl.gw_ntr.veh_speed,0,50,0.5,5,"g.tbl.gw_ntr.veh_speed")
g.tbl.gw_ntr.veh_speed.on=true

g.tbl.gw_ntr.veh_weap=menu.add_feature("Remove vehicle weapon (Irreversible)","toggle",g.tbl.gw_ntr.prnt.id)
funcs.add_to_S_L(g.tbl.gw_ntr.veh_weap,"g.tbl.gw_ntr.veh_weap")
g.tbl.gw_ntr.veh_weap.on=true

g.tbl.gw_ntr.ped_hlth=menu.add_feature("Set ped health","value_f",g.tbl.gw_ntr.prnt.id)
funcs.set_feat_i_f(g.tbl.gw_ntr.ped_hlth,100,500,10,120,"g.tbl.gw_ntr.ped_hlth")
g.tbl.gw_ntr.ped_hlth.on=true

g.tbl.gw_ntr.ped_speed=menu.add_feature("Set ped speed","value_f",g.tbl.gw_ntr.prnt.id)
funcs.set_feat_i_f(g.tbl.gw_ntr.ped_speed,0,5,.5,2,"g.tbl.gw_ntr.ped_speed")
g.tbl.gw_ntr.ped_speed.on=true

g.tbl.gw_ntr.ped_weap=menu.add_feature("Remove ped/player current weapon","toggle",g.tbl.gw_ntr.prnt.id)
funcs.add_to_S_L(g.tbl.gw_ntr.ped_weap,"g.tbl.gw_ntr.ped_weap")
g.tbl.gw_ntr.ped_weap.on=true


-----------------------------------------------------------------------------------------GEE-SKID
------------------------------------------------------------------------------------------Options
------------------------------------------------------------------------------Watch_Boost_Options
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g._ped_veh_accel = menu.add_feature("Vehicle/Ped Accel", "action_slider", g.prnt.optns_gw_b.id)
funcs.set_feat_i_f(g._ped_veh_accel,10,200,10,10,"g._ped_veh_accel")

g._ped_veh_revers = menu.add_feature("Vehicle Reverse", "action_slider", g.prnt.optns_gw_b.id)
funcs.set_feat_i_f(g._ped_veh_revers,0,200,10,0,"g._ped_veh_revers")

g._ped_veh_up = menu.add_feature("Vehicle/Ped Go Up", "action_slider", g.prnt.optns_gw_b.id)
funcs.set_feat_i_f(g._ped_veh_up,0,200,10,50,"g._ped_veh_up")

g._ped_veh_down = menu.add_feature("Vehicle/Ped Go Down", "action_slider", g.prnt.optns_gw_b.id)
funcs.set_feat_i_f(g._ped_veh_down,0,200,10,50,"g._ped_veh_down")

g._gee_eye_bypass = menu.add_feature("Prevent Gee-Eye/Gee-Watch interference", "toggle", g.prnt.optns_gw_b.id, function(f)
	if f.on and funcs.is.GS_loaded() then
		for k,v in pairs({
			{g.feat.gw_expld_key,"Explode"},
			{g.feat.gw_damdes_key,"Damage/Destroy/Delete"},
			{g.feat.gw_kick_key,"Kick"},
			{g.feat.gw_burn_key,"Burn"},
			{g.feat.gw_board_key,"Board"},
			{g.feat.gw_accel_key,"Accel"},
			{g.feat.gw_rvrs_key,"Stop/Reverse"},
			{g.feat.gw_rpr_key,"Repair"},
			{g.feat.gw_upgr_key,"Upgrade"},
			{g.feat.gw_ele_key,"Elevate/Up"},
			{g.feat.gw_god_key,"God toggle"},
			{g.feat.gw_ntr_key,"Neuter"},
			{g.feat.gw_tp_key,"Teleport"},
			{g.feat.gw_clone_key,"Clone"},
			{g.feat.gw_mark_key,"Mark"},
			{g.feat.gw_d_ele_key,"Down/Ragdoll"}}) do
			if inputs.vk_list[v[1].value+1] == inputs.vk_list[g.tbl.ge.slct_key1.value+1] then
				g.N_P(2,"Gee-Watch ("..inputs.vk_list[v[1].value+1]..") "..v[2].." will be disabled while Gee-Eye is enabled.",__GV__,5,"Yellow")
				return
			end
		end
		g.N_P(2,"Gee-Eye and Gee-Watch currently don't have conflicting keys.",__GV__,5,"Blue")
	end	
end) 
funcs.add_to_S_L(g._gee_eye_bypass,"g._gee_eye_bypass")

g._gee_watch_destroy = menu.add_feature("Upgrade Damage to Destroy?", "toggle", g.prnt.optns_gw_b.id, function(f)
	if funcs.is.GS_loaded() then
		if f.on then g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_damdes_key.value+1]..") set to Destroy.",__GV__,5,"Blue")
		else g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_damdes_key.value+1]..") set to Damage.",__GV__,5,"Blue")
		end
	end	
end)
funcs.add_to_S_L(g._gee_watch_destroy,"g._gee_watch_destroy")

g._gee_watch_passenger = menu.add_feature("Boarding player vehicle", "action_value_str", g.prnt.optns_gw_b.id, function(f)
	if funcs.is.GS_loaded() then
		if f.on then g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_board_key.value+1]..") boarding players will only hijack if there is no free seat.",__GV__,5,"Blue")
		else g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_board_key.value+1]..") boarding players will always take driver seat.",__GV__,5,"Blue")
		end
	end
end)
g._gee_watch_passenger:set_str_data({"Only empty seat","Prefer empty seat","Always hijack"})
funcs.add_to_S_L(g._gee_watch_passenger,"g._gee_watch_passenger")
g._gee_watch_passenger.value=1

g._gee_watch_passenger_npc = menu.add_feature("Boarding NPC vehicle", "action_value_str", g.prnt.optns_gw_b.id, function(f)
	if funcs.is.GS_loaded() then
		if f.on then g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_board_key.value+1]..") boarding NPCs will only hijack if there is no free seat.",__GV__,5,"Blue")
		else g.N_P(2,"Gee-Watch ("..inputs.vk_list[g.feat.gw_board_key.value+1]..") boarding NPCs will always take driver seat.",__GV__,5,"Blue")
		end
	end
end)
g._gee_watch_passenger_npc:set_str_data({"Only empty seat","Prefer empty seat","Always hijack"})
funcs.add_to_S_L(g._gee_watch_passenger_npc,"g._gee_watch_passenger_npc")
g._gee_watch_passenger_npc.value=2

g._gee_watch_player_info = menu.add_feature("Display player info notification?", "toggle", g.prnt.optns_gw_b.id, function(f)
	if f.on and funcs.is.GS_loaded() then
		g.N_P(2,"Gee-Watch will display player info when aiming at them.",__GV__,4,"Blue")
	end
end) 
funcs.add_to_S_L(g._gee_watch_player_info,"g._gee_watch_player_info")

g._gee_watch_tp_speed = menu.add_feature("Retain speed when teleporting", "toggle", g.prnt.optns_gw_b.id)
funcs.add_to_S_L(g._gee_watch_tp_speed,"g._gee_watch_tp_speed")
-----------------------------------------------------------------------------------------GEE-SKID
------------------------------------------------------------------------------------------Options
------------------------------------------------------------------------------Watch_Boost_Options
------------------------------------------------------------------------------Watch_Boost_Display
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g._Watch_display = menu.add_feature("Gee-Watch display overlay", "toggle", g.prnt.optns_gw_b_dsply.id,function(f)
	if f.on and funcs.is.GS_loaded() then
		g.N_P(2,"Gee-Watch overlay will display when aiming at an entity.",__GV__,4,"Blue")
	end
	g._W_B_settings_hide()
end)
funcs.add_to_S_L(g._Watch_display,"g._Watch_display")

g._test_w_display_action = menu.add_feature("Display test overlay?", "action", g.prnt.optns_gw_b_dsply.id, function()
	g._test_w_display_action.hidden=true
	g.N_P(2,"Gee-Watch test overlay will display for 10 seconds",__GV__,3,"Blue")
	local time = API.util.t_ms() +10000
	while time > API.util.t_ms() do
		system.yield(0)
		funcs.doo.overlay("Explode Destroy Damage Delete Kick Burn Hijack Accel Reverse Repair Upgrade Up Ragdoll Down",g._W_B_cr.value,g._W_B_cg.value,g._W_B_cb.value,g._W_B_a.value,g._W_B_s.value/300,g._W_B_f.value,g._W_B_x.value/300,g._W_B_y.value/300)
	end
	g.N_P(2,"Gee-Watch test overlay is finished.",__GV__,3,"Blue")
	g._test_w_display_action.hidden=false
end)


g._W_B_x = menu.add_feature("X Pos", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_x,0,300,1,150,"g._W_B_x")

g._W_B_y = menu.add_feature("Y Pos", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_y,0,300,1,289,"g._W_B_y")

g._W_B_s = menu.add_feature("Scale", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_s,75,300,1,170,"g._W_B_s")

g._W_B_f = menu.add_feature("Font", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_f,0,9,1,6,"g._W_B_f")

g._W_B_cr = menu.add_feature("Red", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_cr,0,255,1,0,"g._W_B_cr")

g._W_B_cg = menu.add_feature("Green", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_cg,0,255,1,255,"g._W_B_cg")

g._W_B_cb = menu.add_feature("Blue", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_cb,0,255,1,0,"g._W_B_cb")

g._W_B_a = menu.add_feature("Alpha", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_a,30,255,1,105,"g._W_B_a")

g._W_B_highlight_show = menu.add_feature("Highlight entity", "toggle", g.prnt.optns_gw_b_dsply.id,function(f)
	if f.on and funcs.is.GS_loaded() then
		g.N_P(2,"A light will shine on the Gee-Watch aim entity.\nThe brightness adjusts according to the hour of the day.",__GV__,5,"Blue")
	end
	g._W_B_settings_hide()
end)
funcs.add_to_S_L(g._W_B_highlight_show,"g._W_B_highlight_show")

g._W_B_highlight_bright=menu.add_feature("Highlight brightness", "action_value_f", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_highlight_bright,0.2,2,0.1,1,"g._W_B_highlight_bright")

g._W_B_ring_show = menu.add_feature("Circle entity", "toggle", g.prnt.optns_gw_b_dsply.id,function()
	g._W_B_settings_hide()
end)
funcs.add_to_S_L(g._W_B_ring_show,"g._W_B_ring_show")

g._W_B_ring_bright=menu.add_feature("Circle brightness", "action_value_f", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_ring_bright,0.2,2,0.1,1,"g._W_B_ring_bright")

g._W_B_god_show = menu.add_feature("Show God detected", "toggle", g.prnt.optns_gw_b_dsply.id,function()
	g._W_B_settings_hide()
end)
funcs.add_to_S_L(g._W_B_god_show,"g._W_B_god_show")

g._test_g_display_action = menu.add_feature("Display test god?", "action", g.prnt.optns_gw_b_dsply.id, function(f)
	f.hidden=true
	g.N_P(2,"God-detected test will display for 10 seconds",__GV__,3,"Blue")
	local time = API.util.t_ms() +10000
	while time > API.util.t_ms() do
		system.yield(0)
		funcs.doo.GW_god_show()
	end
	g.N_P(2,"God-detected test is finished.",__GV__,3,"Blue")
	f.hidden=false
end)

g._W_B_god_x = menu.add_feature("God detected X pos", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_god_x,0,300,1,0,"g._W_B_god_x")

g._W_B_god_y = menu.add_feature("God detected Y pos", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_god_y,0,300,1,0,"g._W_B_god_y")

g._W_B_god_s = menu.add_feature("God detected scale", "action_slider", g.prnt.optns_gw_b_dsply.id)
funcs.set_feat_i_f(g._W_B_god_s,75,300,1,0,"g._W_B_god_s")

g._W_B__display_rec = menu.add_feature("Apply recommended settings?", "action", g.prnt.optns_gw_b_dsply.id, function(f)
funcs.doo.GW_recc_sett()
end)

function g._W_B_settings_hide(_bool)
	g._W_B_x.hidden=(not g._Watch_display.on)
	g._W_B_y.hidden=(not g._Watch_display.on)
	g._W_B_s.hidden=(not g._Watch_display.on)
	g._W_B_f.hidden=(not g._Watch_display.on)
	g._W_B_cr.hidden=(not g._Watch_display.on)
	g._W_B_cg.hidden=(not g._Watch_display.on)
	g._W_B_cb.hidden=(not g._Watch_display.on)
	g._W_B_a.hidden=(not g._Watch_display.on)
	g._test_w_display_action.hidden=(not g._Watch_display.on)
	g._test_g_display_action.hidden=(not g._W_B_god_show.on)
	g._W_B_god_x.hidden=(not g._W_B_god_show.on)
	g._W_B_god_y.hidden=(not g._W_B_god_show.on)
	g._W_B_god_s.hidden=(not g._W_B_god_show.on)
	g._W_B_ring_bright.hidden=(not g._W_B_ring_show.on)
	g._W_B_highlight_bright.hidden=(not g._W_B_highlight_show.on)
end

function funcs.doo.GW_recc_sett()
	g._ped_veh_accel.value=120.0
	g._ped_veh_revers.value=0.0
	g._ped_veh_up.value=200.0
	g._ped_veh_down.value=90.0
	g._W_B_x.value=150.0
	g._W_B_y.value=289.0
	g._W_B_s.value=170.0
	g._W_B_f.value=6.0
	g._W_B_cr.value=0.0
	g._W_B_cg.value=255.0
	g._W_B_cb.value=0.0
	g._W_B_a.value=105.0
	g._W_B_god_x.value=150.0
	g._W_B_god_y.value=142.0
	g._W_B_god_s.value=213.0
	g._Watch_display.on=true
	g._gee_eye_bypass.on=true
	g._W_B_highlight_show.on=true
	g._W_B_highlight_bright.value=1
	g._W_B_ring_show.on=true
	g._W_B_ring_bright.value=1
	g._W_B_god_show.on=true
end
funcs.doo.GW_recc_sett()
------------------------------------------------------------------------------------------GeeSkid 
---------------------------------------------------------------------------------------------Self
-------------------------------------------------------------------------------------TeleportSelf
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g.feat.self_veh_tp_best_seat_auto=menu.add_feature("Best free seat", "value_str", g.prnt.self_teleport_seat.id, function(f)--will TP you to the driver seat or closest to it
	g.feat.self_veh_tp_driver_seat_auto.on=false
	if not funcs.ME._in_veh() and funcs.is.GS_loaded() and f.on then
		g.N_P(2,"You are not in a vehicle.\nWaiting to Auto-TP...",__GV__,4,"Blue")
	end	
	local my_veh,my_seat,free_seat,npc_or_dead_fail,time
	while f.on do
		system.yield(250)
		if funcs.ME._in_veh() and not funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id())) then
			my_veh=API.plyr.get.veh(API.plyr.my_id())
			my_seat = funcs.get.what_seat_plyr_in(my_veh,API.plyr.my_id())
			free_seat,npc_or_dead_fail = funcs.get.first_free_seat(my_veh,true)
			if free_seat > -2 and my_seat > free_seat then
				for i = 0,funcs.get.veh_seats(my_veh) do
					if my_seat > i-1 then
						if funcs.is.seat_empty(my_veh, i-1) then
							API.Ped.set.into_veh(API.plyr.get.ped(API.plyr.my_id()),my_veh,i-1)	
							break
						elseif f.value == 0 and funcs.is.ent(my_veh) and not API.Ped.is.plyr(API.veh.get.ped_in_seat(my_veh, i-1)) then
							API.Ped.clear_tasks(API.veh.get.ped_in_seat(my_veh, i-1))
							time = API.util.t_ms() + 500
							while time > API.util.t_ms() and funcs.is.ent(my_veh) and funcs.is.ent(API.veh.get.ped_in_seat(my_veh, i-1)) do
								system.yield(0)
							end
							if funcs.is.seat_empty(my_veh, i-1) then
								API.Ped.set.into_veh(API.plyr.get.ped(API.plyr.my_id()),my_veh,i-1)	
								break
							else
								npc_or_dead_fail=true
							end
						end
					end
				end
			end
			if npc_or_dead_fail then
				system.yield(5000) -- prevents it from tying to kick out or delete dead peds repeatedly
			end
		end
	end
end)
g.feat.self_veh_tp_best_seat_auto:set_str_data({"Take NPC Seat","Only empty seat"})
funcs.add_to_S_L(g.feat.self_veh_tp_best_seat_auto,"g.feat.self_veh_tp_best_seat_auto")

g.feat.self_veh_tp_driver_seat_auto=menu.add_feature("Hijack", "value_str", g.prnt.self_teleport_seat.id, function(f)
	g.feat.self_veh_tp_best_seat_auto.on=false
	if not funcs.ME._in_veh() and funcs.is.GS_loaded() and f.on then
		g.N_P(2,"You are not in a vehicle.\nWaiting to Auto-Hijack...",__GV__,4,"Blue")
	end	
	local me,friend,same_orgmc,continue,my_ped,name
	while f.on do
		system.yield(250)
		me=API.plyr.my_id()
		friend,same_orgmc,continue = false,false,false
		if funcs.ME._in_veh() and not funcs.ME._driving(API.plyr.get.veh(me)) then
			my_ped=API.plyr.get.ped(me) 
			if funcs.is.seat_empty(API.plyr.get.veh(me),-1) then
				API.Ped.set.into_veh(my_ped,API.plyr.get.veh(me),-1)	
			else
				if API.Ped.is.plyr(API.veh.get.ped_in_seat(API.plyr.get.veh(me), -1)) then
					if API.plyr.is.friend(API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(API.plyr.get.veh(me), -1))) then
						friend = true
					end
					if funcs.is.same_orgmc(me,API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(API.plyr.get.veh(me), -1))) then
						same_orgmc = true
					end
				end
				if f.value == 3 or (not friend and not same_orgmc) then
					continue = true
				elseif f.value == 1 and not friend then
					continue = true
				elseif f.value == 2 and not same_orgmc then
					continue=true
				end
				if continue then
					name = funcs.get.pid_name(API.veh.get.ped_in_seat(API.plyr.get.veh(me), -1))
					if funcs.doo.veh_tp_into_hijack(API.plyr.get.veh(me),true) then
						g.N_P(2,name.." - Kicked out :)",__GV__,4,"Green")
					else
						g.N_P(2,name.." - FAILED to Kick out :(",__GV__,4,"Red")
						system.yield(5000)
					end
				end
			end
		end
	end
end)
g.feat.self_veh_tp_driver_seat_auto:set_str_data({"Not friends/org/mc","Not friends","Not org/mc","Anyone"})
funcs.add_to_S_L(g.feat.self_veh_tp_driver_seat_auto,"g.feat.self_veh_tp_driver_seat_auto")

menu.add_feature("Free seat in current vehicle", "action", g.prnt.self_teleport.id, function(f)
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle...",__GV__,4,"Blue")
	else
		local me=API.plyr.my_id()
		local my_ped=API.plyr.get.ped(me)
		local my_veh=API.plyr.get.veh(me)
		local seat_count = funcs.get.veh_seats(my_veh)
		if funcs.is.seat_empty(my_veh,-1) then
			API.Ped.set.into_veh(my_ped,my_veh,-1)
		elseif vehicle.is_vehicle_full(my_veh) then
			for i=1,seat_count-1 do
				local random_seat = mth.rndm(0,seat_count-2)
				if funcs.is.seat_empty(my_veh,random_seat) then
					API.Ped.set.into_veh(my_ped,my_veh,random_seat)
					break
				end
			end
		else
			g.N_P(2,"Vehicle is full.",__GV__,4,"Blue")
		end
	end
end)

menu.add_feature("Hijack driver seat in current vehicle", "action", g.prnt.self_teleport.id, function()
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle.",__GV__,4,"Blue")
	else
		local me=API.plyr.my_id()
		if funcs.ME._driving(API.plyr.get.veh(me)) then
			g.N_P(2,"You are already driving!",__GV__,4,"Blue")
		elseif funcs.is.seat_empty(API.plyr.get.veh(me),-1) then
			API.Ped.set.into_veh(API.plyr.get.ped(me),API.plyr.get.veh(me),-1)
		else
			local name = funcs.get.pid_name(API.veh.get.ped_in_seat(API.plyr.get.veh(me), -1))
			if funcs.doo.veh_tp_into_hijack(API.plyr.get.veh(me),true) then
				g.N_P(2,name.." - Kicked out :)",__GV__,4,"Green")
			else
				g.N_P(2,name.." - FAILED to Kick out :(",__GV__,4,"Red")
			end
		end
	end
end)

g.var.rand_pid_last_for_tp = 32
g.feat.tp_into_rndm_plyr_veh=menu.add_feature("Into random player vehicle", "action_value_str", g.prnt.self_teleport.id, function(f,pid)
	if API.plyr.count() < 2 then
		g.N_P(2,"You are the only player in session.",__GV__,4,"Blue")
	else
		local pid_table,pid_table2 = funcs.get.rand_pid_table(),{}
		local previous = nil
		for i=1,#pid_table do
			if funcs.is.valid_pid(pid_table[i]) and pid_table[i] ~= funcs.ME._id() and API.plyr.get.coords(pid_table[i]).z > -51 then
				if API.plyr.is.in_veh(pid_table[i]) or funcs.get.dist_me_pid_3d(pid_table[i]) > 250 then
					if not funcs.ME._in_that_veh(API.plyr.get.veh(pid_table[i])) then
						if g.var.rand_pid_last_for_tp == pid_table[i] then
							previous=pid_table[i]
						else
							pid_table2[#pid_table2+1]=pid_table[i]
						end
					end
				end
			end
		end
		if previous then
			pid_table2[#pid_table2+1] = previous
		end
		if #pid_table2 == 0 then
			g.N_P(2,"No available players.",__GV__,4,"Blue")
		else
			funcs.doo.tp_into_plyr_veh2(pid_table2,f.value,true)
		end
	end
end)
g.feat.tp_into_rndm_plyr_veh:set_str_data({"Free Seat","Their Seat","Hijack"})
funcs.add_to_S_L(g.feat.tp_into_rndm_plyr_veh,"g.feat.tp_into_rndm_plyr_veh")

g.feat.tp_near_rndm_plyr=menu.add_feature("Near random player", "action_value_str", g.prnt.self_teleport.id, function(f,pid)
	if (API.plyr.count()-1) < 1 then --  -1 for SP
		g.N_P(2,"You are the only player in session.",__GV__,4,"Blue")
	else
		local _water = "no_water"
		local plyr_pos = v3(0,0,0)
		local plyr=nil
		if f.value == 1 then
			_water = "water"
		end
		local pid_table = funcs.get.rand_pid_table()
		for i=1,#pid_table do
			if funcs.is.valid_pid(pid_table[i]) and (pid_table[i] ~= API.plyr.my_id()) then
				 if not intrr.is_pid_intrr(pid_table[i]) and not funcs.ME._in_that_veh(API.plyr.get.veh(pid_table[i])) then
					if (API.plyr.get.coords(pid_table[i]) ~= plyr_pos) and (pid_table[i] ~= g.var.rand_pid_last_for_tp) then
						plyr_pos = funcs.get.pos_nearby(funcs.get.pos_offst_pid(pid_table[i],10,"behind",0),"single_50_dist",100,_water,"xy")
						plyr=pid_table[i] 
						break
					end
				end
			end
		end
		if plyr_pos == v3(0,0,0) then
			if funcs.is.valid_pid(g.var.rand_pid_last_for_tp) then
				plyr_pos =  funcs.get.pos_nearby(funcs.get.pos_offst_pid(g.var.rand_pid_last_for_tp,10,"behind",0),"single_50_dist",100,_water,"xy")
			else
				g.N_P(2,"No player available.",__GV__,4,"Blue")
			end
		end
		if plyr_pos == v3(0,0,0) then
			g.N_P(2,"No player available.",__GV__,4,"Blue")
		elseif funcs.ME._in_veh() then
			if not funcs.doo.tp_ent(g.tbl.PID_INFO.veh[API.plyr.my_id()+1],plyr_pos, 0 ,false) then
				g.N_P(2,funcs.get.pid_name(API.plyr.my_id()).."  -  "..funcs.get.veh_model_name(g.tbl.PID_INFO.veh[API.plyr.my_id()+1]).."\nFailed to get control of vehicle :(",__GV__,4,"Red")
			else
				g.var.rand_pid_last_for_tp=plyr
			end
		else
			API.ent.set.coords(API.plyr.get.ped(API.plyr.my_id()),plyr_pos)
			g.var.rand_pid_last_for_tp=plyr
		end
		pid_table = nil
	end
end)
g.feat.tp_near_rndm_plyr:set_str_data({"Ignore water","Anywhere"})
funcs.add_to_S_L(g.feat.tp_near_rndm_plyr,"g.feat.tp_near_rndm_plyr")

function funcs.doo.tp_into_plyr_veh2(_table,_action,_bypass)
	local hover_tbl,i_hovered,completed,not_needed = funcs.get.hover_info(),false,false,false
	local pid,veh,stop,time,seat,no_veh
	g.tbl.online_plyr_temp[#g.tbl.online_plyr_temp+1]=false
	local name = funcs.get.pid_name(_table[1])
	local temp = #g.tbl.online_plyr_temp
	local function should_continue()
		if (_action == 0 and funcs.get.num_empty_seats(veh) == 0) or
			(_action == 1 and pid == funcs.ME._id()) or
			(_action == 2 and funcs.ME._driving(veh)) then
			not_needed=true
			return false
		end
		return true
	end
	for i=1,#_table do
		pid = _table[i]
		not_needed=false
		if funcs.is.valid_pid(pid) and pid ~= funcs.ME._id() then
			if API.plyr.is.in_veh(pid) then
				veh = API.plyr.get.veh(pid)
				if should_continue() then
					if _action == 0 then
						completed = funcs.doo.veh_tp_into_free_seat(veh)
					elseif _action == 1 then	
						seat = funcs.get.what_seat_plyr_in(veh,pid)
						completed = funcs.doo.veh_tp_into_that_seat(veh,seat)
					elseif _action == 2 then
						completed = funcs.doo.veh_tp_into_that_seat(veh,-1)
					end
				end
			elseif _bypass or (#_table==1 and g.tbl.PID_INFO.tp_sett[pid+1]) then
				if funcs.get.dist_me_pid_3d(pid) > 250 then
					API.ent.set.coords(funcs.ME._ped(), API.plyr.get.coords(pid)+v3(0,0,50)) 
					i_hovered=true
					system.yield(0)
					time = API.util.t_ms() + 1750
					local do_once = false
					while funcs.is.valid_pid(pid) and not completed and not not_needed and (API.util.t_ms() < time) do
						if g.tbl.online_plyr_temp[temp] == _action then
							completed=true
						elseif g.tbl.online_plyr_temp[temp] == "fail" then
							time = API.util.t_ms()
						else
							if not funcs.ME._in_veh() then
								API.ent.set.coords(funcs.ME._ped(), API.plyr.get.coords(pid)+v3(0,0,50)) 
							end
							if API.plyr.is.in_veh(pid) and not do_once then
								do_once=true
								veh = API.plyr.get.veh(pid)
								system.yield(0)
								if should_continue() then
									time=time+2000
									g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
										local __veh,__pid,__temp,__action =  veh,pid,temp,_action
										if __action == 0 then
											if funcs.doo.veh_tp_into_free_seat(__veh) then
												g.tbl.online_plyr_temp[__temp] = __action
											else
												g.tbl.online_plyr_temp[__temp] = "fail"
											end
										elseif __action == 1 then	
											local seat = funcs.get.what_seat_plyr_in(__veh,__pid)
											if seat > -2 and funcs.doo.veh_tp_into_that_seat(__veh,seat) then
												g.tbl.online_plyr_temp[__temp] = __action
											else
												g.tbl.online_plyr_temp[__temp] = "fail"
											end
										elseif __action == 2 then
											if funcs.doo.veh_tp_into_that_seat(__veh,-1) then
												g.tbl.online_plyr_temp[__temp] = __action
											else
												g.tbl.online_plyr_temp[__temp] = "fail"
											end
										end
									end)
								end
							end
						end
						system.yield(10)
					end
					for ii=1,#_table do
						if ii > i and funcs.is.valid_pid(_table[ii]) and not API.plyr.is.in_veh(_table[ii]) and funcs.get.dist_me_pid_3d(_table[ii]) < 250 then
							_table[ii]=nil
						end
					end
				elseif #_table==1 then 
					no_veh = name.."\nHas no vehicle."
				end
			elseif #_table==1 then 
				no_veh = name.."\nHas no vehicle. Try enabling force check."
			end
		end
		if completed then
			g.var.rand_pid_last_for_tp=pid
			break
		end
	end
	if not completed then
		if i_hovered then
			funcs.doo.hover_back(hover_tbl)
		end
		if no_veh then
			g.N_P(2,no_veh,__GV__,5,"Yellow")
		elseif #_table==1 and not_needed then
			g.N_P(2,name.."\nTeleport not needed/possible.",__GV__,5,"Yellow")
		else
			local name_or = ""
			if #_table==1 then
				name_or = name.."\n"
			end
			if _action == 0 then
				g.N_P(2,name_or.."Teleport FAILED :(\n(No free seat)",__GV__,5,"Red")
			elseif _action == 1 then	
				g.N_P(2,name_or.."Teleport FAILED :(\n(Could not steal seat)",__GV__,5,"Red")
			elseif _action == 2 then
				g.N_P(2,name_or.."Teleport FAILED :(\n(Could not hijack)",__GV__,5,"Red")
			end
		end
	end
end

---------------------------------------------------------------------------------------------------------------------------------
g.feat.tp_out_my_veh_f=menu.add_feature("TP out of my vehicle", "value_str", g.prnt.self_teleport_veh_out.id, function(f)
	while f.on do
		f.name = "Hold ("..inputs.vk_list[g.feat.tp_out_my_veh_f_key.value+1]..") - TP out of my veh"
		system.yield(50)
		if not funcs.ME._in_veh() then
			funcs.is.vk_key_down_with_delay(inputs.vk_list[g.feat.tp_out_my_veh_f_key.value+1])
		elseif funcs.is.vk_key_down(inputs.vk_list[g.feat.tp_out_my_veh_f_key.value+1]) then
			funcs.doo.veh_tp_in_or_out(nil,f.value,inputs.vk_list[g.feat.tp_out_my_veh_f_key.value+1],g.feat.tp_out_my_veh_f_dly.value)
		end
	end
	f.name = "TP out of vehicle"
end)
g.feat.tp_out_my_veh_f:set_str_data({"No speed","Some speed","All speed"})
funcs.add_to_S_L(g.feat.tp_out_my_veh_f,"g.feat.tp_out_my_veh_f")
g.feat.tp_out_my_veh_f.value=1

g.feat.tp_out_my_veh_f_dly = menu.add_feature("TP out - Hold Delay (ms)", "autoaction_value_i", g.prnt.self_teleport_veh_out.id)
funcs.set_feat_i_f(g.feat.tp_out_my_veh_f_dly,100,1000,25,700,"g.feat.tp_out_my_veh_f_dly")

g.feat.tp_out_my_veh_f_key=menu.add_feature("Key1 for (F) TP out - hidden","action_value_str",g.prnt.self_teleport_veh_out.id)
g.feat.tp_out_my_veh_f_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.tp_out_my_veh_f_key,"g.feat.tp_out_my_veh_f_key")
g.feat.tp_out_my_veh_f_key.hidden=true
g.feat.tp_out_my_veh_f_key.value=5

menu.add_feature("TP out - Set key","action",g.prnt.self_teleport_veh_out.id,function(f)
	funcs.doo.set_keybinds(1,"TP out of vehicle",g.feat.tp_out_my_veh_f_key)
	f.name = "TP out - Set key ("..inputs.vk_list[g.feat.tp_out_my_veh_f_key.value+1]..")"
end)
---------------------------------------------------------------------------------------------------------------------------------
g.feat.tp_into_close_veh_f=menu.add_feature("TP into closest vehicle", "value_str", g.prnt.self_teleport_veh_in.id, function(f)
	while f.on do
		f.name = "Hold ("..inputs.vk_list[g.feat.tp_into_close_veh_f_key.value+1]..") - TP into closest veh"
		system.yield(50)
		if funcs.ME._in_veh() then
			funcs.is.vk_key_down_with_delay(inputs.vk_list[g.feat.tp_into_close_veh_f_key.value+1])
		elseif funcs.is.vk_key_down(inputs.vk_list[g.feat.tp_into_close_veh_f_key.value+1]) then
			funcs.doo.veh_tp_in_or_out(f.value,nil,inputs.vk_list[g.feat.tp_into_close_veh_f_key.value+1],g.feat.tp_into_close_veh_f_dly.value)
		end
	end
	f.name = "TP into vehicle"
end)
g.feat.tp_into_close_veh_f:set_str_data({"Free Seat","Hijack","Prefer Free Seat"})
funcs.add_to_S_L(g.feat.tp_into_close_veh_f,"g.feat.tp_into_close_veh_f")

g.feat.tp_into_close_veh_f_dly = menu.add_feature("TP into - Delay (ms)", "action_value_i", g.prnt.self_teleport_veh_in.id)
funcs.set_feat_i_f(g.feat.tp_into_close_veh_f_dly,100,1000,25,700,"g.feat.tp_into_close_veh_f_dly")

g.feat.tp_into_close_veh_f_key=menu.add_feature("Key1 for (F) TP into - hidden","autoaction_value_str",g.prnt.self_teleport_veh_in.id)
g.feat.tp_into_close_veh_f_key:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.feat.tp_into_close_veh_f_key,"g.feat.tp_into_close_veh_f_key")
g.feat.tp_into_close_veh_f_key.hidden=true
g.feat.tp_into_close_veh_f_key.value=5

menu.add_feature("TP into - Set key","action",g.prnt.self_teleport_veh_in.id,function(f)
	funcs.doo.set_keybinds(1,"TP into vehicle",g.feat.tp_into_close_veh_f_key)
	f.name = "TP into - Set key ("..inputs.vk_list[g.feat.tp_into_close_veh_f_key.value+1]..")"
end)
---------------------------------------------------------------------------------------------------------------------------------
g.tbl.auto_enter = {}
g.tbl.auto_enter.feat=menu.add_feature("Enable","toggle",g.prnt.self_teleport_veh_auto.id,function(f)
	local veh
	while f.on do
		if funcs.ME._in_veh() then
			system.yield(500)
		else
			system.yield(100)
			veh = ntv.get.veh_ped_try_enter(API.plyr.get.ped(API.plyr.my_id()))
			if funcs.is.veh(veh) then
				g.tbl.auto_enter.do_it(veh)
				system.yield(100)
			end
		end
	end
end)
funcs.add_to_S_L(g.tbl.auto_enter.feat,"g.tbl.auto_enter.feat")

function g.tbl.auto_enter.do_it(_veh)
	for i=1,funcs.get.veh_seats(_veh) do
		if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh,i-2)) then
			if g.tbl.auto_enter.plyr.value == 0 or g.tbl.auto_enter.plyr.value == 1 then
				if not funcs.doo.veh_tp_into_free_seat(_veh) and g.tbl.auto_enter.plyr.value == 1 then
					funcs.doo.veh_tp_into_hijack(_veh,true)
				end
			else
				funcs.doo.veh_tp_into_hijack(_veh,true)
			end
			return
		end
	end
	if g.tbl.auto_enter.npc.value == 0 or g.tbl.auto_enter.npc.value == 1 then
		if not funcs.doo.veh_tp_into_free_seat(_veh) and g.tbl.auto_enter.npc.value == 1 then
			funcs.doo.veh_tp_into_hijack(_veh,false)
		end
	else
		funcs.doo.veh_tp_into_hijack(_veh,false)
	end
	return
end

g.tbl.auto_enter.plyr = menu.add_feature("Entering player vehicle", "action_value_str", g.prnt.self_teleport_veh_auto.id)
g.tbl.auto_enter.plyr:set_str_data({"Only empty seat","Prefer empty seat","Always hijack"})
funcs.add_to_S_L(g.tbl.auto_enter.plyr,"g.tbl.auto_enter.plyr")
g.tbl.auto_enter.plyr.value=1

g.tbl.auto_enter.npc = menu.add_feature("Entering NPC vehicle", "action_value_str", g.prnt.self_teleport_veh_auto.id)
g.tbl.auto_enter.npc:set_str_data({"Only empty seat","Prefer empty seat","Always hijack"})
funcs.add_to_S_L(g.tbl.auto_enter.npc,"g.tbl.auto_enter.npc")
g.tbl.auto_enter.npc.value=1



---------------------------------------------------------------------------------------------------------------------------------
g.feat.tp_friends_2_me=menu.add_feature("TP my friends to me", "action_value_str", g.prnt.self_teleport.id, function(f)
	if f.value == 0 then
		funcs.doo.tp_frnds_or_org_2_me_v2("friends","front")
	else
		funcs.doo.tp_frnds_or_org_2_me_v2("friends","nearby")
	end
end)
g.feat.tp_friends_2_me:set_str_data({"In front","Nearby"})
funcs.add_to_S_L(g.feat.tp_friends_2_me,"g.feat.tp_friends_2_me")

g.feat.tp_orgmc_2_me=menu.add_feature("TP my Org/Mc to me", "action_value_str", g.prnt.self_teleport.id, function(f)
	if f.value == 0 then
		funcs.doo.tp_frnds_or_org_2_me_v2("same_orgmc","front")
	else
		funcs.doo.tp_frnds_or_org_2_me_v2("same_orgmc","nearby")
	end
end)
g.feat.tp_orgmc_2_me:set_str_data({"In front","Nearby"})
funcs.add_to_S_L(g.feat.tp_orgmc_2_me,"g.feat.tp_orgmc_2_me")

function funcs.doo.tp_frnds_or_org_2_me_v2(_type,_where)
	local tp_table = {}
	for i=0,31 do
		if funcs.is.valid_pid(i) and i ~= funcs.ME._id() and funcs.get.dist_me_pid_3d(i) > 10 then
			if not g.tbl.PID_INFO.interior[i+1] or (interior.get_interior_from_entity(API.plyr.get.ped(i)) == interior.get_interior_from_entity(funcs.ME._ped())) then
				if _type == "friends" and API.plyr.is.friend(i) then
					tp_table[#tp_table+1]=i
				elseif _type == "same_orgmc" and funcs.is.same_orgmc(funcs.ME._id(),i) then
					tp_table[#tp_table+1]=i
				end
			end
		end
	end
	if #tp_table == 0 then
		g.N_P(2,"No players available.",__GV__,4,"Blue")
	else
		local target_pos = v3()
		local my_orig_pos = funcs.ME._crds()
		local heading = funcs.ME._head()
		local _pid
		local veh = nil
		g.tbl.sssn_pid_active[#g.tbl.sssn_pid_active+1]={}
		local active = #g.tbl.sssn_pid_active
		for i=1,#tp_table do
			_pid = tp_table[i]
			if funcs.is.valid_pid(_pid) and API.plyr.is.in_veh(_pid) then
				veh = API.plyr.get.veh(_pid)
				if _where == "front" then
					target_pos = funcs.get.front_of_pos(my_orig_pos, heading, mth.rndm(10,20), mth.rndm(170,190), mth.rndm(2,5))
				elseif _where == "nearby" then
					target_pos =  funcs.get.pos_nearby(my_orig_pos,"single_50_dist",100,"anywhere","xy")
				end
				g.tbl.sssn_pid_active[active][_pid]=true
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local __pos,__pid,__veh,__t_good,__t_fail,__t_actv = target_pos,_pid,veh,t_good,t_fail,active
					if funcs.ntwrk.ask_long(__veh,1000) then
						API.ent.set.coords(__veh, __pos) 
					else
						g.N_P(2,funcs.get.pid_name(__pid).."\nTeleport FAILED :(",__GV__,5,"Red")
					end
					g.tbl.sssn_pid_active[__t_actv][__pid]=false
				end)
			end
		end
		local found = true
		while found do
			found = false
			for k,v in pairs(g.tbl.sssn_pid_active[active]) do
				if v then found = true break end
			end
			system.yield(10)
		end
		local hover_tbl,i_hovered,h_pos = funcs.get.hover_info(),false
		for i=1,#tp_table do
			_pid = tp_table[i]
			veh=nil
			if funcs.is.valid_pid(_pid) and g.tbl.sssn_pid_active[active][_pid]==nil and funcs.get.dist_me_pid_3d(_pid) > 250 then
				h_pos = API.plyr.get.coords(_pid)
				API.ent.set.coords(funcs.ME._ped(), h_pos)	
				i_hovered=true
				local time = API.util.t_ms() + 2500
				local do_once = false
				while time > API.util.t_ms() do
					for ii=1,#tp_table do
						if funcs.is.valid_pid(tp_table[ii]) and g.tbl.sssn_pid_active[active][tp_table[ii]]==nil and API.plyr.is.in_veh(tp_table[ii]) then
							veh = API.plyr.get.veh(tp_table[ii])
							if _where == "front" then
								target_pos = funcs.get.front_of_pos(my_orig_pos, heading, mth.rndm(10,20), mth.rndm(170,190), mth.rndm(2,5))
							elseif _where == "nearby" then
								target_pos =  funcs.get.pos_nearby(my_orig_pos,"single_50_dist",100,"anywhere","xy")
							end
							g.tbl.sssn_pid_active[active][tp_table[ii]]=true
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local __pos,__pid,__veh,__t_actv = target_pos,tp_table[ii],veh,active
								if funcs.ntwrk.ask_long(__veh,1000) then
									API.ent.set.coords(__veh, __pos) 
								else
									g.N_P(2,funcs.get.pid_name(__pid).."\nTeleport FAILED :(",__GV__,5,"Red")
								end
								g.tbl.sssn_pid_active[__t_actv][__pid]=false
							end)
							if not do_once then
								do_once=true
								time=time+1000
							end
						end
					end
					API.ent.set.coords(funcs.ME._ped(), h_pos)	
					system.yield(10)
					if do_once then
						local found = false
						for k,v in pairs(g.tbl.sssn_pid_active[active]) do
							if v then found = true break end
						end
						if not found then
							time = API.util.t_ms()
						end
					end
				end
			end
		end
		if i_hovered then
			funcs.doo.hover_back(hover_tbl)
		end
	end
end

menu.add_feature("TP forward", "action", g.prnt.self_teleport.id, function()
	local found, pos_forward = funcs.doo.tp_forward(API.plyr.get.coords(API.plyr.my_id()),API.plyr.get.heading(API.plyr.my_id()))
	--local ray_start = funcs.get.front_of_dir(funcs.ME._veh_or_me_crds(),funcs.ME._veh_or_me_rot(),20)
	--local vector = funcs.get.vctr_to_pos3(ray_start,ray_start+v3(0,0,1000))
	--local found, pos_forward = funcs.get.ray_vctr_all(nil,nil,ray_start+v3(0,0,1000),vector,0.5,v3(0,0,0.5))
	if found then
		if funcs.ME._in_veh() then
			if not funcs.doo.tp_ent(g.tbl.PID_INFO.veh[API.plyr.my_id()+1],pos_forward, 0 ,false) then
				g.N_P(2,funcs.get.pid_name(API.plyr.my_id()).."  -  "..funcs.get.veh_model_name(g.tbl.PID_INFO.veh[API.plyr.my_id()+1]).."\nFailed to get control of vehicle :(",__GV__,4,"Red")
			end
		else
			API.ent.set.coords(API.plyr.get.ped(API.plyr.my_id()),pos_forward)
		end
	else
		g.N_P(2,"No TP location found :(",__GV__,4,"Red")
	end
	--menu.notify(funcs.get.v3_to_text(pos_forward).."\n"..funcs.get.v3_to_text2(pos_forward))
end)

g.tbl.tp_time_hist = {}
g.tbl.tp_time_hist.history = {}
--g.tbl.tp_time_hist.slot = 1



g.tbl.tp_time_hist.record_feat=menu.add_feature("TP back in time record hidden", "toggle", g.prnt.self_teleport.id, function(f)
	local my_pos=API.plyr.get.coords(API.plyr.my_id())
	local continue,count,dist
	g.tbl.tp_time_hist.history[1] = my_pos
	local function in_my_grid(old_pos,new_pos,_max)
		if mth.abs(new_pos.x - old_pos.x) > _max or mth.abs(new_pos.y - old_pos.y) > _max or mth.abs(new_pos.z - old_pos.z) > _max then
			return false
		end
		return true
	end
	while f.on do
		system.yield(500)
		dist = 10
		if g.tbl.PID_INFO.interior[API.plyr.my_id()+1] then
			dist = 2
		end
		if not in_my_grid(my_pos,API.plyr.get.coords(API.plyr.my_id()),dist) then
			count = 0
			continue = true
			for i=0,#g.tbl.tp_time_hist.history do
				if count > 5 then
					break
				else
					count = count + 1
					if g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history-i] ~= nil and in_my_grid(g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history-i],API.plyr.get.coords(API.plyr.my_id()),dist) then
						continue = false
						break
					end
				end
			end
			my_pos = API.plyr.get.coords(API.plyr.my_id()) 
			if continue then
				g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history+1] = my_pos
			end
		end
	end
end)
g.tbl.tp_time_hist.record_feat.on = true
g.tbl.tp_time_hist.record_feat.hidden = true

g.tbl.tp_time_hist.back_feat=menu.add_feature("TP back in time", "action", g.prnt.self_teleport.id, function()
	if g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history-1] ~= nil then
		if funcs.ME._in_veh() then
			if not funcs.doo.tp_ent(g.tbl.PID_INFO.veh[API.plyr.my_id()+1],g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history-1], 0 ,false) then
				g.N_P(2,funcs.get.veh_ped_name_in_seat(g.tbl.PID_INFO.veh[API.plyr.my_id()+1],"first_plyr").."  -  "..funcs.get.veh_model_name(g.tbl.PID_INFO.veh[API.plyr.my_id()+1]).."\nFailed to get control of vehicle :(",__GV__,4,"Red")
			else
				table.remove(g.tbl.tp_time_hist.history,#g.tbl.tp_time_hist.history)
			end
		else
			API.ent.set.coords(API.plyr.get.ped(API.plyr.my_id()),g.tbl.tp_time_hist.history[#g.tbl.tp_time_hist.history-1])
			table.remove(g.tbl.tp_time_hist.history,#g.tbl.tp_time_hist.history)
		end
	end
end)

g.feat.cam_aim_tp=menu.add_feature("Camera aim TP (No clip)", "action_value_i", g.prnt.self_teleport.id, function(f)
	local pos = funcs.get.my_cam_ray_pos(f.value)
	if funcs.ME._in_veh() then
		if not funcs.doo.tp_ent(funcs.ME._veh(),pos, 0 ,false) then
			g.N_P(2,funcs.get.veh_ped_name_in_seat(funcs.ME._veh(),"first_plyr").."  -  "..funcs.get.veh_model_name(funcs.ME._veh()).."\nFailed to get control of vehicle :(",__GV__,4,"Red")
		end
	else
		API.ent.set.coords(API.plyr.get.ped(API.plyr.my_id()),pos)
	end
end)
funcs.set_feat_i_f(g.feat.cam_aim_tp,5,500,5,100,"g.feat.cam_aim_tp")

g.feat.cam_aim_tp_v2=menu.add_feature("Camera aim TP (With clip)", "action_value_i", g.prnt.self_teleport.id, function(f)
	local pos = funcs.get.ray_vctr_or_max(f.value,nil,funcs.get.my_cam_ray_pos()) 
	if funcs.ME._in_veh() then
		if not funcs.doo.tp_ent(funcs.ME._veh(),pos, 0 ,false) then
			g.N_P(2,funcs.get.veh_ped_name_in_seat(funcs.ME._veh(),"first_plyr").."  -  "..funcs.get.veh_model_name(funcs.ME._veh()).."\nFailed to get control of vehicle :(",__GV__,4,"Red")
		end
	else
		API.ent.set.coords(API.plyr.get.ped(API.plyr.my_id()),pos)
	end
end)
funcs.set_feat_i_f(g.feat.cam_aim_tp_v2,5,500,5,100,"g.feat.cam_aim_tp_v2")

g.feat.tp_self_to_wp=menu.add_feature("Waypoint/objective", "action_value_str", g.prnt.self_teleport.id, function(f)
	local t = {"anywhere","no_water"}
	local pos = funcs.get.WP_coords2(t[f.value+1])
	if pos == nil then
		local obj = funcs.get.OBJ_coords2()
		if obj then
			pos = obj+v3()
		end
	end
	if pos then
		if funcs.ME._in_veh() then
			if funcs.ntwrk.ask_long(funcs.ME._veh(),1000) then
				API.ent.set.coords(funcs.ME._veh(),pos) 
			else
				g.N_P(2,"Teleport\nFAILED to get control of vehicle :(",__GV__,4,"Red")
			end
		else
			API.ent.set.coords(funcs.ME._ped(),pos)	
		end
	else
		g.N_P(2,"No waypoint/objective.",__GV__,4,"Yellow")
	end
end)
g.feat.tp_self_to_wp:set_str_data({"Anywhere","Ignore water"})
funcs.add_to_S_L(g.feat.tp_self_to_wp,"g.feat.tp_self_to_wp")



menu.add_feature("TP-Self to personal vehicle", "action", g.prnt.self_veh_pers.id, function()
	funcs.doo.tp_pers_veh("self_2_veh")
end)

menu.add_feature("TP-Self to personal vehicle and drive", "action", g.prnt.self_veh_pers.id, function()
	funcs.doo.tp_pers_veh("self_2_veh_drive")
end)

menu.add_feature("TP-Personal-Vehicle to me", "action", g.prnt.self_veh_pers.id, function()
	funcs.doo.tp_pers_veh("veh_2_me")
end)

menu.add_feature("TP-Personal-Vehicle to me and drive", "action", g.prnt.self_veh_pers.id, function()
	funcs.doo.tp_pers_veh("veh_2_me_drive")
end)

g.feat.pers_veh_action_list=menu.add_feature("Personal vehicle", "action_value_str", g.prnt.self_veh_pers.id, function(f)
	local veh = API.plyr.pers_veh()
	if veh ~= 0 and funcs.is.veh(veh) then
		if f.value == 0 then
			funcs.doo.veh_repair_all(veh, 1000,nil,false,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
		elseif f.value == 1 then
			funcs.doo.veh_destroy(veh, 1000)
		elseif f.value == 2 then
			funcs.doo.veh_action_list(veh,1000,"upgrades",nil)
		elseif f.value == 3 then
			if funcs.is.veh_empty(veh) then
				g.N_P(2,"No one in the vehicle",__GV__,4,"Blue")
			else
				funcs.doo.kick_all_from_veh(veh)
			end
		else
			funcs.doo.clone_veh_for_me(veh)
		end
	else
		g.N_P(2,"No personal vehicle found...",__GV__,4,"Blue")
	end
end)
g.feat.pers_veh_action_list:set_str_data({"Repair", "Destroy","Upgrade","Kick all from vehicle","Clone"})
funcs.add_to_S_L(g.feat.pers_veh_action_list,"g.feat.pers_veh_action_list")

g.feat.pers_veh_info_show=menu.add_feature("Show personal vehicle info", "action_value_str", g.prnt.self_veh_pers.id, function(f)
	local veh = API.plyr.pers_veh()
	if veh ~= 0 and funcs.is.veh(veh) then
		if f.value == 0 then
			funcs.doo.display_veh_info(veh,false,false,false,false,false,true,true,false,false,false,false,false,false)
		elseif f.value == 1 then
			funcs.doo.display_veh_info(veh,false,false,false,false,true,true,true,true,false,false,false,false,true)
		else
			funcs.doo.display_veh_info(veh,true,true,true,true,true,true,true,true,true,true,true,true,true)
		end
	else
		g.N_P(2,"Personal vehicle not found",__GV__,4,"Blue")
	end
end)
g.feat.pers_veh_info_show:set_str_data({"Minimal", "Most","All"})
funcs.add_to_S_L(g.feat.pers_veh_info_show,"g.feat.pers_veh_info_show")

menu.add_feature("TP-Self to last vehicle", "action", g.prnt.self_veh_last.id, function()
	funcs.doo.tp_last_veh("self_2_veh")
end)

menu.add_feature("TP-Self to last vehicle and drive", "action", g.prnt.self_veh_last.id, function()
	funcs.doo.tp_last_veh("self_2_veh_drive")
end)

menu.add_feature("TP-Last-Vehicle to me", "action", g.prnt.self_veh_last.id, function()
	funcs.doo.tp_last_veh("veh_2_me")
end)

menu.add_feature("TP-Last-Vehicle to me and drive", "action", g.prnt.self_veh_last.id, function()
	funcs.doo.tp_last_veh("veh_2_me_drive")
end)

g.feat.last_veh_action_list=menu.add_feature("Last vehicle", "action_value_str", g.prnt.self_veh_last.id, function(f)
	local _veh
	if funcs.ME._in_veh() then	_veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist-1] else _veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist] end
	if f.value == 4 and g.tbl.veh_clone[_veh] ~= nil then
		local pos = funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),5 + funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos()))
		funcs.doo.create_clone_veh(g.tbl.veh_clone[_veh],pos,API.cam.get.rot().z)
	elseif not funcs.is.veh(_veh) then
		g.N_P(2,"Last vehicle not found",__GV__,4,"Blue")
	elseif funcs.get.dist_pospos_v3(API.ent.get.coords(_veh),v3(0.0,0.0,0.0)) < 10 then --sometimes gta reports its pos as 0,0,0 when it cant find it
		g.N_P(2,"Last vehicle not found",__GV__,4,"Blue")
	elseif f.value == 0 then
		funcs.doo.veh_repair_all(_veh, 1000,nil,false,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
	elseif f.value == 1 then
		funcs.doo.veh_destroy(_veh, 2500)
	elseif f.value == 2 then
		funcs.doo.veh_action_list(_veh,1000,"upgrades",nil)
	elseif f.value == 3 then
		if funcs.is.veh_empty(_veh) then
			g.N_P(2,"No one in the vehicle",__GV__,4,"Blue")
		else
			funcs.doo.kick_all_from_veh(_veh)
		end
	else
		funcs.doo.clone_veh_for_me(_veh)
	end
end)
g.feat.last_veh_action_list:set_str_data({"Repair", "Destroy","Upgrade","Kick all from vehicle", "Clone"})
funcs.add_to_S_L(g.feat.last_veh_action_list,"g.feat.last_veh_action_list")

function funcs.doo.tp_last_veh(_action)
	local veh
	if funcs.ME._in_veh() then	veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist-1] else veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist] end
	local mee = API.plyr.get.ped(API.plyr.my_id())
	local my_veh = API.Ped.get.veh(mee)
	local function kick_driver(_veh)
		if funcs.is.ent(API.veh.get.ped_in_seat(_veh, -1)) then
			if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, -1)) then
				glbls.kick_from_veh(API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, -1)))
			end
			API.Ped.clear_tasks(API.veh.get.ped_in_seat(_veh, -1))
		end
		local time = API.util.t_ms() + 250
		while funcs.is.ent(API.veh.get.ped_in_seat(_veh, -1)) and API.util.t_ms() < time do
			system.yield(0)
		end
	end
	if veh and veh ~= 0 and veh ~= my_veh and funcs.is.veh(veh) then
		funcs.doo.veh_flip(veh,"flip_right",250)
		if _action == "self_2_veh" then
			local pos = API.ent.get.coords(veh)
			pos.z = pos.z + 3
			API.ent.set.coords(mee, pos)
		elseif _action == "self_2_veh_drive" then
			kick_driver(veh)
			if not funcs.doo.veh_tp_into_free_seat(veh) then
				if not funcs.doo.veh_tp_into_hijack(veh) then
					funcs.N_P(2,"No free seat. Failed to hijack. :(",funcs.ver_text,4,"Red")
				else
					return true
				end
			else
				return true
			end
		elseif _action == "veh_2_me" then
			kick_driver(veh)
			if not funcs.doo.tp_veh_to_me(veh) then
				funcs.N_P(2,"Could not teleport vehicle :(",funcs.ver_text,4,"Red")
			end
		elseif _action == "veh_2_me_drive" then
			kick_driver(veh)
			if funcs.doo.tp_veh_to_me(veh) then
				if not funcs.doo.veh_tp_into_free_seat(veh) then
					if not funcs.doo.veh_tp_into_hijack(veh) then
						funcs.N_P(2,"No free seat. Failed to hijack. :(",funcs.ver_text,4,"Red")
					end
				end
			else
				funcs.N_P(2,"Could not teleport vehicle :(",funcs.ver_text,4,"Red")
			end
		end
	elseif veh == my_veh and funcs.ME._in_veh() then
		funcs.N_P(2,"You're already in your last vehicle...",funcs.ver_text,4,"Blue")
	else
		funcs.N_P(2,"Last vehicle not found...",funcs.ver_text,4,"Blue")
	end
end


g.feat.last_veh_info_show=menu.add_feature("Show last vehicle info", "action_value_str", g.prnt.self_veh_last.id, function(f)
	local _veh
	if funcs.ME._in_veh() then	_veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist-1] else _veh = g.tbl.my_veh_hist[#g.tbl.my_veh_hist] end
	if not funcs.is.veh(_veh) then
		g.N_P(2,"Last vehicle not found",__GV__,4,"Blue")
	elseif funcs.get.dist_pospos_v3(API.ent.get.coords(_veh),v3(0.0,0.0,0.0)) < 10 then --sometimes gta reports its pos as 0,0,0 when it cant find it
		g.N_P(2,"Last vehicle not found",__GV__,4,"Blue")
	elseif f.value == 0 then
		funcs.doo.display_veh_info(_veh,false,false,false,false,false,true,true,false,false,false,false,false,false)
	elseif f.value == 1 then
		funcs.doo.display_veh_info(_veh,false,false,false,false,true,true,true,true,false,false,false,false,true)
	else
		funcs.doo.display_veh_info(_veh,true,true,true,true,true,true,true,true,true,true,true,true,true)
	end
end)
g.feat.last_veh_info_show:set_str_data({"Minimal", "Most","All"})
funcs.add_to_S_L(g.feat.last_veh_info_show,"g.feat.last_veh_info_show")


function funcs.doo.clone_veh_for_me(_veh,_pos,_head)
	_pos = _pos or funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),funcs.get.spawn_front_dist(funcs.ME._id(),_veh) + funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos()))
	_head = _head or API.cam.get.rot().z
	assert(funcs.is.veh(_veh), "Attempted to clone an invalid vehicle.")
	funcs.get.record_clone_veh(_veh)
	assert(g.tbl.veh_clone[_veh]~=nil, "Could not clone vehicle.")
	funcs.doo.create_clone_veh(g.tbl.veh_clone[_veh],_pos,_head)
end
------------------------------------------------------------------------------------------GeeSkid
---------------------------------------------------------------------------------------------Self
------------------------------------------------------------------------------------------Weapons
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

--------------------------------------------------Extracted from Universe. Modified significantly
g.tbl.ge = {}
g.tbl.ge.aim={}
g.tbl.ge.trcr={}
g.tbl.ge.trcr.table={}
g.tbl.ge.trgt={}
g.tbl.ge.trgt._bool=nil
g.tbl.ge.trgt._screen_pos=nil

g.tbl.ge._weap_hash = {
API.get_hash_key("weapon_heavysniper_mk2"),
API.get_hash_key("weapon_railgun"),
API.get_hash_key("weapon_rpg"),
API.get_hash_key("weapon_emplauncher"),
API.get_hash_key("weapon_firework"),
API.get_hash_key("weapon_grenadelauncher"),
API.get_hash_key("weapon_raypistol"),
API.get_hash_key("weapon_bzgas"),
API.get_hash_key("weapon_stickybomb"),
API.get_hash_key("weapon_proxmine"),
API.get_hash_key("weapon_molotov"),
API.get_hash_key("weapon_pipebomb"),
}

g.tbl.ge._weap_name = {
"Mk2 Sniper",
"Railgun",
"RPG",
"EMP Launcher",
"Firework Launcher",
"Grenade Launcher",
"Up-N-Atomizer",
"BZ-Gas",
"Sticky bomb",
"Proximity mine",
"Molotov",
"Pipebomb",
}

g.tbl.ge._weap_comp = {
[API.get_hash_key("weapon_heavysniper_mk2")]=API.get_hash_key("COMPONENT_HEAVYSNIPER_MK2_CLIP_EXPLOSIVE"), --0x89EBDAA7, --"Mk2 Sniper",
[API.get_hash_key("weapon_emplauncher")]=API.get_hash_key("COMPONENT_EMPLAUNCHER_CLIP_01"), --"EMP Launcher",
[API.get_hash_key("weapon_grenadelauncher")]=API.get_hash_key("COMPONENT_GRENADELAUNCHER_CLIP_01 0x11AE5C97"), --"Grenade Launcher",
}




function funcs.get.GE_start()	
	local v3_start,pos,dir,mult,success
	local function get_bone_coord()
		success, v3_start = API.Ped.get.bone_coords(API.plyr.get.ped(API.plyr.my_id()), 0x9995, v3(0.0,0.0,-0.8))
		while not success do
			success, v3_start = API.Ped.get.bone_coords(API.plyr.get.ped(API.plyr.my_id()), 0x9995, v3(0.0,0.0,-0.8))
			system.wait(250)
		end
	end
	if funcs.ME._in_veh() then
		if g.tbl.ge.aim.veh_pos.value == 0 then
			if g.tbl.ge.aim.frwd_veh_offst_type.value == 2 then
				mult = 0
			elseif g.tbl.ge.aim.frwd_veh_offst_type.value == 1 then
				mult = g.tbl.ge.aim.frwd_veh_offst.value
			else
				_min,_max = API.ent.get.dimensions(API.plyr.get.veh(API.plyr.my_id()))
				mult=(((_max.x/3)+(_max.y/3)+(_max.z/3))*g.tbl.ge.aim.frwd_veh_smrt.value)
			end
		elseif g.tbl.ge.aim.fire_pos.value == 0 then
			mult = g.tbl.ge.aim.frwd_foot_offst.value
		else
			mult = g.tbl.ge.aim.frwd_cam_offst.value
		end
		if g.tbl.ge.aim.veh_pos.value == 0 then 
			v3_start = API.ent.get.coords(API.plyr.get.veh(API.plyr.my_id()))
			if g.tbl.ge.aim.vert_veh_offst.value == 0 then
				_min,_max = API.ent.get.dimensions(API.plyr.get.veh(API.plyr.my_id()))
				v3_start.z=v3_start.z+(((_max.x/3)+(_max.y/3)+(_max.z/3))*g.tbl.ge.aim.smrt_veh_offst.value)
			elseif g.tbl.ge.aim.vert_veh_offst.value == 1 then
				v3_start.z=v3_start.z+g.tbl.ge.aim.mnl_veh_offst.value
			end
		elseif g.tbl.ge.aim.veh_pos.value == 1 then 
			get_bone_coord()
		else
			v3_start = API.cam.get.pos()
		end
	elseif g.tbl.ge.aim.fire_pos.value == 0 then
		get_bone_coord()
		mult = g.tbl.ge.aim.frwd_foot_offst.value
	else
		v3_start = API.cam.get.pos()
		mult = g.tbl.ge.aim.frwd_cam_offst.value
	end
	pos=v3_start
	dir = API.cam.get.rot()
	dir:transformRotToDir()
	dir = dir * mult
	v3_start = v3_start + dir
	return v3_start
end

function funcs.get.GE_calc(_shotgun,_trgt_crds)
	_shotgun = _shotgun or false
	local v3_start=funcs.get.GE_start()
	local v3_end = v3_start
	if not _shotgun then
		if _trgt_crds == nil then
			local dir = API.cam.get.rot()
			dir:transformRotToDir()
			dir = dir * 1500
			v3_end = v3_end + dir
		else
			v3_end = _trgt_crds
		end
	else
		local spread1000,spreadv3 = mth.flr(g.tbl.ge.spread.value*20),v3()
		if g.tbl.ge.spread_type.value == 0 then -- circular
			spreadv3=v3(mth.rndm(-spread1000,spread1000)*0.001,0,mth.rndm(-spread1000,spread1000)*0.001)
		elseif g.tbl.ge.spread_type.value == 1 then -- horizontal
			spreadv3=v3(0,0,mth.rndm(-spread1000,spread1000)*0.001)
		else -- vertical
			spreadv3=v3((mth.rndm(-spread1000,spread1000)*0.001)+3,0,0)
		end
		if _trgt_crds == nil then
			local dir = API.cam.get.rot()+spreadv3
			dir:transformRotToDir()
			dir = dir * 1500
			v3_end = v3_end + dir
		else
			local dir,dist = funcs.get.vctr_to_pos3(_trgt_crds,v3_start,true)
			dir=dir+spreadv3
			dir:transformRotToDir()
			dir = dir * dist
			v3_end = v3_end + dir
		end
	end
	return v3_start,v3_end
end

function g.tbl.ge.trgt.straight_thread(v3_start,v3_end,_ent)
	if g.tbl.ge.enable_trgtng.on and g.tbl.ge.trgt.speed_type.value ~= 2 then
		local weap_obj=weap_info.hand.obj[g.tbl.ge._weap_hash[g.tbl.ge.feat.value+1]]
		if weap_obj ~= nil then
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local obj_hash,this_obj = weap_obj
				local _start,_end,_ped = v3_start,v3_end,_ent
				local trgt_crds_do,vec_to_trgt,trgt_crds
				local time = API.util.t_ms()+250
				local stop = false
				while time > API.util.t_ms() and not stop do
					local all_obj=object.get_all_objects()
					for i=1,#all_obj do
						if not API.ent.is.attached(all_obj[i]) and API.ent.get.model_hash(all_obj[i])==obj_hash then
							if not g.tbl.a_b.prev_obj[all_obj[i]] and funcs.is.in_grid(API.ent.get.coords(all_obj[i]),_start,10) then
								this_obj=all_obj[i]
								g.tbl.a_b.prev_obj[this_obj]=true
								API.ent.set.max_speed(this_obj,45000)
								time = API.util.t_ms()+5000
								local init_time = API.util.t_ms()+15
								local mult =0.69
								if weap_obj == weap_info.hand.obj[API.get_hash_key("weapon_raypistol")] then
									mult=4
								end
								if g.tbl.ge.trgt.speed_type.value == 1 then
									if g.tbl.ge.trgt.speed_amnt.value == 1 then
										if weap_obj == weap_info.hand.obj[API.get_hash_key("weapon_rpg")] then
											mult=1
										elseif weap_obj == weap_info.hand.obj[API.get_hash_key("weapon_firework")] then
											mult=1.25
										end
									end
									init_time = API.util.t_ms()+5000
								end
								while time > API.util.t_ms() and funcs.is.ent(this_obj) and not stop do
									if funcs.ntwrk.ask_quick(this_obj) then
										if API.ent.is.collided(this_obj) then
											stop=true
											API.ent.set.velocity(this_obj,API.ent.get.velocity(this_obj)*(0.25-g.tbl.ge.trgt.speed_amnt.value*0.02))
										else
											trgt_crds = _end
											if funcs.is.ent(_ped) then
												trgt_crds = API.ent.get.coords(_ped)
												_end = API.ent.get.coords(_ped)
											end
											trgt_crds_do,vec_to_trgt = g.tbl.a_b.get_movement(trgt_crds,API.ent.get.coords(this_obj),g.tbl.ge.trgt.speed_amnt.value*mult) 
											if mult ~= 4 then
												API.ent.set.rotation(this_obj,funcs.get.vctr_to_pos(trgt_crds,this_obj))
											end
											API.ent.set.velocity(this_obj,trgt_crds_do)
										end
									end
									if init_time < API.util.t_ms() or funcs.get.total_velocity(this_obj) < 1 then
										stop = true
									end
									system.yield(5)
								end
								while time > API.util.t_ms() do
									system.yield(0)
								end
								stop=true
								g.tbl.a_b.prev_obj[this_obj]=false
								time = API.util.t_ms()
								break
							end
						end
					end
					system.yield(0)
				end
			end, nil)	
		end
	end
end
			
g.tbl.ge.feat=menu.add_feature("Gee-Eye","value_str",g.prnt.self_weapons_ge.id,function(f)
	if funcs.is.GS_loaded() and f.on then
		g.N_P(2,"Press "..inputs.vk_list[g.tbl.ge.slct_key1.value+1].." to fire Gee-Eye",__GV__,10,"Blue")
	end
	local blame,notif_shoot,notif_mk2,trgt_crds,trgt_ped,f_value,time
	local v3_start,v3_end = v3(),v3()
	local function trigger()
		trgt_crds,trgt_ped = g.tbl.ge.trgt.trgt_crds,g.tbl.ge.trgt.trgt_ped
		if funcs.is.vk_key_down(inputs.vk_list[g.tbl.ge.slct_key1.value+1]) then
			return true
		elseif g.tbl.ge.enable_trgtng.on and g.tbl.ge.trgt.trigger_bot.on and trgt_crds ~= nil and trgt_ped ~= nil then
			return true
		end
		return false
	end
	local function show_reticle()
		if g.tbl.ge.trgt.show_rtcl.on and not g.tbl.rtcl.is_active and g.tbl.ge.enable_trgtng.on and trgt_crds == nil and trgt_ped == nil then
			g.tbl.ge.trgt.show_that_marker(v2(0,0),g.tbl.ge.trgt.mrkr_a.value)
		end
	end
	local function delay(_val)
		time = API.util.t_ms() + _val
		while time > API.util.t_ms() do
			system.yield(0)
			show_reticle()
		end
	end
	while f.on do
		system.yield(0)
		g.tbl.ge.aim.const_bool=g.tbl.ge.enable_trgtng.on
		notif_shoot=false
		if f_value ~= f.value+g.tbl.ge.blame.value + g.tbl.ge.slct_key1.value then
			if g.tbl.ge.blame.value == 1 then blame = 100000 else blame=API.plyr.get.ped(API.plyr.my_id())	end
			if g.tbl.ge._weap_comp[g.tbl.ge._weap_hash[f.value+1]] ~= nil then
				API.wpn.ped_give_comp(blame,g.tbl.ge._weap_hash[f.value+1],g.tbl.ge._weap_comp[g.tbl.ge._weap_hash[f.value+1]]) -- i cant be sure if this is needed. Maybe for players that dont have the weapon already
			end
			g.tbl.ge.trgt.range_name()
			f_value = f.value+g.tbl.ge.blame.value
		end
		show_reticle()
		while trigger() and not ntv.is.chat_active() do
			system.yield(0)
			show_reticle()
			if not notif_shoot then
				g.N_P(2,"Firing Gee-Eye!\n"..g.tbl.ge._weap_name[g.tbl.ge.feat.value+1],__GV__,4,"Green")
				notif_shoot = true
			end
			v3_start,v3_end = funcs.get.GE_calc(false,trgt_crds)
			g.tbl.ge.trcr.table[#g.tbl.ge.trcr.table+1]={v3_start,v3_end,API.util.t_ms(),g.tbl.ge.trcr.fade.value*1000}
			gameplay.shoot_single_bullet_between_coords(v3_start, v3_end, 1, g.tbl.ge._weap_hash[f.value+1], blame, funcs.is._01_to_bool(g.tbl.ge.aud.value),  funcs.is._01_to_bool(g.tbl.ge.vis.value,true), 1000)
			g.tbl.ge.trgt.straight_thread(v3_start,v3_end,trgt_ped)	
			if mth.flr(g.tbl.ge.spread.value) > 25 then
				delay(mth.flr(g.tbl.ge.delay.value/8))
				for i=1,7 do
					if funcs.is.vk_key_down(inputs.vk_list[g.tbl.ge.slct_key1.value+1]) then
						v3_start,v3_end = funcs.get.GE_calc(true,trgt_crds)
						g.tbl.ge.trcr.table[#g.tbl.ge.trcr.table+1]={v3_start,v3_end,API.util.t_ms(),g.tbl.ge.trcr.fade.value*1000}
						g.tbl.ge.trgt.straight_thread(v3_start,v3_end,trgt_ped)	
						gameplay.shoot_single_bullet_between_coords(v3_start, v3_end, 1, g.tbl.ge._weap_hash[f.value+1], blame, funcs.is._01_to_bool(g.tbl.ge.aud.value), funcs.is._01_to_bool(g.tbl.ge.vis.value,true), 1000)
						delay(mth.flr(g.tbl.ge.delay.value/8))
					end
				end
			else
				delay(g.tbl.ge.delay.value)
			end
		end
		if g.tbl.ge.feat.value == 0 and g.tbl.ge.blame.value == 1 and funcs.is.GS_loaded() then
			if not notif_mk2 then
				g.N_P(2,"Blaming no-one with Mk2 Sniper results in zero damage to players. I also couldn't figure out why it removes the explosive rounds :(",__GV__,7,"Yellow")
				notif_mk2=true
			end
		else
			notif_mk2=false
		end
	end
	f.name = "Gee-Eye"
end)
g.tbl.ge.feat:set_str_data(g.tbl.ge._weap_name)
funcs.add_to_S_L(g.tbl.ge.feat,"g.tbl.ge.feat")

g.tbl.ge.enable_trgtng=menu.add_feature("Enable assistance mode","toggle",g.prnt.self_weapons_ge.id,function(f)
	g.tbl.ge.trgt.trgt_ent = nil
	g.tbl.ge.trgt.trgt_ped = nil
	g.tbl.ge.trgt.trgt_crds = nil
	g.tbl.ge.trgt.range_name()
	if f.on then
		g.tbl.ge.trgt.peds={}
		g.tbl.ge.trgt.record_ped_info()
		g.tbl.ge.trgt.get_current_target()
	end
end)
funcs.add_to_S_L(g.tbl.ge.enable_trgtng,"g.tbl.ge.enable_trgtng")

g.tbl.ge.trcr.prnt=menu.add_feature("Tracers","parent",g.prnt.self_weapons_ge.id)

g.tbl.ge.trcr.feat=menu.add_feature("Add tracer effect", "toggle", g.tbl.ge.trcr.prnt.id, function(f)
	while f.on do
		system.yield(5)
		for i=1,#g.tbl.ge.trcr.table do
			if g.tbl.ge.trcr.table[i] ~= nil then
				if (g.tbl.ge.trcr.table[i][3]+g.tbl.ge.trcr.table[i][4])>API.util.t_ms() then
					ui.draw_line(
					g.tbl.ge.trcr.table[i][1],
					g.tbl.ge.trcr.table[i][2],
					g.tbl.ge.trcr.r.value,
					g.tbl.ge.trcr.g.value,
					g.tbl.ge.trcr.b.value,
					mth.flr((g.tbl.ge.trcr.table[i][3]+g.tbl.ge.trcr.table[i][4]-API.util.t_ms())/g.tbl.ge.trcr.table[i][4]*g.tbl.ge.trcr.a.value)
					)
				else
					g.tbl.ge.trcr.table[i] = nil
				end
			end
		end
	end
end)
funcs.add_to_S_L(g.tbl.ge.trcr.feat,"g.tbl.ge.trcr.feat")

g.tbl.ge.trcr.fade = menu.add_feature("Fade time (seconds)", "action_value_f",g.tbl.ge.trcr.prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trcr.fade,.125,5,.125,1,"g.tbl.ge.trcr.fade")

g.tbl.ge.trcr.r = menu.add_feature("Red", "action_value_i",g.tbl.ge.trcr.prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trcr.r,0,255,5,255,"g.tbl.ge.trcr.r")

g.tbl.ge.trcr.g = menu.add_feature("Green", "action_value_i",g.tbl.ge.trcr.prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trcr.g,0,255,5,0,"g.tbl.ge.trcr.g")

g.tbl.ge.trcr.b = menu.add_feature("Blue", "action_value_i",g.tbl.ge.trcr.prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trcr.b,0,255,5,0,"g.tbl.ge.trcr.b")

g.tbl.ge.trcr.a = menu.add_feature("Alpha", "action_value_i",g.tbl.ge.trcr.prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trcr.a,0,255,5,200,"g.tbl.ge.trcr.a")


g.tbl.ge.aim.prnt=menu.add_feature("Firing point options","parent",g.prnt.self_weapons_ge.id, function()
	g.tbl.ge.aim.veh_prnt.hidden=g.tbl.ge.aim.veh_pos.value ~= 0
	g.tbl.ge.aim.frwd_foot_offst.hidden=g.tbl.ge.aim.fire_pos.value==1 and g.tbl.ge.aim.veh_pos.value~=1 
	g.tbl.ge.aim.frwd_cam_offst.hidden=g.tbl.ge.aim.fire_pos.value==0 and g.tbl.ge.aim.veh_pos.value~=2
end)

g.tbl.ge.aim.fade_bool=false
g.tbl.ge.aim.const_bool=false
g.tbl.ge.aim.temp_obj=nil
g.tbl.ge.aim.temp_feat=menu.add_feature("test object HIDDEN", "toggle", g.tbl.ge.aim.prnt.id, function(f)
	local time,obj,dir,pos,rot = API.util.t_ms()-1
	while f.on do
		system.yield(5)
		if g.tbl.ge.aim.fade_bool then
			g.tbl.ge.aim.fade_bool=false
			time = API.util.t_ms()+7000
		end
		if time > API.util.t_ms() or g.tbl.ge.aim.const_bool then
			if not funcs.is.ent(g.tbl.ge.aim.temp_obj) then
				funcs.doo.req_model(-1707997257)
				g.tbl.ge.aim.temp_obj = object.create_object(-1707997257,funcs.get.GE_start(), false,false)
				API.ent.freeze(g.tbl.ge.aim.temp_obj,true)
				API.ent.set.collision(g.tbl.ge.aim.temp_obj,false,false)
			else
				if time > API.util.t_ms() then
					API.ent.set.alpha(g.tbl.ge.aim.temp_obj, mth.flr((time-API.util.t_ms())/7000*255), false)
				else
					API.ent.set.alpha(g.tbl.ge.aim.temp_obj, 0, false)
				end
				API.ent.set.coords(g.tbl.ge.aim.temp_obj,funcs.get.GE_start())
				API.ent.set.rotation(g.tbl.ge.aim.temp_obj,API.cam.get.rot())
			end
		else
			funcs.doo.remove_ent(g.tbl.ge.aim.temp_obj,100)
			system.yield(100)
		end
	end
	funcs.doo.remove_ent(g.tbl.ge.aim.temp_obj,100)
	f.on=false
end)g.tbl.ge.aim.temp_feat.hidden=true
g.tbl.ge.aim.temp_feat.on=true


function funcs.doo.spawn_obj(_hash,_pos,_rot,_ntwrk,_freeze,_migrate,_vis)
	_rot = _rot or v3()
	_ntwrk = _ntwrk or true
	_freeze = _freeze or true
	_migrate = _migrate or 0
	_vis = _vis or true
	local temp = object.create_object(_hash, _pos, _ntwrk,false)
	API.ent.set.rotation(temp,_rot)
	API.ent.freeze(temp,_freeze)
	API.ent.set.visible(temp,_vis)
	funcs.doo.id_migrate(temp,_migrate)
	g.tbl.entities[#g.tbl.entities+1]=temp
	return temp
end







function g.tbl.ge.aim.temp_start(_bool)
	g.tbl.ge.aim.fade_bool=_bool
end
	
g.tbl.ge.aim.fire_pos=menu.add_feature("Firing point","autoaction_value_str",g.tbl.ge.aim.prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=true
	g.tbl.ge.aim.frwd_foot_offst.hidden=f.value==1 and g.tbl.ge.aim.veh_pos.value~=1
	g.tbl.ge.aim.frwd_cam_offst.hidden=f.value==0 and g.tbl.ge.aim.veh_pos.value~=2
end)
g.tbl.ge.aim.fire_pos:set_str_data({"My ped", "Cam"})
funcs.add_to_S_L(g.tbl.ge.aim.fire_pos,"g.tbl.ge.aim.fire_pos")
g.tbl.ge.aim.fire_pos.value=1

g.tbl.ge.aim.frwd_foot_offst=menu.add_feature("Forward offset for ped","autoaction_value_f",g.tbl.ge.aim.prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(not funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.frwd_foot_offst,0,10,.5,2,"g.tbl.ge.aim.frwd_foot_offst")

g.tbl.ge.aim.frwd_cam_offst=menu.add_feature("Forward offset for cam","autoaction_value_f",g.tbl.ge.aim.prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(not funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.frwd_cam_offst,0,10,.5,6,"g.tbl.ge.aim.frwd_cam_offst")

g.tbl.ge.aim.veh_pos=menu.add_feature("Firing point in vehicle","autoaction_value_str",g.tbl.ge.aim.prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(f.value ~= 0 or (f.value == 0 and funcs.ME._in_veh()))
	g.tbl.ge.aim.veh_prnt.hidden=f.value ~= 0
	g.tbl.ge.aim.frwd_foot_offst.hidden=f.value~=1 and g.tbl.ge.aim.fire_pos.value~=0
	g.tbl.ge.aim.frwd_cam_offst.hidden=f.value==0 and g.tbl.ge.aim.fire_pos.value~=1
end)
g.tbl.ge.aim.veh_pos:set_str_data({"Vehicle","My ped","Cam"})
funcs.add_to_S_L(g.tbl.ge.aim.veh_pos,"g.tbl.ge.aim.veh_pos")

g.tbl.ge.aim.veh_prnt=menu.add_feature("Vehicle offsets","parent",g.tbl.ge.aim.prnt.id,function(f)
	g.tbl.ge.aim.smrt_veh_offst.hidden=g.tbl.ge.aim.vert_veh_offst.value ~= 0
	g.tbl.ge.aim.mnl_veh_offst.hidden=g.tbl.ge.aim.vert_veh_offst.value ~= 1
	g.tbl.ge.aim.frwd_veh_smrt.hidden=g.tbl.ge.aim.frwd_veh_offst_type.value ~= 0
	g.tbl.ge.aim.frwd_veh_offst.hidden=g.tbl.ge.aim.frwd_veh_offst_type.value ~= 1
end)

g.tbl.ge.aim.frwd_veh_offst_type=menu.add_feature("Forward Offset type","autoaction_value_str",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(funcs.ME._in_veh())
	g.tbl.ge.aim.frwd_veh_smrt.hidden=f.value ~= 0
	g.tbl.ge.aim.frwd_veh_offst.hidden=f.value ~= 1
end)
g.tbl.ge.aim.frwd_veh_offst_type:set_str_data({"Smart", "Manual","None"})
funcs.add_to_S_L(g.tbl.ge.aim.frwd_veh_offst_type,"g.tbl.ge.aim.frwd_veh_offst_type")

g.tbl.ge.aim.frwd_veh_smrt=menu.add_feature("Forward smart offset (multiplier)","autoaction_value_f",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.frwd_veh_smrt,0,3,.05,1,"g.tbl.ge.aim.frwd_veh_smrt")

g.tbl.ge.aim.frwd_veh_offst=menu.add_feature("Forward manual offset (meters)","autoaction_value_f",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.frwd_veh_offst,0,25,.1,2,"g.tbl.ge.aim.frwd_veh_offst")

g.tbl.ge.aim.vert_veh_offst=menu.add_feature("Vertical offset type","autoaction_value_str",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(funcs.ME._in_veh())
	g.tbl.ge.aim.smrt_veh_offst.hidden=f.value ~= 0
	g.tbl.ge.aim.mnl_veh_offst.hidden=f.value ~= 1
end)
g.tbl.ge.aim.vert_veh_offst:set_str_data({"Smart", "Manual","None"})
funcs.add_to_S_L(g.tbl.ge.aim.vert_veh_offst,"g.tbl.ge.aim.vert_veh_offst")

g.tbl.ge.aim.smrt_veh_offst=menu.add_feature("Vertical smart offset (multiplier)","autoaction_value_f",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(g.tbl.ge.aim.vert_veh_offst.value == 0 and funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.smrt_veh_offst,0,3,.05,1,"g.tbl.ge.aim.smrt_veh_offst")

g.tbl.ge.aim.mnl_veh_offst=menu.add_feature("Vertical manual offset (meters)","autoaction_value_f",g.tbl.ge.aim.veh_prnt.id,function(f)
	g.tbl.ge.aim.fade_bool=(g.tbl.ge.aim.vert_veh_offst.value == 1 and funcs.ME._in_veh())
end)
funcs.set_feat_i_f(g.tbl.ge.aim.mnl_veh_offst,0,25,.1,2,"g.tbl.ge.aim.mnl_veh_offst")


function g.tbl.ge.trgt.check_visibility(_ent)
	local function los_check()
		return (funcs.is.ent(g.tbl.ge.aim.temp_obj) and ntv.is.ents_in_los(g.tbl.ge.aim.temp_obj,_ent,3,true))
	end
	g.tbl.ge.trgt._bool, g.tbl.ge.trgt._screen_pos = graphics.project_3d_coord(API.ent.get.coords(_ent))
	if g.tbl.ge.trgt._bool then
		g.tbl.ge.trgt._screen_pos = funcs.get.screen_pos_math(g.tbl.ge.trgt._screen_pos)
	end
	if g.tbl.ge.trgt.fov_limits.value == 0 then
		return (g.tbl.ge.trgt._bool and (mth.abs(g.tbl.ge.trgt._screen_pos.x)<=(g.tbl.ge.trgt.fov_x.value*0.01)) and (mth.abs(g.tbl.ge.trgt._screen_pos.y)<= (g.tbl.ge.trgt.fov_y.value*0.01)) and los_check())
	elseif g.tbl.ge.trgt.fov_limits.value == 1 then
		return (g.tbl.ge.trgt._bool and los_check())
	end
	return los_check()
end

function g.tbl.ge.trgt.record_ped_info()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local all_peds,this_ped
		local function name_dead(_ped,_name)
			g.tbl.ge.trgt.peds[_ped].NAME = _name
			if API.ent.is.dead(_ped) then
				g.tbl.ge.trgt.peds[_ped].NAME = g.tbl.ge.trgt.peds[_ped].NAME.." (DEAD)"
			end
		end
		while g.tbl.ge.enable_trgtng.on do
			system.yield(0)
			if g.tbl.ge.feat.on then
				all_peds=API.Ped.get.all()
				for i=1,#all_peds do
					this_ped=all_peds[i]
					if g.tbl.ge.trgt.peds[this_ped]== nil or this_ped == funcs.ME._ped() or API.ent.get.coords(this_ped).z < -49 then 
						g.tbl.ge.trgt.peds[this_ped]={PED=this_ped,NAME="",GOOD=false}
					elseif API.Ped.is.plyr(this_ped) then 
						local pid = API.plyr.get.plyr_from_ped(this_ped)
						name_dead(this_ped,funcs.get.pid_name(pid))
						if not g.tbl.ge.trgt.type_plyr.on then
							g.tbl.ge.trgt.peds[this_ped].GOOD=false
						else
							local frnd = API.plyr.is.friend(pid)
							local orgmc = funcs.is.same_orgmc(funcs.ME._id(),pid)
							local other  = (not frnd and not orgmc)
							if 	(frnd and g.tbl.ge.trgt.type_frnd.value == 0) or
								(orgmc and g.tbl.ge.trgt.type_org.value == 0) or
								(other and g.tbl.ge.trgt.type_othr_plyr.value == 0) then
								g.tbl.ge.trgt.peds[this_ped].GOOD = false
							else
								g.tbl.ge.trgt.peds[this_ped].GOOD = true
							end
						end
					elseif not g.tbl.ge.trgt.type_npc.on then
						g.tbl.ge.trgt.peds[this_ped].GOOD=false
						g.tbl.ge.trgt.peds[this_ped].NAME = ""
					elseif ped_models.rltshp_csa[API.Ped.get.rel_group_hash(this_ped)] then
						name_dead(this_ped,"COP")
						if g.tbl.ge.trgt.type_mssn.value == 0 and (ped_models.rltshp_mssn[API.Ped.get.rel_group_hash(this_ped)] or ntv.is.ped_dislikes(this_ped,API.plyr.get.ped(API.plyr.my_id())) or ntv.is.ped_attack_ped(this_ped,API.plyr.get.ped(API.plyr.my_id()))) then
							g.tbl.ge.trgt.peds[this_ped].GOOD=true
						else
							g.tbl.ge.trgt.peds[this_ped].GOOD=(g.tbl.ge.trgt.type_csa.value == 0)
						end
					elseif (ped_models.rltshp_mssn[API.Ped.get.rel_group_hash(this_ped)] or ntv.is.ped_dislikes(this_ped,API.plyr.get.ped(API.plyr.my_id())) or ntv.is.ped_attack_ped(this_ped,API.plyr.get.ped(API.plyr.my_id()))) then
						name_dead(this_ped,"ANGRY")
						if g.tbl.ge.trgt.type_csa.value == 0  and ped_models.rltshp_csa[API.Ped.get.rel_group_hash(this_ped)] then
							g.tbl.ge.trgt.peds[this_ped].GOOD=true
						else
							g.tbl.ge.trgt.peds[this_ped].GOOD=(g.tbl.ge.trgt.type_mssn.value == 0)
						end
					else
						name_dead(this_ped,"PED")
						g.tbl.ge.trgt.peds[this_ped].GOOD=(g.tbl.ge.trgt.type_othr_npc.value == 0)
					end
				end
				system.yield(100)
				for _,Ped in pairs(g.tbl.ge.trgt.peds) do
					if Ped ~= nil and not funcs.is.ent(Ped.PED) then
						Ped=nil
					end
				end
			end
		end
	end, nil)
end

function g.tbl.ge.trgt.get_current_target()
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local _table,_table2,this_ped,all_peds,time,this_ent
		while g.tbl.ge.enable_trgtng.on do
			system.yield(0)
			if g.tbl.ge.feat.on then
				_table = {}
				all_peds=API.Ped.get.all()
				for i=1,#all_peds do
					this_ped = all_peds[i]
					if g.tbl.ge.trgt.peds[this_ped] ~= nil and g.tbl.ge.trgt.peds[this_ped].GOOD and not API.ent.is.dead(this_ped) and funcs.is.in_grid(funcs.get.GE_start(),API.ent.get.coords(this_ped),g.tbl.ge.trgt.trgt_range) then
						if API.Ped.is.in_veh(this_ped) and g.tbl.ge.trgt.check_visibility(API.Ped.get.veh(this_ped)) then
							if g.tbl.ge.trgt.fov_limits.value== 2 then
								_table[#_table+1]={API.Ped.get.veh(this_ped),this_ped,g.tbl.ge.trgt._screen_pos,funcs.get.vctr_to_pos(API.ent.get.coords(API.Ped.get.veh(this_ped)),funcs.ME._ped())}
							else
								_table[#_table+1]={API.Ped.get.veh(this_ped),this_ped,g.tbl.ge.trgt._screen_pos}
							end
						elseif g.tbl.ge.trgt.check_visibility(this_ped) then
							if g.tbl.ge.trgt.fov_limits.value== 2 then
								_table[#_table+1]={this_ped,this_ped,g.tbl.ge.trgt._screen_pos,funcs.get.vctr_to_pos(API.ent.get.coords(this_ped),funcs.ME._ped())}
							else
								_table[#_table+1]={this_ped,this_ped,g.tbl.ge.trgt._screen_pos}
							end
						end
					end
				end
				if #_table == 0 then
					g.tbl.ge.trgt.trgt_ent = nil
					g.tbl.ge.trgt.trgt_ped = nil
					g.tbl.ge.trgt.trgt_crds = nil
				else
					if g.tbl.ge.trgt.fov_limits.value == 2 then
						_table2={}
						for i=1,#_table do
							if _table[i][3]~= nil then
								_table2[#_table2+1]=_table[i]
							end
						end
						if #_table2 > 0 then
							table.sort(_table2, function(a, b) return mth.abs(a[3].x)+mth.abs(a[3].y) <  mth.abs(b[3].x)+mth.abs(b[3].y) end)
							_table={}
							for i=1,#_table2 do
								_table[i]=_table2[i]
							end
						else
							table.sort(_table, function(a, b) return funcs.get.v3_total_compare(API.cam.get.rot(),a[4])<funcs.get.v3_total_compare(API.cam.get.rot(),b[4])  end)
						end
					else
						table.sort(_table, function(a, b) return mth.abs(a[3].x)+mth.abs(a[3].y) <  mth.abs(b[3].x)+mth.abs(b[3].y) end)
					end
					g.tbl.ge.trgt.trgt_ent = _table[1][1]
					g.tbl.ge.trgt.trgt_ped = _table[1][2]
					g.tbl.ge.trgt.trgt_crds = API.ent.get.coords(g.tbl.ge.trgt.trgt_ped)
				end
			end
			time = API.util.t_ms() + g.tbl.ge.trgt.max_trgt_swtch.value					
			while time > API.util.t_ms() and g.tbl.ge.feat.on and g.tbl.ge.trgt.good_ents(g.tbl.ge.trgt.trgt_ent,g.tbl.ge.trgt.trgt_ped) and g.tbl.ge.trgt.peds[g.tbl.ge.trgt.trgt_ped] ~= nil and g.tbl.ge.trgt.check_visibility(g.tbl.ge.trgt.trgt_ent) do
				g.tbl.ge.trgt.trgt_crds = API.ent.get.coords(g.tbl.ge.trgt.trgt_ped)
				system.yield(0)
			end 
		end
	end, nil)
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		while g.tbl.ge.feat.on or g.tbl.ge.enable_trgtng.on do
			if g.tbl.ge.enable_trgtng.on then
				if g.tbl.ge.trgt.good_ents(g.tbl.ge.trgt.trgt_ent,g.tbl.ge.trgt.trgt_ped) and g.tbl.ge.trgt.peds[g.tbl.ge.trgt.trgt_ped] ~= nil then
					if g.tbl.ge.trgt.check_visibility(g.tbl.ge.trgt.trgt_ent) then
						g.tbl.ge.trgt.show_ped(g.tbl.ge.trgt.trgt_ped)
					end
				end
				if g.tbl.ge.trgt.fov_limits.value == 0 and g.tbl.ge.trgt.fov_show.on then
					g.tbl.ge.trgt.show_fov_box(g.tbl.ge.trgt.box_a.value)
				end
			end
			system.yield(0)
		end
	end, nil)
end

function g.tbl.ge.trgt.good_ents(_trgt,_t_ped)
	return (funcs.is.ent(_trgt) and funcs.is.ent(_t_ped) and not API.ent.is.dead(_t_ped))
end

g.tbl.ge.trgt.prnt=menu.add_feature("Assistance Options","parent",g.prnt.self_weapons_ge.id,function()
	g.tbl.ge.trgt.range_name()
end)

	function g.tbl.ge.trgt.range_name()
		g.tbl.ge.trgt.trgt_range = weap_info.GE_range[g.tbl.ge._weap_hash[g.tbl.ge.feat.value+1]][g.tbl.ge.trgt.speed_type.value][g.tbl.ge.trgt.speed_amnt.value]
		local weap_name = g.tbl.ge._weap_name[g.tbl.ge.feat.value+1]
		local homing = false
		if weap_name == "BZ-Gas" or weap_name == "Grenade Launcher" or weap_name == "Molotov" or weap_name == "Pipebomb" or weap_name == "EMP Launcher" then
			g.tbl.ge.trgt.range_display.name = weap_name.." - Est. direct impact: "..g.tbl.ge.trgt.trgt_range.."m"
			if g.tbl.ge.trgt.speed_type.value == 1 then
				g.tbl.ge.trgt.speed_type.name="Speed boost type: (Homing)"
				homing=true
			else
				g.tbl.ge.trgt.speed_type.name="Speed boost type:"
			end
		elseif weap_name == "Mk2 Sniper" or weap_name == "Railgun" then
			g.tbl.ge.trgt.range_display.name = weap_name.." - Max range: "..g.tbl.ge.trgt.trgt_range.."m (Unaffected by speed)"
			g.tbl.ge.trgt.speed_type.name="Speed boost type:"
		else
			g.tbl.ge.trgt.range_display.name = weap_name.." - Est. max range: "..g.tbl.ge.trgt.trgt_range.."m"
			if g.tbl.ge.trgt.speed_type.value == 1 then
				g.tbl.ge.trgt.speed_type.name="Speed boost type: (Homing)"
				homing=true
			else
				g.tbl.ge.trgt.speed_type.name="Speed boost type:"
			end
		end
		if g.tbl.ge.feat.on then
			if g.tbl.ge.enable_trgtng.on then
				if homing then
					g.tbl.ge.feat.name="Gee-Eye ("..inputs.vk_list[g.tbl.ge.slct_key1.value+1]..") "..g.tbl.ge.trgt.trgt_range.."m (Homing)"
				else
					g.tbl.ge.feat.name="Gee-Eye ("..inputs.vk_list[g.tbl.ge.slct_key1.value+1]..") "..g.tbl.ge.trgt.trgt_range.."m"
				end
			else
				g.tbl.ge.feat.name="Gee-Eye ("..inputs.vk_list[g.tbl.ge.slct_key1.value+1]..") "..weap_info.GE_range[g.tbl.ge._weap_hash[g.tbl.ge.feat.value+1]][2][1].."m"
			end
		else
			g.tbl.ge.feat.name="Gee-Eye"
		end
	end
	
	g.tbl.ge.trgt.range_display=menu.add_feature("Range","action",g.tbl.ge.trgt.prnt.id)
	
	g.tbl.ge.trgt.trigger_bot=menu.add_feature("Trigger-bot","toggle",g.tbl.ge.trgt.prnt.id)
	funcs.add_to_S_L(g.tbl.ge.trgt.trigger_bot,"g.tbl.ge.trgt.trigger_bot")
	
	g.tbl.ge.trgt.show_rtcl=menu.add_feature("Show reticle if no target available","toggle",g.tbl.ge.trgt.prnt.id)
	funcs.add_to_S_L(g.tbl.ge.trgt.show_rtcl,"g.tbl.ge.trgt.show_rtcl")
	g.tbl.ge.trgt.show_rtcl.on=true
		
	g.tbl.ge.trgt.speed_type=menu.add_feature("Speed boost type:","autoaction_value_str",g.tbl.ge.trgt.prnt.id,function()
		g.tbl.ge.trgt.range_name()
	end)
	g.tbl.ge.trgt.speed_type:set_str_data({"Initial burst","Continuous","None"})
	funcs.add_to_S_L(g.tbl.ge.trgt.speed_type,"g.tbl.ge.trgt.speed_type")
	g.tbl.ge.trgt.speed_type.value=1
	
	g.tbl.ge.trgt.speed_amnt=menu.add_feature("Speed boost amount:","autoaction_value_i",g.tbl.ge.trgt.prnt.id,function()
		g.tbl.ge.trgt.range_name()
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.speed_amnt,1,10,1,1,"g.tbl.ge.trgt.speed_amnt")
	
	g.tbl.ge.trgt.fov_limits=menu.add_feature("Limit targets to:","action_value_str",g.tbl.ge.trgt.prnt.id)
	g.tbl.ge.trgt.fov_limits:set_str_data({"Selected FOV limit","Anywhere on screen","Any direction"})
	funcs.add_to_S_L(g.tbl.ge.trgt.fov_limits,"g.tbl.ge.trgt.fov_limits")
	
	g.tbl.ge.trgt.max_trgt_swtch=menu.add_feature("Target switch time (ms)","action_value_i",g.tbl.ge.trgt.prnt.id)
	funcs.set_feat_i_f(g.tbl.ge.trgt.max_trgt_swtch,25,1000,25,150,"g.tbl.ge.trgt.max_trgt_swtch")
	
	function g.tbl.ge.trgt.ped_hide()
		g.tbl.ge.trgt.type_csa.hidden=(not g.tbl.ge.trgt.type_npc.on)
		g.tbl.ge.trgt.type_mssn.hidden=(not g.tbl.ge.trgt.type_npc.on)
		g.tbl.ge.trgt.type_othr_npc.hidden=(not g.tbl.ge.trgt.type_npc.on)
		g.tbl.ge.trgt.type_frnd.hidden=(not g.tbl.ge.trgt.type_plyr.on)
		g.tbl.ge.trgt.type_org.hidden=(not g.tbl.ge.trgt.type_plyr.on)
		g.tbl.ge.trgt.type_othr_plyr.hidden=(not g.tbl.ge.trgt.type_plyr.on)
	end
	
	g.tbl.ge.trgt.type_prnt=menu.add_feature("Target Selection","parent",g.tbl.ge.trgt.prnt.id,function(f)
		g.tbl.ge.trgt.ped_hide()
	end)

	g.tbl.ge.trgt.type_npc=menu.add_feature("NPC", "toggle", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.ped_hide()
		if not f.on and not g.tbl.ge.trgt.type_plyr.on then
			g.tbl.ge.trgt.type_plyr.on=true
		end
	end)
	funcs.add_to_S_L(g.tbl.ge.trgt.type_npc,"g.tbl.ge.trgt.type_npc")
	
	function g.tbl.ge.trgt.npc_no_option(_bool,_feat)
		if _bool and g.tbl.ge.trgt.type_csa.value==1 and g.tbl.ge.trgt.type_mssn.value==1 and g.tbl.ge.trgt.type_othr_npc.value==1 then
			_feat.value = 0
		end
	end

	g.tbl.ge.trgt.type_csa=menu.add_feature("Cops/Security/Army", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.npc_no_option(f.value==1,g.tbl.ge.trgt.type_mssn)
	end)
	g.tbl.ge.trgt.type_csa:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_csa,"g.tbl.ge.trgt.type_csa")
	
	g.tbl.ge.trgt.type_mssn=menu.add_feature("Mission/Angry", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.npc_no_option(f.value==1,g.tbl.ge.trgt.type_othr_npc)
	end)
	g.tbl.ge.trgt.type_mssn:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_mssn,"g.tbl.ge.trgt.type_mssn")
	
	g.tbl.ge.trgt.type_othr_npc=menu.add_feature("All other NPC", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.npc_no_option(f.value==1,g.tbl.ge.trgt.type_csa)
	end)
	g.tbl.ge.trgt.type_othr_npc:set_str_data({"Include","Exclude"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_othr_npc,"g.tbl.ge.trgt.type_othr_npc")
	
	g.tbl.ge.trgt.type_plyr=menu.add_feature("Players", "toggle", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.ped_hide()
		if not f.on and not g.tbl.ge.trgt.type_npc.on then
			g.tbl.ge.trgt.type_npc.on=true
		end
	end)
	funcs.add_to_S_L(g.tbl.ge.trgt.type_plyr,"g.tbl.ge.trgt.type_plyr")
	
	function g.tbl.ge.trgt.plyr_show_or_hide(_bool,_feat)
		if _bool and g.tbl.ge.trgt.type_frnd.value==0 and g.tbl.ge.trgt.type_org.value==0 and g.tbl.ge.trgt.type_othr_plyr.value==0 then
			_feat.value = 1
		end
	end

	
	g.tbl.ge.trgt.type_frnd=menu.add_feature("My friends", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.plyr_show_or_hide(f.value==0,g.tbl.ge.trgt.type_org)
	end)
	g.tbl.ge.trgt.type_frnd:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_frnd,"g.tbl.ge.trgt.type_frnd")
	
	g.tbl.ge.trgt.type_org=menu.add_feature("My Org/MC", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.plyr_show_or_hide(f.value==0,g.tbl.ge.trgt.type_othr_plyr)
	end)
	g.tbl.ge.trgt.type_org:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_org,"g.tbl.ge.trgt.type_org")
	
	g.tbl.ge.trgt.type_othr_plyr=menu.add_feature("All other players", "autoaction_value_str", g.tbl.ge.trgt.type_prnt.id,function(f)
		g.tbl.ge.trgt.plyr_show_or_hide(f.value==0,g.tbl.ge.trgt.type_frnd)
	end)
	g.tbl.ge.trgt.type_othr_plyr:set_str_data({"Exclude","Include"})
	funcs.add_to_S_L(g.tbl.ge.trgt.type_othr_plyr,"g.tbl.ge.trgt.type_othr_plyr")
	

	g.tbl.ge.trgt.type_npc.on=true
	g.tbl.ge.trgt.type_plyr.on=true
	g.tbl.ge.trgt.type_othr_plyr.value=1
	
g.tbl.ge.trgt.trgt_optns_prnt=menu.add_feature("Target Information","parent",g.tbl.ge.trgt.prnt.id)

	g.tbl.ge.trgt.mrkr_show=menu.add_feature("Show target icon on screen","toggle",g.tbl.ge.trgt.trgt_optns_prnt.id)
	funcs.add_to_S_L(g.tbl.ge.trgt.mrkr_show,"g.tbl.ge.trgt.mrkr_show")
	g.tbl.ge.trgt.mrkr_show.on=true
	
	g.tbl.ge.trgt.show_name=menu.add_feature("Show name on screen","toggle",g.tbl.ge.trgt.trgt_optns_prnt.id)
	funcs.add_to_S_L(g.tbl.ge.trgt.show_name,"g.tbl.ge.trgt.show_name")
	g.tbl.ge.trgt.show_name.on=true
	
	function g.tbl.ge.trgt.start_test_display()
		if  g.var.GS_has_loaded then
			g.tbl.ge.trgt.test_display=true
			g.tbl.ge.trgt.test_display_feat.on=true
		end
	end

	g.tbl.ge.trgt.test_display=false
	g.tbl.ge.trgt.test_display_feat=menu.add_feature("Show icon/name HIDDEN", "toggle", g.tbl.ge.trgt.trgt_optns_prnt.id,function(f)
		local time,ent,alpha = API.util.t_ms() + 3000
		while time > API.util.t_ms() do
			if g.tbl.ge.trgt.test_display then
				g.tbl.ge.trgt.test_display=false
				time = API.util.t_ms() + 3000
			end
			g.tbl.ge.trgt.show_that_marker(v2(0,0),mth.flr((time-API.util.t_ms())/3000*g.tbl.ge.trgt.mrkr_a.value))
			g.tbl.ge.trgt.show_that_name(funcs.ME._ped(),v2(0,0),funcs.get.pid_name(funcs.ME._id()),mth.flr((time-API.util.t_ms())/3000*g.tbl.ge.trgt.name_a.value))
			system.yield(5)
		end
		f.on=false
	end)
	g.tbl.ge.trgt.test_display_feat.hidden=true
	
	g.tbl.ge.trgt.mrkr_prnt=menu.add_feature("Icon Options","parent",g.tbl.ge.trgt.trgt_optns_prnt.id,function()
		g.tbl.ge.trgt.icon_rot_hide()
	end)

		function g.tbl.ge.trgt.icon_rot_hide()
			g.tbl.ge.trgt.mrkr_wbl.hidden=(g.tbl.ge.trgt.mrkr_rot.value~=0 or not g.tbl.ge.trgt.mrkr_rot.on)
			g.tbl.ge.trgt.mrkr_rot_spd.hidden=(not g.tbl.ge.trgt.mrkr_rot.on)
		end
		
		g.tbl.ge.trgt.slct = menu.add_feature("Select icon", "autoaction_value_i", g.tbl.ge.trgt.mrkr_prnt.id, function(f)
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.slct,1,#g.tbl.reticle_files,1,41,"g.tbl.ge.trgt.slct")

		g.tbl.ge.trgt.mrkr_s = menu.add_feature("Icon size", "autoaction_value_f",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_s,0,3,0.01,1,"g.tbl.ge.trgt.mrkr_s")

		g.tbl.ge.trgt.mrkr_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_r,0,255,1,255,"g.tbl.ge.trgt.mrkr_r")
		
		g.tbl.ge.trgt.mrkr_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_g,0,255,1,172,"g.tbl.ge.trgt.mrkr_g")
		
		g.tbl.ge.trgt.mrkr_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_b,0,255,1,28,"g.tbl.ge.trgt.mrkr_b")
		
		g.tbl.ge.trgt.mrkr_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_a,0,255,1,255,"g.tbl.ge.trgt.mrkr_a")

		g.tbl.ge.trgt.mrkr_val = 0
		g.tbl.ge.trgt.mrkr_rot = menu.add_feature("Icon rotation", "value_str",g.tbl.ge.trgt.mrkr_prnt.id,function(f)
			local flip,f_value,_min,_max = true
			g.tbl.ge.trgt.start_test_display()
			while f.on do
				if f_value ~= f.value+g.tbl.ge.trgt.mrkr_wbl.value+g.tbl.ge.trgt.mrkr_rot_spd.value then
					g.tbl.ge.trgt.start_test_display()
					f_value = f.value+g.tbl.ge.trgt.mrkr_wbl.value+g.tbl.ge.trgt.mrkr_rot_spd.value
					g.tbl.ge.trgt.mrkr_val=0
				end
				if f.value == 0 then
					if flip then
						if g.tbl.ge.trgt.mrkr_val > g.tbl.ge.trgt.mrkr_wbl.value/360*2*mth.pi*-1 then
							g.tbl.ge.trgt.mrkr_val=g.tbl.ge.trgt.mrkr_val-(0.02*g.tbl.ge.trgt.mrkr_rot_spd.value)
						else flip=false
						end
					elseif g.tbl.ge.trgt.mrkr_val < g.tbl.ge.trgt.mrkr_wbl.value/360*2*mth.pi then
						g.tbl.ge.trgt.mrkr_val=g.tbl.ge.trgt.mrkr_val+(0.02*g.tbl.ge.trgt.mrkr_rot_spd.value)
					else flip=true
					end
				elseif g.tbl.ge.trgt.mrkr_val >= (2*mth.pi) then
					g.tbl.ge.trgt.mrkr_val = g.tbl.ge.trgt.mrkr_val - (2*mth.pi) 
				elseif g.tbl.ge.trgt.mrkr_val <= (-2*mth.pi) then
					g.tbl.ge.trgt.mrkr_val = g.tbl.ge.trgt.mrkr_val+ (2*mth.pi)
				elseif f.value == 1 then
					g.tbl.ge.trgt.mrkr_val=g.tbl.ge.trgt.mrkr_val+(0.02*g.tbl.ge.trgt.mrkr_rot_spd.value)
				else
					g.tbl.ge.trgt.mrkr_val=g.tbl.ge.trgt.mrkr_val-(0.02*g.tbl.ge.trgt.mrkr_rot_spd.value)
				end
				g.tbl.ge.trgt.icon_rot_hide()
				system.yield(25)
			end
			g.tbl.ge.trgt.mrkr_wbl.hidden=true
			g.tbl.ge.trgt.mrkr_rot_spd.hidden=true
		end)
		g.tbl.ge.trgt.mrkr_rot:set_str_data({"Wobble","Clockwise","Counter-Clockwise"})
		funcs.add_to_S_L(g.tbl.ge.trgt.mrkr_rot,"g.tbl.ge.trgt.mrkr_rot")
		g.tbl.ge.trgt.mrkr_rot.on=true
		g.tbl.ge.trgt.mrkr_rot.value=2
		
		g.tbl.ge.trgt.mrkr_wbl = menu.add_feature("Wobble range", "autoaction_value_i",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
			g.tbl.ge.trgt.mrkr_val=0
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_wbl,0,360,5,15,"g.tbl.ge.trgt.mrkr_wbl")

		g.tbl.ge.trgt.mrkr_rot_spd = menu.add_feature("Rotation speed", "autoaction_value_f",g.tbl.ge.trgt.mrkr_prnt.id,function()
			g.tbl.ge.trgt.start_test_display()
		end)
		funcs.set_feat_i_f(g.tbl.ge.trgt.mrkr_rot_spd,0.1,3,0.1,3,"g.tbl.ge.trgt.mrkr_rot_spd")

g.tbl.ge.trgt.name_prnt=menu.add_feature("Name Options","parent",g.tbl.ge.trgt.trgt_optns_prnt.id,function()
	 g.tbl.ge.trgt.name_xy_do()
end)

g.tbl.ge.trgt.name_flags=(1<<1)+(1<<0)
g.tbl.ge.trgt.name_x_flag=(2/3)

function g.tbl.ge.trgt.name_flags_do()
	if g.tbl.ge.trgt.name_just.value == 0 then
		g.tbl.ge.trgt.name_flags=(1<<1)
		g.tbl.ge.trgt.name_x_flag=1
	elseif g.tbl.ge.trgt.name_just.value == 1 then
		g.tbl.ge.trgt.name_flags=(1<<1)+(1<<0)
		g.tbl.ge.trgt.name_x_flag=(2/3)
	else
		g.tbl.ge.trgt.name_flags=(1<<1)+(1<<4)
		g.tbl.ge.trgt.name_x_flag=1
	end
end

function  g.tbl.ge.trgt.show_ped(_ped,alpha)
	local screen_pos = funcs.get.screen_pos_3d(API.ent.get.coords(_ped))
	if screen_pos then
		g.tbl.ge.trgt.show_that_marker(screen_pos,alpha)
		if  g.tbl.ge.trgt.peds[_ped] ~= nil then
			g.tbl.ge.trgt.show_that_name( g.tbl.ge.trgt.peds[_ped].PED,screen_pos, g.tbl.ge.trgt.peds[_ped].NAME,alpha)
		end
	end
end

function  g.tbl.ge.trgt.show_that_marker(pos,alpha)
	if  g.tbl.ge.trgt.mrkr_show.on then
		alpha = alpha or g.tbl.ge.trgt.mrkr_a.value
		if g.tbl.ge.trgt.mrkr_rot.on then
			API.SD.draw_sprt( g.tbl.reticle_sprites[ g.tbl.ge.trgt.slct.value],pos,1* g.tbl.ge.trgt.mrkr_s.value, g.tbl.ge.trgt.mrkr_val, funcs.get.rgb_to_int( g.tbl.ge.trgt.mrkr_r.value, g.tbl.ge.trgt.mrkr_g.value, g.tbl.ge.trgt.mrkr_b.value,alpha))
		else
			API.SD.draw_sprt( g.tbl.reticle_sprites[ g.tbl.ge.trgt.slct.value],pos,1* g.tbl.ge.trgt.mrkr_s.value,0, funcs.get.rgb_to_int( g.tbl.ge.trgt.mrkr_r.value, g.tbl.ge.trgt.mrkr_g.value, g.tbl.ge.trgt.mrkr_b.value,alpha))
		end
	end
end

function g.tbl.ge.trgt.show_that_name(ent,pos,name,alpha)
	if g.tbl.ge.trgt.show_name.on then
		alpha = alpha or g.tbl.ge.trgt.name_a.value
		pos.x=pos.x*g.tbl.ge.trgt.name_x_flag
		pos.x=pos.x+g.tbl.ge.trgt.name_x.value
		pos.y=pos.y+g.tbl.ge.trgt.name_y.value
		local _r,_g,_b = g.tbl.ge.trgt.name_r.value,g.tbl.ge.trgt.name_g.value,g.tbl.ge.trgt.name_b.value
		if funcs.is.ent(ent) and API.ent.is.ped(ent) and API.Ped.is.plyr(ent) and glbls.team_rgb_int(API.plyr.get.plyr_from_ped(ent)) > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.get.plyr_from_ped(ent)+1,nil)
		end
		API.SD.draw_text(name,pos,pos,g.tbl.ge.trgt.name_s.value,funcs.get.rgb_to_int(_r,_g,_b,mth.flr(alpha/255*g.tbl.ge.trgt.name_a.value)),g.tbl.ge.trgt.name_flags,nil)
	end
end

function g.tbl.ge.trgt.name_xy_do()
	g.tbl.ge.trgt.name_x.name = "X Pos Offset: "..funcs.get._3_dec(g.tbl.ge.trgt.name_x.value)
	g.tbl.ge.trgt.name_y.name = "Y Pos Offset: "..funcs.get._3_dec(g.tbl.ge.trgt.name_y.value)
end

g.tbl.ge.trgt.name_just = menu.add_feature("Justification", "autoaction_value_str",g.tbl.ge.trgt.name_prnt.id,function(f)
	g.tbl.ge.trgt.name_flags_do()
end)
g.tbl.ge.trgt.name_just:set_str_data({"Left","Center","Right"})
funcs.add_to_S_L(g.tbl.ge.trgt.name_just,"g.tbl.ge.trgt.name_just")
g.tbl.ge.trgt.name_just.value=1

g.tbl.ge.trgt.name_s=menu.add_feature("Size","autoaction_value_f",g.tbl.ge.trgt.name_prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_s,0,3,0.01,1,"g.tbl.ge.trgt.name_s")

g.tbl.ge.trgt.name_x=menu.add_feature("X Pos Offset: ","autoaction_value_f",g.tbl.ge.trgt.name_prnt.id,function(f)
	g.tbl.ge.trgt.name_xy_do()
end)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_x,-1,1,0.0025,0,"g.tbl.ge.trgt.name_x")


g.tbl.ge.trgt.name_y=menu.add_feature("Y Pos Offset: ","autoaction_value_f",g.tbl.ge.trgt.name_prnt.id,function(f)
	g.tbl.ge.trgt.name_xy_do()
end)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_y,-1,1,0.0025,-0.025,"g.tbl.ge.trgt.name_y")


g.tbl.ge.trgt.name_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.ge.trgt.name_prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_r,0,255,1,255,"g.tbl.ge.trgt.name_r")

g.tbl.ge.trgt.name_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.ge.trgt.name_prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_g,0,255,1,255,"g.tbl.ge.trgt.name_g")

g.tbl.ge.trgt.name_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.ge.trgt.name_prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_b,0,255,1,255,"g.tbl.ge.trgt.name_b")

g.tbl.ge.trgt.name_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.ge.trgt.name_prnt.id)
funcs.set_feat_i_f(g.tbl.ge.trgt.name_a,0,255,1,255,"g.tbl.ge.trgt.name_a")


	g.tbl.ge.trgt.fov_prnt=menu.add_feature("FOV Limit","parent",g.tbl.ge.trgt.prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
		g.tbl.ge.trgt.hand_fov_hide()
	end)

	function g.tbl.ge.trgt.test_fov_start(_bool)
		if _bool then
			g.tbl.ge.trgt.test_fov_show=true
			g.tbl.ge.trgt.test_fov.on=true
		end
	end
		
	function g.tbl.ge.trgt.hand_fov_hide()
		g.tbl.ge.trgt.box_r.hidden=(not g.tbl.ge.trgt.fov_show.on)
		g.tbl.ge.trgt.box_g.hidden=(not g.tbl.ge.trgt.fov_show.on)
		g.tbl.ge.trgt.box_b.hidden=(not g.tbl.ge.trgt.fov_show.on)
		g.tbl.ge.trgt.box_a.hidden=(not g.tbl.ge.trgt.fov_show.on)
	end
	
	g.tbl.ge.trgt.fov_x=menu.add_feature("FOV X limit","autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.fov_x,1,100,1,18,"g.tbl.ge.trgt.fov_x")

	g.tbl.ge.trgt.fov_y=menu.add_feature("FOV Y limit","autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.fov_y,1,100,1,32,"g.tbl.ge.trgt.fov_y")

	g.tbl.ge.trgt.fov_show=menu.add_feature("Show FOV box","toggle",g.tbl.ge.trgt.fov_prnt.id,function(f)
		g.tbl.ge.trgt.test_fov_start(f.on)
		g.tbl.ge.trgt.hand_fov_hide()
	end)
	funcs.add_to_S_L(g.tbl.ge.trgt.fov_show,"g.tbl.ge.trgt.fov_show")
	
	g.tbl.ge.trgt.box_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.box_r,0,255,1,255,"g.tbl.ge.trgt.box_r")
	
	g.tbl.ge.trgt.box_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.box_g,0,255,1,172,"g.tbl.ge.trgt.box_g")
	
	g.tbl.ge.trgt.box_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.box_b,0,255,1,28,"g.tbl.ge.trgt.box_b")
	
	g.tbl.ge.trgt.box_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.ge.trgt.fov_prnt.id,function()
		g.tbl.ge.trgt.test_fov_start(g.tbl.ge.trgt.fov_show.on)
	end)
	funcs.set_feat_i_f(g.tbl.ge.trgt.box_a,0,255,1,255,"g.tbl.ge.trgt.box_a")

	g.tbl.ge.trgt.test_fov_show=false
	g.tbl.ge.trgt.test_fov=menu.add_feature("Show  fov box HIDDEN", "toggle", g.tbl.ge.trgt.fov_prnt.id,function(f)
		if g.var.GS_has_loaded then
			local time = API.util.t_ms() + 3000
			local fov_time = API.util.t_ms()-1
			while time > API.util.t_ms() do
				if g.tbl.ge.trgt.test_fov_show then
					g.tbl.ge.trgt.test_fov_show=false
					time = API.util.t_ms() + 3000
					fov_time = API.util.t_ms() + 3000
				end
				if fov_time > API.util.t_ms() then
					g.tbl.ge.trgt.show_fov_box(mth.flr((fov_time-API.util.t_ms()) /3000*g.tbl.ge.trgt.box_a.value))
				end
				system.yield(5)
			end
		end
		f.on=false
	end)
	g.tbl.ge.trgt.test_fov.hidden=true
	g.tbl.ge.trgt.fov_show.on=true
	
	function g.tbl.ge.trgt.show_fov_box(alpha)
		if g.tbl.ge.trgt.fov_show.on then
			alpha = alpha or g.tbl.ge.trgt.box_a.value
			local x_size,y_size,color = g.tbl.ge.trgt.fov_x.value*0.01, g.tbl.ge.trgt.fov_y.value*0.01,funcs.get.rgb_to_int(g.tbl.ge.trgt.box_r.value,g.tbl.ge.trgt.box_g.value,g.tbl.ge.trgt.box_b.value,alpha)
			API.SD.draw_line(v2(-x_size,y_size),v2(x_size,y_size), 1, color)
			API.SD.draw_line(v2(x_size,y_size),v2(x_size,-y_size), 1, color)
			API.SD.draw_line(v2(x_size,-y_size),v2(-x_size,-y_size), 1, color)
			API.SD.draw_line(v2(-x_size,-y_size),v2(-x_size,y_size), 1,color)
		end
	end
	
g.tbl.ge.delay=menu.add_feature("Gee-Eye fire-rate delay (ms)","autoaction_value_i",g.prnt.self_weapons_ge.id)
funcs.set_feat_i_f(g.tbl.ge.delay,25,500,25,100,"g.tbl.ge.delay")

g.tbl.ge.spread=menu.add_feature("Gee-Eye spread","autoaction_slider",g.prnt.self_weapons_ge.id)
funcs.set_feat_i_f(g.tbl.ge.spread,25,1000,25,25,"g.tbl.ge.spread")

g.tbl.ge.spread_type=menu.add_feature("Gee-Eye spread type","autoaction_value_str",g.prnt.self_weapons_ge.id)
g.tbl.ge.spread_type:set_str_data({"Circular", "Horizontal", "Vertical"})
funcs.add_to_S_L(g.tbl.ge.spread_type,"g.tbl.ge.spread_type")

g.tbl.ge.blame=menu.add_feature("Gee-Eye blame","autoaction_value_str",g.prnt.self_weapons_ge.id)
g.tbl.ge.blame:set_str_data({"Me", "No-One"})
funcs.add_to_S_L(g.tbl.ge.blame,"g.tbl.ge.blame")

g.tbl.ge.vis=menu.add_feature("Gee-Eye visible?","autoaction_value_str",g.prnt.self_weapons_ge.id)
g.tbl.ge.vis:set_str_data({"False", "True"})
funcs.add_to_S_L(g.tbl.ge.vis,"g.tbl.ge.vis")

g.tbl.ge.aud=menu.add_feature("Gee-Eye audible?","autoaction_value_str",g.prnt.self_weapons_ge.id)
g.tbl.ge.aud:set_str_data({"False", "True"})
funcs.add_to_S_L(g.tbl.ge.aud,"g.tbl.ge.aud")

g.tbl.ge.slct_key1=menu.add_feature("Key1 for Gee-Eye HIDDEN","autoaction_value_str",g.prnt.self_weapons_ge.id)
g.tbl.ge.slct_key1:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.tbl.ge.slct_key1,"g.tbl.ge.slct_key1")
g.tbl.ge.slct_key1.hidden=true
g.tbl.ge.slct_key1.value=23

menu.add_feature("Set key for Gee-Eye","action",g.prnt.self_weapons_ge.id,function()
	funcs.doo.set_keybinds(1,"Gee-Eye",g.tbl.ge.slct_key1)
end)


g.tbl.ge.flare_feat=menu.add_feature("Gee-Flare","slider",g.prnt.self_weapons_ge_gf.id,function(f) --GTA will only display 5 flares you shoot. I tried making flares anonymous but this bypasses the 5 flare limit and can cause you to crash
	if funcs.is.GS_loaded() and f.on then
		g.N_P(2,"Press "..inputs.vk_list[g.tbl.ge.flare_key_slct.value+1].." to shoot Gee-Flare",__GV__,7,"Blue")
	end
	local delay_table={750,650,550,450,350,250}
	local v3_start,v3_end = v3(),v3()
	while f.on do
		system.yield(0)
		f.name="Gee-Flare ("..inputs.vk_list[g.tbl.ge.flare_key_slct.value+1]..")"
		while funcs.is.vk_key_down(inputs.vk_list[g.tbl.ge.flare_key_slct.value+1]) and not ntv.is.chat_active() do
			system.yield(0)
			API.wpn.ped_give_comp(API.plyr.get.ped(API.plyr.my_id()),1198879012, 1000)
			v3_start,v3_end = funcs.get.GE_calc(false)
			if API.cntrl.get.normal(0,25)==0.0 then
				gameplay.shoot_single_bullet_between_coords(v3_start, v3_end, 1, 1198879012, API.plyr.get.ped(API.plyr.my_id()), true, false, 1000)
				funcs.doo.delay(delay_table[f.value])
			end
		end
	end
	f.name="Gee-Flare"
end)
funcs.set_feat_i_f(g.tbl.ge.flare_feat,1,6,1,1,"g.tbl.ge.flare_feat")

g.tbl.ge.flare_key_slct=menu.add_feature("Key1 for Gee-Flare HIDDEN","autoaction_value_str",g.prnt.self_weapons_ge_gf.id,function(f)
end)g.tbl.ge.flare_key_slct:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g.tbl.ge.flare_key_slct,"g.tbl.ge.flare_key_slct")
g.tbl.ge.flare_key_slct.hidden=true
g.tbl.ge.flare_key_slct.value=63

menu.add_feature("Set key for Gee-Flare","action",g.prnt.self_weapons_ge_gf.id,function()
	funcs.doo.set_keybinds(1,"Gee-Flare",g.tbl.ge.flare_key_slct)
end)

g.tbl.veh_gun={}

g.tbl.veh_gun.prnt=menu.add_feature("Vehicle gun", "parent", g.prnt.self_weapons.id)

g.tbl.veh_gun.feat=menu.add_feature("Weaponize nearby vehicles", "value_str", g.tbl.veh_gun.prnt.id, function(f)
	if f.on and funcs.is.GS_loaded() then
		g.N_P(2,"When shooting, nearby vehicles will launch at the target",__GV__,4,"Blue")
	end
	local continue,pos,all_veh,count,aim_ent,bypass,veh
	local function _ign_ent()
		if funcs.ME._in_veh() then
			return API.plyr.get.veh(API.plyr.my_id())
		end
		return API.plyr.get.ped(API.plyr.my_id())
	end
	local function in_grid(my_pos,ent_pos,_max)
		if mth.abs(my_pos.x - ent_pos.x) > _max or mth.abs(my_pos.y - ent_pos.y) > _max or mth.abs(my_pos.z - ent_pos.z) > _max then
			return false
		end
		return true
	end
	local function good_ent(_ent)
		if funcs.is.ent(_ent) and _ent ~= _ign_ent() and not in_grid(API.plyr.get.coords(API.plyr.my_id()),API.ent.get.coords(_ent),10) then
			if f.value == 2 then
				if API.ent.is.ped(_ent) and API.Ped.is.in_veh(_ent) then return true, API.Ped.get.veh(_ent)
				elseif API.ent.is.veh(_ent) then return true, _ent end
				return true, nil
			elseif API.ent.is.ped(_ent) then
				if f.value == 1 then
					if API.Ped.is.in_veh(_ent) then return API.Ped.is.plyr(_ent), API.Ped.get.veh(_ent) end
					return API.Ped.is.plyr(_ent), nil
				end
				if API.Ped.is.in_veh(_ent) then return true, API.Ped.get.veh(_ent)	end
				return true, nil
			end
		end
		return false, nil
	end
	local function get_pos_ent()
		local good,ent,skip,target_pos
		ent=API.plyr.get.aim_at(API.plyr.my_id()) 
		good, skip = good_ent(ent)
		if good then return true, API.ent.get.coords(ent), skip, ent end
		if f.value == 2 then
			good,target_pos = API.Ped.get.last_weap_impact(API.plyr.get.ped(API.plyr.my_id()))
			if good and not in_grid(API.plyr.get.coords(API.plyr.my_id()),target_pos,10) then return true, target_pos, nil, nil end
		end
		good,target_pos,ent = funcs.get.ray_vctr_all()
		if good then
			good, skip = good_ent(ent)
			if good then return true, API.ent.get.coords(ent), skip, ent end
			if f.value == 2 and not in_grid(API.plyr.get.coords(API.plyr.my_id()),target_pos,10) then return true, target_pos,nil, nil end
		end
		return false,nil,nil, nil
	end
	local function good_veh(_veh)
		if _veh ~= bypass and not API.veh.get.been_owned(_veh) then
			if g.tbl.veh_gun.type.value == 3 and _veh == veh then
				return false
			end
			return true
		end
		return false
	end
	while f.on do
		system.yield(0)
		if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
			continue,pos,bypass,aim_ent = get_pos_ent()
			if continue then
				all_veh = API.veh.get.all()
				if g.tbl.veh_gun.select.value == 0 then
					funcs.sort.ent_pos_v3(all_veh,pos)
				else
					funcs.sort.ent_pos_v3(all_veh,API.plyr.get.coords(API.plyr.my_id()))
				end
				count =0
				for i=1,#all_veh do
					if count == 5 then
						break
					elseif good_veh(all_veh[i]) and funcs.ntwrk.ask_long(all_veh[i],25) then
						veh = all_veh[i]
						count=count+1
						if funcs.is.ent(aim_ent) then pos = API.ent.get.coords(aim_ent) end
						if g.tbl.veh_gun.type.value == 0 then
							API.ent.set.coords(all_veh[i],pos+v3(mth.rndm(-mth.flr(g.tbl.veh_gun.spwn_rng.value*.5),mth.flr(g.tbl.veh_gun.spwn_rng.value*.5)),mth.rndm(mth.flr(-g.tbl.veh_gun.spwn_rng.value*.5),mth.flr(g.tbl.veh_gun.spwn_rng.value*.5)),g.tbl.veh_gun.spwn_rng.value))
						elseif g.tbl.veh_gun.type.value == 1 then
							API.ent.set.coords(all_veh[i],pos+v3(mth.rndm(-g.tbl.veh_gun.spwn_rng.value,g.tbl.veh_gun.spwn_rng.value),mth.rndm(-g.tbl.veh_gun.spwn_rng.value,g.tbl.veh_gun.spwn_rng.value),mth.rndm(0,mth.flr(g.tbl.veh_gun.spwn_rng.value*.5))))
						elseif g.tbl.veh_gun.type.value == 3 then
							API.ent.set.coords(all_veh[i],funcs.get.front_of_pos(API.plyr.get.coords(API.plyr.my_id()), API.plyr.get.heading(API.plyr.my_id()), 5+(g.tbl.veh_gun.safe_zone.value*.5), 180, 0))
						end
						API.veh.set.out_of_control(all_veh[i], true, true)
						API.ent.set.rotation(all_veh[i], funcs.get.vctr_to_pos(pos,all_veh[i]))
						API.ent.set.coords(all_veh[i],API.ent.get.coords(all_veh[i]))
						API.veh.set.forward_speed(all_veh[i],g.tbl.veh_gun.veh_speed.value)
						if g.tbl.veh_gun.type.value == 3 then
							funcs.doo.delay(mth.flr(g.tbl.veh_gun.delay.value/2))
							count=5
						else
							funcs.doo.delay(mth.flr(g.tbl.veh_gun.delay.value/10))
						end
					end
				end
				funcs.doo.delay(g.tbl.veh_gun.delay.value)
			end
		end
	end
end)
g.tbl.veh_gun.feat:set_str_data({"Shooting any ped", "Shooting a player","Shooting anything"})
funcs.add_to_S_L(g.tbl.veh_gun.feat,"g.tbl.veh_gun.feat")

g.tbl.veh_gun.type=menu.add_feature("Select type", "action_value_str", g.tbl.veh_gun.prnt.id)
g.tbl.veh_gun.type:set_str_data({"Spawn on top", "Spawn all around","Fly in","Bullets"})
funcs.add_to_S_L(g.tbl.veh_gun.type,"g.tbl.veh_gun.type")

g.tbl.veh_gun.spwn_rng=menu.add_feature("Spawn range", "action_value_i", g.tbl.veh_gun.prnt.id)
funcs.set_feat_i_f(g.tbl.veh_gun.spwn_rng,5,25,1,10,"g.tbl.veh_gun.spwn_rng")

g.tbl.veh_gun.safe_zone=menu.add_feature("Safe zone size", "action_value_i", g.tbl.veh_gun.prnt.id)
funcs.set_feat_i_f(g.tbl.veh_gun.safe_zone,5,50,1,10,"g.tbl.veh_gun.safe_zone")

g.tbl.veh_gun.delay=menu.add_feature("Artificial delay (ms)", "action_value_i", g.tbl.veh_gun.prnt.id)
funcs.set_feat_i_f(g.tbl.veh_gun.delay,50,250,25,125,"g.tbl.veh_gun.delay")

g.tbl.veh_gun.select=menu.add_feature("Use vehicles", "action_value_str", g.tbl.veh_gun.prnt.id)
g.tbl.veh_gun.select:set_str_data({"Closest to target", "Closest to me"})
funcs.add_to_S_L(g.tbl.veh_gun.select,"g.tbl.veh_gun.select")

g.tbl.veh_gun.veh_speed=menu.add_feature("Vehicle speed", "action_value_i", g.tbl.veh_gun.prnt.id)
funcs.set_feat_i_f(g.tbl.veh_gun.veh_speed,25,500,25,100,"g.tbl.veh_gun.veh_speed")



g.feat.sniper_enhnc_strafe=menu.add_feature("Enhanced sniper strafe speed", "value_i", g.prnt.self_weapons.id, function(f) -- i made this before i knew about the rad/deg math
	local me_id,my_ped,pos,heading,left,right,decimals,north,north_head,count,south_head,west,west_head,east,east_head,force_mod,x_force,y_force
    while f.on do
		system.yield(0)
		me_id=API.plyr.my_id()
		my_ped = API.plyr.get.ped(me_id)
		if funcs.is.key_active(114,1) and not funcs.ME._in_veh() and weap_info.sniper_true[API.Ped.get.weapon(my_ped)] then
			pos=API.plyr.get.coords(API.plyr.my_id())
			heading=API.plyr.get.heading(me_id)
			left,right=false,false
			if funcs.is.key_active(34,1) then
				heading=heading+95
				if heading > 180 then
					heading = heading - 360
				end
				left=true
			elseif funcs.is.key_active(35,1) then
				right=true
				heading=heading-95
				if heading < -180 then
					heading = heading + 360
				end
			end
			if left or right then
				north=0
				if (heading >= -90) and (heading <= 90) then
					north_head=mth.abs(heading)
					decimals=north_head-mth.flr(north_head)
					north_head=mth.flr(north_head)
					count=90
					for i=1, north_head do
						if 	north_head == i then
							north=count/90
							north=north+decimals
						else
							count=count-1
						end
					end
				end
				south=0
				if (heading <= -90) or (heading >= 90) then
					south_head=mth.abs(heading)
					south_head=south_head-90
					south=south_head/90
				end
				west=0
				if (heading >= 0) and (heading <= 180) then
					if heading >=90 then
						decimals=heading-mth.flr(heading)
						west_head=mth.flr(heading)
						count=90
						for i=90, west_head do
							if 	west_head == i then
								west=count/90
								west=west+decimals
							else
								count=count-1
							end
						end
					else
						west=heading/90
					end
				end
				east=0
				if (heading <= 0) and (heading >= -180) then
					east_head=mth.abs(heading)
					if east_head >=90 then
						decimals=east_head-mth.flr(east_head)
						east_head=mth.flr(east_head)
						count=90
						for i=90, east_head do
							if 	east_head == i then
								east=count/90
								east=east+decimals
							else
								count=count-1
							end
						end
					else
						east=east_head/90
					end
				end
				south=south*-1
				west=west*-1
				force_mod=f.value+3
				force_mod=force_mod*.069 --nice
				x_force=west+east
				x_force=x_force*force_mod
				y_force=north+south
				y_force=y_force*force_mod
				if left then
					while funcs.is.key_active(34,1) do
						system.yield(0)
						API.ent.force(my_ped, 1, x_force,y_force,0.001, 0,0,0, false, true)
					end
				elseif right then
					while funcs.is.key_active(35,1) do
						system.yield(0)
						API.ent.force(my_ped, 1, x_force,y_force,0.001, 0,0,0, false, true)
					end
				end
				system.yield(100)
			end
		end
	end
end)
funcs.set_feat_i_f(g.feat.sniper_enhnc_strafe,1,15,1,1,"g.feat.sniper_enhnc_strafe")

g.feat.sniper_enhnc_zoom=menu.add_feature("Auto sniper zoom %", "value_i", g.prnt.self_weapons.id, function(f)
	local time = API.util.t_ms()
    while f.on do
		system.yield(0)
		time = API.util.t_ms()
		while funcs.is.key_active(114,1) and not funcs.ME._in_veh() and weap_info.sniper_true[API.Ped.get.weapon(API.plyr.get.ped(API.plyr.my_id()))] do
			system.yield(0)
			if API.util.t_ms() - time <= f.value/100*2000 then
				controls.set_control_normal(0,40, 1.0)
				controls.set_control_normal(0,42, 1.0)
				controls.set_control_normal(0,274, 1.0)
				controls.set_control_normal(0,276, 1.0)
			end
		end
	end
end)
funcs.set_feat_i_f(g.feat.sniper_enhnc_zoom,10,100,10,100,"g.feat.sniper_enhnc_zoom")

g.feat.bullets_hijack=menu.add_feature("Hijack driver bullets", "toggle", g.prnt.self_weapons.id, function(f)
	while f.on do
		system.yield(0)
		funcs.doo.bullets("hijack")
	end
end)
funcs.add_to_S_L(g.feat.bullets_hijack,"g.feat.bullets_hijack")

function funcs.doo.bullets(_action,_val)
	if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
		local aim_ent=API.plyr.get.aim_at(API.plyr.my_id())
		if funcs.is.veh(aim_ent) then
			if _action == "fuck" then
				funcs.doo.veh_fuck(aim_ent, 1000)
			elseif  _action == "hijack" then
				funcs.doo.veh_tp_into_hijack(aim_ent,false)
			end
		elseif API.ent.is.ped(aim_ent) and API.Ped.is.in_veh(aim_ent) then
			if funcs.is.veh(API.Ped.get.veh(aim_ent)) then
				if _action == "fuck" then
					funcs.doo.veh_fuck(API.Ped.get.veh(aim_ent), 1000)
				elseif  _action == "hijack" then
					funcs.doo.veh_tp_into_hijack(API.Ped.get.veh(aim_ent),true)
				elseif  _action == "veh_kick" then
					funcs.doo.kick_all_from_veh(API.Ped.get.veh(aim_ent),_val)
				end
			end
		end
		if API.ent.is.ped(aim_ent) and API.Ped.is.plyr(aim_ent) then
			if _action == "cayo" then
				glbls.send_to_cayo(API.plyr.get.plyr_from_ped(aim_ent))
				system.yield(500)
			elseif _action == "bounty" then
				glbls.give_bounty(API.plyr.get.plyr_from_ped(aim_ent),_val)
				system.yield(500)
			elseif _action == "wanted" then
				funcs.doo.wntd_all_psngrs(API.plyr.get.plyr_from_ped(aim_ent),_val)
				system.yield(500)
			end
		end
	end
end

g.feat.bullets_fuck=menu.add_feature("Fuck vehicle bullets", "toggle", g.prnt.self_weapons.id, function(f)
	while f.on do
		system.yield(0)
		funcs.doo.bullets("fuck")
	end
end)
funcs.add_to_S_L(g.feat.bullets_fuck,"g.feat.bullets_fuck")

g.feat.bullets_cp=menu.add_feature("Cayo Perico bullets", "toggle", g.prnt.self_weapons.id, function(f)--------------
	while f.on do
		system.yield(0)
		funcs.doo.bullets("cayo")
	end
end)
funcs.add_to_S_L(g.feat.bullets_cp,"g.feat.bullets_cp")

g.feat.bullets_bounty=menu.add_feature("Bounty bullets (anonymous)", "value_str", g.prnt.self_weapons.id, function(f)--------------
	while f.on do
		system.yield(0)
		local bounty = 0
		if f.value == 0 then bounty = 10000
		elseif f.value == 1 then bounty = 9000
		elseif f.value == 2 then bounty = 8000
		elseif f.value == 3 then bounty = 7000
		elseif f.value == 4 then bounty = 6000
		elseif f.value == 5 then bounty = 5000
		elseif f.value == 6 then bounty = 4000
		elseif f.value == 7 then bounty = 3000
		elseif f.value == 8 then bounty = 2000
		elseif f.value == 9 then bounty = 1000
		elseif f.value == 10 then bounty = 666
		elseif f.value == 11 then bounty = 420
		elseif f.value == 12 then bounty = 69
		elseif f.value == 13 then bounty = 1
		end
		funcs.doo.bullets("bounty",bounty)
	end
end)
g.feat.bullets_bounty:set_str_data({"$10,000", "$9,000","$8,000","$7,000","$6,000","$5,000","$4,000","$3,000","$2,000","$1,000", "$666", "$420","$69","$1",})
funcs.add_to_S_L(g.feat.bullets_bounty,"g.feat.bullets_bounty")
	
g.feat.bullets_veh_kick=menu.add_feature("Vehicle kick bullets", "value_str", g.prnt.self_weapons.id, function(f)
	while f.on do
		system.yield(0)
		funcs.doo.bullets("veh_kick",f.value==1)
	end
end)
g.feat.bullets_veh_kick:set_str_data({"Everyone", "Exclude Friends"})
funcs.add_to_S_L(g.feat.bullets_veh_kick,"g.feat.bullets_veh_kick")

g.feat.bullets_wanted=menu.add_feature("Wanted level bullets", "value_i", g.prnt.self_weapons.id, function(f)--------------
	while f.on do
		system.yield(0)
		funcs.doo.bullets("wanted",f.value)
	end
end)
funcs.set_feat_i_f(g.feat.bullets_wanted,0,5,1,5,"g.feat.bullets_wanted")
-----------------------------------------------------------------------------------------GEE-SKID
---------------------------------------------------------------------------------------------SELF
-----------------------------------------------------------------------------------CurrentVehicle
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------


g.tbl.mk2 = {}



g.tbl.mk2.feat=menu.add_feature("Inverted flight","value_str",g.prnt.self_veh_crrnt_mk2.id,function(f)
	local _shift,_ctrl,_a,_d
	local pitch,roll,yaw = 0,0,0
	local pitch_spd,roll_spd,yaw_spd = 1,1,1
	local pitch_max,roll_max,yaw_max = 25,25,25
	local Table_spd = {}
	local table_int,speed_do = 0,false
	local time = API.util.t_ms()
	for i=1,3 do
		Table_spd[i]={0,0}
	end
	local do_once=false
	local function range_of_1_to_3(_int,_offset)
		if _int - _offset < 1 then
			return _int - _offset + 3
		end
		return _int - _offset
	end
	local function math_neg(_val,_max,_spd)
		if _val > -_max then
			if _val >= 0 then return (_val - (.269*2*_spd))*.99
			else return (_val - (.269*2*_spd))*1.01
			end
		else return -_max
		end
	end
	local function math_pos(_val,_max,_spd)
		if _val < _max then
			if _val >= 0 then return (_val + (.269*2*_spd))*1.01
			else return (_val + (.269*2*_spd))*.99
			end
		else return _max
		end
	end
	local function to_zero(_val,_spd)
		if _val > 0 then return (_val - (.269*2*_spd))*.99
		else return (_val + (.269*2*_spd))*.99
		end
	end
	local function maths(_val,_input1,_input2,_max,_spd)
		if (funcs.is.key_active(_input1,0) or funcs.is.key_active(_input2,0)) and (funcs.is.key_active(_input1,1) or funcs.is.key_active(_input2,1)) then
			if funcs.is.key_active(_input1,1) then return math_neg(_val,_max,_spd)
			else return math_pos(_val,_max,_spd)
			end
		else return to_zero(_val,_spd)
		end
	end
	while f.on do
		system.yield(250)
		time = API.util.t_ms()
		do_once=false---------
		if funcs.ME._in_veh() and funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"oppressor2") and not funcs.is.dead(API.plyr.get.veh(API.plyr.my_id())) then
			funcs.doo.tp_ent(API.plyr.get.veh(API.plyr.my_id()),API.plyr.get.coords(API.plyr.my_id()), 2.5 ,false)
			while f.on and funcs.ME._in_veh() and not funcs.is.dead(API.plyr.get.veh(API.plyr.my_id())) do
				system.yield(0)
				if time+200 < API.util.t_ms() then
					if table_int == 3 then
						table_int = 1
					else
						table_int = table_int + 1
					end
					Table_spd[table_int][1] = API.ent.get.speed(API.plyr.get.veh(API.plyr.my_id())) 
					Table_spd[table_int][2] = funcs.get._1_dec(Table_spd[range_of_1_to_3(table_int,1)][1] - Table_spd[table_int][1])
					time = API.util.t_ms()
				end
				_shift,_ctrl,_a,_d = 88,87,63,64
				if f.value == 0 then
					_shift,_ctrl,_a,_d = 87,88,64,63
				end
				pitch_max,roll_max,yaw_max = g.tbl.mk2.pitch.value,g.tbl.mk2.roll.value,g.tbl.mk2.yaw.value
				pitch_spd,roll_spd,yaw_spd = g.tbl.mk2.pitch_speed.value,g.tbl.mk2.roll_speed.value,g.tbl.mk2.yaw_speed.value
				yaw = maths(yaw,_a,_d,yaw_max,yaw_spd)
				pitch = maths(pitch,_shift,_ctrl,pitch_max,pitch_spd)
				if (funcs.is.key_active(_a,0) or funcs.is.key_active(_d,0)) and (funcs.is.key_active(_a,1) or funcs.is.key_active(_d,1)) then
					if (funcs.is.key_active(_shift,0) or funcs.is.key_active(_ctrl,0)) and (funcs.is.key_active(_shift,1) or funcs.is.key_active(_ctrl,1)) then
						if funcs.is.key_active(_shift,1) then
							if funcs.is.key_active(_a,1) then
								roll = math_pos(roll,roll_max,roll_spd)
							else
								roll = math_neg(roll,roll_max,roll_spd)
							end
						elseif funcs.is.key_active(_a,1) then
							roll = math_neg(roll,roll_max,roll_spd)
						else
							roll = math_pos(roll,roll_max,roll_spd)
						end
					elseif funcs.is.key_active(_a,1) then
						roll = math_pos(roll,roll_max,roll_spd)
					else
						roll = math_neg(roll,roll_max,roll_spd)
					end
				else
					roll = to_zero(roll,roll_spd)
				end
				if g.tbl.mk2.boost.on then
					if Table_spd[1][2] > 0 and Table_spd[2][2] > 0 and Table_spd[3][2] > 0 and funcs.is.key_active(71,1) and funcs.is.key_active(72,0) then
						API.veh.set.forward_speed(API.plyr.get.veh(API.plyr.my_id()),API.ent.get.speed(API.plyr.get.veh(API.plyr.my_id()))*1.01)
					end
				end
				if 	funcs.is.key_active(_a,1) or funcs.is.key_active(_d,1) or funcs.is.num_in_range(yaw,-(yaw_max*1.25),-2) or funcs.is.num_in_range(yaw,2,(yaw_max*1.25)) or 
					funcs.is.key_active(_shift,1) or funcs.is.key_active(_ctrl,1) or funcs.is.num_in_range(pitch,-(pitch_max*1.25),-2) or funcs.is.num_in_range(pitch,2,(pitch_max*1.25)) or
					funcs.is.num_in_range(roll,-(roll_max*1.25),-2) or funcs.is.num_in_range(roll,2,(roll_max*1.25)) then
					API.ent.set.rotation(API.plyr.get.veh(API.plyr.my_id()),v3(API.cam.get.rot().x*-1+pitch,180+roll,API.cam.get.rot().z+yaw))
				else
					API.ent.set.rotation(API.plyr.get.veh(API.plyr.my_id()),v3(API.cam.get.rot().x*-1,180,API.cam.get.rot().z))
					pitch,yaw,roll = 0,0,0
					if funcs.is.key_active(71,0) and funcs.is.key_active(72,0) then
						if g.tbl.mk2.brakes.on then
							API.ent.set.velocity(API.plyr.get.veh(API.plyr.my_id()),v3(
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).x*.99,
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).y*.99,
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).z*.4))
						else
							API.ent.set.velocity(API.plyr.get.veh(API.plyr.my_id()),v3(
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).x,
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).y,
							API.ent.get.velocity(API.plyr.get.veh(API.plyr.my_id())).z*.4)) --retarded glitch makes it go up in the air sometimes
						end
					end
				end
			end
		end
	end
end)
g.tbl.mk2.feat:set_str_data({"Inverted controls", "Normal controls"})
funcs.add_to_S_L(g.tbl.mk2.feat,"g.tbl.mk2.feat")

g.tbl.mk2.brakes=menu.add_feature("Auto brakes","toggle",g.prnt.self_veh_crrnt_mk2.id)
funcs.add_to_S_L(g.tbl.mk2.brakes,"g.tbl.mk2.brakes")

g.tbl.mk2.boost=menu.add_feature("Smart torque boost","toggle",g.prnt.self_veh_crrnt_mk2.id)
funcs.add_to_S_L(g.tbl.mk2.boost,"g.tbl.mk2.boost")

g.tbl.mk2.pitch=menu.add_feature("Pitch max","action_value_i",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.pitch,5,50,1,25,"g.tbl.mk2.pitch")

g.tbl.mk2.roll=menu.add_feature("Roll max","action_value_i",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.roll,5,50,1,25,"g.tbl.mk2.roll")

g.tbl.mk2.yaw=menu.add_feature("Yaw max","action_value_i",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.yaw,5,50,1,25,"g.tbl.mk2.yaw")

g.tbl.mk2.pitch_speed=menu.add_feature("Pitch speed","action_value_f",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.pitch_speed,0.05,3,0.05,1,"g.tbl.mk2.pitch_speed")

g.tbl.mk2.roll_speed=menu.add_feature("Roll speed","action_value_f",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.roll_speed,0.05,3,0.05,1,"g.tbl.mk2.roll_speed")

g.tbl.mk2.yaw_speed=menu.add_feature("Yaw speed","action_value_f",g.prnt.self_veh_crrnt_mk2.id)
funcs.set_feat_i_f(g.tbl.mk2.yaw_speed,0.05,3,0.05,1,"g.tbl.mk2.yaw_speed")


-------------------------------------------------------------------------------GeeSkid Gee-flight 
g.feat.veh_flight=menu.add_feature("Gee-Flight", "value_i", g.prnt.self_veh_crrnt.id, function(f)
	local my_veh
	local function release_it()
		if funcs.is.veh(my_veh) then
			API.ent.set.max_speed(my_veh, 45000)
			system.yield(20)
			funcs.doo.tp_ent(my_veh,API.ent.get.coords(my_veh), 0 ,true)
			my_veh=nil
		end
	end
	while f.on do
		if funcs.ME._driving(funcs.ME._veh()) then
			my_veh=funcs.ME._veh()
			while f.on and API.plyr.is.in_veh(funcs.ME._id()) and my_veh==funcs.ME._veh() do
				funcs.doo.veh_flight(my_veh,3,f.value)
				system.yield(0)
			end
			release_it()
		end
		system.yield(100)
	end
	release_it()
end)
funcs.set_feat_i_f(g.feat.veh_flight,50,5000,50,100,"g.feat.veh_flight")

g.feat.veh_xtra_jump=menu.add_feature("Vehicle extra jump height","toggle",g.prnt.self_veh_crrnt.id,function(f)
	while f.on do
		if API.plyr.is.in_veh(API.plyr.my_id()) and ntv.is.veh_can_jump(API.plyr.get.veh(API.plyr.my_id())) then
			ntv.set.veh_high_jump(API.plyr.get.veh(API.plyr.my_id()),1)
		end
		funcs.doo.yield_while_true(f.on,1000)
	end
	if API.plyr.is.in_veh(API.plyr.my_id()) and ntv.is.veh_can_jump(API.plyr.get.veh(API.plyr.my_id())) then
		ntv.set.veh_high_jump(API.plyr.get.veh(API.plyr.my_id()),0)
	end
end)
funcs.add_to_S_L(g.feat.veh_xtra_jump,"g.feat.veh_xtra_jump")

g.feat.veh_max_tint = menu.add_feature("Always max tint", "toggle", g.prnt.self_veh_crrnt.id, function(f)
	local my_tint = nil
	while f.on do
		if funcs.ME._in_veh() then
			if vehicle.get_vehicle_window_tint(API.plyr.get.veh(API.plyr.my_id())) ~= 1 then
				my_tint = vehicle.get_vehicle_window_tint(API.plyr.get.veh(API.plyr.my_id()))
				API.veh.set.kit_type(API.plyr.get.veh(API.plyr.my_id()), 0)
				vehicle.set_vehicle_window_tint(API.plyr.get.veh(API.plyr.my_id()),1)
			end
			system.yield(250)
		end
		system.yield(250)
	end
	if funcs.is.veh(API.plyr.get.veh(API.plyr.my_id())) and my_tint ~= nil then
		vehicle.set_vehicle_window_tint(API.plyr.get.veh(API.plyr.my_id()),my_tint)
	end
end)
funcs.add_to_S_L(g.feat.veh_max_tint,"g.feat.veh_max_tint")

g.feat.veh_invncbl_wndws = menu.add_feature("Invincible windows", "toggle", g.prnt.self_veh_crrnt.id, function(f)
	ntv.set.veh_invncbl_wndws(API.plyr.get.veh(API.plyr.my_id()),1)
	while f.on do
		if funcs.ME._in_veh() then
			if not ntv.is.windows_good(API.plyr.get.veh(API.plyr.my_id())) and funcs.ntwrk.ask_long(API.plyr.get.veh(API.plyr.my_id()),1000) then
				API.veh.set.kit_type(API.plyr.get.veh(API.plyr.my_id()), 0)
				ntv.doo.fix_veh_wndws(API.plyr.get.veh(API.plyr.my_id()))
				ntv.set.veh_invncbl_wndws(API.plyr.get.veh(API.plyr.my_id()),1)
			end
		end
		funcs.doo.yield_while_true(f.on,1000)
	end
	if funcs.is.veh(API.plyr.get.veh(API.plyr.my_id())) and funcs.ntwrk.ask_long(API.plyr.get.veh(API.plyr.my_id()),1000) then
		ntv.set.veh_invncbl_wndws(API.plyr.get.veh(API.plyr.my_id()),0)
	end
end)
funcs.add_to_S_L(g.feat.veh_invncbl_wndws,"g.feat.veh_invncbl_wndws")

g.feat.veh_smsh_rpr_wndws=menu.add_feature("Windows", "action_value_str", g.prnt.self_veh_crrnt.id, function(f)
	local t = {"window_smash","window_repair"}
	funcs.doo.veh_current_do(t[f.value+1])
end)
g.feat.veh_smsh_rpr_wndws:set_str_data({"Smash", "Repair"})
funcs.add_to_S_L(g.feat.veh_smsh_rpr_wndws,"g.feat.veh_smsh_rpr_wndws")

g._auto_flip_veh = menu.add_feature("Auto-Flip vehicle if needed", "toggle", g.prnt.self_veh_crrnt_auto.id, function(f)
	local in_veh=false
	while f.on do
		system.yield(50)
		if funcs.ME._in_veh() and (g._self_veh_auto_setting.value == 0 and funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id()))) or g._self_veh_auto_setting.value == 1 then
			if not in_veh then
				funcs.doo.veh_flip(API.plyr.get.veh(API.plyr.my_id()),"if_needed",1000) --flip vehicle upon entry
			end
			in_veh=true
			if funcs.is.my_veh_upside_down(API.plyr.get.veh(API.plyr.my_id())) then
				system.yield(777) --because i like 7
				if funcs.is.my_veh_upside_down(API.plyr.get.veh(API.plyr.my_id())) then
					system.yield(777)
					if funcs.is.my_veh_upside_down(API.plyr.get.veh(API.plyr.my_id())) then
						system.yield(777)
						funcs.doo.veh_flip(API.plyr.get.veh(API.plyr.my_id()),"if_needed",1000)
						funcs.doo.tp_ent(API.plyr.get.veh(API.plyr.my_id()),API.ent.get.coords(API.plyr.get.veh(API.plyr.my_id())), 0 ,true)
					end
				end
			end
		else
			in_veh=false
		end
	end
end)
funcs.add_to_S_L(g._auto_flip_veh,"g._auto_flip_veh")

g._self_veh_auto_upgrade=menu.add_feature("Auto-upgrade performance mods", "toggle", g.prnt.self_veh_crrnt_auto.id, function()
end)
funcs.add_to_S_L(g._self_veh_auto_upgrade,"g._self_veh_auto_upgrade")

g._self_veh_auto_force=menu.add_feature("Auto-upgrade speed/torque %","value_i",g.prnt.self_veh_crrnt_auto.id)
funcs.set_feat_i_f(g._self_veh_auto_force,105,200,5,120,"g._self_veh_auto_force")


g._self_veh_auto_repair=menu.add_feature("Auto-repair", "value_str", g.prnt.self_veh_crrnt_auto.id)
g._self_veh_auto_repair:set_str_data({"Entry", "Exit", "Both"})
funcs.add_to_S_L(g._self_veh_auto_repair,"g._self_veh_auto_repair")

g._self_veh_auto_god=menu.add_feature("Auto-god", "value_str", g.prnt.self_veh_crrnt_auto.id, function(f)
	while f.on do
		if (g._self_veh_auto_setting.value == 0 and g.var.auto__am_i_the_driver) or g._self_veh_auto_setting.value == 1 then
			while f.on and funcs.ME._in_veh() do
				if not API.ent.get.god(funcs.ME._veh()) and funcs.ntwrk.ask_long(funcs.ME._veh(),3000) then
					API.ent.set.god(funcs.ME._veh(), true)
				end
				system.yield(250)
			end
			if f.value == 1 and funcs.ntwrk.ask_long(funcs.ME._veh(),3000) then
				API.ent.set.god(API.plyr.get.veh(API.plyr.my_id()), false)
			end
		end
		system.yield(250)
	end
	if funcs.ntwrk.ask_long(funcs.ME._veh(),3000) then
		API.ent.set.god(funcs.ME._veh(), false)
	end
end)
g._self_veh_auto_god:set_str_data({"Give", "Remove on exit"})
funcs.add_to_S_L(g._self_veh_auto_god,"g._self_veh_auto_god")

g._self_veh_auto_kick=menu.add_feature("Auto-kick others from vehicle", "value_str", g.prnt.self_veh_crrnt_auto.id)
g._self_veh_auto_kick:set_str_data({"Everyone", "Exclude Friends"})
funcs.add_to_S_L(g._self_veh_auto_kick,"g._self_veh_auto_kick")

g._self_veh_auto_setting=menu.add_feature("--> Only applies when in", "autoaction_value_str", g.prnt.self_veh_crrnt_auto.id)
g._self_veh_auto_setting:set_str_data({"Driver seat", "Any Seat"})
funcs.add_to_S_L(g._self_veh_auto_setting,"g._self_veh_auto_setting")

g.var.auto__am_i_the_driver=false
g.tbl.my_veh_hist = {}
g._self_veh_auto_hidden=menu.add_feature("Auto-self veh do hidden", "toggle", g.prnt.self_veh_crrnt_auto.id, function(f)
	local last_do_once=false
	local current_do_once=false
	while f.on do
		system.yield(50)
		if funcs.ME._in_veh() then
			if #g.tbl.my_veh_hist == 0 then
				g.tbl.my_veh_hist[#g.tbl.my_veh_hist+1]=API.plyr.get.veh(API.plyr.my_id())
			elseif g.tbl.my_veh_hist[#g.tbl.my_veh_hist] ~= API.plyr.get.veh(API.plyr.my_id()) then
				g.tbl.my_veh_hist[#g.tbl.my_veh_hist+1]=API.plyr.get.veh(API.plyr.my_id())
			end
			last_do_once=false
			system.yield(50)
			g.var.auto__am_i_the_driver = funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id()))
			if not current_do_once and funcs.doo.self_veh_auto(g.tbl.my_veh_hist[#g.tbl.my_veh_hist]) then
				current_do_once=true
			end
		else	
			system.yield(50)
			current_do_once=false
			if not last_do_once then
				if funcs.is.veh(g.tbl.my_veh_hist[#g.tbl.my_veh_hist]) then
					funcs.get.record_clone_veh(g.tbl.my_veh_hist[#g.tbl.my_veh_hist])
				end
				if g._self_veh_auto_repair.on and g._self_veh_auto_repair.value ~= 0 then
					funcs.doo.veh_repair_all(_veh, 1000,nil,false,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
				end
				last_do_once=true
			end
		end
	end
end)
g._self_veh_auto_hidden.on=true
g._self_veh_auto_hidden.hidden=true

function funcs.doo.self_veh_auto(_veh)
	if (g._self_veh_auto_setting.value == 0 and g.var.auto__am_i_the_driver) or g._self_veh_auto_setting.value == 1 then
		if g._self_veh_auto_kick.on and funcs.is.veh(_veh) then
			funcs.doo.kick_all_from_veh(_veh, (g._self_veh_auto_kick.value ~= 0))
			system.yield(125)
		end
		if g._self_veh_auto_repair.on and funcs.is.veh(_veh) then
			if g._self_veh_auto_repair.value == 0 or g._self_veh_auto_repair.value == 2 then
				funcs.doo.veh_repair_all(_veh, 1000,nil,false,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
				system.yield(125)
			end
		end
		if g._self_veh_auto_upgrade.on and funcs.is.veh(_veh) then
			funcs.doo.veh_action_list(_veh,1000,"perf",nil)
			system.yield(125)
		end
		if g._self_veh_auto_force.on and funcs.is.veh(_veh) then
			funcs.doo.veh_speed(_veh, 1000, funcs.get.veh_ped_name_in_seat(_veh,"first_plyr"), funcs.get.veh_model_name(_veh), true, g._self_veh_auto_force.value/100)
			system.yield(125)
		end
		return true
	end
	return false
end

menu.add_feature("Clone my veh", "action", g.prnt.self_veh_crrnt.id, function()
	if funcs.ME._in_veh() then
		local pos = funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),5 + funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos()))
		funcs.get.record_clone_veh(funcs.ME._veh())
		funcs.doo.create_clone_veh(g.tbl.veh_clone[funcs.ME._veh()],pos,API.cam.get.rot().z)
	else
		g.N_P(2,"You are not in a vehicle",__GV__,4,"Blue")
	end
end)

menu.add_feature("Repair current vehicle", "action", g.prnt.self_veh_crrnt.id, function()
	funcs.doo.veh_current_do("repair")
end)

g._auto_veh_rpr=menu.add_feature("Auto-repair if less than %", "value_i", g.prnt.self_veh_crrnt.id, function(f)
	while f.on do
		system.yield(100)
		if funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id())) and funcs.get.veh_cmbnd_health_prcnt(API.plyr.get.veh(API.plyr.my_id()),true) < f.value then
			funcs.doo.veh_repair_most(API.plyr.get.veh(API.plyr.my_id()),250,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
		end
	end
end)
funcs.set_feat_i_f(g._auto_veh_rpr,50,100,5,75,"g._auto_veh_rpr")

g._missile_no_lock=menu.add_feature("Vehicle missile anti-lock","action_value_str",g.prnt.self_veh_crrnt.id,function(f)
	funcs.doo.veh_current_do("anti_lock",f.value==1)
end)
g._missile_no_lock:set_str_data({"Give","Remove"})
funcs.add_to_S_L(g._missile_no_lock,"g._missile_no_lock")	

g._self_veh_upgrades_action2=menu.add_feature("Vehicle Upgrades","action_value_str",g.prnt.self_veh_crrnt_upgr.id,function(f)
	local t = {"upgrades","perf","wheels","f1","livery","weapons"}
	funcs.doo.veh_current_do(t[f.value+1])
end)
g._self_veh_upgrades_action2:set_str_data({"Everything", "Performance mods","Wheels/Tires","Give F1 Wheels","Livery","Weapons"})
funcs.add_to_S_L(g._self_veh_upgrades_action2,"g._self_veh_upgrades_action2")

g._self_veh_paintjob=menu.add_feature("Random paintjob","action_value_str",g.prnt.self_veh_crrnt_upgr_pnt.id,function(f)
	local t = {"random","random_solid",funcs.get.rand_paint_shade("Dark"),funcs.get.rand_paint_shade("Bright")}
	funcs.doo.veh_current_do("paint",t[f.value+1])
end)
g._self_veh_paintjob:set_str_data({"Non-matching", "Matching","Dark","Bright"})
funcs.add_to_S_L(g._self_veh_paintjob,"g._self_veh_paintjob")

menu.add_feature("Apply custom paintjob","action",g.prnt.self_veh_crrnt_upgr_pnt_rgb.id,function()
	funcs.doo.veh_current_do("paint",(g._veh_custom_paint_r.value * 65536 + g._veh_custom_paint_g.value * 256 + g._veh_custom_paint_b.value ))
end)



g._veh_custom_paint_r=menu.add_feature("Custom Red","autoaction_value_i",g.prnt.self_veh_crrnt_upgr_pnt_rgb.id)
funcs.set_feat_i_f(g._veh_custom_paint_r,0,255,1,0,"g._veh_custom_paint_r")

g._veh_custom_paint_g=menu.add_feature("Custom Green","autoaction_value_i",g.prnt.self_veh_crrnt_upgr_pnt_rgb.id)		
funcs.set_feat_i_f(g._veh_custom_paint_g,0,255,1,0,"g._veh_custom_paint_g")

g._veh_custom_paint_b=menu.add_feature("Custom Blue","autoaction_value_i",g.prnt.self_veh_crrnt_upgr_pnt_rgb.id)
funcs.set_feat_i_f(g._veh_custom_paint_b,0,255,1,0,"g._veh_custom_paint_b")		


for i=1,#veh_stuff.paint_names do
	menu.add_feature(veh_stuff.paint_names[i],"action",g.prnt.self_veh_crrnt_upgr_pnt.id,function()
		funcs.doo.veh_current_do("paint",veh_stuff.paint_ints[i])
	end)
end

g._self_veh_neons=menu.add_feature("Random neon color","action",g.prnt.self_veh_crrnt_upgr_neons.id,function(f)
	funcs.doo.veh_current_do("neons","random")
end)

for i=1,#veh_stuff.neon_names do
	menu.add_feature(veh_stuff.neon_names[i],"action",g.prnt.self_veh_crrnt_upgr_neons.id,function()
		funcs.doo.veh_current_do("neons",veh_stuff.neon_ints[i])
	end)
end

g._self_veh_headlights=menu.add_feature("Random headlight color","action",g.prnt.self_veh_crrnt_upgr_lights.id,function(f)
	funcs.doo.veh_current_do("headlights","random")
end)

for i=1,#veh_stuff.neon_names do
	menu.add_feature(veh_stuff.neon_names[i],"action",g.prnt.self_veh_crrnt_upgr_lights.id,function()
		funcs.doo.veh_current_do("headlights",i-1)
	end)
end

g._self_veh_force2=menu.add_feature("Vehicle max speed/torque %","action_value_i",g.prnt.self_veh_crrnt_upgr.id,function(f)
	funcs.doo.veh_current_do("speed_torque",f.value/100)
end)
funcs.set_feat_i_f(g._self_veh_force2,0,700,5,100,"g._self_veh_force2")

g._self_veh_accel_fuck=menu.add_feature("Vehicle acceleration is","action_value_str",g.prnt.self_veh_crrnt.id,function(f)
	funcs.doo.veh_current_do("speed_torque",(f.value-10)+(f.value*109))
end)
g._self_veh_accel_fuck:set_str_data({"Fucked", "Normal"})
funcs.add_to_S_L(g._self_veh_accel_fuck,"g._self_veh_accel_fuck")

menu.add_feature("Fuck vehicle", "action", g.prnt.self_veh_crrnt.id, function()
	funcs.doo.veh_current_do("fucked")
end)

menu.add_feature("Remove helicopter rotors", "action", g.prnt.self_veh_crrnt.id, function()
	funcs.doo.veh_current_do("remove_rotor")
end)

menu.add_feature("Flip vehicle upside down", "action", g.prnt.self_veh_crrnt.id, function()
	funcs.doo.veh_current_do("flip_wrong")
end)

menu.add_feature("Put vehicle on wheels", "action", g.prnt.self_veh_crrnt.id, function()
	funcs.doo.veh_current_do("flip_right")
end)

g._veh_self_rand_force=menu.add_feature("Random force", "action_slider", g.prnt.self_veh_crrnt.id, function(f)
	 funcs.doo.veh_current_do("random_force",f.value)
end)
funcs.set_feat_i_f(g._veh_self_rand_force,15,150,15,45,"g._veh_self_rand_force")

function funcs.doo.veh_current_do(_action,_val)
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle",__GV__,4,"Blue")
	elseif not funcs.doo.veh_action_list(funcs.ME._veh(),1000,_action,_val) then
		g.N_P(2,"Action failed or wasn't needed.",__GV__,4,"Yellow")
	end
end
	
-----------------------------------------------------------------------------------------GEE-SKID
---------------------------------------------------------------------------------------------SELF
-----------------------------------------------------------------------------------CurrentVehicle
------------------------------------------------------------------------------------GeeDriveStuff
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g._GeeBoost=menu.add_feature("Gee-Boost", "toggle", g.prnt.self_veh_crrnt_boost_stop.id, function(f)
	if funcs.is.GS_loaded() and f.on then
		if g._geeboost_set_keys.value == 0 then
			g.N_P(2,"Gee-Boost Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeBoostSelect1.value+1].." to boost.",__GV__,5,"Blue")
		elseif g._geeboost_set_keys.value == 1 then
			g.N_P(2,"Gee-Boost Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeBoostSelect1.value+1].." and "..inputs.vk_list[g._GeeBoostSelect2.value+1].." to boost.",__GV__,6,"Blue")
		else
			g.N_P(2,"Gee-Boost Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeBoostSelect1.value+1].." and "..inputs.vk_list[g._GeeBoostSelect2.value+1].." and "..inputs.vk_list[g._GeeBoostSelect3.value+1].." to boost.",__GV__,7,"Blue")
		end
	end
    while f.on do
		system.yield(0)
		if g._geeboost_set_keys.value == 0 then
			f.name="Gee-Boost: "..inputs.vk_list[g._GeeBoostSelect1.value+1]
		elseif g._geeboost_set_keys.value == 1 then
			f.name="Gee-Boost: "..inputs.vk_list[g._GeeBoostSelect1.value+1].." "..inputs.vk_list[g._GeeBoostSelect2.value+1]
		else
			f.name="Gee-Boost: "..inputs.vk_list[g._GeeBoostSelect1.value+1].." "..inputs.vk_list[g._GeeBoostSelect2.value+1].." "..inputs.vk_list[g._GeeBoostSelect3.value+1]
		end
		if funcs.ME._in_veh() then
			funcs.doo.self_boost_stop_show()
			if funcs.is.feature_keys_down(g._geeboost_set_keys,g._GeeBoostSelect1,g._GeeBoostSelect2,g._GeeBoostSelect3) then
				funcs.doo.veh_self_boost(funcs.ME._veh())
			end
		end
	end
	f.name="Gee-Boost"
end)
funcs.add_to_S_L(g._GeeBoost,"g._GeeBoost")

g._GeeBoostSelect1=menu.add_feature("Key1 for Gee-Boost","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeBoostSelect1:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeBoostSelect1,"g._GeeBoostSelect1")
g._GeeBoostSelect1.hidden=true
g._GeeBoostSelect1.value=16

g._GeeBoostSelect2=menu.add_feature("Key2 for Gee-Boost","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeBoostSelect2:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeBoostSelect2,"g._GeeBoostSelect2")
g._GeeBoostSelect2.hidden=true
g._GeeBoostSelect2.value=4

g._GeeBoostSelect3=menu.add_feature("Key3 for Gee-Boost","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeBoostSelect3:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeBoostSelect3,"g._GeeBoostSelect3")
g._GeeBoostSelect3.hidden=true
g._GeeBoostSelect3.value=53

g._geeboost_set_keys=menu.add_feature("Set key(s) for Gee-Boost","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id,function(f)
	funcs.doo.set_keybinds(f.value+1,"Gee-Boost",g._GeeBoostSelect1,g._GeeBoostSelect2,g._GeeBoostSelect3)
end)
g._geeboost_set_keys:set_str_data({"One", "Two","Three"})
funcs.add_to_S_L(g._geeboost_set_keys,"g._geeboost_set_keys")
g._geeboost_set_keys.value=1

g._self_veh_accel = menu.add_feature("Boost vehicle forward", "action_slider", g.prnt.self_veh_crrnt_boost_stop.id, function()
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle.",__GV__,4,"Blue")
	else
		funcs.doo.veh_self_boost(API.plyr.get.veh(API.plyr.my_id()),10)
	end
end)
funcs.set_feat_i_f(g._self_veh_accel,1,50,1,5,"g._self_veh_accel")
	
g._GeeStopRvrs=menu.add_feature("Gee-Stop/Reverse", "toggle", g.prnt.self_veh_crrnt_boost_stop.id, function(f)
	if funcs.is.GS_loaded() and f.on then
		if g._geestop_set_keys.value == 0 then
			g.N_P(2,"Gee-Stop/Reverse Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeStopSelect1.value+1].." to stop/reverse.",__GV__,5,"Blue")
		elseif g._geestop_set_keys.value == 1 then
			g.N_P(2,"Gee-Stop/Reverse Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeStopSelect1.value+1].." and "..inputs.vk_list[g._GeeStopSelect2.value+1].." to stop/reverse.",__GV__,6,"Blue")
		else
			g.N_P(2,"Gee-Stop/Reverse Enabled\nWhile in any vehicle hold "..inputs.vk_list[g._GeeStopSelect1.value+1].." and "..inputs.vk_list[g._GeeStopSelect2.value+1].." and "..inputs.vk_list[g._GeeStopSelect3.value+1].." to stop/reverse.",__GV__,7,"Blue")
		end
	end
	local ground=true
    while f.on do
		system.yield(0)
		if g._geestop_set_keys.value == 0 then
			f.name="Gee-Stop/Reverse: "..inputs.vk_list[g._GeeStopSelect1.value+1]
		elseif g._geestop_set_keys.value == 1 then
			f.name="Gee-Stop/Reverse: "..inputs.vk_list[g._GeeStopSelect1.value+1].." "..inputs.vk_list[g._GeeStopSelect2.value+1]
		else
			f.name="Gee-Stop/Reverse: "..inputs.vk_list[g._GeeStopSelect1.value+1].." "..inputs.vk_list[g._GeeStopSelect2.value+1].." "..inputs.vk_list[g._GeeStopSelect3.value+1]
		end
		if funcs.ME._in_veh() then
			funcs.doo.self_boost_stop_show()
			if funcs.is.feature_keys_down(g._geestop_set_keys,g._GeeStopSelect1,g._GeeStopSelect2,g._GeeStopSelect3) then
				funcs.doo.veh_self_stop(funcs.ME._veh(),ground)
				if g._self_veh_revers.value == 0 and ground then
					ground=false
				end
			else
				ground=true
			end
		end
	end
	f.name="Gee-Stop/Reverse"
end)
funcs.add_to_S_L(g._GeeStopRvrs,"g._GeeStopRvrs")

g._GeeStopSelect1=menu.add_feature("Key1 for Gee-Stop","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeStopSelect1:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeStopSelect1,"g._GeeStopSelect1")
g._GeeStopSelect1.hidden=true
g._GeeStopSelect1.value=2

g._GeeStopSelect2=menu.add_feature("Key2 for Gee-Stop","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeStopSelect2:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeStopSelect2,"g._GeeStopSelect2")
g._GeeStopSelect2.hidden=true
g._GeeStopSelect2.value=2

g._GeeStopSelect3=menu.add_feature("Key3 for Gee-Stop","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id)
g._GeeStopSelect3:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeStopSelect3,"g._GeeStopSelect3")
g._GeeStopSelect3.hidden=true
g._GeeStopSelect3.value=2

g._geestop_set_keys=menu.add_feature("Set key(s) for Gee-Stop/Reverse","action_value_str",g.prnt.self_veh_crrnt_boost_stop.id,function(f)
	funcs.doo.set_keybinds(f.value+1,"Gee-Stop/Reverse",g._GeeStopSelect1,g._GeeStopSelect2,g._GeeStopSelect3)
end)
g._geestop_set_keys:set_str_data({"One", "Two","Three"})
funcs.add_to_S_L(g._geestop_set_keys,"g._geestop_set_keys")

g._self_veh_revers = menu.add_feature("Stop/Reverse vehicle", "action_slider", g.prnt.self_veh_crrnt_boost_stop.id, function()
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle.",__GV__,4,"Blue")
	else
		funcs.doo.veh_self_stop(API.plyr.get.veh(API.plyr.my_id()))
	end
end)
funcs.set_feat_i_f(g._self_veh_revers,0,50,1,0,"g._self_veh_revers")

g.var.boost_display_once=false
function funcs.doo.self_boost_stop_show()
	if g._Boost_display.on and not g.var.boost_display_once and (not g.feat.gw_main.on or not funcs.ME._aim()) then
		g.var.boost_display_once=true
		local boost,stop,text="","",""
		_boost = funcs.is.char_check(inputs.vk_list[g._GeeBoostSelect1.value+1])
		if g._geeboost_set_keys.value > 0 then _boost = _boost.." "..funcs.is.char_check(inputs.vk_list[g._GeeBoostSelect2.value+1])
		end
		if g._geeboost_set_keys.value > 1 then _boost = _boost.." "..funcs.is.char_check(inputs.vk_list[g._GeeBoostSelect3.value+1])
		end
		stop = funcs.is.char_check(inputs.vk_list[g._GeeStopSelect1.value+1])
		if g._geestop_set_keys.value > 0 then stop = stop.." "..funcs.is.char_check(inputs.vk_list[g._GeeStopSelect2.value+1])
		end
		if g._geestop_set_keys.value > 1 then stop = stop.." "..funcs.is.char_check(inputs.vk_list[g._GeeStopSelect3.value+1])
		end
		if g._GeeBoost.on and g._GeeStopRvrs.on then text=_boost..":Accel   "..stop..":Stop/Reverse"
		elseif g._GeeBoost.on then text=_boost..":Accel"
		else text=stop..":Stop/Reverse"
		end
		funcs.doo.overlay(text,g._BS__cr.value,g._BS__cg.value,g._BS__cb.value,g._BS__a.value,g._BS__s.value/300,g._BS__f.value,g._BS__x.value/300,g._BS__y.value/300)
		g.var.boost_display_once=false
	end
end

g._Boost_display = menu.add_feature("Gee-Boost display overlay for self", "toggle", g.prnt.self_veh_crrnt_boost_stop_dsply.id, function(f)
	if funcs.is.GS_loaded() then
		g.N_P(2,"Gee-Boost will display an overlay when in a vehicle.",__GV__,4,"Blue")
	end
end)
funcs.add_to_S_L(g._Boost_display,"g._Boost_display")

g._BS__x = menu.add_feature("X Pos", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__x,0,300,1,150,"g._BS__x")

g._BS__y = menu.add_feature("Y Pos", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__y,0,300,1,289,"g._BS__y")

g._BS__s = menu.add_feature("Scale", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__s,75,300,1,170,"g._BS__s")

g._BS__f = menu.add_feature("Font", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__f,0,9,1,6,"g._BS__f")

g._BS__cr = menu.add_feature("Red", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__cr,0,255,1,0,"g._BS__cr")

g._BS__cg = menu.add_feature("Green", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__cg,0,255,1,255,"g._BS__cg")

g._BS__cb = menu.add_feature("Blue", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__cb,0,255,1,0,"g._BS__cb")

g._BS__a = menu.add_feature("Alpha", "action_slider", g.prnt.self_veh_crrnt_boost_stop_dsply.id)
funcs.set_feat_i_f(g._BS__a,30,255,1,105,"g._BS__a")


g._GeeSteer_custom=menu.add_feature("Gee-Steer", "value_str", g.prnt.self_veh_crrnt_drive.id, function(f)
	funcs.doo.GeeSteer_notif()
	while f.on do
		system.yield(50)
		funcs.doo.feat_keys_name("Gee-Steer: ",g._GeeSteer_custom,g._geesteer_set_keys,g._GeeSteerSelect1,g._GeeSteerSelect2,g._GeeSteerSelect3)
		if funcs.ME._in_veh() then
			if funcs.is.feature_keys_down(g._geesteer_set_keys,g._GeeSteerSelect1,g._GeeSteerSelect2,g._GeeSteerSelect3) then
				while funcs.is.feature_keys_down(g._geesteer_set_keys,g._GeeSteerSelect1,g._GeeSteerSelect2,g._GeeSteerSelect3) and funcs.ME._in_veh() do
					system.yield(0)
					funcs.doo.GeeSteer(f.value)
				end
				funcs.doo.tp_ent(API.plyr.get.veh(API.plyr.my_id()),API.ent.get.coords(API.plyr.get.veh(API.plyr.my_id())), 0 ,true)
			end
		end
	end
	f.name="Gee-Steer"
end)
g._GeeSteer_custom:set_str_data({"Partial", "Full"})
funcs.add_to_S_L(g._GeeSteer_custom,"g._GeeSteer_custom")

g._GeeSteerSelect1=menu.add_feature("Key1 for Gee-Steer","action_value_str",g.prnt.self_veh_crrnt_drive.id)
g._GeeSteerSelect1:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeSteerSelect1,"g._GeeSteerSelect1")
g._GeeSteerSelect1.hidden=true
g._GeeSteerSelect1.value=0

g._GeeSteerSelect2=menu.add_feature("Key2 for Gee-Steer","action_value_str",g.prnt.self_veh_crrnt_drive.id)
g._GeeSteerSelect2:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeSteerSelect2,"g._GeeSteerSelect2")
g._GeeSteerSelect2.hidden=true
g._GeeSteerSelect2.value=22

g._GeeSteerSelect3=menu.add_feature("Key3 for Gee-Steer","action_value_str",g.prnt.self_veh_crrnt_drive.id)
g._GeeSteerSelect3:set_str_data(inputs.vk_list)
funcs.add_to_S_L(g._GeeSteerSelect3,"g._GeeSteerSelect3")
g._GeeSteerSelect3.hidden=true
g._GeeSteerSelect3.value=3

g._geesteer_set_keys=menu.add_feature("Set key(s) for Gee-Steer","action_value_str",g.prnt.self_veh_crrnt_drive.id,function(f)
	funcs.doo.set_keybinds(f.value+1,"Gee-Steer",g._GeeSteerSelect1,g._GeeSteerSelect2,g._GeeSteerSelect3)
end)
g._geesteer_set_keys:set_str_data({"One", "Two","Three"})
funcs.add_to_S_L(g._geesteer_set_keys,"g._geesteer_set_keys")
g._geesteer_set_keys.value=2

g._GeeSteer_LC=menu.add_feature("Gee-Steer with Left-Click", "value_str", g.prnt.self_veh_crrnt_drive.id, function(f)
	funcs.doo.GeeSteer_notif()
	while f.on do
		system.yield(50)
		if funcs.ME._in_veh() and funcs.is.key_active(114,0) and funcs.is.GeeSteer_LC_check() then
			while funcs.is.key_active(223,1) and funcs.ME._in_veh() do
				system.yield(0)
				funcs.doo.GeeSteer(f.value)
			end
			funcs.doo.tp_ent(API.plyr.get.veh(API.plyr.my_id()),API.ent.get.coords(API.plyr.get.veh(API.plyr.my_id())), 0 ,true)
		end
	end
end)
g._GeeSteer_LC:set_str_data({"Partial", "Full"})
funcs.add_to_S_L(g._GeeSteer_LC,"g._GeeSteer_LC")

function funcs.is.GeeSteer_LC_check()
	if funcs.is.key_active(223,1) then --left click
		if 	API.veh.get.class(API.plyr.get.veh(API.plyr.my_id())) == 15 or
			API.veh.get.class(API.plyr.get.veh(API.plyr.my_id())) == 16 or
			funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"oppressor2") or
			funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"oppressor") then
			return true
		end
		if funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"rhino") then
			if funcs.ME._in_seat(API.plyr.get.veh(API.plyr.my_id()),-1) then
				return false
			end
			return true
		elseif funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"khanjali") then
			return false
		elseif funcs.is.this_veh(API.plyr.get.veh(API.plyr.my_id()),"apc") then
			if funcs.ME._in_seat(API.plyr.get.veh(API.plyr.my_id()),0) then
				return false
			end
			return true
		else
			return true
		end
	end
end

function funcs.doo.GeeSteer(_val)
	local my_rot = API.ent.get.rotation(API.plyr.get.veh(API.plyr.my_id()))
	local rot = API.cam.get.rot()
	my_rot.z = rot.z
	if funcs.ntwrk.ask_quick(API.plyr.get.veh(API.plyr.my_id())) then
		if _val == 0 then API.ent.set.rotation(API.plyr.get.veh(API.plyr.my_id()),my_rot)
		else API.ent.set.rotation(API.plyr.get.veh(API.plyr.my_id()),API.cam.get.rot())
		end
	end
end


g._GeeSteer_LC_notif=false
function funcs.doo.GeeSteer_notif()
	if funcs.is.GS_loaded() then
		local buttons=""
		local custom=inputs.vk_list[g._GeeSteerSelect1.value+1]
		if g._geesteer_set_keys.value > 0 then
			custom=custom.." "..inputs.vk_list[g._GeeSteerSelect2.value+1]
		end
		if g._geesteer_set_keys.value == 2 then
			custom=custom.." "..inputs.vk_list[g._GeeSteerSelect3.value+1]
		end
		if g._GeeSteer_LC.on and g._GeeSteer_custom.on then
			buttons=buttons.."Left-Click or "..custom
		elseif g._GeeSteer_custom.on then
			buttons=buttons..custom
		else
			buttons=buttons.."Left-Click"
		end
		g.N_P(2,"Gee-Steer Enabled\nWhile in any vehicle hold "..buttons.." to 'steer.'",__GV__,6,"Blue")
		if g._GeeSteer_LC.on and g._GeeSteer_LC_notif == false then
			g.N_P(2,"Gee-Steer with Left-Click may require adjusting your GTA settings to work properly. It also functions differently depending on the vehicle.",__GV__,7,"Yellow")
			g._GeeSteer_LC_notif=true
		end
	end
end

g._GeeDrive_insta=menu.add_feature("Insta-Drive-Stop", "value_str", g.prnt.self_veh_crrnt_drive.id, function(f)
	if funcs.is.GS_loaded()  and f.on then
		g.N_P(2,"Insta-Drive-Stop enabled\nWhile driving your vehicle can instantly start moving, have increased acceleration, or instantly stop.",__GV__,6,"Blue")
	end
	local do_once=true
	local time = API.util.t_ms() +250
    while f.on do
		system.yield(0)
		if funcs.ME._in_veh() then
			local me_id=API.plyr.my_id()
			local my_veh=API.plyr.get.veh(me_id)
			local class = API.veh.get.class(my_veh)
			if class ~= 15 and class ~= 16 then
				if funcs.ME._driving(my_veh) then
					if funcs.is.key_active(32,1) then
						if do_once then
							if f.value ~= 4 and f.value ~= 5 then
								API.veh.set.forward_speed(my_veh,15)
							end
						end
						if f.value == 0 or f.value == 2 or f.value == 4 then
							if time < API.util.t_ms() then
								API.veh.set.forward_speed(my_veh,(API.ent.get.speed(my_veh)+1))
								time = API.util.t_ms() +250
							end
						else
							time = API.util.t_ms() +250
						end
						do_once = false
					elseif not do_once then
						if f.value == 0 or f.value == 1 or f.value == 5 then
							API.ent.set.velocity(my_veh,v3(0,0,0))
							API.veh.set.on_ground(my_veh)
						end
						do_once = true
					end
				end
			end
		end
	end
end)
g._GeeDrive_insta:set_str_data({"Start-Accel-Stop","Start-Stop","Start-Accel", "Only Start","Only Accel","Only Stop"})
funcs.add_to_S_L(g._GeeDrive_insta,"g._GeeDrive_insta")

g._GeeDrive_boost_tog=menu.add_feature("GTA-Boost toggle", "toggle", g.prnt.self_veh_crrnt_drive.id, function(f)
	if funcs.is.GS_loaded()  and f.on then
		g.N_P(2,"Boost toggle enabled\nPress the brakes to stop boosting.",__GV__,6,"Blue")
	end
	local active=false
	local my_veh=0
    while f.on do
		system.yield(0)
		if funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id())) then
			my_veh=API.plyr.get.veh(API.plyr.my_id()) 
			if vehicle.is_vehicle_rocket_boost_active(my_veh) then
				active=true
				vehicle.set_vehicle_rocket_boost_percentage(my_veh,999999.0)
				if funcs.is.key_active(33,1) then --oppressor2 wouldnt respond by using boost key to stop
					vehicle.set_vehicle_rocket_boost_percentage(my_veh,100.0)
					vehicle.set_vehicle_rocket_boost_active(my_veh,false)
				end
			else
				active=false
			end 
		elseif active then
			if funcs.is.veh(my_veh) then
				vehicle.set_vehicle_rocket_boost_percentage(my_veh,100.0)
				vehicle.set_vehicle_rocket_boost_active(my_veh,false)
			end
			active=false
		end	
	end
end)
funcs.add_to_S_L(g._GeeDrive_boost_tog,"g._GeeDrive_boost_tog")

g._self_veh_up = menu.add_feature("Jump up", "action_slider", g.prnt.self_veh_crrnt_drive.id, function()
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle.",__GV__,4,"Blue")
	else
		funcs.doo.veh_self_up(API.plyr.get.veh(API.plyr.my_id()))
	end
end)
funcs.set_feat_i_f(g._self_veh_up,1,100,1,25,"g._self_veh_up")

g._self_veh_down = menu.add_feature("Boost down", "action_slider", g.prnt.self_veh_crrnt_drive.id, function()
	if not funcs.ME._in_veh() then
		g.N_P(2,"You are not in a vehicle.",__GV__,4,"Blue")
	else
		funcs.doo.veh_self_down(API.plyr.get.veh(API.plyr.my_id()))
	end
end)
funcs.set_feat_i_f(g._self_veh_down,1,100,1,25,"g._self_veh_down")

------------------Vehicle Movement Self
---------------------------------------
function funcs.doo.veh_self_boost(self,amp)
	amp = amp or 1
	if not funcs.ME._driving(self) then
		if funcs.ntwrk.ask_long(self,100) then
			API.ent.set.max_speed(self,45000)
			API.veh.set.forward_speed(self,(API.ent.get.speed(self)+((g._self_veh_accel.value*0.11)*amp)))
		end
	else
		API.ent.set.max_speed(self,45000)
		API.veh.set.forward_speed(self,(API.ent.get.speed(self)+((g._self_veh_accel.value*0.1)*amp)))
	end
end

function funcs.doo.veh_self_stop(self,ground)
	ground = ground or false
	if not funcs.ME._driving(self) then
		if funcs.ntwrk.ask_long(self,1000) then
			API.veh.set.forward_speed(self,-g._self_veh_revers.value)
			if g._self_veh_revers.value == 0 and ground then
				API.veh.set.on_ground(self)
			end
		end
	else
		API.veh.set.forward_speed(self,-g._self_veh_revers.value)
		if g._self_veh_revers.value == 0 and ground then
			API.veh.set.on_ground(self)
		end
	end
end

function funcs.doo.veh_self_up(self)
	if not funcs.ME._driving(self) then
		if funcs.ntwrk.ask_long(self,1000) then
			API.ent.force(self, 1,0,0, g._self_veh_up.value,    0, 0, 0,   false, true)
		end
	else
		API.ent.force(self, 1,0,0, g._self_veh_up.value,    0, 0, 0,   false, true)
	end
end

function funcs.doo.veh_self_down(self)
	if not funcs.ME._driving(self) then
		if funcs.ntwrk.ask_long(self,1000) then
			API.ent.force(self, 1,0,0, -g._self_veh_down.value,    0, 0, 0,   false, true)
		end
	else
		API.ent.force(self, 1,0,0, -g._self_veh_down.value,    0, 0, 0,   false, true)
	end
end

-----------------------------------------------------------------------------------------GEE-SKID
---------------------------------------------------------------------------------------------Peds
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g.tbl.unaffected_ents={}
function funcs.is.good_session_ped(_ped)
	if funcs.is.ent(_ped) and API.ent.is.ped(_ped) and not API.ent.is.dead(_ped) and not API.Ped.is.plyr(_ped) and g.tbl.R_P.ped ~= _ped and not g.tbl.unaffected_ents[_ped] then
		if g._ped_not_nice.on then
			return (not ntv.is.ped_nice(_ped,API.plyr.get.ped(API.plyr.my_id())))
		end
		return true
	end
	return false
end

-------------------Thanks to jhowkNx for including ped weapon options in version 2.17 of 
-------------------heist control. Original code included and expanded upon significantly. 
g._ped_not_nice=menu.add_feature("*Do not affect any friendly peds*","toggle",g.prnt.sssn_peds.id)
funcs.add_to_S_L(g._ped_not_nice,"g._ped_not_nice")

g._peds_brawl=menu.add_feature("Peds fight","toggle",g.prnt.sssn_peds.id,function(f)	
	local group = {ped.create_group(),ped.create_group()}
	ped.set_relationship_between_groups(5, group[1], group[2])
	ped.set_relationship_between_groups(5, group[2], group[1])
	local assigned = {}
	local INT=1
	while f.on do
		all_peds = API.Ped.get.all()
		table.sort(all_peds, function(a, b) return funcs.get.dist_me_ent_3d(a)<funcs.get.dist_me_ent_3d(b)  end)
		for k,v in ipairs(all_peds) do
			if funcs.is.good_session_ped(v) then
				if not assigned[v] or (not funcs.is.ped(assigned[v].TRGT) or API.ent.is.dead(assigned[v].TRGT)) then
					for k2,v2 in ipairs(all_peds) do
						if v2 ~= v and not assigned[v2] and funcs.is.good_session_ped(v2) then
							--ntv.doo.clear_task(v)
							assigned[v]={}
							assigned[v].PED=v
							assigned[v].GRP=group[INT]
							assigned[v].TRGT=v2
							if ped.is_ped_in_group(v) then
								ped.remove_ped_from_group(v)
							end
							ped.set_ped_as_group_member(v,assigned[v].GRP)
							funcs.doo.ped_combat_attrib(v)
							ped.set_ped_never_leaves_group(v, true)
							ai.task_combat_ped(v, v2,0,16)
							INT =((INT == 1 and 2) or 1)
							--ntv.doo.clear_task(v2)
							assigned[v2]={}
							assigned[v2].PED=v2
							assigned[v2].GRP=group[INT]
							assigned[v2].TRGT=v
							if ped.is_ped_in_group(v2) then
								ped.remove_ped_from_group(v2)
							end
							ped.set_ped_as_group_member(v2,assigned[v2].GRP)
							funcs.doo.ped_combat_attrib(v2)
							ped.set_ped_never_leaves_group(v2, true)
							ai.task_combat_ped(v2, v,0,16)
							break
						end
					end
				elseif API.Ped.is.in_veh(assigned[v].PED) and API.Ped.is.in_veh(assigned[v].TRGT) and API.Ped.get.veh(assigned[v].PED) == API.Ped.get.veh(assigned[v].TRGT) then
					ai.task_leave_vehicle(assigned[v].PED, API.Ped.get.veh(assigned[v].PED), 0)
					ai.task_leave_vehicle(assigned[v].TRGT, API.Ped.get.veh(assigned[v].TRGT), 0)
				else
					ai.task_combat_ped(assigned[v].PED, assigned[v].TRGT,0,16)
					ai.task_combat_ped(assigned[v].TRGT, assigned[v].PED,0,16)
				end
			end
		end
		funcs.doo.yield_while_true(f.on,2000)
	end
	ped.set_relationship_between_groups(2, group[1], group[2])
	ped.set_relationship_between_groups(2, group[2], group[1])
end)

local ped_weap_noti = true
g._ped_weap_toggle=menu.add_feature("Change ped weapons to:","value_str",g.prnt.sssn_peds.id,function(f)
	local notifname = {}
	local all_peds,time,ped_weap_do_noti,attrib
	notifname = g._ped_weap_toggle:get_str_data()
	while f.on do	
		system.yield(0)
		if ped_weap_noti then
			g.N_P(2,"Weapon changes are applied every 5 seconds. You will be notified only if it's needed.",__GV__,7,"Blue")
			ped_weap_noti = false
		end
		all_peds = API.Ped.get.all()
		ped_weap_do_noti=true
		for i=1,#all_peds do
			attrib=false
			system.yield(0)
			if funcs.is.good_session_ped(all_peds[i]) and funcs.ntwrk.ask_long(all_peds[i],50) then
				if f.value == 0 then
					weapon.remove_all_ped_weapons(all_peds[i])
					attrib=true
				--elseif	API.Ped.get.weapon(all_peds[i]) ~= ped_models.change_weap_list[f.value+1] then -- crash :(
				elseif not API.wpn.ped_has(all_peds[i], ped_models.change_weap_list[f.value+1]) then
					weapon.remove_all_ped_weapons(all_peds[i])
					if funcs.doo.give_ped_weap(all_peds[i],ped_models.change_weap_list[f.value+1]) then
						attrib=true
					end
				end
				if attrib then
					funcs.doo.ped_combat_attrib(all_peds[i])
					if ped_weap_do_noti then
						g.N_P(2,"Altering ped weapons to "..notifname[f.value+1],__GV__,3,"Green")
						ped_weap_do_noti=false
					end
				end
			end
		end
		time = API.util.t_s() + 5
		while f.on and time > API.util.t_s() do
			system.yield(0)
		end
	end
end)
g._ped_weap_toggle:set_str_data({
"Fists",
"Kuckle Dusters",
"Knife",
"Battle Axe",
"Stungun",
"Heavy revolver mk2",
"Machine-Pistol",
"Up-N-Atomizer",
"Unholy Hellbringer",
"Combat MG Mk2",
"Sniper Rifle",
"Widowmaker",
"EMP Launcher",
"Firework Launcher",
"RPG",
"Railgun"
})

	
g._peds_shooting_do=menu.add_feature("If peds are shooting:","value_str",g.prnt.sssn_peds.id,function(f)
	local all_peds,ped_veh
	while f.on do
		system.yield(0)
		all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			ped_veh = API.Ped.get.veh(all_peds[i])
			if funcs.is.good_session_ped(all_peds[i]) and API.Ped.is.shooting(all_peds[i]) then
				if f.value < 3 and funcs.ntwrk.ask_long(all_peds[i],50) then
					if f.value == 0 then
						if API.Ped.is.in_veh(all_peds[i]) then
							if funcs.ntwrk.ask_long(ped_veh,100) then
								API.veh.set.engine_on(ped_veh, false, false, true)
								API.veh.set.tire_burst(ped_veh, mth.rndm(0,1), false, 1000.0)
								API.veh.set.tire_burst(ped_veh, mth.rndm(2,4), false, 1000.0)
								API.veh.set.engine_health(ped_veh, -1)
								API.veh.set.plate_text(ped_veh,"Mean-Ped")
							end
							ai.task_leave_vehicle(all_peds[i], ped_veh, 4160)
						else
							API.Ped.set.accuracy(all_peds[i], 100)
						end
					elseif f.value == 1 then
						if API.Ped.is.in_veh(all_peds[i]) then
							if funcs.ntwrk.ask_long(ped_veh,100) then
								API.veh.set.engine_on(ped_veh, false, false, true)
								API.veh.set.tire_burst(ped_veh, mth.rndm(0,1), false, 1000.0)
								API.veh.set.tire_burst(ped_veh, mth.rndm(2,4), false, 1000.0)
								API.veh.set.engine_health(ped_veh, 1)
								API.veh.set.plate_text(ped_veh,"Mean-Ped")
							end
							ai.task_leave_vehicle(all_peds[i], ped_veh, 4160)
						elseif mth.rndm(0,4) == 0 then
							API.ent.force(all_peds[i], 1, mth.rndm(-50,50), mth.rndm(-50,50), 50, 0, 0, 0,   false, true)
						elseif mth.rndm(0,4) == 1 then 					
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 24, true, false, 0, all_peds[i])
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 24, true, false, 0, all_peds[i])
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 24, true, false, 0, all_peds[i])
						elseif mth.rndm(0,4) == 2 then 
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 13, true, false, 0, all_peds[i])
						elseif mth.rndm(0,4) == 3 then 
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 11, true, false, 0, all_peds[i])
						else 
							fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 21, true, false, 0, all_peds[i])
						end
						API.Ped.set.ragdoll(all_peds[i],1000,1000,0)
					else
						funcs.doo.set_ped_health(all_peds[i],101,50)
						fire.add_explosion(API.ent.get.coords(all_peds[i])+v3(0,0,-1.5), 14, true, false, 0, all_peds[i])
						fire.start_entity_fire(all_peds[i])
					end
				elseif API.Ped.is.in_veh(all_peds[i]) and funcs.ntwrk.ask_long(ped_veh,100) then 
					if f.value == 3 then
						API.ent.set.coords(ped_veh, v3(mth.rndm(-81,-69),mth.rndm(-826,-813), mth.rndm(327,357)))		
					else
						API.ent.set.coords(ped_veh, API.ent.get.coords(ped_veh)+v3(0,0,200))
					end
				elseif funcs.ntwrk.ask_long(all_peds[i],50) then
					if f.value == 3 then
						API.ent.set.coords(all_peds[i], v3(mth.rndm(-81,-69),mth.rndm(-826,-813), mth.rndm(327,357)))	
					else
						API.ent.set.coords(all_peds[i], API.ent.get.coords(all_peds[i])+v3(0,0,200))			
					end
				end
			end
		end
	end
end)
g._peds_shooting_do:set_str_data({"Jam their gun","Troll","Kill","TP to Maze Bank Top","TP High in air"})


g._all_peds_gods=menu.add_feature("Peds GOD","value_str", g.prnt.sssn_peds.id,function(f)
	while f.on do
		system.yield(5)
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then
				if f.value == 0 then
					if not API.ent.get.god(all_peds[i]) then
						API.ent.set.god(all_peds[i], true)
					end
				elseif f.value == 1 then
					if API.ent.get.god(all_peds[i]) then
						API.ent.set.god(all_peds[i], false)
					end
				end
			end
		end
	end
end)
g._all_peds_gods:set_str_data({
"Give",
"Remove"})


g._all_peds_freeze=menu.add_feature("Peds freeze","value_str", g.prnt.sssn_peds.id,function(f)
	while f.on do
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then	
				funcs.ntwrk.ask_quick(all_peds[i])
				if f.value == 0 then
					API.ent.set.max_speed(all_peds[i], 0)
				elseif f.value == 1 then
					API.ent.set.max_speed(all_peds[i], 45000)
				end
			end
		end
		funcs.doo.yield_while_true(f.on,1000)
	end
end)
g._all_peds_freeze:set_str_data({
"True",
"False"})


g._all_peds_die=menu.add_feature("Peds health","value_str", g.prnt.sssn_peds.id,function(f)
	while f.on do
		system.yield(25)
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then
				if f.value == 0 then
					funcs.doo.set_ped_health(all_peds[i],101,25)
				elseif f.value == 1 then
					fire.start_entity_fire(all_peds[i])
					fire.add_explosion(API.ent.get.coords(all_peds[i]),3, true, false, 0,all_peds[i])
				elseif f.value == 2 then
					funcs.doo.set_ped_health(all_peds[i],0,25)
				elseif f.value == 3 then
					fire.add_explosion(API.ent.get.coords(all_peds[i]),0, true, false, 0,all_peds[i])
				end
			end
		end
	end
end)
g._all_peds_die:set_str_data({
"Almost dead",
"Burn to death",
"Dead",
"Explode"})

g._peds_up=menu.add_feature("Peds go up","value_str",g.prnt.sssn_peds.id,function(f)
	while f.on do
		system.yield(0)
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then
				if API.Ped.is.in_veh(all_peds[i]) then
					local ped_veh = API.Ped.get.veh(all_peds[i])
					funcs.ntwrk.ask_long(ped_veh,50)
					ai.task_leave_vehicle(all_peds[i], ped_veh, 4160)
					system.yield(100)
				elseif f.value == 0 then
					API.ent.set.velocity(all_peds[i],v3(0,0,1))
				elseif f.value == 1 then
					API.ent.set.velocity(all_peds[i],v3(0,0,100))
				end
			end
		end
	end
end)
g._peds_up:set_str_data({
"Slowly",
"Rapture"})

g._peds_down=menu.add_feature("Peds come down","value_str",g.prnt.sssn_peds.id,function(f)
	while f.on do
		system.yield(0)
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) and API.ent.is.in_air(all_peds[i]) then
				API.ent.set.gravity(all_peds[i], true)
				if f.value == 0 then
					API.ent.set.velocity(all_peds[i],v3(0,0,-5))
				elseif f.value == 1 then
					API.ent.set.velocity(all_peds[i],v3(0,0,-100))
				end
			end
		end
	end
end)			
g._peds_down:set_str_data({
"Gently",
"YEET"})

menu.add_feature("Peds bail out","toggle",g.prnt.sssn_peds.id,function(a)
	local ped_bail_count = 0
	while a.on do
		ped_bail_count=ped_bail_count+1
		system.yield(0)
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if ped_bail_count < 100 then
				system.yield(0)
				if funcs.is.good_session_ped(all_peds[i]) and API.Ped.is.in_veh(all_peds[i]) then
					ai.task_leave_vehicle(all_peds[i], API.Ped.get.veh(all_peds[i]), 4160)
				end
			end
		end
		if ped_bail_count > 300 then
			ped_bail_count = 0
		end
	end
end)

menu.add_feature("Random force","toggle",g.prnt.sssn_peds.id,function(f)
	while f.on do
		local all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then
				if API.Ped.is.in_veh(all_peds[i]) then
					if not funcs.is.any_plyr_in_veh(API.Ped.get.veh(all_peds[i])) then
						funcs.ntwrk.ask_quick(API.Ped.get.veh(all_peds[i]))
						funcs.ntwrk.ask_quick(all_peds[i])
						ai.task_leave_vehicle(all_peds[i], API.Ped.get.veh(all_peds[i]), 4160)
					end
				elseif API.ent.is.in_air(all_peds[i]) then
					funcs.ntwrk.ask_quick(all_peds[i])
					API.ent.set.velocity(all_peds[i],v3(mth.rndm(-50,50),mth.rndm(-50,50),mth.rndm(-25,-15)))
				else
					funcs.ntwrk.ask_quick(all_peds[i])
					API.ent.set.velocity(all_peds[i],v3(mth.rndm(-50,50),mth.rndm(-50,50),mth.rndm(10,20)))
				end
			end
		end
		funcs.doo.yield_while_true(f.on,1000)
	end
end)

g._shoot_peds_toggle2=menu.add_feature("Gee-Shoot all peds2","value_str", g.prnt.sssn_peds.id,function(f,pid) --aaaaaaaaaaaaaaa
	local found,pos,my_ped,hash
	local t  = {[0] = 2000,[1] = 5000,[2] = 10000,[3] = 20000,[4] = 999999}
	local time = API.util.t_ms()
	while f.on and API.util.t_ms() < time+t[g._shoot_peds_time.value] do
		my_ped = f.value == 0 and funcs.ME._ped() or funcs.get.non_plyr_ped()
		hash = g._shoot_peds_weap.value == 0 and 100416529 or 1834241177
		local x,y = mth.rndm(-10,10)*0.01,mth.rndm(-10,10)*0.01
		for k,v in pairs(API.Ped.get.all()) do
			if funcs.is.good_session_ped(v) then
				found,pos = API.Ped.get.bone_coords(v, 0x796e, v3(0,0,0))
				if found then
					gameplay.shoot_single_bullet_between_coords(pos+v3(x,y,0.1), pos, 1000, hash, my_ped, true, false, 1000)
					system.yield(0)
				end
			end
		end			
		system.yield(100)
	end
	f.on=false
end)
g._shoot_peds_toggle2:set_str_data({"Blame me","Anonymous"})

g._shoot_peds_toggle=menu.add_feature("Gee-Shoot all peds","toggle", g.prnt.sssn_peds.id,function(f,pid)
	local t  = {[0] = 2000,[1] = 5000,[2] = 10000,[3] = 20000,[4] = 999999}
	local time,my_ped, all_peds = API.util.t_ms()
	while f.on and API.util.t_ms() < time+t[g._shoot_peds_time.value] do
		system.yield(0)
		my_ped=funcs.ME._ped()
		all_peds=API.Ped.get.all()
		if g._shoot_peds_weap.value == 0 then
			API.wpn.ped_give_comp(my_ped,100416529,1000, true)
		else
			API.wpn.ped_give_comp(my_ped,1834241177,1000, true)
		end
		for i=1,#all_peds do
			if funcs.is.good_session_ped(all_peds[i]) then
				if g._shoot_peds_weap.value == 0 then
					gameplay.shoot_single_bullet_between_coords(API.ent.get.coords(all_peds[i])+v3(0,0,0.5), API.ent.get.coords(all_peds[i])-v3(0,0,0.5), 1000, 100416529, my_ped, true, false, 1000)
				elseif g._shoot_peds_weap.value == 1 then
					gameplay.shoot_single_bullet_between_coords(API.ent.get.coords(all_peds[i])+v3(0,0,0.5), API.ent.get.coords(all_peds[i])-v3(0,0,0.5), 1, 1834241177, my_ped, true, false, 1000)
				end
				system.wait(5)
			end
		end			
	end
	f.on=false
end)

g._shoot_peds_time=menu.add_feature("Shoot all peds for:","autoaction_value_str",g.prnt.sssn_peds.id)
g._shoot_peds_time:set_str_data({"2 seconds", "5 seconds","10 seconds","20 seconds","Until I turn it off"})

g._shoot_peds_weap=menu.add_feature("Shoot all peds with:","autoaction_value_str",g.prnt.sssn_peds.id)
g._shoot_peds_weap:set_str_data({"Sniper bullets", "Railgun"})


-----------------------------------------------------------------------------------------GEE-SKID
------------------------------------------------------------------------------------------Options
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

g.tbl.dist_type_str = {
[0] = "m",
[1] = "km",
[2] = "ft",
[3] = "yard",
[4] = "field",
[5] = "mile",
[6] = "asiandick",
[7] = "bbc"
}

g._waypoint_esp=menu.add_feature("Waypoint ESP","value_str", g.prnt.utils_info_wp.id, function(f)
	local me=API.plyr.my_id()
	local my_pos = API.plyr.get.coords(me)
	local pos,mult,flip,dist_type,wp
	local wp_blip =  scriptdraw.register_sprite(g.paths._2t1.."\\scripts\\GeeSkid_v2\\Images\\Vehicle ESP\\waypoint.png")
	local script_size = funcs.get.SD_size(f.on)
	while f.on do
		mult = 1
		flip = true
		if ui.get_waypoint_coord().x < 16000 then
			pos = funcs.get.WP_coords2("anywhere")
			if pos then
				wp = ui.get_waypoint_coord()
				while wp == ui.get_waypoint_coord() and f.on do
					system.yield(5)
					if g._waypoint_esp_dist.on then
						dist_type = g.tbl.dist_type_str[g._waypoint_esp_dist.value]
					else dist_type ="none"
					end
					if flip then
						mult = mult * .995
						if mult < 1 then flip = false end
					else 
						mult = mult * 1.005
						if mult > 2 then flip = true end
					end
					funcs.doo.waypoint_esp(wp_blip,mult,dist_type,script_size,pos)
				end
			end
		end
		system.yield(1000)
	end
end)
g._waypoint_esp:set_str_data({"Small","Medium","Large","Bounce"})
funcs.add_to_S_L(g._waypoint_esp,"g._waypoint_esp")
g._waypoint_esp.on=true
g._waypoint_esp.value=3

g._waypoint_esp_dist=menu.add_feature("Show waypoint ESP distance","value_str", g.prnt.utils_info_wp.id)
g._waypoint_esp_dist:set_str_data({"Meters","Kilometers","Feet","Yards","Football fields","Miles","Tiny dick","BBC"})
funcs.add_to_S_L(g._waypoint_esp_dist,"g._waypoint_esp_dist")
g._waypoint_esp_dist.on=true

function funcs.doo.waypoint_esp(_blip,mult,dist_type,script_size,pos)
	local dist,_r,_g,_b,size
	local screen_pos = funcs.get.screen_pos_3d(pos)
	if g._waypoint_esp.value == 3 then
		size = mult
	else
		size = (g._waypoint_esp.value+1) *.69
	end
	if screen_pos then
		dist = funcs.get.dist_pospos_v3(API.plyr.get.coords(API.plyr.my_id()),pos)
		if glbls.is_mission_active(API.plyr.my_id()) and g.tbl.PID_INFO.color[API.plyr.my_id()+1] > -1 then
			_r = g.tbl.PID_OSD.team_rgb[g.tbl.PID_INFO.color[API.plyr.my_id()+1]+2][1]
			_g = g.tbl.PID_OSD.team_rgb[g.tbl.PID_INFO.color[API.plyr.my_id()+1]+2][2]
			_b = g.tbl.PID_OSD.team_rgb[g.tbl.PID_INFO.color[API.plyr.my_id()+1]+2][3]
		else
			_r,_g,_b = 164, 76, 242
		end
		API.SD.draw_sprt(_blip,screen_pos,1*size*g.RES,0,funcs.get.rgb_to_int(_r,_g,_b,200))
		if dist_type ~= "none" then
			API.SD.draw_text(funcs.get.dist_to_str(dist,dist_type),v2(screen_pos.x+(0.01*size*g.RES),screen_pos.y), screen_pos, .5*size*script_size*g.RES, funcs.get.rgb_to_int(_r,_g,_b,200),1 << 1, 0)
		end
	end
end

g._show_otr_blips=menu.add_feature("Show off-the-radar blips","toggle", g.prnt.utils_info.id, function(f)
	if not f.on then
		for i=1,#g.tbl.PID_INFO.otr_blip do
			if g.tbl.PID_INFO.otr_blip[i] ~= v3(0,0,0) then -- remove any green otr blips 
				ui.remove_blip(g.tbl.PID_INFO.otr_blip[i])
				g.tbl.PID_INFO.otr_blip[i] = v3(0,0,0)
			end	
		end
	end
end)
funcs.add_to_S_L(g._show_otr_blips,"g._show_otr_blips")
g._show_otr_blips.on=true

g._show_undead_blips=menu.add_feature("Show un-dead blips","toggle", g.prnt.utils_info.id, function(f)
	if not f.on then
		for i=1,#g.tbl.PID_INFO.undead_blip do
			if g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) then -- remove any black undead blips 
				ui.remove_blip(g.tbl.PID_INFO.undead_blip[i])
				g.tbl.PID_INFO.undead_blip[i] = v3(0,0,0)
			end	
		end
	end
end)
funcs.add_to_S_L(g._show_undead_blips,"g._show_undead_blips")
g._show_undead_blips.on=true

menu.add_feature("Show all modder info", "action", g.prnt.utils_info.id, function(f)
	--thank you toph
	local flag,list = 1,{}
	while flag < player.get_modder_flag_ends() do
		local name = player.get_modder_flag_text(flag)
		list[flag]=player.get_modder_flag_text(flag)
		flag = flag * 2
	end
	local name,count = ""
	for pid=0,31 do
		if funcs.is.valid_pid(pid) and API.plyr.is.modder(pid,-1) then
			name = name .. funcs.get.pid_name(pid)..": "
			count = 0
			for k,v in pairs(list) do
				if API.plyr.is.modder(pid,k) then
					count=count+1
					if count > 1 then
						name=name..","
					end
					name=name.." "..v
				end
			end
			name=name.."\n"
		end
	end
	if name ~= "" then
		g.N_P(2,name,__GV__,10,"Blue")
	else
		g.N_P(2,"No modders in session.",__GV__,3,"Blue")
	end
end)

g._silent_start=menu.add_feature("Silent start","toggle", g.prnt.optns.id)
funcs.add_to_S_L(g._silent_start,"g._silent_start")
g._silent_start.on=true

g._show_voidkot=menu.add_feature("Splash screen","toggle", g.prnt.optns.id)
funcs.add_to_S_L(g._show_voidkot,"g._show_voidkot")
g._show_voidkot.on=true

g.tbl.veh_info_entry = {}
g.tbl.veh_info_entry.feat=menu.add_feature("Display vehicle info upon entry", "toggle", g.prnt.self_veh_crrnt_info.id, function(f)
	local my_veh
	while f.on do
		system.yield(100)
		if funcs.ME._in_veh() then
			if my_veh ~= API.plyr.get.veh(API.plyr.my_id()) then
				system.yield(125)
				my_veh=API.plyr.get.veh(API.plyr.my_id())
				funcs.doo.display_veh_info(
				my_veh,
				g.tbl.veh_info_entry.speed.on,
				g.tbl.veh_info_entry.speed.value==0,
				g.tbl.veh_info_entry.dmnsns.on,
				g.tbl.veh_info_entry.dmnsns.value==0,
				g.tbl.veh_info_entry.god.on,
				g.tbl.veh_info_entry.hlth.on,
				g.tbl.veh_info_entry.hlth.value==0,
				g.tbl.veh_info_entry.weap.on,
				g.tbl.veh_info_entry.hash.on,
				g.tbl.veh_info_entry.gtaid.on,
				false,
				false,
				g.tbl.veh_info_entry.occpnts.on
				)
			end
		end
	end
end)
funcs.add_to_S_L(g.tbl.veh_info_entry.feat,"g.tbl.veh_info_entry.feat")

g.tbl.veh_info_entry.speed=menu.add_feature("Show max speed", "value_str", g.prnt.self_veh_crrnt_info.id)
g.tbl.veh_info_entry.speed:set_str_data({"MPH","KPH"})
funcs.add_to_S_L(g.tbl.veh_info_entry.speed,"g.tbl.veh_info_entry.speed")

g.tbl.veh_info_entry.dmnsns=menu.add_feature("Show dimensions", "value_str", g.prnt.self_veh_crrnt_info.id)
g.tbl.veh_info_entry.dmnsns:set_str_data({"Meters","Feet"})
funcs.add_to_S_L(g.tbl.veh_info_entry.dmnsns,"g.tbl.veh_info_entry.dmnsns")

g.tbl.veh_info_entry.god=menu.add_feature("Show god", "toggle", g.prnt.self_veh_crrnt_info.id)
funcs.add_to_S_L(g.tbl.veh_info_entry.god,"g.tbl.veh_info_entry.god")

g.tbl.veh_info_entry.weap=menu.add_feature("Show weapons", "toggle", g.prnt.self_veh_crrnt_info.id)
funcs.add_to_S_L(g.tbl.veh_info_entry.weap,"g.tbl.veh_info_entry.weap")

g.tbl.veh_info_entry.hlth=menu.add_feature("Show health", "value_str", g.prnt.self_veh_crrnt_info.id)
g.tbl.veh_info_entry.hlth:set_str_data({"Total health","Engine and body"})
funcs.add_to_S_L(g.tbl.veh_info_entry.hlth,"g.tbl.veh_info_entry.hlth")

g.tbl.veh_info_entry.hash=menu.add_feature("Show hash", "toggle", g.prnt.self_veh_crrnt_info.id)
funcs.add_to_S_L(g.tbl.veh_info_entry.hash,"g.tbl.veh_info_entry.hash")

g.tbl.veh_info_entry.gtaid=menu.add_feature("Show vehicle ID#", "toggle", g.prnt.self_veh_crrnt_info.id)
funcs.add_to_S_L(g.tbl.veh_info_entry.gtaid,"g.tbl.veh_info_entry.gtaid")

g.tbl.veh_info_entry.occpnts=menu.add_feature("Show occupants", "toggle", g.prnt.self_veh_crrnt_info.id)
funcs.add_to_S_L(g.tbl.veh_info_entry.occpnts,"g.tbl.veh_info_entry.occpnts")

g.tbl.veh_info_entry.scnds=menu.add_feature("Notification seconds", "action_value_i", g.prnt.self_veh_crrnt_info.id)
funcs.set_feat_i_f(g.tbl.veh_info_entry.scnds,1,15,1,10,"g.tbl.veh_info_entry.scnds")

function funcs.doo.display_veh_info(_veh,_speed,_speed_type,_size,_size_type,_god,_health,_health_cmbnd,_weap,_hash,_gtaid,_dist,_dist_type,_occpnts)

	local msg=""
	if API.veh.get.brand(_veh) == nil then
		msg=msg..funcs.get.veh_model_name(_veh)
	else
		msg=msg..API.veh.get.brand(_veh).."   " .. funcs.get.veh_model_name(_veh)
	end
	msg=msg.."\n"..API.veh.get.class_name(_veh).."  "..vehicle.get_vehicle_wheel_count(_veh).."-Wheels  "..funcs.get.veh_seats(_veh).."-Seats"
	local owner = decorator.decor_get_int(_veh, "Player_Vehicle")
	if owner > 0 then
		for i=1,32 do
			if g.tbl.PID_INFO.net_hash[i]==owner then
				if funcs.is.valid_pid(i-1) then
					msg=msg.."\nOwner: "..funcs.get.pid_name(i-1)
				else
					msg=msg.."\nUnknown personal vehicle"
				end
				break
			end
		end
	end
	if _speed then
		if _speed_type then
			msg=msg.."\nEstimated max-speed: "..tostring(funcs.get._1_dec(vehicle.get_vehicle_estimated_max_speed(_veh)*2.65).." mph") --idk why gta reports the values different
		else
			msg=msg.."\nEstimated max-speed: "..tostring(funcs.get._1_dec(vehicle.get_vehicle_estimated_max_speed(_veh)*4.2647).." kph") -- but max speed requires different math than entity speed
		end
	end
	if _size then
		local _min,_max = API.ent.get.dimensions(_veh)
		if _min ~= nil and _max ~= nil then
			if _size_type then
				msg=msg.."\nL:"..funcs.get.dist_to_str(_max.y+mth.abs(_min.y),"m").."   W:"..funcs.get.dist_to_str(_max.x+mth.abs(_min.x),"m").."   H:"..funcs.get.dist_to_str(_max.z+mth.abs(_min.z),"m")
			else
				msg=msg.."\nL:"..funcs.get.dist_to_str(_max.y+mth.abs(_min.y),"ft").."   W:"..funcs.get.dist_to_str(_max.x+mth.abs(_min.x),"ft").."   H:"..funcs.get.dist_to_str(_max.z+mth.abs(_min.z),"ft")
			end
		end
	end
	if _god or _weap then
		msg=msg.."\n"
		if _god then
			msg=msg.."God: "..string.upper(tostring(API.ent.get.god(_veh)))
		end
		if _weap then
			if _god then
				msg=msg.."  "
			end
			msg=msg.."Weapons: "..string.upper(tostring(ntv.is.veh_have_weap(_veh)))
		end
	end
	if _health then
		if _health_cmbnd then
			msg=msg.."\nVehicle health: "..funcs.get._1_dec(funcs.get.veh_cmbnd_health_prcnt(_veh,true)).."%"
		else
			msg=msg.."\nEngine: "..funcs.get._1_dec(ntv.get.veh_engine_health(_veh,true)).."%".."  Body: "..funcs.get._1_dec(ntv.get.veh_body_health(_veh,true)).."%"
		end
	end
	if _hash or _gtaid then
		msg=msg.."\n"
		if _hash then
			msg=msg.."Hash: "..API.ent.get.model_hash(_veh)
		end
		if _gtaid then
			if _hash then
				msg=msg.."  "
			end
			msg=msg.."Veh# ".._veh
		end
	end
	if _dist and not funcs.ME._in_that_veh(_veh) then
		if _dist_type then
			msg=msg.."\nDistance: "..funcs.get.dist_to_str(funcs.get.dist_me_ent_3d(_veh),"m")
		else
			msg=msg.."\nDistance: "..funcs.get.dist_to_str(funcs.get.dist_me_ent_3d(_veh),"ft")
		end
	end
	if _occpnts then
		local plyrs,plyr_count="",0
		local ped_count=0
		for s = 1, funcs.get.veh_seats(_veh) do
			if funcs.is.ent(API.veh.get.ped_in_seat(_veh, s-2)) then
				if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, s-2)) then
					plyr_count=plyr_count+1
					plyrs=plyrs..funcs.get.pid_name(API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, s-2))).." "
				else
					ped_count=ped_count+1
				end
			end
		end	
		if plyr_count > 0 or ped_count > 0 then	
			msg=msg.."\n"
			if ped_count > 0 then
				msg=msg.."Peds: "..ped_count.."  "
			end
			if plyr_count > 0 then
				msg=msg.."Players: "..plyrs
			end
		end
	end
	g.N_P(2,msg,__GV__,g.tbl.veh_info_entry.scnds.value,"Blue")
end

-----------------------------Driftmod---------------Idk who made this but its one of my favorites -- it was sfinktah and proddy
-----------------------------------------------------------I didnt change a thing on how it works
------------------------------------------------------------------------i just added some options
g.tbl.drift_main = {}

g.tbl.drift_main.feat = menu.add_feature("Driftmod v1.1", "toggle", g.prnt.self_veh_crrnt_drift.id, function(f)
	if funcs.is.GS_loaded() and f.on then
		g.N_P(2,"Driftmod v1.1\nCredit to sfinktah and proddy. I just added some options.\nHold shift/duck to drift",__GV__,7,"Blue")
	end
	local gs_driftMinSpeed,gs_driftMaxAngle = 8.0,50.0
	local ControlVehicleBrake,ControlVehicleSelectNextWeapon = 72,99
	local isDrifting,prevGripState,oldGripState = 0,0,0
	local isDriftFinished,lastDriftAngle = 1,0.0
	local veh,driftKeyPressed,driftAngle,zeroBasedDriftAngle,style
	local function get_driftAngle()
		driftAngle = API.ent.get.heading(veh) - mth.fmod(270.0 + mth.deg(mth.atan(API.ent.get.velocity(veh).y, API.ent.get.velocity(veh).x)), 360.0)
		if driftAngle and lastDriftAngle and driftAngle - lastDriftAngle ~= 180.0 then -- this doesnt seem necessary and works without it
			driftAngle = driftAngle - 360.0
		end
		while (driftAngle < 0.0) do
			driftAngle = driftAngle + 360.0
		end
		while (driftAngle > 360.0) do
			driftAngle = driftAngle - 360.0
		end
	end
	local function get_zeroBasedDriftAngle()
		zeroBasedDriftAngle = 360 - driftAngle
		if zeroBasedDriftAngle > 180 then
			zeroBasedDriftAngle = 0 - (360 - zeroBasedDriftAngle)
		end
	end
	local function driftmod_ontick() 
		local kmh = API.ent.get.speed(veh) * 3.6
		gs_driftMaxAngle = g.tbl.drift_main.angle_feat.value
		style = g.tbl.drift_main.style_feat.value
		if style == 2 then
			vehicle.set_vehicle_reduce_grip(veh, false)
		end
		if not isDrifting and not isDriftFinished then
			isDriftFinished = true
		end
		driftKeyPressed = g.tbl.drift_main.key_pressed()
		if driftKeyPressed then
			if vehicle.get_vehicle_current_gear(veh) > 2 then -- this doesnt seem to change anything but i guess i'll keep it
				vehicle.set_vehicle_current_gear(veh, 2)
				vehicle.set_vehicle_next_gear(veh, 2)
			end
			if (API.cntrl.get.normal(2, ControlVehicleBrake) > 0.1) then
				controls.set_control_normal(0, ControlVehicleBrake, 0)
				local neg = -0.3
				if (controls.is_control_pressed(2, ControlVehicleSelectNextWeapon)) then
					neg = 10
				end
				if (API.veh.is.on_all_wheels(veh) and not API.ent.is.in_air(veh)) then
					API.ent.force(veh,1,0,0,(neg * 1 * API.cntrl.get.normal(2, ControlVehicleBrake)),0,0,0,true,true)
				end
			end 
			get_driftAngle()	
			lastDriftAngle = driftAngle
			get_zeroBasedDriftAngle()
			local done = false
			if ((isDrifting or kmh > gs_driftMinSpeed) and (mth.abs(driftAngle - 360.0) < gs_driftMaxAngle) or (driftAngle < gs_driftMaxAngle)) then
				isDrifting,isDriftFinished = 1,1
				if style ~= 2 and driftKeyPressed and driftKeyPressed ~= oldGripState then
					vehicle.set_vehicle_reduce_grip(veh, driftKeyPressed)
					oldGripState = driftKeyPressed
				end
				done = true
			end
			if not done and kmh < gs_driftMinSpeed then
				if style ~= 2 and driftKeyPressed and driftKeyPressed ~= oldGripState then
					vehicle.set_vehicle_reduce_grip(veh, driftKeyPressed)
					oldGripState = driftKeyPressed
				end
				done = true
			end
			if not done then
				if style ~= 2 and driftKeyPressed == oldGripState then
					vehicle.set_vehicle_reduce_grip(veh, false)
					oldGripState = 0
				end
				if g.tbl.drift_main.style_feat.value ~= 1 and  mth.abs(zeroBasedDriftAngle) > gs_driftMaxAngle then
					vehicle.set_vehicle_steer_bias(veh, mth.rad(zeroBasedDriftAngle * 0.69))
					if zeroBasedDriftAngle > 0 then
						if g.tbl.drift_main.cntr_notif_feat.on then
							g.N_P(2,"Driftmod v1.1 Counter-steering left",__GV__,1,"Blue")
						end
						if g.tbl.drift_main.blnkrs_feat.on then
							vehicle.set_vehicle_indicator_lights(veh, 0, true)
							vehicle.set_vehicle_indicator_lights(veh, 1, false)
						end
					else
						if g.tbl.drift_main.blnkrs_feat.on then
							vehicle.set_vehicle_indicator_lights(veh, 1, true)
							vehicle.set_vehicle_indicator_lights(veh, 0, false)
						end
						if g.tbl.drift_main.cntr_notif_feat.on then
							g.N_P(2,"Driftmod v1.1 Counter-steering right",__GV__,1,"Blue")
						end
					end
				end
			else 
				vehicle.set_vehicle_indicator_lights(veh, 0, false)
				vehicle.set_vehicle_indicator_lights(veh, 1, false)
			end
		end
		if not driftKeyPressed and prevGripState then
			isDrifting,isDriftFinished,lastDriftAngle = 0,0,0
			if style ~= 2 and driftKeyPressed ~= oldGripState then
				vehicle.set_vehicle_reduce_grip(veh, driftKeyPressed)
				oldGripState = driftKeyPressed
			end
		end
		prevGripState = driftKeyPressed
	end
	while f.on do
		system.yield(100)
		if g.tbl.drift_main.key_pressed() and g.tbl.drift_main.good_veh() then
			while f.on and g.tbl.drift_main.key_pressed() and funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id())) and funcs.ntwrk.ask_have(API.plyr.get.veh(API.plyr.my_id())) do
				system.yield(0)
				veh = API.plyr.get.veh(API.plyr.my_id())
				driftmod_ontick()
			end
		elseif funcs.is.veh(veh) then
			vehicle.set_vehicle_indicator_lights(veh, 0, false)
			vehicle.set_vehicle_indicator_lights(veh, 1, false)
			vehicle.set_vehicle_reduce_grip(veh, false)
			veh = nil
		end
	end
end)
funcs.add_to_S_L(g.tbl.drift_main.feat,"g.tbl.drift_main.feat")
-----------------------------------------------------------------------------------------GEE-SKID
------------------------------------------------------------------------------------------Options
------------------------------------------------------------------------------------------Drift_O
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
g.tbl.drift_main.test_bool=false

function g.tbl.drift_main.good_veh()
	
	if funcs.ME._driving(API.plyr.get.veh(API.plyr.my_id())) and not API.ent.is.in_air(API.plyr.get.veh(API.plyr.my_id())) then
		local class = API.veh.get.class(API.plyr.get.veh(API.plyr.my_id()))
		if class ~= 8 and class ~= 14 and class ~= 15 and class ~= 16 and class ~= 21 then --bikes,motorcycles,planes,helos,trains
			return true
		end
	end
	return false
end

function g.tbl.drift_main.key_pressed()
	local ControlVehicleDuck,L_shift,ControlVehicleBrake = 73,209,72
	if g.tbl.drift_main.rvrs_feat.on and (controls.is_control_pressed(2, ControlVehicleBrake) or controls.is_disabled_control_pressed(2, ControlVehicleBrake)) then
		return false
	elseif g.tbl.drift_main.key_feat.value == 0 then
		return (controls.is_control_pressed(2, ControlVehicleDuck) or controls.is_disabled_control_pressed(2, ControlVehicleDuck) or controls.is_control_pressed(0, L_shift) or controls.is_disabled_control_pressed(0, L_shift))
	elseif g.tbl.drift_main.key_feat.value == 1 then
		return (controls.is_control_pressed(0, L_shift) or controls.is_disabled_control_pressed(0, L_shift))
	end
	return (controls.is_control_pressed(2, ControlVehicleDuck) or controls.is_disabled_control_pressed(2, ControlVehicleDuck))
end

g.tbl.drift_main.rec_feat = menu.add_feature("Apply recommended settings?", "action", g.prnt.self_veh_crrnt_drift_optns.id, function()
g.tbl.drift_main.rec_do()
end)

g.tbl.drift_main.style_feat = menu.add_feature("Drift style", "autoaction_value_str", g.prnt.self_veh_crrnt_drift_optns.id, function(f)
	if f.value == 1 then
		g.tbl.drift_main.cntr_notif_test_feat.hidden=true
		g.tbl.drift_main.cntr_notif_feat.hidden=true
		g.tbl.drift_main.blnkrs_feat.hidden=true
	else
		g.tbl.drift_main.cntr_notif_test_feat.hidden=false
		g.tbl.drift_main.cntr_notif_feat.hidden=false
		g.tbl.drift_main.blnkrs_feat.hidden=false
	end
end)
g.tbl.drift_main.style_feat:set_str_data({"Both", "Reduced grip","Counter-steer"})
funcs.add_to_S_L(g.tbl.drift_main.style_feat,"g.tbl.drift_main.style_feat")

g.tbl.drift_main.angle_feat = menu.add_feature("Drift angle", "action_value_i", g.prnt.self_veh_crrnt_drift_optns.id) 
funcs.set_feat_i_f(g.tbl.drift_main.angle_feat,40,70,1,40,"g.tbl.drift_main.angle_feat")

g.tbl.drift_main.key_feat = menu.add_feature("Drift key", "action_value_str", g.prnt.self_veh_crrnt_drift_optns.id)
g.tbl.drift_main.key_feat:set_str_data({"Both", "Left shift","Duck"})
funcs.add_to_S_L(g.tbl.drift_main.key_feat,"g.tbl.drift_main.key_feat")

g.tbl.drift_main.rvrs_feat = menu.add_feature("Ignore reverse/brakes", "toggle", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.add_to_S_L(g.tbl.drift_main.rvrs_feat,"g.tbl.drift_main.rvrs_feat")

g.tbl.drift_main.blnkrs_feat = menu.add_feature("Counter-steer indicator lights", "toggle", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.add_to_S_L(g.tbl.drift_main.blnkrs_feat,"g.tbl.drift_main.blnkrs_feat")

g.tbl.drift_main.cntr_notif_feat = menu.add_feature("Counter-steer notifications", "toggle", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.add_to_S_L(g.tbl.drift_main.cntr_notif_feat,"g.tbl.drift_main.cntr_notif_feat")

g.tbl.drift_main.cntr_notif_test_feat = menu.add_feature("Display counter-steer test notification?", "action", g.prnt.self_veh_crrnt_drift_optns.id, function()
	g.N_P(2,"Driftmod v1.1 counter-steer test notification",__GV__,1,"Blue")
end)

g.tbl.drift_main.overlays_feat = menu.add_feature("Ready/Active overlay", "value_str", g.prnt.self_veh_crrnt_drift_optns.id, function(f)
	g.tbl.drift_main.sett_hide(false)
	local alpha,switch,less,more = g.tbl.drift_main.ovrly_ca.value,false
	local function rand_rgb(_val,_ofst,_bool)
		local _less,_more
		if _val-_ofst < 0 then
			_less = 0
			_more = 0+(2*_ofst)
		elseif _val+_ofst > 255 then
			_less = 255-(2*_ofst)
			_more = 255
		else
			_less = _val-_ofst
			_more = _val +_ofst
		end
		if _bool then
			return mth.rndm(_less,_more)
		end
		return _less,_more
	end
	while f.on do
		system.yield(100)
		while f.on and g.tbl.drift_main.feat.on and g.tbl.drift_main.good_veh() and not g.tbl.drift_main.test_bool do
			system.yield(0)
			if g.tbl.drift_main.key_pressed() and f.value ~= 1 then
				funcs.doo.overlay("DRIFT ACTIVE",rand_rgb(g.tbl.drift_main.ovrly_cr.value,50,true),rand_rgb(g.tbl.drift_main.ovrly_cg.value,50,true),rand_rgb(g.tbl.drift_main.ovrly_cb.value,50,true),g.tbl.drift_main.ovrly_ca.value,(g.tbl.drift_main.ovrly_s.value/300*0.99),g.tbl.drift_main.ovrly_f.value,g.tbl.drift_main.ovrly_x.value/mth.rndm(297,303),g.tbl.drift_main.ovrly_y.value/300)	
			elseif f.value ~= 2 then
				less,more = rand_rgb(g.tbl.drift_main.ovrly_ca.value,25,false)
				if switch then
					alpha = alpha -.25
					if alpha < less then
						switch = false
					end
				else
					alpha = alpha +.25
					if alpha > more then
						switch = true
					end
				end
				funcs.doo.overlay("DriftMod Ready",g.tbl.drift_main.ovrly_cr.value,g.tbl.drift_main.ovrly_cg.value,g.tbl.drift_main.ovrly_cb.value,mth.flr(alpha),g.tbl.drift_main.ovrly_s.value/300,g.tbl.drift_main.ovrly_f.value,g.tbl.drift_main.ovrly_x.value/300,g.tbl.drift_main.ovrly_y.value/300)
			end
		end
	end
	g.tbl.drift_main.sett_hide(true)
end)
g.tbl.drift_main.overlays_feat:set_str_data({"Both", "Driftmod ready","Driftmod active"})
funcs.add_to_S_L(g.tbl.drift_main.overlays_feat,"g.tbl.drift_main.overlays_feat")

g.tbl.drift_main.ovrly_test_feat = menu.add_feature("Display test overlay?", "action", g.prnt.self_veh_crrnt_drift_optns.id, function(f)
	f.hidden=true
	g.tbl.drift_main.test_bool=true
	g.N_P(2,"Driftmod v1.1 test overlay will display for 15 seconds",__GV__,3,"Blue")
	local time = API.util.t_ms() + 15000
	while time > API.util.t_ms() do
		funcs.doo.overlay("DRIFT DRIFT DRIFT",g.tbl.drift_main.ovrly_cr.value,g.tbl.drift_main.ovrly_cg.value,g.tbl.drift_main.ovrly_cb.value,g.tbl.drift_main.ovrly_ca.value,g.tbl.drift_main.ovrly_s.value/300,g.tbl.drift_main.ovrly_f.value,g.tbl.drift_main.ovrly_x.value/300,g.tbl.drift_main.ovrly_y.value/300)
		system.yield(0)
	end
	g.N_P(2,"Driftmod v1.1 test overlay is finished",__GV__,3,"Blue")
	g.tbl.drift_main.test_bool=false
	f.hidden=false
end)

g.tbl.drift_main.ovrly_x = menu.add_feature("X Pos", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_x,0,300,1,1,"g.tbl.drift_main.ovrly_x")

g.tbl.drift_main.ovrly_y = menu.add_feature("Y Pos", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_y,0,300,1,1,"g.tbl.drift_main.ovrly_y")

g.tbl.drift_main.ovrly_s = menu.add_feature("Scale", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_s,75,300,1,1,"g.tbl.drift_main.ovrly_s")

g.tbl.drift_main.ovrly_f = menu.add_feature("Font", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_f,0,9,1,1,"g.tbl.drift_main.ovrly_f")

g.tbl.drift_main.ovrly_cr = menu.add_feature("Red", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_cr,0,255,5,0,"g.tbl.drift_main.ovrly_cr")

g.tbl.drift_main.ovrly_cg = menu.add_feature("Green", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_cg,0,255,5,0,"g.tbl.drift_main.ovrly_cg")

g.tbl.drift_main.ovrly_cb = menu.add_feature("Blue", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_cb,0,255,5,0,"g.tbl.drift_main.ovrly_cb")

g.tbl.drift_main.ovrly_ca = menu.add_feature("Alpha", "action_slider", g.prnt.self_veh_crrnt_drift_optns.id)
funcs.set_feat_i_f(g.tbl.drift_main.ovrly_ca,0,255,5,0,"g.tbl.drift_main.ovrly_ca")

function g.tbl.drift_main.rec_do()
	g.tbl.drift_main.overlays_feat.on=true
	g.tbl.drift_main.overlays_feat.value=0
	g.tbl.drift_main.cntr_notif_feat.on=true
	g.tbl.drift_main.blnkrs_feat.on=true
	g.tbl.drift_main.rvrs_feat.on=true
	g.tbl.drift_main.style_feat.value=0
	g.tbl.drift_main.angle_feat.value=50
	g.tbl.drift_main.ovrly_x.value=26.0
	g.tbl.drift_main.ovrly_y.value=293.0
	g.tbl.drift_main.ovrly_s.value=120.0
	g.tbl.drift_main.ovrly_f.value=0.0
	g.tbl.drift_main.ovrly_cr.value=0.0
	g.tbl.drift_main.ovrly_cg.value=255.0
	g.tbl.drift_main.ovrly_cb.value=0.0
	g.tbl.drift_main.ovrly_ca.value=105.0
end
g.tbl.drift_main.rec_do()

function g.tbl.drift_main.sett_hide(_bool)
	g.tbl.drift_main.ovrly_test_feat.hidden=_bool
	g.tbl.drift_main.ovrly_x.hidden=_bool
	g.tbl.drift_main.ovrly_y.hidden=_bool
	g.tbl.drift_main.ovrly_s.hidden=_bool
	g.tbl.drift_main.ovrly_f.hidden=_bool
	g.tbl.drift_main.ovrly_cr.hidden=_bool
	g.tbl.drift_main.ovrly_cg.hidden=_bool
	g.tbl.drift_main.ovrly_cb.hidden=_bool
	g.tbl.drift_main.ovrly_ca.hidden=_bool
end

g._mods_detex_notify=menu.add_feature("Notify when marked","toggle",g.prnt.utils_mod_dtx.id)
funcs.add_to_S_L(g._mods_detex_notify,"g._mods_detex_notify")
g._mods_detex_notify.on=true

g._mods_detex_otr_tog=menu.add_feature("Off-the-radar > 3 Min","toggle",g.prnt.utils_mod_dtx.id)
funcs.add_to_S_L(g._mods_detex_otr_tog,"g._mods_detex_otr_tog")
g._mods_detex_otr_tog.on=true

g._mods_detex_kd_tog=menu.add_feature("K/D above:","value_f", g.prnt.utils_mod_dtx.id)
funcs.set_feat_i_f(g._mods_detex_kd_tog,3.0,10.0,0.1,5.0,"g._mods_detex_kd_tog")
g._mods_detex_kd_tog.on=true

g._mods_detex_kd_neg_tog=menu.add_feature("Negative K/D","toggle",g.prnt.utils_mod_dtx.id)
funcs.add_to_S_L(g._mods_detex_kd_neg_tog,"g._mods_detex_kd_neg_tog")
g._mods_detex_kd_neg_tog.on=true

g._mods_detex_money_tog=menu.add_feature("Money above:","value_str", g.prnt.utils_mod_dtx.id)
g._mods_detex_money_tog:set_str_data({"500 Million","750 million","1 Billion","1.25 Billion","1.5 Billion","1.75 Billion","2 Billion"})
funcs.add_to_S_L(g._mods_detex_money_tog,"g._mods_detex_money_tog")
g._mods_detex_money_tog.value=2
g._mods_detex_money_tog.on=true

g._mods_detex_rank_tog=menu.add_feature("Rank above:","value_i", g.prnt.utils_mod_dtx.id)
funcs.set_feat_i_f(g._mods_detex_rank_tog,500,7000,50,1000,"g._mods_detex_rank_tog")
g._mods_detex_rank_tog.on=true

g._mods_detex_god_shoot_tog=menu.add_feature("God-mode","toggle",g.prnt.utils_mod_dtx.id, function(f)
	while not g.var.GS_has_loaded do
		system.yield(500)
	end
	while f.on do
		system.yield(25)
		for i=0,31 do
			if funcs.is.valid_pid(i) and player.can_player_be_modder(i) and not API.plyr.is.modder(i,mddrs.god_flag) then
				if funcs.is.pid_god_check(i) then
					player.set_player_as_modder(i, mddrs.god_flag)
					if g._mods_detex_notify.on then
						g.N_P(2,funcs.get.pid_name(i).."\nGod-mode.\n --Marking as Modder--",__GV__,7,"Yellow")
					end
				end
				system.yield(25)
			end
		end
	end
end)
funcs.add_to_S_L(g._mods_detex_god_shoot_tog,"g._mods_detex_god_shoot_tog")
g._mods_detex_god_shoot_tog.on=true

function funcs.is.pid_god_check(_pid)
	if g.tbl.PID_INFO.plyr_god[_pid+1] and not g.tbl.PID_INFO.loading[_pid+1] and not g.tbl.PID_INFO.interior[_pid+1] and (API.ent.get.speed(API.plyr.get.ped(_pid)) > 3 or g.tbl.PID_INFO.plyr_moving[_pid+1]) then
		if funcs.is.pid_god_check_params(_pid) then
			return true
		end
	end
	return false
end

function funcs.is.pid_god_check_params(_pid)
	local function veh_dist_check(_pid)
		if not g.tbl.PID_INFO.in_veh[_pid+1] and g.tbl.PID_OSD.dist_table[_pid+1][1] > 250 then
			return false
		elseif g.tbl.PID_INFO.in_veh[_pid+1] and (funcs.is.this_veh(g.tbl.PID_INFO.veh[_pid+1],"minitank") or funcs.is.this_veh(g.tbl.PID_INFO.veh[_pid+1],"rcbandito")) then
			return false
		end
		return true
	end
	local function god(_pid)
		if g.tbl.PID_INFO.plyr_god[_pid+1] and not g.tbl.PID_INFO.loading[_pid+1] and not g.tbl.PID_INFO.interior[_pid+1] then
			return true
		end
		return false
	end
	local function moving(_pid)
		if (API.ent.get.speed(API.plyr.get.ped(_pid)) > 3 or g.tbl.PID_INFO.plyr_moving[_pid+1]) then
			return true
		end
		return false
	end
	system.yield(1000)
	for i=1,50 do
		system.yield(100)
		if not funcs.is.valid_pid(_pid) or not god(_pid) or not veh_dist_check(_pid) or not moving(_pid) then
			return false
		elseif API.Ped.is.shooting(API.plyr.get.ped(_pid)) then
			return true
		end
	end
	return (funcs.is.valid_pid(_pid) and god(_pid))
end

g._mods_detex_undead_tog=menu.add_feature("Un-Dead","toggle",g.prnt.utils_mod_dtx.id)
funcs.add_to_S_L(g._mods_detex_undead_tog,"g._mods_detex_undead_tog")
g._mods_detex_undead_tog.on=true

g.tbl.veh_grief_protex={}
g.tbl.veh_grief_protex.STR ={"Kick from veh",	 "Destroy","Freeze","TP away",		"Fuck their veh","Random force", "Launch"}
g.tbl.veh_grief_protex.A = 	{"kick_pid_from_veh","destroy","freeze","tp",	  		"fucked",		 "random_force", "float"}
g.tbl.veh_grief_protex.V = 	{[0]=pid,					   [2]=0,   [3]="anywhere",					 [5]=25,		 [6]=500}
g.tbl.veh_grief_protex.msg = {}
for i=1,#g.tbl.veh_grief_protex.STR do
	g.tbl.veh_grief_protex.msg[g.tbl.veh_grief_protex.A[i]]=g.tbl.veh_grief_protex.STR[i]
end

g._VehProtexFeat=menu.add_feature("Vehicle grief", "toggle", g.prnt.utils_prtx_veh_grf.id, function(f,pid)
	local pid_history = {}
	local action,val
	local function should_grief(_pid)
		if pid_history[_pid]==nil then
			pid_history[_pid]={TIME = API.util.t_ms()-1, FAILS = 0}
		end
		if not API.plyr.is.valid(_pid) or not API.plyr.is.in_veh(_pid) or not g.tbl.veh_grief_protex[API.ent.get.model_hash(API.plyr.get.veh(_pid))] or API.ent.is.dead(API.plyr.get.veh(_pid)) then
			pid_history[_pid]={TIME = API.util.t_ms(), FAILS = 0}
			return false
		elseif pid_history[_pid].TIME > API.util.t_ms() or API.plyr.my_id() == _pid then
			pid_history[_pid]={TIME = API.util.t_ms()+1500, FAILS = 0}
			return false
		elseif g._VehProtexPlyrs.value == 2 then
			return true
		elseif API.plyr.is.friend(_pid) then
			pid_history[_pid]={TIME = API.util.t_ms()+1500, FAILS = 0}
			return false
		elseif g._VehProtexPlyrs.value == 0 and	funcs.is.same_orgmc(_pid,API.plyr.my_id()) then
			pid_history[_pid]={TIME = API.util.t_ms()+1500, FAILS = 0}
			return false
		end
		return true
	end
	while f.on do
		for pid=0,31 do
			if f.on then
				if should_grief(pid) then
					action = g.tbl.veh_grief_protex[API.ent.get.model_hash(API.plyr.get.veh(pid))].A
					if action ~= "tp" or funcs.get.dist_me_pid_3d(pid) < 500 then
						if action == "kick_pid_from_veh" then
							val = pid
						else
							val =  g.tbl.veh_grief_protex[API.ent.get.model_hash(API.plyr.get.veh(pid))].V
						end
						if funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,action,val) then
							pid_history[pid]={TIME = API.util.t_ms()+2500, FAILS = 0}
						else
							pid_history[pid].TIME= API.util.t_ms() + pid_history[pid].FAILS
							if pid_history[pid].FAILS == 0 then
								g.N_P(2,funcs.get.pid_name(pid).."\n"..g.tbl.veh_grief_protex.msg[action].." FAILED :(",__GV__,5,"Red")
							end
							pid_history[pid].FAILS=pid_history[pid].FAILS+1500
						end
					else
						pid_history[pid]={TIME = API.util.t_ms()+2500, FAILS = 0}
					end
				end
				system.yield(10)
			end
		end
		funcs.doo.yield_while_true(f.on,1000)
	end
end)
funcs.add_to_S_L(g._VehProtexFeat,"g._VehProtexFeat")

g._VehProtexPlyrs=menu.add_feature("Players for grief", "action_value_str", g.prnt.utils_prtx_veh_grf.id)
g._VehProtexPlyrs:set_str_data({"Not Friends/Org/MC","Not Friends","Anyone"})
funcs.add_to_S_L(g._VehProtexPlyrs,"g._VehProtexPlyrs")

g._VehProtexSetAll=menu.add_feature("Set all to:", "action_value_str", g.prnt.utils_prtx_veh_grf.id,function(f)
	for i=1,#g.tbl.veh_grief_feat_list do
		g.tbl.veh_grief_feat_list[i].value=f.value
	end
	g._VehProtexRamp.value=f.value
	g._VehProtexAvng.value=f.value
end)
g._VehProtexSetAll:set_str_data(g.tbl.veh_grief_protex.STR)
funcs.add_to_S_L(g._VehProtexSetAll,"g._VehProtexSetAll")

g._VehProtexTogAll=menu.add_feature("Toggle all", "toggle", g.prnt.utils_prtx_veh_grf.id,function(f)
	for i=1,#g.tbl.veh_grief_feat_list do
		g.tbl.veh_grief_feat_list[i].on=f.on
	end
	g._VehProtexRamp.on=f.on
	g._VehProtexAvng.on=f.on
end)
funcs.add_to_S_L(g._VehProtexTogAll,"g._VehProtexTogAll")

function funcs.doo.sssn_veh_grief_set(_bool,_hash,_f_val)
	if _bool then
		g.tbl.veh_grief_protex[_hash]={
			A = g.tbl.veh_grief_protex.A[_f_val+1],
			V = g.tbl.veh_grief_protex.V[_f_val]
		}
	else
		g.tbl.veh_grief_protex[_hash]=false
	end

end
	
g._VehProtexAvng=menu.add_feature("Avenger", "value_str", g.prnt.utils_prtx_veh_grf.id,function(f)
	funcs.doo.sssn_veh_grief_set(f.on,API.get_hash_key("avenger"),f.value)
	funcs.doo.sssn_veh_grief_set(f.on,API.get_hash_key("avenger2"),f.value)
end)
g._VehProtexAvng:set_str_data(g.tbl.veh_grief_protex.STR)
funcs.add_to_S_L(g._VehProtexAvng,"g._VehProtexAvng")

g.tbl.veh_grief_feat_list={}
for i=1,#veh_stuff.grief-2 do
	if i ~= 1 and i ~= 2 then
		g.tbl.veh_grief_feat_list[#g.tbl.veh_grief_feat_list+1]=menu.add_feature(veh_stuff.grief[i][3], "value_str", g.prnt.utils_prtx_veh_grf.id,function(f) 
			funcs.doo.sssn_veh_grief_set(f.on,veh_stuff.grief[i][1],f.value)
		end)
		g.tbl.veh_grief_feat_list[#g.tbl.veh_grief_feat_list]:set_str_data(g.tbl.veh_grief_protex.STR)
	end
end

g._VehProtexRamp=menu.add_feature("Ramp Buggy", "value_str", g.prnt.utils_prtx_veh_grf.id,function(f)
	funcs.doo.sssn_veh_grief_set(f.on,API.get_hash_key("dune4"),f.value)
	funcs.doo.sssn_veh_grief_set(f.on,API.get_hash_key("dune5"),f.value)
end)
g._VehProtexRamp:set_str_data(g.tbl.veh_grief_protex.STR)
funcs.add_to_S_L(g._VehProtexRamp,"g._VehProtexRamp")


g.tbl.aim_grief={}
g.tbl.aim_grief.feats={}
g.tbl.aim_grief.main=menu.add_feature("Aim response grief", "value_str", g.prnt.utils_prtx_aim.id, function(f)
	g.tbl.aim_grief.pid={}
	local function should_grief(_pid)
		if not API.plyr.is.valid(_pid) then
			g.tbl.aim_grief.pid[_pid]=false
			return false
		elseif g.tbl.aim_grief.pid[_pid] then
			return false
		elseif f.value == 2 then
			return true
		elseif API.plyr.is.friend(_pid) then
			return false
		elseif f.value == 0 and	funcs.is.same_orgmc(_pid,API.plyr.my_id()) then
			return false
		end
		return true
	end
	while f.on do
		for pid=0,31 do
			if should_grief(pid) and API.plyr.get.aim_at(pid) == funcs.ME._ped() then
				g.tbl.aim_grief.pid[pid]=true
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local _pid = pid
					local _weap,_weap_once = API.Ped.get.weapon(API.plyr.get.ped(_pid)),false
					local til_death,dead,bitch,helo
					local time = API.util.t_ms() + 3000
					while API.plyr.is.valid(_pid) and not dead and time > API.util.t_ms() do
						local distance,head,pos = funcs.get.plyr_moving_pos(_pid)
						pos = funcs.get.front_of_pos(pos,head,distance,180,0.25)
						if g.tbl.aim_grief.feats.kick.on and funcs.doo.kick_plyr(_pid) then
							time = API.util.t_ms()
						else
							if g.tbl.aim_grief.feats.weap.on then
								if not _weap_once then
									_weap_once=true
									if g.tbl.aim_grief.feats.weap.value == 0 then
										API.wpn.ped_remove(API.plyr.get.ped(_pid), _weap)
									else
										menu.get_feature_by_hierarchy_key("online.online_players.player_".._pid..".weapons.remove_all_weapons"):toggle()
									end
								elseif not til_death then
									g.N_P(2,funcs.get.pid_name(_pid).."\nWeapon(s) removed :)",__GV__,5,"Green")
									time = API.util.t_ms()
								end
							end
							if g.tbl.aim_grief.feats.burn.on then
								til_death=true
								fire.add_explosion(pos, 3, true, false, 0, _pid)
							end
							if g.tbl.aim_grief.feats.boom.on then
								til_death=true
								fire.add_explosion(pos, 2, true, false, 0, _pid)
							end
							if g.tbl.aim_grief.feats.bitch.on and not funcs.is.ent(bitch) then
								til_death=true
								funcs.doo.req_model(API.get_hash_key("a_f_m_fatcult_01"))
								bitch=funcs.doo.spawn_ped_angry(pos+v3(1,1,0),API.get_hash_key("a_f_m_fatcult_01"),API.get_hash_key("weapon_machinepistol"),API.get_hash_key("weapon_gusenberg"),_pid,nil)
								system.yield(0)
								if funcs.is.ent(bitch) then
									funcs.doo.set_ped_health(bitch,2500,50)
									funcs.doo.ped_attack_ped_thread(bitch,API.plyr.get.ped(_pid),true,true)
								end
							end
							if g.tbl.aim_grief.feats.helo.on and not funcs.is.ent(helo) then
								til_death=true
								funcs.doo.req_model(1229411063)
								helo = funcs.doo.spawn_veh(pos+v3(0,0,30),1229411063)
								system.yield(0)
								if funcs.is.ent(helo) then
									g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
										local _helo,__pid = helo,_pid
										API.veh.set.engine_health(_helo, -4000)
										ntv.set.veh_body_health(_helo,0)
										API.veh.set.out_of_control(_helo, false, true)
										funcs.doo.ent_seek_pid(_helo,__pid,60)
										funcs.doo.remove_ent(_helo,1000)
									end)
								end
							end
						end
						system.yield(250)
						dead=(til_death and API.plyr.is.valid(_pid) and API.ent.is.dead(API.plyr.get.ped(_pid)))
						if dead then
							g.N_P(2,funcs.get.pid_name(_pid).."\nMurdered :)",__GV__,5,"Green")
						end
					end
					g.tbl.aim_grief.pid[_pid]=false
				end)
			end
		end
		system.yield(25)
	end			
end)
g.tbl.aim_grief.main:set_str_data({"Not Friends/Org/MC","Not Friends","Anyone"})
funcs.add_to_S_L(g.tbl.aim_grief.main,"g.tbl.aim_grief.main")

function g.tbl.aim_grief.tog(_bool,_feat1,_feat2)
	if _bool then
		local found = false
		for _, feat in pairs(g.tbl.aim_grief.feats) do
			if feat ~= _feat1 and feat.on then
				found = true
			end
		end
		if not found then
			_feat2.on = true
		end
	end
end

g.tbl.aim_grief.feats.boom=menu.add_feature("Explode player","toggle",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.boom,g.tbl.aim_grief.feats.burn)
end)
funcs.add_to_S_L(g.tbl.aim_grief.feats.boom,"g.tbl.aim_grief.feats.boom")

g.tbl.aim_grief.feats.burn=menu.add_feature("Burn player","toggle",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.burn,g.tbl.aim_grief.feats.helo)
end)
funcs.add_to_S_L(g.tbl.aim_grief.feats.burn,"g.tbl.aim_grief.feats.burn")

g.tbl.aim_grief.feats.helo=menu.add_feature("Drop sparrow on player","toggle",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.helo,g.tbl.aim_grief.feats.bitch)
end)
funcs.add_to_S_L(g.tbl.aim_grief.feats.helo,"g.tbl.aim_grief.feats.helo")

g.tbl.aim_grief.feats.bitch=menu.add_feature("Spawn angry fat bitch on player","toggle",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.bitch,g.tbl.aim_grief.feats.weap)
end)
funcs.add_to_S_L(g.tbl.aim_grief.feats.bitch,"g.tbl.aim_grief.feats.bitch")

g.tbl.aim_grief.feats.weap=menu.add_feature("Remove weapons","value_str",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.weap,g.tbl.aim_grief.feats.kick)
end)
g.tbl.aim_grief.feats.weap:set_str_data({"Current weapon", "All weapons"})
funcs.add_to_S_L(g.tbl.aim_grief.feats.weap,"g.tbl.aim_grief.feats.weap")
	
g.tbl.aim_grief.feats.kick=menu.add_feature("Kick player","toggle",g.prnt.utils_prtx_aim.id,function(f)
	g.tbl.aim_grief.tog(not f.on,g.tbl.aim_grief.feats.kick,g.tbl.aim_grief.feats.boom)
end)
funcs.add_to_S_L(g.tbl.aim_grief.feats.kick,"g.tbl.aim_grief.feats.kick")

g.tbl.aim_grief.feats.boom.on=true




menu.add_feature("Kick all modders only","action",g.prnt.sssn_kicks.id, function()
funcs.doo.sssn_pids_kick("kick",true)
end)

menu.add_feature("Kick selected players below","action",g.prnt.sssn_kicks.id, function()
funcs.doo.sssn_pids_kick("kick")
end)

menu.add_feature("Show selected players below","action",g.prnt.sssn_kicks.id, function()
funcs.doo.sssn_pids_kick("list")
end)

g._kick_plyr_same_orgmc=menu.add_feature("My org/mc","toggle",g.prnt.sssn_kicks.id, function(f)
	if not f.on and not g._kick_plyr_my_friend.on and not g._kick_plyr_mddr.on and not g._kick_plyr_others.on then
		g._kick_plyr_my_friend.on=true
	end
end)
funcs.add_to_S_L(g._kick_plyr_same_orgmc,"g._kick_plyr_same_orgmc")

g._kick_plyr_my_friend=menu.add_feature("My friends","toggle",g.prnt.sssn_kicks.id, function(f)
	if not f.on and not g._kick_plyr_same_orgmc.on and not g._kick_plyr_mddr.on and not g._kick_plyr_others.on then
		g._kick_plyr_mddr.on=true
	end
end)
funcs.add_to_S_L(g._kick_plyr_my_friend,"g._kick_plyr_my_friend")

g._kick_plyr_mddr=menu.add_feature("Modders","toggle",g.prnt.sssn_kicks.id, function(f)
	if not f.on and not g._kick_plyr_my_friend.on and not g._kick_plyr_same_orgmc.on and not g._kick_plyr_others.on then
		g._kick_plyr_others.on=true
	end
end)
funcs.add_to_S_L(g._kick_plyr_mddr,"g._kick_plyr_mddr")

g._kick_plyr_others=menu.add_feature("All other players","toggle",g.prnt.sssn_kicks.id, function(f)
	if not f.on and not g._kick_plyr_my_friend.on and not g._kick_plyr_mddr.on and not g._kick_plyr_same_orgmc.on then
		g._kick_plyr_same_orgmc.on=true
	end
end)
funcs.add_to_S_L(g._kick_plyr_others,"g._kick_plyr_others")
g._kick_plyr_others.on=true

g._kick_plyr_dist=menu.add_feature("Only within distance","value_i",g.prnt.sssn_kicks.id)
funcs.set_feat_i_f(g._kick_plyr_dist,15,1000,15,300,"g._kick_plyr_dist")

function funcs.doo.sssn_pids_kick(_type,_modder)
	local me=API.plyr.my_id()
	local kick_table = {}
	local function should_kick(_pid)
		if _modder then
			return API.plyr.is.modder(_pid,-1)
		elseif API.plyr.is.friend(_pid) then
			if funcs.is.same_orgmc(me,_pid) and not g._kick_plyr_same_orgmc.on then
				return false
			elseif API.plyr.is.modder(_pid,-1) and not g._kick_plyr_mddr.on then
				return false
			end
			return g._kick_plyr_my_friend.on
		elseif funcs.is.same_orgmc(me,_pid) then
			if API.plyr.is.modder(_pid,-1) and not g._kick_plyr_mddr.on then
				return false
			end
			return g._kick_plyr_same_orgmc.on
		elseif API.plyr.is.modder(_pid,-1) then
			return g._kick_plyr_mddr.on	
		end
		return g._kick_plyr_others.on
	end
	for pid=0,31 do
		if API.plyr.is.valid(pid) and pid ~= me and should_kick(pid) then
			if _modder or (not g._kick_plyr_dist.on) or (funcs.get.dist_me_pid_3d(pid) < g._kick_plyr_dist.value) then
				kick_table[#kick_table+1]=pid
			end
		end
	end
	if #kick_table == 0 then
		g.N_P(2,"No available players to kick.",__GV__,4,"Blue")
	elseif _type == "list" then
		local message = #kick_table.." player(s) to kick: "
		for i=1,#kick_table do
			message=message..funcs.get.pid_name(kick_table[i])
			if kick_table[i+1] ~= nil then
				message=message..",  "
			end
		end
		g.N_P(2,message,__GV__,7,"Blue")
	elseif _type == "kick" then 
		for i=1,#kick_table do
			funcs.doo.kick_plyr(kick_table[i])
		end
	end
end



g.print_load_info("Main file contents",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)-------------------------------------------MAIN ENDS
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------UTILS START


g.tbl.RADAR = {}
g.tbl.RADAR.loaded=false
g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	local radartime = API.util.t_ms()
	g.tbl.RADAR.circle1 = scriptdraw.register_sprite(g.paths._radar.."radar_circle1.png")
	system.yield(0)
	g.tbl.RADAR.circle2 = scriptdraw.register_sprite(g.paths._radar.."radar_circle2.png")
	system.yield(0)
	g.tbl.RADAR.dead_x = scriptdraw.register_sprite(g.paths._radar.."dead_x.png")
	system.yield(0)
	g.tbl.RADAR.ring1 = scriptdraw.register_sprite(g.paths._radar.."ring_white1.png")
	system.yield(0)
	g.tbl.RADAR.ring2 = scriptdraw.register_sprite(g.paths._radar.."ring_white2.png")
	system.yield(0)
	g.tbl.RADAR.ring3 = scriptdraw.register_sprite(g.paths._radar.."ring_white3.png")
	system.yield(0)
	g.tbl.RADAR.ring4 = scriptdraw.register_sprite(g.paths._radar.."ring_white4.png")
	system.yield(0)
	g.tbl.RADAR.arrow3 = scriptdraw.register_sprite(g.paths._radar.."radar_arrow3.png")
	system.yield(0)
	g.tbl.RADAR.waypoint = scriptdraw.register_sprite(g.paths._radar.."waypoint.png")
	system.yield(0)
	g.tbl.RADAR.boom = scriptdraw.register_sprite(g.paths._radar.."boom.png")
	g.tbl.RADAR.loaded=true
	g.print_load_info("2T1 Radar 2.0 Images",(API.util.t_ms()-radartime),debug.getinfo(1).currentline,true)
end)
g.tbl.RADAR.ents = {}
g.tbl.RADAR.ped_colors = {}
g.tbl.RADAR.wp_true = false
g.tbl.RADAR.wp_pos = v2(10000,10000)
g.tbl.RADAR.wp_dist = 10000

function g.tbl.RADAR.ents_default(i)
	g.tbl.RADAR.ents[i]={PLYR = false,PID=-1,PED=false,DIST = 10000,FRND=false,COLR=0,DEAD = false,D_TIME=API.util.t_ms(),SHOOT=API.util.t_ms(),ALPHA=255}
end

function g.tbl.RADAR.pos(_pos,_dist)
	_pos = funcs.get.front_of_pos(API.plyr.get.coords(API.plyr.my_id()),funcs.get.vctr_to_pos_z2(_pos,API.plyr.get.coords(API.plyr.my_id()))+API.cam.get.rot().z*-1,_dist, 0, 0)
	_pos.x = (API.plyr.get.coords(API.plyr.my_id()).x-_pos.x)/g.tbl.RADAR.range.value
	_pos.y = (API.plyr.get.coords(API.plyr.my_id()).y-_pos.y)/g.tbl.RADAR.range.value
	return v2((g.tbl.RADAR.x.value+(_pos.x*g.tbl.RADAR.r_size.value*0.124*g.tbl.RADAR.xT.value*g.RES_W)),(g.tbl.RADAR.y.value+(_pos.y*g.tbl.RADAR.r_size.value*0.22*g.tbl.RADAR.yT.value*g.RES_H)))
end

-- function g.tbl.RADAR.my_cam_pos(_pos)
	-- _pos = funcs.get.front_of_pos(_pos, funcs.get.vctr_to_pos_z2(API.plyr.get.coords(API.plyr.my_id()),_pos)+API.cam.get.rot().z*-1,
	-- mth.abs(v2(API.cam.get.pos().x,API.cam.get.pos().y):magnitude(v2(API.plyr.get.coords(API.plyr.my_id()).x,API.plyr.get.coords(API.plyr.my_id()).y))), 0, 0)
	-- _pos.x = (API.cam.get.pos().x-_pos.x)/g.tbl.RADAR.range.value
	-- _pos.y = (API.cam.get.pos().y-_pos.y)/g.tbl.RADAR.range.value
	-- return v2((g.tbl.RADAR.x.value+(_pos.x*g.tbl.RADAR.r_size.value*0.124*g.tbl.RADAR.xT.value)),(g.tbl.RADAR.y.value+(_pos.y*g.tbl.RADAR.r_size.value*0.22*g.tbl.RADAR.yT.value)))
-- end



function g.tbl.RADAR.head(PID)
	return funcs.get.sprt_rot_calc(API.plyr.get.heading(PID)+API.cam.get.rot().z*-1)
end

function g.tbl.RADAR.head2(_PED)
	return funcs.get.sprt_rot_calc(API.ent.get.heading(_PED)+API.cam.get.rot().z*-1)
end

function g.tbl.RADAR.dead_chk(_PED)
	if g.tbl.RADAR.ents[_PED+1].DEAD then	
		return (g.tbl.RADAR.ents[_PED+1].D_TIME > API.util.t_ms())
	end
	return true
end

g.tbl.RADAR.feat=menu.add_feature("Show radar", "toggle", g.prnt.utils_info_radar.id, function(f)
	funcs.doo.yield_while_true(not g.tbl.RADAR.loaded,2000)
	local flip_time,flip,_r,_g,_b,rings,ring_size,ring_f,ring_color,all_peds,_PED,_PID = API.util.t_ms()+669,true
	local grey,white,rdr_plyr_name_size = funcs.get.rgb_to_int(100,100,100,255),funcs.get.rgb_to_int(255,255,255,255)
	local function show_self(_bool)
		if g.tbl.RADAR.self.on and flip == _bool then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.my_id()+1)
			if API.Ped.is.shooting(API.plyr.get.ped(API.plyr.my_id())) then
				API.SD.draw_sprt(g.tbl.RADAR.boom,v2(g.tbl.RADAR.x.value,g.tbl.RADAR.y.value),g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*.1*.25*g.RES,g.tbl.RADAR.head(API.plyr.my_id()),funcs.get.rgb_to_int(255,255,255,g.tbl.RADAR.s_a.value))
			end
			API.SD.draw_sprt(g.tbl.RADAR.arrow3,v2(g.tbl.RADAR.x.value,g.tbl.RADAR.y.value),g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*0.1*g.RES,g.tbl.RADAR.head(API.plyr.my_id()),funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.s_a.value))
			--API.SD.draw_sprt(g.tbl.RADAR.arrow3,g.tbl.RADAR.my_cam_pos(API.cam.get.pos()),g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*0.1,g.tbl.RADAR.head(API.plyr.my_id()),funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.s_a.value))
		end
	end
	local function show_wp(_bool)
		if g.tbl.RADAR.wp_true and flip == _bool then
			if glbls.is_mission_active(API.plyr.my_id()) and g.tbl.PID_INFO.color[API.plyr.my_id()+1] > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.my_id()+1) else _r,_g,_b = 164, 76, 242 end
			API.SD.draw_sprt(g.tbl.RADAR.waypoint,g.tbl.RADAR.pos(g.tbl.RADAR.wp_pos,g.tbl.RADAR.wp_dist),g.tbl.RADAR.r_size.value*g.tbl.RADAR.wp_size.value*1.5*g.RES,0,funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.wp_a.value))
		end
	end
	local function show_pers(_bool)
		if g.tbl.RADAR.pers_true and flip == _bool then
			if g.tbl.PID_INFO.color[API.plyr.my_id()+1] > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.my_id()+1) else _r,_g,_b = 255, 255, 255 end
			API.SD.draw_sprt(g.tbl.RADAR.pers_blip,g.tbl.RADAR.pos(g.tbl.RADAR.pers_pos,g.tbl.RADAR.pers_dist),g.tbl.RADAR.r_size.value*g.tbl.RADAR.veh_size.value*1.5*g.RES,g.tbl.RADAR.pers_rot,funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.veh_a.value))
		end
	end
	local function show_veh(_bool)
		if g.tbl.RADAR.veh_true and flip == _bool then
			if g.tbl.PID_INFO.color[API.plyr.my_id()+1] > -1 then
			_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.my_id()+1) else _r,_g,_b = 255, 255, 255 end
			API.SD.draw_sprt(g.tbl.RADAR.veh_blip,g.tbl.RADAR.pos(g.tbl.RADAR.veh_pos,g.tbl.RADAR.veh_dist),g.tbl.RADAR.r_size.value*g.tbl.RADAR.veh_size.value*1.5*g.RES,g.tbl.RADAR.veh_rot,funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.veh_a.value))
		end
	end
	local function get_ring()
		if ring_size >= 0.75 then
			return g.tbl.RADAR.ring1
		elseif ring_size >= 0.5 then
			return g.tbl.RADAR.ring2
		elseif ring_size >= 0.25 then
			return g.tbl.RADAR.ring3
		end
		return g.tbl.RADAR.ring4
	end
	while f.on do
		g.tbl.RADAR.info.on=f.on
		system.yield(5)
		rdr_plyr_name_size = g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*g.tbl.RADAR.name_s.value*g.RES
		if API.util.t_ms() > flip_time then
			flip = funcs.get.opp_bool(flip)
			flip_time = API.util.t_ms()+669
		end
		API.SD.draw_sprt(g.tbl.RADAR.circle1,v2(g.tbl.RADAR.x.value,g.tbl.RADAR.y.value),g.tbl.RADAR.r_size.value*.25*g.RES,0,funcs.get.rgb_to_int(g.tbl.RADAR.r.value,g.tbl.RADAR.g.value,g.tbl.RADAR.b.value,g.tbl.RADAR.a.value))
		if g.tbl.RADAR.rings_show.on then
			rings = mth.flr(g.tbl.RADAR.range.value/g.tbl.RADAR.rings_rng.value)
			if rings > 0 then
				ring_size = g.tbl.RADAR.rings_rng.value/g.tbl.RADAR.range.value
				ring_f = ring_size
				if g.tbl.RADAR.rings_opp_color.on then
					ring_color = funcs.get.rgb_to_int((255-g.tbl.RADAR.r.value),(255-g.tbl.RADAR.g.value),(255-g.tbl.RADAR.b.value),g.tbl.RADAR.r_a.value)
				else
					ring_color = funcs.get.rgb_to_int(g.tbl.RADAR.r_r.value,g.tbl.RADAR.r_g.value,g.tbl.RADAR.r_b.value,g.tbl.RADAR.r_a.value)
				end
				for i=1,rings do
					API.SD.draw_sprt(get_ring(),v2(g.tbl.RADAR.x.value,g.tbl.RADAR.y.value),g.tbl.RADAR.r_size.value*.25*ring_size*g.RES,0,ring_color)
					ring_size=ring_size+ring_f
				end
			end
		end
		show_self(true)
		show_wp(true)
		show_pers(false)
		show_veh(false)
		all_peds = API.Ped.get.all()
		for i=1,#all_peds do
			_PED = all_peds[i]
			if g.tbl.RADAR.ents[_PED+1] ~= nil and funcs.is.ent(_PED) then
				if API.Ped.is.shooting(_PED) then
					g.tbl.RADAR.ents[_PED+1].SHOOT = API.util.t_ms() + 100
				end
				if g.tbl.RADAR.ents[_PED+1].DEAD then
					if g.tbl.RADAR.dead_chk(_PED) then
						API.SD.draw_sprt(g.tbl.RADAR.dead_x,g.tbl.RADAR.pos(API.ent.get.coords(_PED),g.tbl.RADAR.ents[_PED+1].DIST),g.tbl.RADAR.r_size.value*.15*g.tbl.RADAR.p_size.value*.1*g.RES,0,grey)
					end
				elseif g.tbl.RADAR.ents[_PED+1].PLYR and API.plyr.is.valid(g.tbl.RADAR.ents[_PED+1].PID) then
					_PID = g.tbl.RADAR.ents[_PED+1].PID
					_POS = g.tbl.RADAR.pos(API.plyr.get.coords(_PID),g.tbl.RADAR.ents[_PED+1].DIST)
					if g.tbl.RADAR.ents[_PED+1].SHOOT  > API.util.t_ms() then
						API.SD.draw_sprt(g.tbl.RADAR.boom,_POS,g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*.1*.25*g.RES,g.tbl.RADAR.head(_PID),funcs.get.rgb_to_int(255,255,255,g.tbl.RADAR.ents[_PED+1].ALPHA))
					end
					API.SD.draw_sprt(g.tbl.RADAR.arrow3,_POS,g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*.1*g.RES,g.tbl.RADAR.head(_PID),g.tbl.RADAR.ents[_PED+1].COLR)
					if g.tbl.RADAR.name.on then
						if g.tbl.RADAR.name_j.value == 1 then
							API.SD.draw_text(funcs.get.pid_name(_PID),_POS+v2(rdr_plyr_name_size*0.01+g.tbl.RADAR.name_x.value,rdr_plyr_name_size*0.007+g.tbl.RADAR.name_y.value),_POS,rdr_plyr_name_size,g.tbl.RADAR.ents[_PED+1].COLR,(1<<1)+(1<<4),nil)
						else
							API.SD.draw_text(funcs.get.pid_name(_PID),_POS+v2(rdr_plyr_name_size*0.01+g.tbl.RADAR.name_x.value,rdr_plyr_name_size*0.007+g.tbl.RADAR.name_y.value),_POS,rdr_plyr_name_size,g.tbl.RADAR.ents[_PED+1].COLR,(1<<1),nil)
						end
					end
				elseif g.tbl.RADAR.ents[_PED+1].PED then
					_POS = g.tbl.RADAR.pos(API.ent.get.coords(_PED),g.tbl.RADAR.ents[_PED+1].DIST)
					if g.tbl.RADAR.ents[_PED+1].SHOOT > API.util.t_ms() then
						API.SD.draw_sprt(g.tbl.RADAR.boom,_POS,g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*.1*.25*g.RES,g.tbl.RADAR.head2(_PED),funcs.get.rgb_to_int(255,255,255,g.tbl.RADAR.ents[_PED+1].ALPHA))
					end
					API.SD.draw_sprt(g.tbl.RADAR.arrow3,_POS,g.tbl.RADAR.r_size.value*g.tbl.RADAR.p_size.value*.1*g.RES,g.tbl.RADAR.head2(_PED),g.tbl.RADAR.ents[_PED+1].COLR)
				end
			end
		end
		show_self(false)
		show_wp(false)
		show_pers(true)
		show_veh(true)
	end
end)
funcs.add_to_S_L(g.tbl.RADAR.feat,"g.tbl.RADAR.feat")

g.tbl.RADAR.info=menu.add_feature("Show radar HIDDEN", "toggle", g.prnt.utils_info_radar.id, function(f)
	local good,_dist,_r,_g,_b,all_peds,_PED,PID,ped_type
	local cops = ped_models.rltshp_csa
	local others = ped_models.rltshp_mssn
	local animals = ped_models.rltshp_anml
	local animals_hash = ped_models.rltshp_anml_hash
	local temp_vec,my_veh
	local function get_type(_hash)
		if g.tbl.RADAR.csa_show.on and cops[_hash] then return 1
		elseif g.tbl.RADAR.mssn_show.on and (others[_hash] or ntv.is.ped_dislikes(_PED,API.plyr.get.ped(API.plyr.my_id())) or ntv.is.ped_attack_ped(_PED,API.plyr.get.ped(API.plyr.my_id()))) then return 2
		elseif g.tbl.RADAR.anml_show.on and (animals[_hash] or animals_hash[API.ent.get.model_hash(_PED)]) then return 3
		elseif g.tbl.RADAR.nice_show.on and ntv.is.ped_nice(_PED,API.plyr.get.ped(API.plyr.my_id())) then return 4
		end
		return 0
	end
	local function player_check()
		if API.plyr.is.valid(PID) and PID ~= API.plyr.my_id() then
			if g.tbl.PID_INFO.interior[API.plyr.my_id()+1] or (not g.tbl.PID_INFO.interior[PID+1]) then
				return funcs.is.in_grid_xy(API.plyr.get.coords(API.plyr.my_id()),API.plyr.get.coords(PID),g.tbl.RADAR.range.value)
			end
		end
		return false
	end
	local ped_alpha = {}
	while f.on do
		system.yield(25)
		g.tbl.RADAR.ped_colors[1]=funcs.get.rgb_to_int(g.tbl.RADAR.csa_r.value,g.tbl.RADAR.csa_g.value,g.tbl.RADAR.csa_b.value,g.tbl.RADAR.csa_a.value)
		g.tbl.RADAR.ped_colors[2]=funcs.get.rgb_to_int(g.tbl.RADAR.mssn_r.value,g.tbl.RADAR.mssn_g.value,g.tbl.RADAR.mssn_b.value,g.tbl.RADAR.mssn_a.value)
		g.tbl.RADAR.ped_colors[3]=funcs.get.rgb_to_int(g.tbl.RADAR.anml_r.value,g.tbl.RADAR.anml_g.value,g.tbl.RADAR.anml_b.value,g.tbl.RADAR.anml_a.value)
		g.tbl.RADAR.ped_colors[4]=funcs.get.rgb_to_int(g.tbl.RADAR.nice_r.value,g.tbl.RADAR.nice_g.value,g.tbl.RADAR.nice_b.value,g.tbl.RADAR.nice_a.value)
		ped_alpha[1]=g.tbl.RADAR.csa_a.value
		ped_alpha[2]=g.tbl.RADAR.mssn_a.value
		ped_alpha[3]=g.tbl.RADAR.anml_a.value
		ped_alpha[4]=g.tbl.RADAR.nice_a.value
		good = false
		if ui.get_waypoint_coord().x < 16000 then
			_dist = funcs.get.dist_pospos_v2(ui.get_waypoint_coord(),funcs.ME._crds())
			good = true
			if _dist <= g.tbl.RADAR.range.value then
				g.tbl.RADAR.wp_dist = _dist
				g.tbl.RADAR.wp_pos = ui.get_waypoint_coord()
			else
				g.tbl.RADAR.wp_dist = g.tbl.RADAR.range.value
				temp_vec = funcs.get.vctr_to_pos3(v3(ui.get_waypoint_coord().x,ui.get_waypoint_coord().y,0),funcs.ME._crds())
				temp_vec,g.tbl.RADAR.wp_pos = funcs.get.ray_pos(funcs.ME._crds(),temp_vec,_dist)
			end
			g.tbl.RADAR.wp_true = true
		end
		if not good then
			g.tbl.RADAR.wp_true = false
			g.tbl.RADAR.wp_dist = 10000
			g.tbl.RADAR.wp_pos = v2(10000,10000)
		end
		my_veh = API.plyr.pers_veh()
		good = false
		if g.tbl.RADAR.veh_pers_show.on and my_veh ~= 0 and funcs.is.veh(my_veh) and (not funcs.ME._in_veh() or funcs.ME._veh() ~= my_veh) then
			if g.tbl.veh_esp.png_true[API.ent.get.model_hash(my_veh)] or g.tbl.veh_esp.png_true[API.veh.get.class_name(my_veh)] then
				_dist = funcs.get.dist_me_ent_3d(my_veh)
				good = true
				if g.tbl.veh_esp.png_true[API.ent.get.model_hash(my_veh)] then
					g.tbl.RADAR.pers_blip=g.tbl.veh_esp.png_int[API.ent.get.model_hash(my_veh)]
					if g.tbl.veh_esp.png_rot_true[API.ent.get.model_hash(my_veh)] then
						g.tbl.RADAR.pers_rot=g.tbl.RADAR.head2(my_veh)
					else
						g.tbl.RADAR.pers_rot=0
					end
				else
					g.tbl.RADAR.pers_blip=g.tbl.veh_esp.png_int[API.veh.get.class_name(my_veh)]

					if g.tbl.veh_esp.png_rot_true[API.veh.get.class_name(my_veh)] then
						g.tbl.RADAR.pers_rot=g.tbl.RADAR.head2(my_veh)
					else
						g.tbl.RADAR.pers_rot=0
					end
				end
				if _dist <= g.tbl.RADAR.range.value then
					g.tbl.RADAR.pers_dist = _dist
					g.tbl.RADAR.pers_pos = API.ent.get.coords(my_veh)
				else
					g.tbl.RADAR.pers_dist = g.tbl.RADAR.range.value
					temp_vec = funcs.get.vctr_to_pos3(API.ent.get.coords(my_veh),funcs.ME._crds())
					temp_vec,g.tbl.RADAR.pers_pos = funcs.get.ray_pos(funcs.ME._crds(),temp_vec,_dist)
				end
				g.tbl.RADAR.pers_true = true
			end
		end
		if not good then
			g.tbl.RADAR.pers_true = false
			g.tbl.RADAR.pers_dist = 10000
			g.tbl.RADAR.pers_pos = v2(10000,10000)
		end
		my_veh = funcs.ME._veh()
		good = false
		if g.tbl.RADAR.veh_veh_show.on and my_veh ~= 0 and funcs.is.veh(my_veh) and not funcs.ME._in_veh() and (not g.tbl.RADAR.veh_pers_show.on or my_veh ~= API.plyr.pers_veh()) then
			if g.tbl.veh_esp.png_true[API.ent.get.model_hash(my_veh)] or g.tbl.veh_esp.png_true[API.veh.get.class_name(my_veh)] then
				_dist = funcs.get.dist_me_ent_3d(my_veh)
				good = true
				if g.tbl.veh_esp.png_true[API.ent.get.model_hash(my_veh)] then
					g.tbl.RADAR.veh_blip=g.tbl.veh_esp.png_int[API.ent.get.model_hash(my_veh)]
					if g.tbl.veh_esp.png_rot_true[API.ent.get.model_hash(my_veh)] then
						g.tbl.RADAR.veh_rot=g.tbl.RADAR.head2(my_veh)
					else
						g.tbl.RADAR.veh_rot=0
					end
				else
					g.tbl.RADAR.veh_blip=g.tbl.veh_esp.png_int[API.veh.get.class_name(my_veh)]
					if g.tbl.veh_esp.png_rot_true[API.veh.get.class_name(my_veh)] then
						g.tbl.RADAR.veh_rot=g.tbl.RADAR.head2(my_veh)
					else
						g.tbl.RADAR.veh_rot=0
					end
				end
				if _dist <= g.tbl.RADAR.range.value then
					g.tbl.RADAR.veh_dist = _dist
					g.tbl.RADAR.veh_pos = API.ent.get.coords(my_veh)
				else
					g.tbl.RADAR.veh_dist = g.tbl.RADAR.range.value
					temp_vec = funcs.get.vctr_to_pos3(API.ent.get.coords(my_veh),funcs.ME._crds())
					temp_vec,g.tbl.RADAR.veh_pos = funcs.get.ray_pos(funcs.ME._crds(),temp_vec,_dist)
				end
				g.tbl.RADAR.veh_true = true
			end
		end
		if not good then
			g.tbl.RADAR.veh_true = false
			g.tbl.RADAR.veh_dist = 10000
			g.tbl.RADAR.veh_pos = v2(10000,10000)
		end
		all_peds = API.Ped.get.all()
		for i=1,#all_peds do
			_PED = all_peds[i]
			good = false
			if funcs.is.ent(_PED) then
				if g.tbl.RADAR.ents[_PED+1] == nil then
					g.tbl.RADAR.ents_default(_PED+1)
				end
				if API.Ped.is.plyr(_PED) then
					PID = API.plyr.get.plyr_from_ped(_PED)
					good = player_check()
					if good then
						_dist = funcs.get.dist_me_pid_2d(PID)
						--_dist = mth.abs(v2(API.cam.get.pos().x,API.cam.get.pos().y):magnitude(v2(API.plyr.get.coords(PID).x,API.plyr.get.coords(PID).y)))
						good = (_dist <= g.tbl.RADAR.range.value)
						if good then
							g.tbl.RADAR.ents[_PED+1].DIST = _dist
							g.tbl.RADAR.ents[_PED+1].FRND = API.plyr.is.friend(PID)
							_r,_g,_b = g.tbl.PID_OSD.plyr_rgb(PID+1)
							if g.tbl.RADAR.ents[_PED+1].FRND then
								g.tbl.RADAR.ents[_PED+1].COLR = funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.f_a.value)
								g.tbl.RADAR.ents[_PED+1].ALPHA = g.tbl.RADAR.f_a.value
							else
								g.tbl.RADAR.ents[_PED+1].COLR = funcs.get.rgb_to_int(_r,_g,_b,g.tbl.RADAR.o_a.value)
								g.tbl.RADAR.ents[_PED+1].ALPHA = g.tbl.RADAR.o_a.value
							end
							g.tbl.RADAR.ents[_PED+1].PED = false
							g.tbl.RADAR.ents[_PED+1].PID = PID
							g.tbl.RADAR.ents[_PED+1].PLYR = true
							g.tbl.RADAR.ents[_PED+1].DEAD = API.ent.is.dead(_PED)
							g.tbl.RADAR.ents[_PED+1].D_TIME = API.util.t_ms()+10000
							if API.Ped.is.shooting(_PED) then
								g.tbl.RADAR.ents[_PED+1].SHOOT =	API.util.t_ms()+100
							end
						end
					end
				else
					ped_type = get_type(API.Ped.get.rel_group_hash(_PED),_PED) 
					if ped_type > 0 and funcs.is.in_grid_xy(API.plyr.get.coords(API.plyr.my_id()),API.ent.get.coords(_PED),g.tbl.RADAR.range.value) then
						if g.tbl.RADAR.dead_chk(_PED) then
							_dist = funcs.get.dist_me_ent_2d(_PED)
							--_dist = mth.abs(v2(API.cam.get.pos().x,API.cam.get.pos().y):magnitude(v2(API.ent.get.coords(_PED).x,API.ent.get.coords(_PED).y)))
							good = (_dist <= g.tbl.RADAR.range.value)
							if good then
								g.tbl.RADAR.ents[_PED+1].DIST = _dist
								g.tbl.RADAR.ents[_PED+1].FRND = false
								g.tbl.RADAR.ents[_PED+1].COLR = g.tbl.RADAR.ped_colors[ped_type]
								g.tbl.RADAR.ents[_PED+1].PID = -1
								g.tbl.RADAR.ents[_PED+1].PLYR = false
								g.tbl.RADAR.ents[_PED+1].PED = true
								if not g.tbl.RADAR.ents[_PED+1].DEAD then
									g.tbl.RADAR.ents[_PED+1].D_TIME = API.util.t_ms()+10000
								end
								g.tbl.RADAR.ents[_PED+1].DEAD = API.ent.is.dead(_PED)
								if API.Ped.is.shooting(_PED) then
									g.tbl.RADAR.ents[_PED+1].SHOOT =	API.util.t_ms()+100
								end
								g.tbl.RADAR.ents[_PED+1].ALPHA = ped_alpha[ped_type]
							end
						else
							good = true
						end
					end
				end
			end
			if not good then
				g.tbl.RADAR.ents_default(_PED+1)
			end
		end
		f.on=g.tbl.RADAR.feat.on
	end
end)g.tbl.RADAR.info.hidden=true



g.tbl.RADAR.rdr_optns=menu.add_feature("Radar options", "parent", g.prnt.utils_info_radar.id)

g.tbl.RADAR.range = menu.add_feature("Range", "action_value_f",g.tbl.RADAR.rdr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.range,25,500,5,100,"g.tbl.RADAR.range")

g.tbl.RADAR.r_size = menu.add_feature("Radar size", "action_value_f",g.tbl.RADAR.rdr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.r_size,0.05,2,0.01,1,"g.tbl.RADAR.r_size")

g.tbl.RADAR.x = menu.add_feature("X Pos", "action_value_f",g.tbl.RADAR.rdr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.x,-1,1,0.01,0.44,"g.tbl.RADAR.x")
g.tbl.RADAR.y = menu.add_feature("Y Pos", "action_value_f",g.tbl.RADAR.rdr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.y,-1,1,0.01,0.39,"g.tbl.RADAR.y")

g.tbl.RADAR.rings_prnt = menu.add_feature("Range rings", "parent",g.tbl.RADAR.rdr_optns.id,function(f)
	g.tbl.RADAR.r_r.hidden=g.tbl.RADAR.rings_opp_color.on
	g.tbl.RADAR.r_g.hidden=g.tbl.RADAR.rings_opp_color.on
	g.tbl.RADAR.r_b.hidden=g.tbl.RADAR.rings_opp_color.on
end)

g.tbl.RADAR.rings_show = menu.add_feature("Show rings", "toggle",g.tbl.RADAR.rings_prnt.id)
funcs.add_to_S_L(g.tbl.RADAR.rings_show,"g.tbl.RADAR.rings_show")
g.tbl.RADAR.rings_show.on=true
g.tbl.RADAR.rings_rng = menu.add_feature("Ring interval (meters)", "action_value_i",g.tbl.RADAR.rings_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.rings_rng,5,250,5,25,"g.tbl.RADAR.rings_rng")

g.tbl.RADAR.rings_opp_color = menu.add_feature("Inverse color", "toggle",g.tbl.RADAR.rings_prnt.id,function(f)
	g.tbl.RADAR.r_r.hidden=f.on
	g.tbl.RADAR.r_g.hidden=f.on
	g.tbl.RADAR.r_b.hidden=f.on
end)
funcs.add_to_S_L(g.tbl.RADAR.rings_opp_color,"g.tbl.RADAR.rings_opp_color")

g.tbl.RADAR.r_r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.rings_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.r_r,0,255,1,180,"g.tbl.RADAR.r_r")
g.tbl.RADAR.r_g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.rings_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.r_g,0,255,1,255,"g.tbl.RADAR.r_g")
g.tbl.RADAR.r_b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.rings_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.r_b,0,255,1,180,"g.tbl.RADAR.r_b")
g.tbl.RADAR.r_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.rings_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.r_a,0,255,1,100,"g.tbl.RADAR.r_a")
g.tbl.RADAR.rings_opp_color.on=true

g.tbl.RADAR.rdr_clr_prnt=menu.add_feature("Radar Color", "parent", g.tbl.RADAR.rdr_optns.id)

g.tbl.RADAR.r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.rdr_clr_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.r,0,255,1,0,"g.tbl.RADAR.r")
g.tbl.RADAR.g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.rdr_clr_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.g,0,255,1,0,"g.tbl.RADAR.g")
g.tbl.RADAR.b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.rdr_clr_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.b,0,255,1,0,"g.tbl.RADAR.b")
g.tbl.RADAR.a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.rdr_clr_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.a,0,255,1,100,"g.tbl.RADAR.a")

g.tbl.RADAR.ped_optns=menu.add_feature("Ped options", "parent", g.prnt.utils_info_radar.id)

g.tbl.RADAR.p_size = menu.add_feature("Size", "action_value_f",g.tbl.RADAR.ped_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.p_size,0.05,2,0.01,1,"g.tbl.RADAR.p_size")

g.tbl.RADAR.plyr_optns=menu.add_feature("Player options", "parent", g.tbl.RADAR.ped_optns.id)

g.tbl.RADAR.plyr_name_optns=menu.add_feature("Player name", "parent", g.tbl.RADAR.plyr_optns.id)

g.tbl.RADAR.name = menu.add_feature("Show name", "toggle",g.tbl.RADAR.plyr_name_optns.id)
funcs.add_to_S_L(g.tbl.RADAR.name,"g.tbl.RADAR.name")
g.tbl.RADAR.name.on=true

g.tbl.RADAR.name_s = menu.add_feature("Name Size", "action_value_f",g.tbl.RADAR.plyr_name_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.name_s,0,2,0.01,1,"g.tbl.RADAR.name_s")
g.tbl.RADAR.name_j = menu.add_feature("Justification", "action_value_str",g.tbl.RADAR.plyr_name_optns.id)
g.tbl.RADAR.name_j:set_str_data({"Left","Center","Right"})
funcs.add_to_S_L(g.tbl.RADAR.name_j,"g.tbl.RADAR.name_j")
g.tbl.RADAR.name_x = menu.add_feature("Name X Pos offset", "action_value_f",g.tbl.RADAR.plyr_name_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.name_x,-1,1,0.001,0,"g.tbl.RADAR.name_x")
g.tbl.RADAR.name_y = menu.add_feature("Name Y Pos offset", "action_value_f",g.tbl.RADAR.plyr_name_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.name_y,-1,1,0.001,0,"g.tbl.RADAR.name_y")

g.tbl.RADAR.self = menu.add_feature("Show self", "toggle",g.tbl.RADAR.plyr_optns.id)
funcs.add_to_S_L(g.tbl.RADAR.self,"g.tbl.RADAR.self")
g.tbl.RADAR.self.on=true

g.tbl.RADAR.s_a = menu.add_feature("Self alpha", "action_value_i",g.tbl.RADAR.plyr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.s_a,0,255,1,255,"g.tbl.RADAR.s_a")
g.tbl.RADAR.f_a = menu.add_feature("Friend alpha", "action_value_i",g.tbl.RADAR.plyr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.f_a,0,255,1,255,"g.tbl.RADAR.f_a")
g.tbl.RADAR.o_a = menu.add_feature("Other player alpha", "action_value_i",g.tbl.RADAR.plyr_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.o_a,0,255,1,255,"g.tbl.RADAR.o_a")

g.tbl.RADAR.csa_prnt=menu.add_feature("Cops/Security/Army", "parent", g.tbl.RADAR.ped_optns.id)
g.tbl.RADAR.csa_show=menu.add_feature("Show peds", "toggle", g.tbl.RADAR.csa_prnt.id)
funcs.add_to_S_L(g.tbl.RADAR.csa_show,"g.tbl.RADAR.csa_show")
g.tbl.RADAR.csa_show.on=true
g.tbl.RADAR.csa_r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.csa_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.csa_r,0,255,1,0,"g.tbl.RADAR.csa_r")
g.tbl.RADAR.csa_g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.csa_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.csa_g,0,255,1,0,"g.tbl.RADAR.csa_g")
g.tbl.RADAR.csa_b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.csa_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.csa_b,0,255,1,200,"g.tbl.RADAR.csa_b")
g.tbl.RADAR.csa_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.csa_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.csa_a,0,255,1,255,"g.tbl.RADAR.csa_a")

g.tbl.RADAR.mssn_prnt=menu.add_feature("Mission/Other", "parent", g.tbl.RADAR.ped_optns.id)
g.tbl.RADAR.mssn_show=menu.add_feature("Show peds", "toggle", g.tbl.RADAR.mssn_prnt.id)
funcs.add_to_S_L(g.tbl.RADAR.mssn_show,"g.tbl.RADAR.mssn_show")
g.tbl.RADAR.mssn_show.on=true
g.tbl.RADAR.mssn_r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.mssn_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.mssn_r,0,255,1,225,"g.tbl.RADAR.mssn_r")
g.tbl.RADAR.mssn_g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.mssn_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.mssn_g,0,255,1,69,"g.tbl.RADAR.mssn_g")
g.tbl.RADAR.mssn_b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.mssn_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.mssn_b,0,255,1,69,"g.tbl.RADAR.mssn_b")
g.tbl.RADAR.mssn_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.mssn_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.mssn_a,0,255,1,255,"g.tbl.RADAR.mssn_a")

g.tbl.RADAR.anml_prnt=menu.add_feature("Animals", "parent", g.tbl.RADAR.ped_optns.id)
g.tbl.RADAR.anml_show=menu.add_feature("Show peds", "toggle", g.tbl.RADAR.anml_prnt.id)
funcs.add_to_S_L(g.tbl.RADAR.anml_show,"g.tbl.RADAR.anml_show")
g.tbl.RADAR.anml_show.on=true
g.tbl.RADAR.anml_r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.anml_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.anml_r,0,255,1,150,"g.tbl.RADAR.anml_r")
g.tbl.RADAR.anml_g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.anml_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.anml_g,0,255,1,190,"g.tbl.RADAR.anml_g")
g.tbl.RADAR.anml_b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.anml_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.anml_b,0,255,1,0,"g.tbl.RADAR.anml_b")
g.tbl.RADAR.anml_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.anml_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.anml_a,0,255,1,255,"g.tbl.RADAR.anml_a")

g.tbl.RADAR.nice_prnt=menu.add_feature("Friendly NPCs", "parent", g.tbl.RADAR.ped_optns.id)
g.tbl.RADAR.nice_show=menu.add_feature("Show peds", "toggle", g.tbl.RADAR.nice_prnt.id)
funcs.add_to_S_L(g.tbl.RADAR.nice_show,"g.tbl.RADAR.nice_show")
g.tbl.RADAR.nice_show.on=true
g.tbl.RADAR.nice_r = menu.add_feature("Red", "action_value_i",g.tbl.RADAR.nice_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.nice_r,0,255,1,93,"g.tbl.RADAR.nice_r")
g.tbl.RADAR.nice_g = menu.add_feature("Green", "action_value_i",g.tbl.RADAR.nice_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.nice_g,0,255,1,182,"g.tbl.RADAR.nice_g")
g.tbl.RADAR.nice_b = menu.add_feature("Blue", "action_value_i",g.tbl.RADAR.nice_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.nice_b,0,255,1,229,"g.tbl.RADAR.nice_b")
g.tbl.RADAR.nice_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.nice_prnt.id)
funcs.set_feat_i_f(g.tbl.RADAR.nice_a,0,255,1,255,"g.tbl.RADAR.nice_a")

g.tbl.RADAR.monitor_prnt=menu.add_feature("Monitor adjustments", "parent", g.tbl.RADAR.ped_optns.id)
g.tbl.RADAR.xT = menu.add_feature("X Offset", "action_value_f",g.tbl.RADAR.monitor_prnt.id,function(f)
	g.N_P(2,f.value,__GV__,3,"Blue")
end)
funcs.set_feat_i_f(g.tbl.RADAR.xT,0,3,0.001,1,"g.tbl.RADAR.xT")
g.tbl.RADAR.yT = menu.add_feature("Y Offset", "action_value_f",g.tbl.RADAR.monitor_prnt.id,function(f)
	g.N_P(2,f.value,__GV__,3,"Blue")
end)
funcs.set_feat_i_f(g.tbl.RADAR.yT,0,3,0.001,1,"g.tbl.RADAR.yT")
g.tbl.RADAR.math_mod = menu.add_feature("Adjustment sensitivity","autoaction_value_str",g.tbl.RADAR.monitor_prnt.id,function(f)
	local _table = {0.0001,0.001,0.01,0.1}
	g.tbl.RADAR.xT.mod=_table[f.value+1]
	g.tbl.RADAR.yT.mod=_table[f.value+1]
	g.N_P(2,"Offset mod changed to ".._table[f.value+1],__GV__,3,"Blue")
end)
g.tbl.RADAR.math_mod:set_str_data({"0.0001","0.001","0.01","0.1"})
funcs.add_to_S_L(g.tbl.RADAR.math_mod,"g.tbl.RADAR.math_mod")

g.tbl.RADAR.wp_optns=menu.add_feature("Waypoint options", "parent", g.prnt.utils_info_radar.id)

g.tbl.RADAR.wp_size = menu.add_feature("Size", "action_value_f",g.tbl.RADAR.wp_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.wp_size,0.05,2,0.01,1,"g.tbl.RADAR.wp_size")

g.tbl.RADAR.wp_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.wp_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.wp_a,0,255,1,255,"g.tbl.RADAR.wp_a")

g.tbl.RADAR.veh_optns=menu.add_feature("Vehicle options", "parent", g.prnt.utils_info_radar.id)

g.tbl.RADAR.veh_size = menu.add_feature("Size", "action_value_f",g.tbl.RADAR.veh_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.veh_size,0.05,2,0.01,1,"g.tbl.RADAR.veh_size")

g.tbl.RADAR.veh_a = menu.add_feature("Alpha", "action_value_i",g.tbl.RADAR.veh_optns.id)
funcs.set_feat_i_f(g.tbl.RADAR.veh_a,0,255,1,255,"g.tbl.RADAR.veh_a")

g.tbl.RADAR.veh_pers_show=menu.add_feature("Show my personal vehicle", "toggle", g.tbl.RADAR.veh_optns.id)
funcs.add_to_S_L(g.tbl.RADAR.veh_pers_show,"g.tbl.RADAR.veh_pers_show")
g.tbl.RADAR.veh_pers_show.on=true
g.tbl.RADAR.veh_veh_show=menu.add_feature("Show my last vehicle", "toggle", g.tbl.RADAR.veh_optns.id)
funcs.add_to_S_L(g.tbl.RADAR.veh_veh_show,"g.tbl.RADAR.veh_veh_show")
g.tbl.RADAR.veh_veh_show.on=true


g.tbl.clear_stuff={}
g.tbl.clear_stuff.ped_count=0
g.tbl.clear_stuff.obj_count=0
g.tbl.clear_stuff.veh_count=0
g.tbl.clear_stuff.feat=menu.add_feature("Clear area","action",g.prnt.utils_clear.id,function(f)
	if not g.tbl.clear_stuff.peds.on and not g.tbl.clear_stuff.obj.on and not g.tbl.clear_stuff.veh.on then
		g.N_P(2,"No option selected.",__GV__,4,"Blue")
	else
		local range,peds,objs,vehs = g.tbl.clear_stuff.range_feat.value
		peds = g.tbl.clear_stuff.peds.on
		objs = g.tbl.clear_stuff.obj.on
		vehs = g.tbl.clear_stuff.veh.on
		g.tbl.clear_stuff.ped_count=0
		g.tbl.clear_stuff.obj_count=0
		g.tbl.clear_stuff.veh_count=0
		g.tbl.clear_stuff.peds_do.on = g.tbl.clear_stuff.peds.on	
		g.tbl.clear_stuff.obj_do.on = g.tbl.clear_stuff.obj.on
		g.tbl.clear_stuff.veh_do.on = g.tbl.clear_stuff.veh.on
		g.tbl.clear_stuff.debug_pos=API.plyr.get.coords(API.plyr.my_id())
		g.tbl.clear_stuff.debug_time= API.util.t_ms()+2000
		g.tbl.clear_stuff.debug_div=2
		g.tbl.clear_stuff.show_debug_feat.on=true
		while g.tbl.clear_stuff.peds_do.on or g.tbl.clear_stuff.obj_do.on or g.tbl.clear_stuff.veh_do.on do
			system.yield(0)
		end
		local msg=""
		if peds then
			msg=msg..g.tbl.clear_stuff.ped_count.." Peds"
		end
		if objs then
			if peds then
				msg=msg.." and "
			end
			msg=msg..g.tbl.clear_stuff.obj_count.." Objects"
		end
		if vehs then
			if peds or objs then
				msg=msg.." and "
			end
			msg=msg..g.tbl.clear_stuff.veh_count.." Vehicles"
		end
		msg=msg.." within "..range.." meters cleared."
		g.N_P(2,msg,__GV__,4,"Blue")
	end
end)

g.tbl.clear_stuff.rng=0
g.tbl.clear_stuff.range_feat=menu.add_feature("Range","autoaction_value_i",g.prnt.utils_clear.id,function(f)
	if f.value ~= g.tbl.clear_stuff.rng then
		g.tbl.clear_stuff.rng=f.value
		g.tbl.clear_stuff.debug_pos=API.plyr.get.coords(API.plyr.my_id())
		g.tbl.clear_stuff.debug_time= API.util.t_ms()+1000
		g.tbl.clear_stuff.debug_div=1
		g.tbl.clear_stuff.show_debug_feat.on=true
	end
end)
funcs.set_feat_i_f(g.tbl.clear_stuff.range_feat,10,500,10,100,"g.tbl.clear_stuff.range_feat")

g.tbl.clear_stuff.debug_time= API.util.t_ms()
g.tbl.clear_stuff.debug_pos=API.plyr.get.coords(API.plyr.my_id())
g.tbl.clear_stuff.debug_div=1
g.tbl.clear_stuff.show_debug_feat=menu.add_feature("Show debug HIDDEN","toggle",g.prnt.utils_clear.id,function(f)
	if f.on then
		while g.tbl.clear_stuff.debug_time > API.util.t_ms() do
			system.yield(5)
			graphics.draw_marker(28, g.tbl.clear_stuff.debug_pos, v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.clear_stuff.rng, g.tbl.clear_stuff.rng, g.tbl.clear_stuff.rng), 255, 0, 0, mth.flr((g.tbl.clear_stuff.debug_time-API.util.t_ms()) /1000/g.tbl.clear_stuff.debug_div*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
		end
	end
	f.on=false
end)g.tbl.clear_stuff.show_debug_feat.hidden=true

g.tbl.clear_stuff.peds_do=menu.add_feature("Peds HIDDEN","toggle",g.prnt.utils_clear.id,function(f)
	if f.on then
		local my_pos=API.plyr.get.coords(API.plyr.my_id())
		local all_peds=API.Ped.get.all()
		local _table = {}
		for i=1,#all_peds do
			if funcs.is.in_grid(my_pos,API.ent.get.coords(all_peds[i]),g.tbl.clear_stuff.range_feat.value) and not API.Ped.is.plyr(all_peds[i]) then
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local ent = all_peds[i]
					_table[ent]=true
					if funcs.doo.remove_ent(ent,2000) then
						g.tbl.clear_stuff.ped_count=g.tbl.clear_stuff.ped_count+1
					end
					_table[ent]=false
				end)
			end
		end
		::check::
		system.yield(0)
		for _, ENT in pairs(_table) do
			if ENT then
				goto check
			end
		end
		f.on=false
	end
end)g.tbl.clear_stuff.peds_do.hidden=true

g.tbl.clear_stuff.obj_do=menu.add_feature("Objects HIDDEN","toggle",g.prnt.utils_clear.id,function(f)
	if f.on then
		local my_pos=API.plyr.get.coords(API.plyr.my_id())
		local all_obj=object.get_all_objects()
		local _table = {}
		for i=1,#all_obj do
			if funcs.is.in_grid(my_pos,API.ent.get.coords(all_obj[i]),g.tbl.clear_stuff.range_feat.value) then
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local ent = all_obj[i]
					_table[ent]=true
					if funcs.doo.remove_ent(ent,2000) then
						g.tbl.clear_stuff.obj_count=g.tbl.clear_stuff.obj_count+1
					end
					_table[ent]=false
				end)
			end
		end
		::check::
		system.yield(0)
		for _, ENT in pairs(_table) do
			if ENT then
				goto check
			end
		end
		f.on=false
	end
end)g.tbl.clear_stuff.obj_do.hidden=true

g.tbl.clear_stuff.veh_do=menu.add_feature("Vehicles HIDDEN","toggle",g.prnt.utils_clear.id,function(f)
	if f.on then
		local my_pos=API.plyr.get.coords(API.plyr.my_id())
		local all_veh=API.veh.get.all()
		local _table = {}
		local function should_do_it(_veh)
			if not funcs.is.in_grid(my_pos,API.ent.get.coords(_veh),g.tbl.clear_stuff.range_feat.value) then
				return false
			end
			if decorator.decor_get_int(_veh, "Player_Vehicle") == g.tbl.PID_INFO.net_hash[API.plyr.my_id()+1] or funcs.ME._in_that_veh(_veh) or g.tbl.PID_INFO.veh[API.plyr.my_id()+1] == _veh then
				return false
			end
			if g.tbl.clear_stuff.prsnl.on then
				if decorator.decor_get_int(_veh, "Player_Vehicle") > 0 then
					return false
				end
			end
			if g.tbl.clear_stuff.prvs.on then
				if API.veh.get.been_owned(_veh) then
					return false
				end
			end				
			for i=1,32 do
				if g.tbl.clear_stuff.frnds.on and g.tbl.PID_INFO.is_frnd[i] then
					if g.tbl.PID_INFO.veh[i] == _veh or decorator.decor_get_int(_veh, "Player_Vehicle") == g.tbl.PID_INFO.net_hash[i] then
						return false
					end
				end
				if g.tbl.clear_stuff.orgmc.on and g.tbl.PID_INFO.color[API.plyr.my_id()+1] > -1 then
					if g.tbl.PID_INFO.color[API.plyr.my_id()+1] == g.tbl.PID_INFO.color[i] then
						return false
					end
				end
			end
			return true
		end
		for i=1,#all_veh do
			if should_do_it(all_veh[i]) then
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local ent = all_veh[i]
					_table[ent]=true
					if funcs.doo.remove_ent(ent,2000) then
						g.tbl.clear_stuff.veh_count=g.tbl.clear_stuff.veh_count+1
					end
					_table[ent]=false
				end)
			end
		end
		::check::
		system.yield(0)
		for _, ENT in pairs(_table) do
			if ENT then
				goto check
			end
		end
		f.on=false
	end
end)g.tbl.clear_stuff.veh_do.hidden=true

g.tbl.clear_stuff.peds=menu.add_feature("Peds","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.peds,"g.tbl.clear_stuff.peds")
g.tbl.clear_stuff.peds.on=true

g.tbl.clear_stuff.obj=menu.add_feature("Objects","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.obj,"g.tbl.clear_stuff.obj")
g.tbl.clear_stuff.obj.on=true

g.tbl.clear_stuff.veh=menu.add_feature("Vehicles","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.veh,"g.tbl.clear_stuff.veh")
g.tbl.clear_stuff.veh.on=true

g.tbl.clear_stuff.prsnl=menu.add_feature("Exclude personal vehicles","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.prsnl,"g.tbl.clear_stuff.prsnl")

g.tbl.clear_stuff.prvs=menu.add_feature("Exclude previously used vehicles","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.prvs,"g.tbl.clear_stuff.prvs")

g.tbl.clear_stuff.frnds=menu.add_feature("Exclude friends","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.frnds,"g.tbl.clear_stuff.frnds")

g.tbl.clear_stuff.orgmc=menu.add_feature("Exclude my org/mc","toggle",g.prnt.utils_clear.id)
funcs.add_to_S_L(g.tbl.clear_stuff.orgmc,"g.tbl.clear_stuff.orgmc")



-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------Show player aiming at me
	-------------------------------------------------------------------------------------------------
	g.tbl.aim_protex_main = {}
	g.tbl.aim_protex_main.loaded=false
	g.tbl.aim_protex_main.loadedtime=API.util.t_ms()
	g.tbl.aim_protex_main.AimAtMe = {}
	function g.tbl.aim_protex_main.AimDefault(i)
		g.tbl.aim_protex_main.AimAtMe[i] = {false,"",0,""}
	end
	for i=1,32 do
		 g.tbl.aim_protex_main.AimDefault(i)
	end
	
	g.tbl.aim_protex_main.weap_str = {}
	g.tbl.aim_protex_main.veh_table = {}
	
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local aimtime  = API.util.t_ms()
		for t=1,#weap_info.all_hash do
			g.tbl.aim_protex_main.weap_str[weap_info.all_hash[t]]=API.wpn.get_name(weap_info.all_hash[t])
			if t % 20 == 0 then
				system.yield(0)
			end
		end
		for i=1,#weap_info.veh.info do
			if g.tbl.aim_protex_main.veh_table[API.get_hash_key(weap_info.veh.info[i][2])]==nil then
				g.tbl.aim_protex_main.veh_table[API.get_hash_key(weap_info.veh.info[i][2])]=weap_info.veh.info[i][5]
			end
			if i % 20 == 0 then
				system.yield(0)
			end
		end
		g.tbl.aim_protex_main.loaded=true
		g.print_load_info("Aim Display",(API.util.t_ms()-aimtime),debug.getinfo(1).currentline,true)
	end)
	
	function g.tbl.aim_protex_main.get_weap_name(pid)
		return (API.wpn.get_name(API.Ped.get.weapon(API.plyr.get.ped(pid))) or "Weapon")
	end
	
	function g.tbl.aim_protex_main.get_veh_weap_name(pid)
		local weap = g.tbl.aim_protex_main.veh_table[ntv.get.ped_veh_weap(API.plyr.get.ped(pid))]
		if weap == nil then
			weap = (weap_info.veh.mg_name[ntv.get.ped_veh_weap(API.plyr.get.ped(pid))] or "Vehicle Weapon")
		end
		return weap
	end
		
	g.tbl.aim_protex_main._aim_notif=menu.add_feature("Show name of player aiming at me", "toggle", g.prnt.utils_info_aim.id, function(feat)
		funcs.doo.yield_while_true(not g.tbl.aim_protex_main.loaded, 2000)
		funcs.doo.aim_overlay_feats_hide(false)
		local y_val, y_offset,text
		local _r,_g,_b,s,f,x
		local text = ""
		local function should_default(i)
			if i-1 == API.plyr.my_id() or not funcs.is.valid_pid(i-1) then
				return true
			elseif g.tbl.aim_protex_main.AimAtMe[i][1] and g.tbl.aim_protex_main.AimAtMe[i][3] < API.util.t_ms() then
				return true
			end
			return false
		end
		while feat.on do
			system.yield(5)
			for i=1,32 do
				if should_default(i) then
					g.tbl.aim_protex_main.AimDefault(i)
				elseif funcs.ME._in_veh() and API.plyr.is.in_veh(i-1) and ntv.get.my_veh_lock_trgt(API.plyr.get.veh(i-1))==funcs.ME._ped() then
					g.tbl.aim_protex_main.AimAtMe[i] = {true,g.tbl.aim_protex_main.get_veh_weap_name(i-1),API.util.t_ms() + (g.tbl.aim_protex_main._plyr_time.value*1000),funcs.get.pid_name(i-1)}
				elseif funcs.is.pid_aim_at_me(i-1) then
					g.tbl.aim_protex_main.AimAtMe[i] = {true,g.tbl.aim_protex_main.get_weap_name(i-1),API.util.t_ms() + (g.tbl.aim_protex_main._plyr_time.value*1000),funcs.get.pid_name(i-1)}
				end
			end
			g.tbl.aim_protex_main.show_overlay(g.tbl.aim_protex_main.AimAtMe)
		end
		funcs.doo.aim_overlay_feats_hide(true)
	end)g.tbl.aim_protex_main._aim_notif.on=true
	funcs.add_to_S_L(g.tbl.aim_protex_main._aim_notif,"g.tbl.aim_protex_main._aim_notif")
	
	function g.tbl.aim_protex_main.show_overlay(_table)
		local y_val,y_offset = g.tbl.aim_protex_main._plyr_aim_y.value,g.tbl.aim_protex_main._plyr_aim_spc.value
		local _r,_g,_b = g.tbl.aim_protex_main._plyr_aim_cr.value,g.tbl.aim_protex_main._plyr_aim_cg.value,g.tbl.aim_protex_main._plyr_aim_cb.value
		local s,f,x = g.tbl.aim_protex_main._plyr_aim_s.value/300,g.tbl.aim_protex_main._plyr_aim_f.value,g.tbl.aim_protex_main._plyr_aim_x.value/300
		local alpha,a = g.tbl.aim_protex_main._plyr_aim_a.value
		for i=1,#_table do
			if _table[i][1] and _table[i][3] > API.util.t_ms() then
				a = (_table[i][3]-API.util.t_ms()) /1000/(g.tbl.aim_protex_main._plyr_time.value+1)
				if a > .5 then a = g.tbl.aim_protex_main._plyr_aim_a.value else a = mth.flr(a*1.5*alpha) end
				funcs.doo.overlay(_table[i][4].." - ".._table[i][2],_r,_g,_b,a,s,f,x,y_val/300)
				y_val = y_val + y_offset
			end
		end
	end
	
	g.tbl.aim_protex_main._aim_notif_test = menu.add_feature("Player aim overlay test?", "toggle", g.prnt.utils_info_aim.id, function(f)
		while f.on do
			local _table = {}
			for i=1, 3 do
				_table[i] = {true,(API.wpn.get_name(weap_info.all_hash[mth.rndm(1,#weap_info.all_hash)]) or "Weapon"),API.util.t_ms() + (g.tbl.aim_protex_main._plyr_time.value*1000),"Player "..mth.rndm(1,9)}
			end
			local time = API.util.t_ms() + (g.tbl.aim_protex_main._plyr_time.value*1000)
			while time > API.util.t_ms() and f.on do
				system.yield(5)
				g.tbl.aim_protex_main.show_overlay(_table)
			end
			system.yield(0)
		end
		if g.tbl.aim_protex_main._aim_notif.on then
			g.tbl.aim_protex_main._aim_notif_test.hidden=false
		end
	end)

	function funcs.is.pid_aim_at_me(_pid)
		return (funcs.is.valid_pid(_pid) and API.plyr.get.aim_at(_pid) == API.plyr.get.ped(API.plyr.my_id()))
	end
	
	function funcs.doo.input_f_value(_feat,_min,_max,_str_max,_type)
		local status,str = 1
		status,str = funcs.get.text_input("Type a number between ".._min.." and ".._max,_feat.value,_str_max,_type)
		if status == 0 and tonumber(str) <= _max and tonumber(str) >= _min then
			_feat.value=tonumber(str)
		end
	end

	g.tbl.aim_protex_main._plyr_time = menu.add_feature("Time on screen", "action_value_f", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,1,5,3,4)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_time,1,5,0.1,2.5,"g.tbl.aim_protex_main._plyr_time")
	
	g.tbl.aim_protex_main._plyr_aim_x = menu.add_feature("X Pos", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,0,300,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_x,0,300,1,229,"g.tbl.aim_protex_main._plyr_aim_x")

	g.tbl.aim_protex_main._plyr_aim_y = menu.add_feature("Y Pos", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,0,300,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_y,0,300,1,23,"g.tbl.aim_protex_main._plyr_aim_y")

	g.tbl.aim_protex_main._plyr_aim_spc = menu.add_feature("Spacing", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,1,69,2,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_spc,1,69,1,18,"g.tbl.aim_protex_main._plyr_aim_spc")

	g.tbl.aim_protex_main._plyr_aim_s = menu.add_feature("Scale", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,75,300,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_s,75,300,1,277,"g.tbl.aim_protex_main._plyr_aim_s")

	g.tbl.aim_protex_main._plyr_aim_f = menu.add_feature("Font", "action_value_i", g.prnt.utils_info_aim.id)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_f,0,9,1,9,"g.tbl.aim_protex_main._plyr_aim_f")

	g.tbl.aim_protex_main._plyr_aim_cr = menu.add_feature("Red", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,0,255,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_cr,0,255,1,255,"g.tbl.aim_protex_main._plyr_aim_cr")

	g.tbl.aim_protex_main._plyr_aim_cg = menu.add_feature("Green", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,0,255,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_cg,0,255,1,0,"g.tbl.aim_protex_main._plyr_aim_cg")

	g.tbl.aim_protex_main._plyr_aim_cb = menu.add_feature("Blue", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,0,255,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_cb,0,255,1,0,"g.tbl.aim_protex_main._plyr_aim_cb")

	g.tbl.aim_protex_main._plyr_aim_a = menu.add_feature("Alpha", "action_value_i", g.prnt.utils_info_aim.id,function(f)
		funcs.doo.input_f_value(f,30,255,3,3)
	end)
	funcs.set_feat_i_f(g.tbl.aim_protex_main._plyr_aim_a,30,255,1,255,"g.tbl.aim_protex_main._plyr_aim_a")

	function funcs.doo.aim_overlay_feats_hide(_bool)
	g.tbl.aim_protex_main._plyr_time.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_spc.hidden=_bool
	g.tbl.aim_protex_main._aim_notif_test.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_x.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_y.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_s.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_f.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_cr.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_cg.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_cb.hidden=_bool
	g.tbl.aim_protex_main._plyr_aim_a.hidden=_bool
	end
	funcs.doo.aim_overlay_feats_hide(true)

-------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------Show player list
-------------------------------------------------------------------------------------------------
g.tbl.PID_OSD = {}
g.tbl.PID_OSD.sort_prnt = menu.add_feature("Sort list", "parent", g.prnt.utils_info_overlay.id)
g.tbl.PID_OSD.show_info_prnt = menu.add_feature("Select info", "parent", g.prnt.utils_info_overlay.id)
g.tbl.PID_OSD.display_prnt = menu.add_feature("Display options", "parent", g.prnt.utils_info_overlay.id)
g.tbl.PID_OSD.sort_prnt_left = menu.add_feature("Order of info on left", "parent", g.tbl.PID_OSD.sort_prnt.id)
g.tbl.PID_OSD.sort_prnt_right = menu.add_feature("Order of info on right", "parent", g.tbl.PID_OSD.sort_prnt.id)
g.tbl.PID_OSD.text_dots = "..."
g.tbl.PID_OSD.popo_rb=false
g.tbl.PID_OSD.sort_bool=false

g.tbl.PID_OSD.alpha_str = {"Fade"}
for i=1,42 do
	g.tbl.PID_OSD.alpha_str[#g.tbl.PID_OSD.alpha_str+1]=(50+((i-1)*5))
end

g.tbl.PID_OSD.dist_table = {} --made this before i knew how to use tables properly. Too lazy to update
for i=0,31 do
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local pid = i
		while true do
			if funcs.is.valid_pid(pid) then
				if pid == API.plyr.my_id() then
					g.tbl.PID_OSD.dist_table[pid+1]={0,API.plyr.get.coords(pid),pid}
				else
					g.tbl.PID_OSD.dist_table[pid+1]={funcs.get.dist_me_pid_3d(pid),API.plyr.get.coords(pid),pid}
				end
			else
				g.tbl.PID_OSD.dist_table[pid+1]={10000,v3(0,0,0),pid}
			end
			system.yield(mth.rndm(90,100))
		end
	end)
end

g.tbl.PID_OSD.plyr_info_table = {}
function g.tbl.PID_OSD.table_default(i)
	g.tbl.PID_OSD.plyr_info_table[i] = {
	false, 	--do it
	0,		-- PID
	"",		-- name
	0,		--distance
	0,		-- kd
	0,		-- money
	0,		-- rank
	0,		-- time in session
	0,		-- host priority
	-1,		-- color
	false,	-- same color
	false,	-- 12 friend
	false,	-- 13 interior
	false,	-- 14 invisible
	}
end

g.tbl.PID_OSD.blink = {
false, -- otr
false, -- dead
false, -- mod spec
false, -- invis
}

g.tbl.PID_OSD.team_rgb = {
{255,255,255},-- table 1  == -1  -- white   gta reports org color as -1 when not in org/mc and momentarily when in org/mc
{247,159,123},-- table 2  ==  0  -- orange
{226,134,187},-- table 3  ==  1  -- pink
{239,238,151},-- table 4  ==  2  -- yellow
{113,169,175},-- table 5  ==  3  -- teal blue/green
{160,140,193},-- table 6  ==  4  -- purple
{141,206,167},-- table 7  ==  5  -- light green
{181,214,234},-- table 8  ==  6  -- light blue
{178,144,132},-- table 9  ==  7  -- brown
{0,  132,114},-- table 10 ==  8  -- dark green
{216,85,117},-- table 11 ==  9  -- hot pink
{255,255,255}-- table 12 == 10  -- I havent seen this as an org/mc color but without this slot here i will get an error
}

function g.tbl.PID_OSD.plyr_rgb(_pidT,_val)
	local color  = g.tbl.PID_INFO.color[_pidT]
	if color then
		color = g.tbl.PID_OSD.team_rgb[color+2]
	end
	color = color or g.tbl.PID_OSD.team_rgb[1]
	if funcs.is.num(_pidT) and _pidT > 0 then
		if _val == "r" then
			return color[1]
		elseif _val == "g" then
			return color[2]
		elseif _val == "b" then
			return color[3]
		end
		return color[1],color[2],color[3]
	end
	if _val ~= nil then
		return 255
	end
	return 255,255,255
end

function funcs.get.popo_rgb(_r,_g,_b,_wntd)
	if _wntd and g.tbl.PID_OSD.plyr_sort_wanted.on and g.tbl.PID_OSD.plyr_sort_wanted.value ~= 0 then
		if g.tbl.PID_OSD.popo_rb == true then
			return	235,36,39
		elseif g.tbl.PID_OSD.popo_rb == false then
			return 38,136,234
		end
	end
	return _r,_g,_b
end

function g.tbl.PID_OSD.time_M_S_str(_pid_time)
	local timer = API.util.t_s()-_pid_time
	local minutes = timer/60
	local seconds = funcs.get.round_num((60*(minutes-mth.flr(minutes))))
	if seconds > 59 then
		seconds = mth.flr(seconds/60)
	end
	if seconds < 10 then
		return mth.flr(timer/60)..":".."0"..tostring(seconds)
	else
		return mth.flr(timer/60)..":"..seconds
	end
end


function g.tbl.PID_OSD.plyr_info_do(pidT,_pid,dead,frnd,_int,_wntd,_otr)
	local _table = g.tbl.PID_OSD.plyr_sort_left.list
	local plyr_info = ""
	local host = API.plyr.is.host(_pid)
	local s_host = (script.get_host_of_this_script()==_pid)
	local its_me = (_pid == API.plyr.my_id())

	if ntv.is.voice_active(_pid) then
		plyr_info=plyr_info..g.tbl.PID_OSD.voice_dots_L
	elseif g.tbl.PID_INFO.typing[pidT] then
		plyr_info=plyr_info..g.tbl.PID_OSD.text_dots
	end

	for i=1,9 do
		if _table[i] == 1 and g.tbl.PID_INFO.pause[pidT]==true then
			plyr_info=plyr_info.." [".."Pause".."]"
		elseif _table[i] == 2 and glbls.is_mission_active(_pid) then
			plyr_info=plyr_info.." [".."On Mission".."]"
		elseif _table[i] == 3 and _int then
			plyr_info=plyr_info.." ["..g.tbl.PID_INFO.interior_str[pidT].."]"
		elseif _table[i] == 4 and _wntd and g.tbl.PID_OSD.plyr_sort_wanted.on and g.tbl.PID_OSD.plyr_sort_wanted.value ~= 1 then
			plyr_info=plyr_info.." ["..API.plyr.get.wanted(_pid).." STAR".."]"
		elseif _table[i] == 5 then
			if g.tbl.PID_INFO.loading[pidT] then 
				plyr_info=plyr_info.." [".."LOADING".."]"
			elseif dead or API.plyr.get.max_health(_pid) == 0.0 then
				if API.plyr.get.max_health(_pid) == 0.0 then
					plyr_info=plyr_info.." [".."UN-DEAD".."]"
				else
					plyr_info=plyr_info.." [".."DEAD".."]"
				end
			end
		elseif _table[i] == 6 then
			if host or s_host or frnd or its_me then
				plyr_info=plyr_info.." [".." "
				if host then plyr_info=plyr_info.."H" end
				if s_host then plyr_info=plyr_info.."S" end
				if frnd then plyr_info=plyr_info.."F" end
				if its_me then plyr_info=plyr_info.."Y" end
				plyr_info=plyr_info.." ".."]"
			end
		elseif _table[i] == 7 and _otr and not g.tbl.PID_INFO.loading[pidT] then
			plyr_info=plyr_info.." [".."OTR "..g.tbl.PID_OSD.time_M_S_str(g.tbl.PID_INFO.otr_time[pidT]).."]"
		elseif _table[i] == 8 and g.tbl.PID_OSD.plyr_sort_tis.on then
			plyr_info=plyr_info.." ["..g.tbl.PID_OSD.time_M_S_str(g.tbl.PID_INFO.join_time[pidT]).."]"
		elseif _table[i] == 9 and g.tbl.PID_OSD.plyr_sort_rank.on then
			plyr_info=plyr_info.." ["..g.tbl.PID_INFO.rank[pidT].."]"
		end
	end
	--plyr_info=plyr_info.." -- "..mth.flr( ntv.get.ent_height(API.plyr.get.ped(_pid)))
	--plyr_info=plyr_info.." ›»> <«‹		•·"
	return plyr_info
end
----------------------------------------------------------------------------------------------sort left
g.tbl.PID_OSD.plyr_sort_left = {}
g.tbl.PID_OSD.plyr_sort_left.list = {1,2,3,4,5,6,7,8,9}
g.tbl.PID_OSD.plyr_sort_left.str = {
"Pause",			--1
"On Mission",		--2
"Interior",			--3
"Wanted",			--4
"Loading/Dead",		--5
"Host/Friend",		--6
"Off the radar",	--7
"Time in session",	--8
"Rank"}				--9

function g.tbl.PID_OSD.plyr_sort_left_do(_feat,_bool)
	local msg,_value = ""
	local _val_table = {}
	local _feat_table = {}
	for i=1,9 do
		if g.tbl.PID_OSD.plyr_sort_left[i].name == _feat.name then
			_value = _feat.value
			_feat_table[i]=true
			break
		end
	end
	for i=1,9 do
		_val_table[i] = g.tbl.PID_OSD.plyr_sort_left[i].value
	end
	for feat=1,9 do
		if not _feat_table[feat] then
			for i=1,9 do
				if not _feat_table[i] then
					if g.tbl.PID_OSD.plyr_sort_left[i].value == _value then
						for ii=0,8 do
							if not funcs.is.table_has(_val_table,ii) then
								g.tbl.PID_OSD.plyr_sort_left[i].value = ii
								_val_table[#_val_table+1] = ii
								_feat_table[i]=true
								break
							end
						end
					end
				end
			end
		end
	end
	for i=1,9 do		
		g.tbl.PID_OSD.plyr_sort_left.list[i] = g.tbl.PID_OSD.plyr_sort_left[i].value+1
		msg = msg..i.." - "..g.tbl.PID_OSD.plyr_sort_left.str[g.tbl.PID_OSD.plyr_sort_left[i].value+1].."\n"
	end
	if _bool then
		g.N_P(2,"Player info overlay left sorted to:\n"..msg,__GV__,5,"Blue")
	end
end

for i=1,9 do 
	g.tbl.PID_OSD.plyr_sort_left[i]=menu.add_feature("Left info slot #"..i, "action_value_str", g.tbl.PID_OSD.sort_prnt_left.id,function(f)
		g.tbl.PID_OSD.plyr_sort_left_do(g.tbl.PID_OSD.plyr_sort_left[i],true)
	end)
	g.tbl.PID_OSD.plyr_sort_left[i]:set_str_data(g.tbl.PID_OSD.plyr_sort_left.str)
	g.tbl.PID_OSD.plyr_sort_left[i].value = i-1
end

g.tbl.PID_OSD.plyr_sort_left.default_feat=menu.add_feature("Left info slots default", "action", g.tbl.PID_OSD.sort_prnt_left.id,function(f)
	g.tbl.PID_OSD.plyr_sort_left.list = {1,2,3,4,5,6,7,8,9}
	local msg = ""
	for i=1,9 do
		g.tbl.PID_OSD.plyr_sort_left[i].value = i-1
		msg = msg..i.." - "..g.tbl.PID_OSD.plyr_sort_left.str[g.tbl.PID_OSD.plyr_sort_left[i].value+1].."\n"
	end
	g.N_P(2,"Player info overlay left sorted to:\n"..msg,__GV__,5,"Blue")
end)
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------sort right
g.tbl.PID_OSD.plyr_sort_right = {}
g.tbl.PID_OSD.plyr_sort_right.list = {1,2,3,4,5}
g.tbl.PID_OSD.plyr_sort_right.str = {
"Name",
"Money",
"KD",
"Vehicle",
"Speed"
}

function g.tbl.PID_OSD.plyr_sort_right_do(_feat,_bool)
	local msg,_value = ""
	local _val_table = {}
	local _feat_table = {}
	for i=1,5 do
		if g.tbl.PID_OSD.plyr_sort_right[i].name == _feat.name then
			_value = _feat.value
			_feat_table[i]=true
			break
		end
	end
	for i=1,5 do
		_val_table[i] = g.tbl.PID_OSD.plyr_sort_right[i].value
	end
	for feat=1,5 do
		if not _feat_table[feat] then
			for i=1,5 do
				if not _feat_table[i] then
					if g.tbl.PID_OSD.plyr_sort_right[i].value == _value then
						for ii=0,4 do
							if not funcs.is.table_has(_val_table,ii) then
								g.tbl.PID_OSD.plyr_sort_right[i].value = ii
								_val_table[#_val_table+1] = ii
								_feat_table[i]=true
								break
							end
						end
					end
				end
			end
		end
	end
	for i=1,5 do		
		g.tbl.PID_OSD.plyr_sort_right.list[i] = g.tbl.PID_OSD.plyr_sort_right[i].value+1
		msg = msg..i.." - "..g.tbl.PID_OSD.plyr_sort_right.str[g.tbl.PID_OSD.plyr_sort_right[i].value+1].."\n"
	end
	if _bool then
		g.N_P(2,"Player info overlay right sorted to:\n"..msg,__GV__,5,"Blue")
	end
end

for i=1,5 do 
	g.tbl.PID_OSD.plyr_sort_right[i]=menu.add_feature("Right info slot #"..i, "action_value_str", g.tbl.PID_OSD.sort_prnt_right.id,function(f)
		g.tbl.PID_OSD.plyr_sort_right_do(g.tbl.PID_OSD.plyr_sort_right[i],true)
	end)
	g.tbl.PID_OSD.plyr_sort_right[i]:set_str_data(g.tbl.PID_OSD.plyr_sort_right.str)
	g.tbl.PID_OSD.plyr_sort_right[i].value = i-1
end

g.tbl.PID_OSD.plyr_sort_right.default_feat=menu.add_feature("Right info slots default", "action", g.tbl.PID_OSD.sort_prnt_right.id,function(f)
	g.tbl.PID_OSD.plyr_sort_right.list = {1,2,3,4,5}
	local msg = ""
	for i=1,5 do
		g.tbl.PID_OSD.plyr_sort_right[i].value = i-1
		msg = msg..i.." - "..g.tbl.PID_OSD.plyr_sort_right.str[g.tbl.PID_OSD.plyr_sort_right[i].value+1].."\n"
	end
	g.N_P(2,"Player info overlay right sorted to:\n"..msg,__GV__,5,"Blue")
end)
----------------------------------------------------------------------------------------------
function g.tbl.PID_OSD.rgb_do(mod_spec,frnd,dead,otr,_r,_g,_b,popo,_wntd,_invis)
	local _r,_g,_b = _r,_g,_b
	if _invis and g.tbl.PID_OSD.blink[4] then
		_r,_g,_b = 255,192,203
	elseif mod_spec and g.tbl.PID_OSD.blink[3] then
		_r,_g,_b =  255,0,0
	elseif frnd and not dead and not otr then
		_r,_g,_b =  255,255,0
	elseif dead and g.tbl.PID_OSD.blink[2] then
		_r,_g,_b =  0,0,0
	elseif otr and g.tbl.PID_OSD.blink[1] then
		_r,_g,_b =  0,255,0
	end
	if popo then _r,_g,_b = funcs.get.popo_rgb(_r,_g,_b,_wntd) end
	return _r,_g,_b
end

function g.tbl.PID_OSD.god_mod_do(_pid,_int,_invis)
	local god_mod_text=""
	local gm_table = {}
	if not _int and g.tbl.PID_INFO.plyr_god[_pid+1] then
		gm_table[#gm_table+1]="G"
	end
	if not _int and (g.tbl.PID_INFO.in_veh[_pid+1] and g.tbl.PID_INFO.veh_god[_pid+1]) then
		gm_table[#gm_table+1]="VG"
	end
	if g.tbl.PID_INFO.modder[_pid+1] then
		gm_table[#gm_table+1]="M"
	end
	if not _int and _invis then
		gm_table[#gm_table+1]="IV"
	end
	if #gm_table > 0 then
		god_mod_text=god_mod_text.."["
		for i=1,#gm_table do
			god_mod_text=god_mod_text..gm_table[i]
			if gm_table[i+1] == "IV" then
				god_mod_text=god_mod_text.." "
			end
		end
		god_mod_text=god_mod_text.."]"
	end
	
	-- local plyr_g = g.tbl.PID_INFO.plyr_god[_pid+1]
	-- local veh_g = (g.tbl.PID_INFO.in_veh[_pid+1] and g.tbl.PID_INFO.veh_god[_pid+1])
	-- local plyr_m = g.tbl.PID_INFO.modder[_pid+1]
	-- if not _int and (plyr_g or veh_g) then
		-- god_mod_text=god_mod_text.."["
		-- if plyr_m then god_mod_text=god_mod_text.."M" end
		-- if plyr_g then god_mod_text=god_mod_text.."G" end
		-- if veh_g then god_mod_text=god_mod_text.."V" end
		-- god_mod_text=god_mod_text.."]"
	-- elseif plyr_m then god_mod_text=god_mod_text.."[M]"
	-- end
	return god_mod_text
end

function g.tbl.PID_OSD.name_do(_pid,pidT,dead) 
	local name,mod_spec ="",false
	local count,brckt1,brckt2 = 1
	local _r,_g,_b = g.tbl.PID_OSD.plyr_rgb(pidT)
	local _table = g.tbl.PID_OSD.plyr_sort_right.list
	-- local function brckt(_val)
		-- if funcs.is.even_num(_val) then
			-- return " {","}"
		-- end
		-- return " [","]"
	-- end
	local function get_total_money_str(_val)
		if _val >= 1000000000 then
			return "$ "..funcs.get._2_dec(_val/1000000000).." B"
		elseif _val >= 1000000 then
			return "$ "..funcs.get._2_dec(_val/1000000).." M"
		elseif _val >= 1000 then
			return "$ "..funcs.get._2_dec(_val/1000).." K"
		end
		return "$ ".._val
	end
	for i=1,5 do
		--brckt1,brckt2 = brckt(count)
		if _table[i] == 1 then name=name.." "..g.tbl.PID_INFO.name[pidT] count = count + 1 end
		if _table[i] == 2 and g.tbl.PID_OSD.plyr_sort_money.on then name=name.." ["..get_total_money_str(g.tbl.PID_INFO.money[_pid+1]).."]" count = count + 1 end
		if _table[i] == 3 and g.tbl.PID_OSD.plyr_sort_kd.on then name=name.." [".."KD "..g.tbl.PID_INFO.kd[pidT].."]" count = count + 1 end
		if _table[i] == 4 and g.tbl.PID_INFO.in_veh[pidT] and g.tbl.PID_OSD.plyr_sort_veh.on then name=name.." ["..funcs.get.veh_model_name(g.tbl.PID_INFO.veh[pidT]).."]" count = count + 1 end
		if _table[i] == 5 then
			if (g.tbl.PID_OSD.plyr_sort_speed_veh.on and g.tbl.PID_INFO.in_veh[pidT]) or (g.tbl.PID_OSD.plyr_sort_speed_ped.on and not g.tbl.PID_INFO.in_veh[pidT]) then 
				if g.tbl.PID_OSD.plyr_sort_speed_type.value == 0 and g.tbl.PID_INFO.plyr_speed_pos_mph[pidT] > g.tbl.PID_OSD.plyr_sort_speed_above.value then 
					if g.tbl.PID_INFO.plyr_speed_pos_mph[pidT] < 5 then
						name=name.." ["..funcs.get._1_dec(g.tbl.PID_INFO.plyr_speed_pos_mph[pidT]).." MPH".."]"
					else
						name=name.." ["..mth.flr(g.tbl.PID_INFO.plyr_speed_pos_mph[pidT]).." MPH".."]"
					end
					count = count + 1
				elseif g.tbl.PID_OSD.plyr_sort_speed_type.value == 1 and g.tbl.PID_INFO.plyr_speed_pos_kph[pidT] > g.tbl.PID_OSD.plyr_sort_speed_above.value then
					if g.tbl.PID_INFO.plyr_speed_pos_kph[pidT] < 5 then
						name=name.." ["..funcs.get._1_dec(g.tbl.PID_INFO.plyr_speed_pos_kph[pidT]).." KPH".."]"
					else
						name=name.." ["..mth.flr(g.tbl.PID_INFO.plyr_speed_pos_kph[pidT]).." KPH".."]"
					end
					count = count + 1
				end
			end
		end
	end
	if API.plyr.is.spectating(_pid) then
		-- local spctee =  network.get_player_player_is_spectating(_pid)
		-- if spctee ~= nil and g.tbl.PID_INFO.name[spctee+1] ~= nil then
		
		local spctee = network.get_entity_player_is_spectating(_pid)
		if funcs.is.ent(spctee) and API.ent.is.ped(spctee) and API.Ped.is.plyr(spctee) then
			spctee = API.plyr.get.plyr_from_ped(spctee)
			if not g.tbl.PID_INFO.interior[pidT] and not dead then mod_spec = true name=name.." - MODDED SPECTATE: "
			else name=name.." - Specating: " end
			name=name..g.tbl.PID_INFO.name[spctee+1]
		end
	end
	if ntv.is.voice_active(_pid) then
		name=name..g.tbl.PID_OSD.voice_dots_R
	elseif g.tbl.PID_INFO.typing[pidT] then
		name=name..g.tbl.PID_OSD.text_dots
	end
	return name,_r,_g,_b,mod_spec
end



g.tbl.PID_OSD.plyr_list_feat=menu.add_feature("Show player list", "toggle", g.prnt.utils_info_overlay.id, function(f)
	while not g.var.GS_has_loaded do
		system.yield(500)
	end
	g.tbl.PID_OSD.plyr_sort_left_do(g.tbl.PID_OSD.plyr_sort_left[1],false)
	funcs.doo.PID_OSD_hide(not f.on)
	g.tbl.PID_OSD.plyr_list_record_feat.on=f.on
	g.tbl.PID_OSD.popo_rb_feat.on=f.on
	g.tbl.PID_OSD.blink_do.on=f.on
	local max_count,count,y_val, y_offset,x_pos,y_once,y_off_once,more_players_once,dist_offset,god_offset
	local _r,_g,_b,plyr_info_offset,plyr_info,_dead,_otr,_frnd,mod_spec,god_mod_text,name,_pid,_pidT,_int,_table,_wntd
	local alpha_switch,alpha_calc,alpha_fade,alpha,alpha_speed,_invis = true,100,100,255
	while f.on do
		system.yield(5)
		if g.tbl.PID_OSD.plyr_sort_int_alpha.value == 0 then
			
			if alpha_switch then 
				alpha_calc = alpha_calc *(1.001+(g.tbl.PID_OSD.plyr_sort_int_alpha_speed.value/1000))
				if alpha_calc >= 220 then alpha_switch = false end
			else
				alpha_calc = alpha_calc *(.999-(g.tbl.PID_OSD.plyr_sort_int_alpha_speed.value/1000))
				if alpha_calc <= 150 then alpha_switch = true end
			end
			alpha_fade=mth.flr(alpha_calc)
		else
			alpha_fade = g.tbl.PID_OSD.alpha_str[g.tbl.PID_OSD.plyr_sort_int_alpha.value+1]
		end
		_table = {}
		for i=1,32 do
			if g.tbl.PID_OSD.plyr_info_table[i] ~= nil and g.tbl.PID_OSD.plyr_info_table[i][1] and API.plyr.is.valid(g.tbl.PID_OSD.plyr_info_table[i][2]) and API.plyr.get.name(g.tbl.PID_OSD.plyr_info_table[i][2]) == g.tbl.PID_OSD.plyr_info_table[i][3] then
				_table[#_table+1] = g.tbl.PID_OSD.plyr_info_table[i]
			end
		end
		if #_table < 1 then
			system.yield(250)
		else
			max_count = g.tbl.PID_OSD.plyr_sort_max.value
			count = 0
			y_once,y_off_once,more_players_once=false,false,false
			y_val = g.tbl.PID_OSD.plyr_sort_y.value
			y_offset = g.tbl.PID_OSD.plyr_sort_space_ver.value
			for i=1,#_table do
				if count < max_count then
					x_pos = g.tbl.PID_OSD.plyr_sort_x.value
					if g.tbl.PID_OSD.plyr_sort_column_space.on then
						if (g.tbl.PID_OSD.plyr_sort_column_type.value == 0 and i > funcs.get.round_num(max_count/2)) or (g.tbl.PID_OSD.plyr_sort_column_type.value == 1 and i > funcs.get.round_num(#_table/2)) then
							x_pos=x_pos+g.tbl.PID_OSD.plyr_sort_column_space.value
							if not y_once then
								y_val = g.tbl.PID_OSD.plyr_sort_y.value
								y_once=true
							end
						end
					end
					if i > 1 then
						if y_once and not y_off_once then y_off_once=true else y_val = y_val + y_offset	end
					end
					dist_offset = x_pos-(g.tbl.PID_OSD.plyr_sort_space_hor.value/4*3)
					plyr_info_offset = dist_offset-.5
					--god_offset = x_pos-((x_pos-dist_offset)*(g.tbl.PID_OSD.plyr_sort_space_hor.value/25))
					god_offset = x_pos-(g.tbl.PID_OSD.plyr_sort_space_hor.value/4.69)
					
					_pid,_pidT = _table[i][2],_table[i][2]+1
					_otr = (g.tbl.PID_INFO.otr_time[_pidT] ~= -1)
					_dead = g.tbl.PID_INFO.dead[_pidT]
					_frnd = _table[i][12]
					_int = g.tbl.PID_INFO.interior[_pidT]
					_wntd = (API.plyr.get.wanted(_pid) > 0)
					_invis = g.tbl.PID_INFO.invisible[_pidT]
					if _int then alpha = alpha_fade else alpha = 255 end

					-- on mission,loading,time in session, off the radar etc --
					plyr_info = g.tbl.PID_OSD.plyr_info_do(_pidT,_pid,_dead,_frnd,_int,_wntd,_otr)
					_r,_g,_b = g.tbl.PID_OSD.rgb_do(false,_frnd,_dead,_otr,255,255,255,true,_wntd,_invis)
					funcs.doo.overlay_right(plyr_info,_r,_g,_b,alpha,g.tbl.PID_OSD.plyr_sort_scale.value/300,g.tbl.PID_OSD.plyr_sort_font.value,plyr_info_offset/300,y_val/300,(plyr_info_offset-20)/300)
					
					-- distance --
					funcs.doo.overlay_left(mth.flr(g.tbl.PID_OSD.dist_table[_pid+1][1]),_r,_g,_b,alpha,g.tbl.PID_OSD.plyr_sort_scale.value/300,g.tbl.PID_OSD.plyr_sort_font.value,dist_offset/300,y_val/300)
					
					-- god or mod --
					god_mod_text = g.tbl.PID_OSD.god_mod_do(_pid,_int,_invis)
					if god_mod_text ~= "" then
						_r,_g,_b = g.tbl.PID_OSD.rgb_do(false,false,_dead,false,255,0,0,false,false,_invis)
						funcs.doo.overlay(god_mod_text,_r,_g,_b,alpha,g.tbl.PID_OSD.plyr_sort_scale.value/300,g.tbl.PID_OSD.plyr_sort_font.value,god_offset/300,y_val/300,(god_offset-20)/300)
					end
					
					-- name,vehicle,kd,money,etc
					name,_r,_g,_b,mod_spec = g.tbl.PID_OSD.name_do(_pid,_pidT,_dead)
					_r,_g,_b = g.tbl.PID_OSD.rgb_do(mod_spec,false,_dead,false,_r,_g,_b,false,false,false)
					funcs.doo.overlay_left(name,_r,_g,_b,alpha,g.tbl.PID_OSD.plyr_sort_scale.value/300,g.tbl.PID_OSD.plyr_sort_font.value,x_pos/300,y_val/300)
					count=count+1
				elseif count == max_count and count < #_table and not more_players_once then
					y_val = y_val + y_offset
					more_players = tostring(#_table-count)
					if #_table-count > 1 then more_players=more_players.." players hidden"	else more_players=more_players.." player hidden" end
					funcs.doo.overlay_left(more_players,255,255,255,150,g.tbl.PID_OSD.plyr_sort_scale.value/300,g.tbl.PID_OSD.plyr_sort_font.value,x_pos/300,y_val/300)
					more_players_once=true
				end
			end
		end
	end
	funcs.doo.PID_OSD_hide(not f.on)
	g.tbl.PID_OSD.plyr_list_record_feat.on=f.on
	g.tbl.PID_OSD.popo_rb_feat.on=f.on
	g.tbl.PID_OSD.blink_do.on=f.on
end)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_list_feat,"g.tbl.PID_OSD.plyr_list_feat")
	
g.tbl.PID_OSD.plyr_list_record_feat=menu.add_feature("Show player list HIDDEN", "toggle", g.prnt.utils_info_overlay.id, function(f)
	local top_table,other_table,end_table,bottom_table
	local function color_check(mine,theirs)
		if mine > -1 and theirs > -1 and mine == theirs then
			return true
		end
		return false
	end
	local function sort_for_top(_table,_val)
		top_table,other_table,bottom_table,end_table = {},{},{},{}
		for i=1,32 do
			if g.tbl.PID_OSD.plyr_sort_interior.on and _table[i][13] then
				bottom_table[#bottom_table+1]=_table[i]
			elseif _val == 0 then
				if _table[i][12] then
					top_table[#top_table+1]=_table[i]
				else
					other_table[#other_table+1]=_table[i]
				end
			else
				if _table[i][11] then
					top_table[#top_table+1]=_table[i]
				else
					other_table[#other_table+1]=_table[i]
				end
			end
		end
		if #top_table > 0 then
			if #top_table > 1 then
				g.tbl.PID_OSD.sort_do(top_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
			end
			for i=1,#top_table do
				end_table[#end_table+1]=top_table[i]
			end
		end
		if #other_table > 0 then
			if #other_table > 1 then
				g.tbl.PID_OSD.sort_do(other_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
			end
			for i=1,#other_table do
				end_table[#end_table+1]=other_table[i]
			end
		end
		if #bottom_table > 0 then
			if #bottom_table > 1 then
				g.tbl.PID_OSD.sort_do(bottom_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
			end
			for i=1,#bottom_table do
				end_table[#end_table+1]=bottom_table[i]
			end
		end
		return end_table
	end
	local function sort_for_bottom(_table)
		other_table,bottom_table,end_table = {},{},{}
		for i=1,32 do
			if _table[i][13] then
				bottom_table[#bottom_table+1]=_table[i]
			else
				other_table[#other_table+1]=_table[i]
			end
		end
		if #other_table > 0 then
			if #other_table > 1 then
				g.tbl.PID_OSD.sort_do(other_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
			end
			for i=1,#other_table do
				end_table[#end_table+1]=other_table[i]
			end
		end
		if #bottom_table > 0 then
			if #bottom_table > 1 then
				g.tbl.PID_OSD.sort_do(bottom_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
			end
			for i=1,#bottom_table do
				end_table[#end_table+1]=bottom_table[i]
			end
		end
		return end_table
	end
    while f.on do
		g.tbl.PID_OSD.sort_bool=false
		for i=1,32 do
			if funcs.is.valid_pid(i-1) and (g.tbl.PID_OSD.plyr_sort_self.on or i-1 ~= API.plyr.my_id()) then
				g.tbl.PID_OSD.plyr_info_table[i] = {
					true, 											-- 1  do it
					i-1,											-- 2  PID
					g.tbl.PID_INFO.name[i],							-- 3  name
					g.tbl.PID_OSD.dist_table[i][1],			-- 4  distance
					g.tbl.PID_INFO.kd[i],							-- 5  kd
					g.tbl.PID_INFO.money[i],							-- 6  money
					g.tbl.PID_INFO.rank[i],							-- 7  rank
					API.util.t_s()-g.tbl.PID_INFO.join_time[i],		-- 8  time in session
					API.plyr.get.host_priority(i-1),			-- 9  host priority
					g.tbl.PID_INFO.color[i],							-- 10 color
					color_check(g.tbl.PID_INFO.color[API.plyr.my_id()+1],g.tbl.PID_INFO.color[i]),	-- 11 same org/mc
					API.plyr.is.friend(i-1),					-- 12 friend
					g.tbl.PID_INFO.interior[i],						-- 13 interior
				}
			else
				g.tbl.PID_OSD.table_default(i)
			end
		end
		if g.tbl.PID_OSD.plyr_sort_top.on then
			g.tbl.PID_OSD.plyr_info_table = sort_for_top(g.tbl.PID_OSD.plyr_info_table,g.tbl.PID_OSD.plyr_sort_top.value)
		elseif g.tbl.PID_OSD.plyr_sort_interior.on then
			g.tbl.PID_OSD.plyr_info_table = sort_for_bottom(g.tbl.PID_OSD.plyr_info_table)
		else
			g.tbl.PID_OSD.sort_do(g.tbl.PID_OSD.plyr_info_table,g.tbl.PID_OSD.plyr_sort_by_val.value)
		end
		funcs.doo.yield_while_true(f.on and (g.tbl.PID_OSD.sort_bool==false),250)
	end
end)
g.tbl.PID_OSD.plyr_list_record_feat.hidden=true

function g.tbl.PID_OSD.sort_do(_table,_val)
	if _val == 1 then -- alphabetical
		if  g.tbl.PID_OSD.plyr_sort_asc_desc.value == 0 then table.sort(_table, function(a, b) return a[3]:lower() < b[3]:lower() end)  -- thank you mr kek
		else table.sort(_table, function(a, b) return a[3]:lower() > b[3]:lower() end)  -- thank you mr kek
		end
	elseif _val == 2 then -- distance
		if  g.tbl.PID_OSD.plyr_sort_asc_desc.value == 0 then table.sort(_table, function(a, b) return a[4] < b[4] end)
		else table.sort(_table, function(a, b) return a[4] > b[4] end)
		end
	else -- other
		if g.tbl.PID_OSD.plyr_sort_asc_desc.value == 0 then
			table.sort(_table, function(a, b) 
				if a[_val+2] == b[_val+2] then return a[4] < b[4]
				else return a[_val+2] < b[_val+2]
				end
			end)
		else 
			table.sort(_table, function(a, b) 
				if a[_val+2] == b[_val+2] then return a[4] > b[4]
				else return a[_val+2] > b[_val+2]
				end
			end)
		end
	end
end
		
g.tbl.PID_OSD.blink_do=menu.add_feature("hidden - makes blinks, blink, and dots, dot", "toggle", g.prnt.utils_info_overlay.id, function(f)
	while f.on do
		system.yield(50)
		g.tbl.PID_OSD.text_dots="..."
		for i=1,10 do
			if i < 5 then
				g.tbl.PID_OSD.blink[i]=true
				funcs.doo.yield_while_true(f.on,100)
				g.tbl.PID_OSD.text_dots=g.tbl.PID_OSD.text_dots.."."
				g.tbl.PID_OSD.blink[i]=false
				funcs.doo.yield_while_true(f.on,100)
				g.tbl.PID_OSD.text_dots=g.tbl.PID_OSD.text_dots.."."
			else
				g.tbl.PID_OSD.text_dots=g.tbl.PID_OSD.text_dots.."."
				funcs.doo.yield_while_true(f.on,25)
			end
		end		
	end
end)
g.tbl.PID_OSD.blink_do.hidden=true

g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	while true do
		g.tbl.PID_OSD.voice_dots_L="››››>>"
		g.tbl.PID_OSD.voice_dots_R="<<‹‹‹‹"	
		system.yield(250)
		
		g.tbl.PID_OSD.voice_dots_L="›››>>›"
		g.tbl.PID_OSD.voice_dots_R="‹<<‹‹‹"
		system.yield(250)
		
		g.tbl.PID_OSD.voice_dots_L="››>>››"
		g.tbl.PID_OSD.voice_dots_R="‹‹<<‹‹"	
		system.yield(250)
		
		g.tbl.PID_OSD.voice_dots_L="›>>›››"
		g.tbl.PID_OSD.voice_dots_R="‹‹‹<<‹"
		system.yield(250)
		
		g.tbl.PID_OSD.voice_dots_L=">>››››"
		g.tbl.PID_OSD.voice_dots_R="‹‹‹‹<<"	
		system.yield(250)
	
	end
end)


g.tbl.PID_OSD.popo_rb_feat=menu.add_feature("hidden - makes police colrs flash", "toggle", g.prnt.utils_info_overlay.id, function(f)
	while f.on do
		for i=1,4 do
			g.tbl.PID_OSD.popo_rb=true
			funcs.doo.yield_while_true(f.on,125)
			g.tbl.PID_OSD.popo_rb=false
			funcs.doo.yield_while_true(f.on,225)
		end
		g.tbl.PID_OSD.popo_rb=nil
		funcs.doo.yield_while_true(f.on,1000)
	end
end)
g.tbl.PID_OSD.popo_rb_feat.hidden=true

g.tbl.PID_OSD.plyr_sort_by_val=menu.add_feature("Player list sort by:", "autoaction_value_str", g.tbl.PID_OSD.sort_prnt.id,function()
	g.tbl.PID_OSD.sort_bool=true
end)
g.tbl.PID_OSD.plyr_sort_by_val:set_str_data({"PID","Alphabetically","Distance","K/D Ratio","Money","Rank","Time in session","Host Priority"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_by_val,"g.tbl.PID_OSD.plyr_sort_by_val")

g.tbl.PID_OSD.plyr_sort_asc_desc=menu.add_feature("Player list sort type:", "autoaction_value_str", g.tbl.PID_OSD.sort_prnt.id,function()
	g.tbl.PID_OSD.sort_bool=true
end)
g.tbl.PID_OSD.plyr_sort_asc_desc:set_str_data({"Ascending", "Descending"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_asc_desc,"g.tbl.PID_OSD.plyr_sort_asc_desc")

g.tbl.PID_OSD.plyr_sort_top = menu.add_feature("Always top of the list:", "value_str", g.tbl.PID_OSD.sort_prnt.id)
g.tbl.PID_OSD.plyr_sort_top:set_str_data({"Friends","Org/MC"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_top,"g.tbl.PID_OSD.plyr_sort_top")

g.tbl.PID_OSD.plyr_sort_interior = menu.add_feature("Interior always at bottom of list", "toggle", g.tbl.PID_OSD.sort_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_interior,"g.tbl.PID_OSD.plyr_sort_interior")

g.tbl.PID_OSD.plyr_sort_self = menu.add_feature("Include self on list", "toggle", g.tbl.PID_OSD.sort_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_self,"g.tbl.PID_OSD.plyr_sort_self")

g.tbl.PID_OSD.plyr_sort_money = menu.add_feature("Show money", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_money,"g.tbl.PID_OSD.plyr_sort_money")

g.tbl.PID_OSD.plyr_sort_rank = menu.add_feature("Show rank", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_rank,"g.tbl.PID_OSD.plyr_sort_rank")

g.tbl.PID_OSD.plyr_sort_kd = menu.add_feature("Show K/D", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_kd,"g.tbl.PID_OSD.plyr_sort_kd")

g.tbl.PID_OSD.plyr_sort_veh = menu.add_feature("Show vehicle", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_veh,"g.tbl.PID_OSD.plyr_sort_veh")

g.tbl.PID_OSD.plyr_sort_speed_veh = menu.add_feature("Show speed in a vehicle", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_speed_veh,"g.tbl.PID_OSD.plyr_sort_speed_veh")

g.tbl.PID_OSD.plyr_sort_speed_ped = menu.add_feature("Show speed on foot", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_speed_ped,"g.tbl.PID_OSD.plyr_sort_speed_ped")

g.tbl.PID_OSD.plyr_sort_speed_type = menu.add_feature("Show speed using:", "autoaction_value_str", g.tbl.PID_OSD.show_info_prnt.id)
g.tbl.PID_OSD.plyr_sort_speed_type:set_str_data({"MPH","KPH"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_speed_type,"g.tbl.PID_OSD.plyr_sort_speed_type")

g.tbl.PID_OSD.plyr_sort_speed_above = menu.add_feature("Only show speed above", "action_value_i", g.tbl.PID_OSD.show_info_prnt.id)
g.tbl.PID_OSD.plyr_sort_speed_above.max,g.tbl.PID_OSD.plyr_sort_speed_above.min,g.tbl.PID_OSD.plyr_sort_speed_above.mod=200,0,5
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_speed_above,"g.tbl.PID_OSD.plyr_sort_speed_above")

g.tbl.PID_OSD.plyr_sort_wanted = menu.add_feature("Show wanted level", "value_str", g.tbl.PID_OSD.show_info_prnt.id)
g.tbl.PID_OSD.plyr_sort_wanted:set_str_data({"Show stars","Blink red/blue","Show both"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_wanted,"g.tbl.PID_OSD.plyr_sort_wanted")

g.tbl.PID_OSD.plyr_sort_tis = menu.add_feature("Show time in session", "toggle", g.tbl.PID_OSD.show_info_prnt.id)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_tis,"g.tbl.PID_OSD.plyr_sort_tis")

g.tbl.PID_OSD.plyr_sort_column_space = menu.add_feature("Display two columns: Spacing", "value_i", g.tbl.PID_OSD.display_prnt.id)
g.tbl.PID_OSD.plyr_sort_column_space.max,g.tbl.PID_OSD.plyr_sort_column_space.min,g.tbl.PID_OSD.plyr_sort_column_space.mod=250,25,5
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_column_space,"g.tbl.PID_OSD.plyr_sort_column_space")

g.tbl.PID_OSD.plyr_sort_column_type = menu.add_feature("Display two columns: Type", "autoaction_value_str", g.tbl.PID_OSD.display_prnt.id)
g.tbl.PID_OSD.plyr_sort_column_type:set_str_data({"If needed","Always 50/50"})
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_column_type,"g.tbl.PID_OSD.plyr_sort_column_type")

g.tbl.PID_OSD.plyr_sort_int_alpha = menu.add_feature("Interior player alpha", "autoaction_value_str", g.tbl.PID_OSD.display_prnt.id,function(f)
	if f.value == 0 then
		g.tbl.PID_OSD.plyr_sort_int_alpha_speed.hidden=false
	else
		g.tbl.PID_OSD.plyr_sort_int_alpha_speed.hidden=true
	end
end)
g.tbl.PID_OSD.plyr_sort_int_alpha:set_str_data(g.tbl.PID_OSD.alpha_str)
funcs.add_to_S_L(g.tbl.PID_OSD.plyr_sort_int_alpha,"g.tbl.PID_OSD.plyr_sort_int_alpha")

g.tbl.PID_OSD.plyr_sort_int_alpha_speed = menu.add_feature("Alpha fade speed", "action_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_int_alpha_speed,1,10,1,5,"g.tbl.PID_OSD.plyr_sort_int_alpha_speed")

g.tbl.PID_OSD.plyr_sort_max = menu.add_feature("Max Players", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_max,1,32,1,32,"g.tbl.PID_OSD.plyr_sort_max")

g.tbl.PID_OSD.plyr_sort_x = menu.add_feature("X Pos", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_x,0,300,1,0,"g.tbl.PID_OSD.plyr_sort_x")

g.tbl.PID_OSD.plyr_sort_y = menu.add_feature("Y Pos", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_y,0,300,1,0,"g.tbl.PID_OSD.plyr_sort_y")

g.tbl.PID_OSD.plyr_sort_space_hor = menu.add_feature("Horizontal Spacing", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_space_hor,1,25,1,1,"g.tbl.PID_OSD.plyr_sort_space_hor")

g.tbl.PID_OSD.plyr_sort_space_ver = menu.add_feature("Vertical Spacing", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_space_ver,1,25,1,1,"g.tbl.PID_OSD.plyr_sort_space_ver")

g.tbl.PID_OSD.plyr_sort_scale = menu.add_feature("Scale", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_scale,75,300,1,75,"g.tbl.PID_OSD.plyr_sort_scale")

g.tbl.PID_OSD.plyr_sort_font = menu.add_feature("Font", "autoaction_value_i", g.tbl.PID_OSD.display_prnt.id)
funcs.set_feat_i_f(g.tbl.PID_OSD.plyr_sort_font,0,9,1,0,"g.tbl.PID_OSD.plyr_sort_font")

function funcs.doo.PID_OSD_hide(_bool)
g.tbl.PID_OSD.sort_prnt.hidden=_bool
g.tbl.PID_OSD.display_prnt.hidden=_bool
g.tbl.PID_OSD.show_info_prnt.hidden=_bool
end
funcs.doo.PID_OSD_hide(true)

function funcs.doo.PID_OSD_recc_sett()
g.tbl.PID_OSD.plyr_sort_by_val.value=2
g.tbl.PID_OSD.plyr_sort_self.on=true
g.tbl.PID_OSD.plyr_sort_money.on=true
g.tbl.PID_OSD.plyr_sort_rank.on=true
g.tbl.PID_OSD.plyr_sort_kd.on=true
g.tbl.PID_OSD.plyr_sort_veh.on=true
g.tbl.PID_OSD.plyr_sort_max.value=32
g.tbl.PID_OSD.plyr_sort_space_hor.value=10
g.tbl.PID_OSD.plyr_sort_space_ver.value=5
g.tbl.PID_OSD.plyr_sort_x.value=91
g.tbl.PID_OSD.plyr_sort_y.value=3
g.tbl.PID_OSD.plyr_sort_scale.value=75
g.tbl.PID_OSD.plyr_sort_font.value=4
g.tbl.PID_OSD.plyr_sort_column_space.on=true
g.tbl.PID_OSD.plyr_sort_column_space.value=100
g.tbl.PID_OSD.plyr_sort_column_type.value=1
g.tbl.PID_OSD.plyr_sort_wanted.on=true
g.tbl.PID_OSD.plyr_sort_wanted.value=2
g.tbl.PID_OSD.plyr_sort_tis.on=true
g.tbl.PID_OSD.plyr_sort_speed_type.value=0
g.tbl.PID_OSD.plyr_sort_speed_above.value=0
g.tbl.PID_OSD.plyr_sort_speed_veh.on=true
g.tbl.PID_OSD.plyr_sort_speed_ped.on=true
g.tbl.PID_OSD.plyr_sort_interior.on=true
g.tbl.PID_OSD.plyr_list_feat.on=true
end
funcs.doo.PID_OSD_recc_sett()

g._ldrbrd = {}
g._ldrbrd.ped_veh_id={-1,-1}
g._ldrbrd.plyr_dead={}
g._ldrbrd.plyr_score={}
g._ldrbrd.plyr_name={}
g._ldrbrd.feat_name_str={}
g._ldrbrd.last_killer=-1
g._ldrbrd.last_death=-1

function g._ldrbrd.default_all_tables()
	for i=1,32 do
		g._ldrbrd.plyr_score[i]={}
		for pid=1,32 do
			g._ldrbrd.plyr_score[i][pid]={0,0,""}
		end
		g._ldrbrd.ped_veh_id[i]={-1,-1}
		g._ldrbrd.plyr_dead[i]=false
		g._ldrbrd.plyr_name[i]=""
		if API.plyr.is.valid(i-1) then
			g._ldrbrd.feat_name_str[i]=funcs.get.pid_name(i-1)
		else
			g._ldrbrd.feat_name_str[i]=""
		end
	end
end
g._ldrbrd.default_all_tables()

function g._ldrbrd.sort(score_table)
	if g._ldrbrd.sort_drctn.value == 0 and g._ldrbrd.sort_by.value ~= 4 then
		if g._ldrbrd.sort_by.value == 0 then
			table.sort(score_table, function(a, b) return a[3]:lower() < b[3]:lower()  end) 
		elseif g._ldrbrd.sort_by.value == 1 then
			table.sort(score_table, function(a, b) 
			if a[1] == b[1] then
				return a[3]:lower() < b[3]:lower()
			end
			return a[1] < b[1] end)
		elseif g._ldrbrd.sort_by.value == 2 then
			table.sort(score_table, function(a, b) 
			if a[2] == b[2] then
				return a[3]:lower() < b[3]:lower()
			end
			return a[2] < b[2] end)
		else
			table.sort(score_table, function(a, b) return a[7] < b[7]  end)
		end
	elseif g._ldrbrd.sort_drctn.value == 1 then
		if g._ldrbrd.sort_by.value == 0 then
			table.sort(score_table, function(a, b) return a[3]:lower() > b[3]:lower()  end) 
		elseif g._ldrbrd.sort_by.value == 1 then
			table.sort(score_table, function(a, b)
			if a[1] == b[1] then
				return a[3]:lower() > b[3]:lower()
			end
			return a[1] > b[1]  end)
		elseif g._ldrbrd.sort_by.value == 2 then
			table.sort(score_table, function(a, b)
			if a[2] == b[2] then
				return a[3]:lower() > b[3]:lower()
			end
			return a[2] > b[2]  end)
		elseif g._ldrbrd.sort_by.value == 3 then
			table.sort(score_table, function(a, b) return a[7] > b[7]  end)
		else
			table.sort(score_table, function(a, b) return a[8] > b[8]  end)
		end
	end
end

g._ldrbrd.record_ped_veh_id = menu.add_feature("HIDDEN record plyr ped veh id death", "toggle", g.prnt.utils_info_ldrbrd.id, function(f)
	local function record_death(_pidT,_ped_id)
		if API.plyr.count() > 0 then -- suicide in SP returns nil i guess
			local murderer = ntv.get.what_ent_killed_ped(_ped_id)
			for i=1,32 do
				if g._ldrbrd.ped_veh_id[i][1] == murderer or g._ldrbrd.ped_veh_id[i][2] == murderer then
					g._ldrbrd.plyr_score[_pidT][i][2]=g._ldrbrd.plyr_score[_pidT][i][2]+1
					g._ldrbrd.plyr_score[i][_pidT][1]=g._ldrbrd.plyr_score[i][_pidT][1]+1
					g._ldrbrd.last_killer=i
					g._ldrbrd.last_death=_pidT
					return true
				end
			end
		end
		return false
	end
	local plyr_leave = event.add_event_listener("player_leave", function(listener)
		if listener.player == API.plyr.my_id() then
			g._ldrbrd.default_all_tables()
		end
	end)
	while f.on do
		for i=1,32 do
			if funcs.is.valid_pid(i-1) then
				g._ldrbrd.ped_veh_id[i][1]=API.plyr.get.ped(i-1)
				g._ldrbrd.plyr_name[i]=funcs.get.pid_name(i-1)
				g._ldrbrd.feat_name_str[i]=funcs.get.pid_name(i-1)
				for pid=1,32 do
					g._ldrbrd.plyr_score[pid][i][3]=funcs.get.pid_name(i-1)
				end
				if API.plyr.is.in_veh(i-1) then
					g._ldrbrd.ped_veh_id[i][2]=API.plyr.get.veh(i-1)
				else
					g._ldrbrd.ped_veh_id[i][2]=-1
				end
			else
				if g._ldrbrd.last_killer == i then
					g._ldrbrd.last_killer=-1
				end
				if g._ldrbrd.last_death == i then
					g._ldrbrd.last_death=-1
				end
				g._ldrbrd.ped_veh_id[i]={-1,-1}
				g._ldrbrd.plyr_dead[i]=false
				g._ldrbrd.plyr_name[i]=""
				g._ldrbrd.feat_name_str[i]=""
				for pid=1,32 do
					g._ldrbrd.plyr_score[i][pid]={0,0,""}
					g._ldrbrd.plyr_score[pid][i]={0,0,""}
				end
			end
		end
		g._ldrbrd.feat:set_str_data(g._ldrbrd.feat_name_str)
		for i=1,32 do
			if funcs.is.valid_pid(i-1) then
				if funcs.is.dead(API.plyr.get.ped(i-1)) then
					if g._ldrbrd.plyr_dead[i] == false then
						if record_death(i,API.plyr.get.ped(i-1)) then
							g._ldrbrd.plyr_dead[i]=true
						end
					end
				elseif API.plyr.is.playing(i-1) then
					g._ldrbrd.plyr_dead[i] = false
				end
			end
		end
		system.yield(250)
	end
end)
g._ldrbrd.record_ped_veh_id.on=true
g._ldrbrd.record_ped_veh_id.hidden=true

g._ldrbrd.feat = menu.add_feature("Show Leaderboard","value_str",g.prnt.utils_info_ldrbrd.id, function(f)
	local score_table,_table,count,name,v2_pos,text_pos
	local _r,_g,_b,size,back_a,text_a,pid,my_r,my_g,my_b,screen_s
	local f_value=f.value
	local y_val,y_ofst = 0.013,0
	local x_pos,y_pos = 0.5,0.5
	local function show_last()
		if not g._ldrbrd.show_last.on then 
			return false
		elseif g._ldrbrd.show_last.value == 0 and not funcs.is.valid_pid(g._ldrbrd.last_killer-1) then
			return false
		elseif g._ldrbrd.show_last.value == 1 and not funcs.is.valid_pid(g._ldrbrd.last_death-1) then
			return false
		else
			local I_name
			if g._ldrbrd.show_last.value == 0 then I_name=funcs.get.pid_name(g._ldrbrd.last_killer-1) else I_name=funcs.get.pid_name(g._ldrbrd.last_death-1) end
			for i=1,32 do
				if g._ldrbrd.feat_name_str[i] == I_name then
					name = I_name
					my_r,my_g,my_b = g.tbl.PID_OSD.plyr_rgb(i,nil)
					_table=g._ldrbrd.plyr_score[i]
					f.value=i-1
					return true
				end
			end
		end
		return false
	end
	local function retrieve_info()
		_table = {}
		if not show_last() then
			for i=1,32 do
				if g._ldrbrd.plyr_name[i] == g._ldrbrd.feat_name_str[f.value+1] then
					name = funcs.get.pid_name(i-1)
					my_r,my_g,my_b = g.tbl.PID_OSD.plyr_rgb(i,nil)
					_table=g._ldrbrd.plyr_score[i]
					break
				end
			end
		end
		count = 1
		score_table={}
		for i=1,32 do
			if (_table[i][1] ~= nil and _table[i][1] > 0) or (_table[i][2] ~= nil and _table[i][2] > 0)  then
				if _table[i][3] == name then
					name=name.." - ".._table[i][1].." Suicide"
				else
					count=count+1
					score_table[#score_table+1]={
					_table[i][1],
					_table[i][2],
					_table[i][3],
					g.tbl.PID_OSD.plyr_rgb(i,"r"),
					g.tbl.PID_OSD.plyr_rgb(i,"g"),
					g.tbl.PID_OSD.plyr_rgb(i,"b"),
					g.tbl.PID_OSD.dist_table[i][1],
					i-1}
				end
			end
		end
	end
	local function check_plyr_name()
		local down=false
		if f_value~=f.value then
			if f.value==f_value-1 or f_value-1==-1 then
				down=true
			end
		end
		repeat
			if g._ldrbrd.feat_name_str[f.value+1] == "" then
				if down then
					if f.value == 0 then
						f.value=31
					else
						f.value=f.value-1
					end
				else
					if f.value == 31 then
						f.value=0
					else
						f.value=f.value+1
					end
				end
			end
		until g._ldrbrd.feat_name_str[f.value+1] ~= ""
		f_value=f.value
	end
	while not g.var.GS_has_loaded do
		system.yield(50)
	end
	local script_size = funcs.get.SD_size(f.on)
	while f.on do
		system.yield(5)
		check_plyr_name()
		retrieve_info()
		g._ldrbrd.sort(score_table)
		x_pos = g._ldrbrd.x.value
		y_pos = g._ldrbrd.y.value
		back_a = g._ldrbrd.back_a.value
		text_a = g._ldrbrd.text_a.value
		size = g._ldrbrd.size.value
		y_val = 0.04*size
		v2_pos = v2(x_pos,y_pos-y_val*count*.5)
		API.SD.draw_rect(v2_pos,v2(0.169*size,0.040*size*count),funcs.get.rgb_to_int(0,0,0,back_a))
		API.SD.draw_rect(v2(x_pos,y_pos-(y_val*.5)),v2(0.169*size,0.040*size),funcs.get.rgb_to_int(0,0,0,back_a))
		text_pos = v2(v2_pos.x*(2/3),(y_pos-(y_val*.5))*2)
		text_size = size*1.069*script_size*g.RES
		API.SD.draw_text(name,text_pos,text_pos,text_size,funcs.get.rgb_to_int(my_r,my_g,my_b,text_a),((1<<0)+(1<<1)+(1<<2)),nil)
		for i = 1,#score_table do
			text_pos=text_pos-v2(0,y_val*2)
			_r,_g,_b = score_table[i][4],score_table[i][5],score_table[i][6]
			API.SD.draw_text(score_table[i][1],text_pos-v2(size*0.0725,0),text_pos,text_size,funcs.get.rgb_to_int(my_r,my_g,my_b,text_a),((1<<0)+(1<<1)+(1<<2)),nil)
			API.SD.draw_text("-",text_pos-v2(size*0.06,0),text_pos,text_size,funcs.get.rgb_to_int(255,255,255,text_a),((1<<0)+(1<<1)+(1<<2)),nil)
			API.SD.draw_text(score_table[i][2],text_pos-v2(size*0.0475,0)	,text_pos,text_size,funcs.get.rgb_to_int(_r,_g,_b,text_a),((1<<0)+(1<<1)+(1<<2)),nil)
			API.SD.draw_text(score_table[i][3],v2(x_pos,text_pos.y)-v2(size*0.0325,0),v2(x_pos,text_pos.y),text_size,funcs.get.rgb_to_int(_r,_g,_b,text_a),((1<<1)+(1<<2)),nil)
		end
	end
end)
g._ldrbrd.feat:set_str_data(g._ldrbrd.feat_name_str)
funcs.add_to_S_L(g._ldrbrd.feat,"g._ldrbrd.feat")

g._ldrbrd.show_last = menu.add_feature("Always show last player who:","value_str",g.prnt.utils_info_ldrbrd.id)
g._ldrbrd.show_last:set_str_data({"Killed","Was killed"})
funcs.add_to_S_L(g._ldrbrd.show_last,"g._ldrbrd.show_last")

g._ldrbrd.sort_by = menu.add_feature("Sort scores","action_value_str",g.prnt.utils_info_ldrbrd.id)
g._ldrbrd.sort_by:set_str_data({"Name","Kills","Deaths","Distance","PID"})
funcs.add_to_S_L(g._ldrbrd.sort_by,"g._ldrbrd.sort_by")

g._ldrbrd.sort_drctn = menu.add_feature("Sort type","action_value_str",g.prnt.utils_info_ldrbrd.id)
g._ldrbrd.sort_drctn:set_str_data({"Ascending","Descending"})
funcs.add_to_S_L(g._ldrbrd.sort_drctn,"g._ldrbrd.sort_drctn")

g._ldrbrd.size = menu.add_feature("Size","action_value_f",g.prnt.utils_info_ldrbrd.id)
funcs.set_feat_i_f(g._ldrbrd.size,0.1,3,0.01,1,"g._ldrbrd.size")

g._ldrbrd.x = menu.add_feature("X Pos","action_value_f",g.prnt.utils_info_ldrbrd.id)
funcs.set_feat_i_f(g._ldrbrd.x,-1.0,1.0,0.01,0.89,"g._ldrbrd.x")

g._ldrbrd.y = menu.add_feature("Y Pos","action_value_f",g.prnt.utils_info_ldrbrd.id)
funcs.set_feat_i_f(g._ldrbrd.y,-1.0,1.0,0.01,0.44,"g._ldrbrd.y")

g._ldrbrd.back_a = menu.add_feature("Background alpha","action_value_i",g.prnt.utils_info_ldrbrd.id)
funcs.set_feat_i_f(g._ldrbrd.back_a,1,255,1,100,"g._ldrbrd.back_a")

g._ldrbrd.text_a = menu.add_feature("Text alpha","action_value_i",g.prnt.utils_info_ldrbrd.id)
funcs.set_feat_i_f(g._ldrbrd.text_a,1,255,1,255,"g._ldrbrd.text_a")

function g._ldrbrd.get_highest(_1_or_2,_text)
	local temp,score,name_k,name_d=0,{},{},{}
	for i=1,32 do
		for pid=1,32 do
			if g._ldrbrd.plyr_score[i][pid][_1_or_2] > temp and g._ldrbrd.plyr_name[i] ~= "" and g._ldrbrd.plyr_name[pid] ~= "" then
				temp=g._ldrbrd.plyr_score[i][pid][_1_or_2]
			end
		end
	end
	for i=1,32 do
		for pid=1,32 do
			if g._ldrbrd.plyr_score[i][pid][_1_or_2] >= temp and g._ldrbrd.plyr_name[i] ~= "" and g._ldrbrd.plyr_name[pid] ~= "" then
				score[#score+1]={g._ldrbrd.plyr_score[i][pid][1],g._ldrbrd.plyr_score[i][pid][2],g._ldrbrd.plyr_name[i],g._ldrbrd.plyr_name[pid]}
			end
		end
	end
	if temp>0 then
		local msg =""
		for i=1,#score do
			if score[i][3] == score[i][4] then
				msg=msg..score[i][3].." "..score[i][1].." suicide(s)\n"
			else
				msg=msg..score[i][3].." "..score[i][1].." - "..score[i][2].." "..score[i][4].."\n"
			end
		end
		g.N_P(2,msg,__GV__,5,"Blue")
	else
		g.N_P(2,"No recorded ".._text,__GV__,5,"Blue")
	end
end

g._ldrbrd.highest_kill = menu.add_feature("Who has the most kills?","action",g.prnt.utils_info_ldrbrd.id,function()
	g._ldrbrd.get_highest(1,"kills")
end)

g._ldrbrd.highest_death = menu.add_feature("Who has the most deaths?","action",g.prnt.utils_info_ldrbrd.id,function()
	g._ldrbrd.get_highest(2,"deaths")
end)

------------------------------------------------------------------------------------------------------------------------------------
g._LOS_={}
g._LOS_._table={}

function g._LOS_.default(i)
	g._LOS_._table[i]={false,"",0,0,0,0,""}
end
for i=1,32 do
	g._LOS_.default(i)
end

function g._LOS_.sort(_table)
	if g._LOS_.sort_drctn.value == 0 then
		if g._LOS_.sort_by.value == 0 then
			table.sort(_table, function(a, b) return a[6] < b[6]  end) 
		else
			table.sort(_table, function(a, b) return a[2]:lower() < b[2]:lower()  end) 
		end
	else
		if g._LOS_.sort_by.value == 0 then
			table.sort(_table, function(a, b) return a[6] > b[6]  end) 
		else
			table.sort(_table, function(a, b) return a[2]:lower() > b[2]:lower()  end) 
		end
	end
end

function g._LOS_.get_dist(_dist)
	if g._LOS_.dist_type.value == 0 then
		return funcs.get.dist_to_str(_dist,"m")
	end
	return funcs.get.dist_to_str(_dist,"ft")
end
	
function g._LOS_.show_it(_table,script_size)
	local x_pos,y_pos,size = g._LOS_.x.value,g._LOS_.y.value,g._LOS_.size.value
	local back_a = funcs.get.rgb_to_int(0,0,0,g._LOS_.back_a.value)
	local y_val = 0.04*size
	local v2_pos = v2(x_pos,y_pos-y_val*(#_table+1)*.5)
	local text_size = size*1.069*script_size*g.RES
	API.SD.draw_rect(v2_pos,v2(0.24*size,0.040*size*(#_table+1)),back_a)
	API.SD.draw_rect(v2(x_pos,y_pos-(y_val*.5)),v2(0.24*size,0.040*size),back_a)
	local text_pos = v2(v2_pos.x*(2/3),(y_pos-(y_val*.5))*2)
	local my_r,my_g,my_b = g.tbl.PID_OSD.plyr_rgb(API.plyr.my_id()+1,nil)
	API.SD.draw_text(funcs.get.pid_name(API.plyr.my_id()),text_pos,text_pos,text_size,funcs.get.rgb_to_int(my_r,my_g,my_b,g._LOS_.text_a.value),((1<<0)+(1<<1)+(1<<2)),nil)
	for i = 1,#_table do
		text_pos=text_pos-v2(0,y_val*2)
		local text_rgba = funcs.get.rgb_to_int(_table[i][3],_table[i][4],_table[i][5],g._LOS_.text_a.value)
		API.SD.draw_text(g._LOS_.get_dist(_table[i][6]) ,text_pos-v2(size*0.08,0),text_pos,text_size,funcs.get.rgb_to_int(255,255,255,g._LOS_.text_a.value),((1<<0)+(1<<1)+(1<<2)),nil)
		API.SD.draw_text(_table[i][2].." - ".._table[i][7],v2(x_pos,text_pos.y)-v2(size*0.0425,0),v2(x_pos,text_pos.y),text_size,text_rgba,((1<<1)+(1<<2)),nil)
	end
end

g._LOS_.record = menu.add_feature("HIDDEN record LOS players", "toggle", g.prnt.utils_info_los.id, function(f)
	while f.on do
		for i=1,32 do
			if funcs.is.valid_pid(i-1) and i-1 ~= API.plyr.my_id() then
				if ntv.is.ent_in_los_front(API.plyr.get.ped(i-1),API.plyr.get.ped(API.plyr.my_id())) then
					g._LOS_._table[i]={
					true,
					funcs.get.pid_name(i-1),
					g.tbl.PID_OSD.plyr_rgb(i,"r"),
					g.tbl.PID_OSD.plyr_rgb(i,"g"),
					g.tbl.PID_OSD.plyr_rgb(i,"b"),
					g.tbl.PID_OSD.dist_table[i][1],
					g.tbl.aim_protex_main.get_weap_name(i-1)
					}
				else
					g._LOS_.default(i)
				end
				system.yield(25)
			end
		end
		f.on=g._LOS_.feat.on
		system.yield(25)
	end
end)g._LOS_.record.hidden=true

g._LOS_.feat = menu.add_feature("Show list","toggle",g.prnt.utils_info_los.id, function(f)
	local _table
	local script_size = funcs.get.SD_size(f.on)
	while f.on do
		system.yield(5)
		g._LOS_.record.on=f.on
		_table={} 
		for i=1, 32 do
			if g._LOS_._table[i][1] then
				_table[#_table+1]=g._LOS_._table[i]
			end
		end
		g._LOS_.sort(_table)
		g._LOS_.show_it(_table,script_size)
	end
end)
funcs.add_to_S_L(g._LOS_.feat,"g._LOS_.feat")

g._LOS_.test = menu.add_feature("Display test","action",g.prnt.utils_info_los.id, function(f)
	local _table,time={},API.util.t_ms()+10000
	for i=1,9 do
		_table[i]={
		true,
		"Player "..i,
		mth.rndm(50,255),
		mth.rndm(50,255),
		mth.rndm(50,255),
		mth.rndm(50,5000)*.1,
		(API.wpn.get_name(weap_info.all_hash[mth.rndm(1,#weap_info.all_hash)]) or "Weapon")
		}
	end
	while time > API.util.t_ms() do
		system.yield(5)
		f.name="Display test "..funcs.get._1_dec((time-API.util.t_ms())/1000)
		g._LOS_.sort(_table)
		g._LOS_.show_it(_table)
	end
	f.name="Display test"
end)


g._LOS_.sort_by = menu.add_feature("Sort players","action_value_str",g.prnt.utils_info_los.id)
g._LOS_.sort_by:set_str_data({"Distance","Name"})
funcs.add_to_S_L(g._LOS_.sort_by,"g._LOS_.sort_by")

g._LOS_.sort_drctn = menu.add_feature("Sort type","action_value_str",g.prnt.utils_info_los.id)
g._LOS_.sort_drctn:set_str_data({"Ascending","Descending"})
funcs.add_to_S_L(g._LOS_.sort_drctn,"g._LOS_.sort_drctn")

g._LOS_.dist_type = menu.add_feature("Distance type","action_value_str",g.prnt.utils_info_los.id)
g._LOS_.dist_type:set_str_data({"Meters","Feet"})
funcs.add_to_S_L(g._LOS_.dist_type,"g._LOS_.dist_type")

g._LOS_.size = menu.add_feature("Size","action_value_f",g.prnt.utils_info_los.id)
funcs.set_feat_i_f(g._LOS_.size,0.1,3,0.01,1,"g._LOS_.size")

g._LOS_.x = menu.add_feature("X Pos","action_value_f",g.prnt.utils_info_los.id)
funcs.set_feat_i_f(g._LOS_.x,-1,1,0.01,0.69,"g._LOS_.x")

g._LOS_.y = menu.add_feature("Y Pos","action_value_f",g.prnt.utils_info_los.id)
funcs.set_feat_i_f(g._LOS_.y,-1,1,0.01,0.44,"g._LOS_.y")

g._LOS_.back_a = menu.add_feature("Background alpha","action_value_i",g.prnt.utils_info_los.id)
funcs.set_feat_i_f(g._LOS_.back_a,1,255,1,100,"g._LOS_.back_a")

g._LOS_.text_a = menu.add_feature("Text alpha","action_value_i",g.prnt.utils_info_los.id)
funcs.set_feat_i_f(g._LOS_.text_a,1,255,1,255,"g._LOS_.text_a")

g.tbl.remote_ped = {}

g.tbl.remote_ped.directory=g.paths._user.."Remote Ped Defaults\\"
function g.tbl.remote_ped.info_write(_file,_text)
	local file = io.open(g.tbl.remote_ped.directory.._file..".txt", "w")
	file:write(_text)
	file:close()
end

function g.tbl.remote_ped.info_get(_file)
	local file = io.open(g.tbl.remote_ped.directory.._file..".txt", "r")
	local text = nil
	for line in file:lines() do
		if line ~= nil then
			text = tonumber(line)
			break
		end
	end
	file:close()
	return text
end

function g.tbl.remote_ped.info_check(_file,_default)
	funcs.doo.check_create_dir(g.paths._user)
	funcs.doo.check_create_dir(g.tbl.remote_ped.directory)
	if not utils.file_exists(g.tbl.remote_ped.directory.._file..".txt") then
		g.tbl.remote_ped.info_write(_file,_default)
	end
	local text = g.tbl.remote_ped.info_get(_file)
	if text == nil then
		g.tbl.remote_ped.info_write(_file,_default)
	end
end



g.tbl.remote_ped.info_check("Default Ped Model Hash",API.get_hash_key("a_f_m_fatcult_01"))
g.tbl.remote_ped.ped_hash = g.tbl.remote_ped.info_get("Default Ped Model Hash")
if not API.strm.is.valid_ped(g.tbl.remote_ped.ped_hash) then
	g.tbl.remote_ped.ped_hash=API.get_hash_key("a_f_m_fatcult_01")
end
g.tbl.remote_ped.info_check("Default Ped Weapon Hash",API.get_hash_key("weapon_gusenberg"))
g.tbl.remote_ped.weap_hash = g.tbl.remote_ped.info_get("Default Ped Weapon Hash")
if not funcs.is.table_has(weap_info.all_hash,g.tbl.remote_ped.weap_hash) then
	g.tbl.remote_ped.weap_hash=API.get_hash_key("weapon_gusenberg")
end


g.tbl.R_P={}

g.tbl.R_P.ped=nil
g.tbl.R_P.pos=nil
g.tbl.R_P.veh_control={}
g.tbl.remote_ped.prnt=menu.add_feature("Remote ped","parent",g.prnt.utils.id)
g.tbl.remote_ped.feat=menu.add_feature("Remote ped","toggle",g.tbl.remote_ped.prnt.id,function(f)
	local all_peds,ped_speed,move,aim_or_shoot,shoot,hit,ray_pos,aim_pos,dir,ray_start,_bool,screen_pos,plyr_pid,good_ped,good_pid,in_veh,drive_style
	local pos,time,blip,hopeful_veh,seat,action,enter_type,ped_veh,ped_seat,ped_pos,ped_head,speed,time2,should_hijack,brake_once,shuffle_once=nil
	local otr = menu.get_feature_by_hierarchy_key("online.services.off_the_radar").on
	local shoot_time = API.util.t_ms()
	local v_Left,v_Right,v_Accel,v_Brake,v_Enter,v_Exit,v_HandBrake=63,64,71,72,23,75,76
	local found, ammo
	local function remove_ped(_ped)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local PED = g.tbl.R_P.ped
			funcs.doo.remove_ent(PED,1000)
		end)
		if ntv.is.blip_exist(blip) then
			ui.remove_blip(blip)
		end
	end
	local function make_ped()
		funcs.doo.req_model(g.tbl.remote_ped.ped_hash)
		if in_veh and funcs.is.veh(ped_veh) then
			g.tbl.R_P.ped=ntv.doo.create_ped_in_veh(ped_veh,6,g.tbl.remote_ped.ped_hash,ped_seat,1,0)
		elseif ped_pos then
			g.tbl.R_P.ped=API.Ped.create(6, g.tbl.remote_ped.ped_hash,ped_pos, (ped_head or mth.rndm(0,359)), true, false)
		else
			g.tbl.R_P.ped=API.Ped.create(6, g.tbl.remote_ped.ped_hash,funcs.get.pos_nearby(API.plyr.get.coords(plyr_pid),"single_closest",50,"no_water","xyz"), mth.rndm(0,359), true, false)
		end
		system.yield(0)
		if funcs.is.ent(g.tbl.R_P.ped) then
			funcs.doo.id_migrate(g.tbl.R_P.ped,0)
			funcs.doo.ped_ragdoll(g.tbl.R_P.ped,false,50)
			funcs.doo.set_ped_health(g.tbl.R_P.ped,2500,50)
			g.tbl.entities[#g.tbl.entities+1]=g.tbl.R_P.ped
			blip = ui.add_blip_for_entity(g.tbl.R_P.ped)
			ntv.set.blip_sprite(blip,6) 
			ntv.set.blip_scale(blip,0.5) 
		end
	end
	local function do_each_frame()
		if funcs.is.ent(g.tbl.R_P.ped) and (API.ent.get.model_hash(g.tbl.R_P.ped) ~= g.tbl.remote_ped.ped_hash or API.ent.is.dead(g.tbl.R_P.ped)) then
			API.Ped.clear_tasks(g.tbl.R_P.ped)
			remove_ped()
			system.yield(0)
			make_ped()
		end
		good_ped=funcs.is.ent(g.tbl.R_P.ped)
		if good_ped then
			API.ent.set.god(g.tbl.R_P.ped,g.tbl.remote_ped.ped_god.on)
			ped_pos=API.ent.get.coords(g.tbl.R_P.ped)
			ped_head=API.ent.get.heading(g.tbl.R_P.ped)
			ntv.cam.set.on_ped(g.tbl.R_P.ped)
			ntv.cam.set.focus_pos(ped_pos)
			ntv.map.lock_mini_pos(ped_pos)
			API.ent.set.coords(funcs.ME._ped(),v3(g.tbl.R_P.pos.x,g.tbl.R_P.pos.y,-50))
			good_pid=(funcs.is.valid_pid(plyr_pid))
			in_veh=(API.Ped.is.in_veh(g.tbl.R_P.ped))
			driving = (in_veh and funcs.is.ped_in_seat(g.tbl.R_P.ped,API.Ped.get.veh(g.tbl.R_P.ped),-1))
			if driving then
				API.ent.set.god(API.Ped.get.veh(g.tbl.R_P.ped),g.tbl.remote_ped.veh_god.on)
			end
			if (API.Ped.is.ragdoll(g.tbl.R_P.ped) or ai.is_task_active(g.tbl.R_P.ped, 18) or ai.is_task_active(g.tbl.R_P.ped, 408)) and not ai.is_task_active(g.tbl.R_P.ped, 396) then --CTaskNMHighFall = 396, ["CTaskFallOver = 18,"] ["CTaskNMControl = 408,"]
				API.Ped.clear_tasks(g.tbl.R_P.ped)
			end
		end
	end
	local function yield_do(_time,_action)
		local time = API.util.t_ms()+_time
		local time2 = nil
		while time > API.util.t_ms() and f.on and good_ped and good_pid do
			if _action == "hijack" then
				if not funcs.is.key_active(v_Enter,1) then
					return false
				end
			elseif _action == "in_veh" then
				if not API.Ped.is.in_veh(g.tbl.R_P.ped) then
					return  false
				end
			elseif _action == "not_in_veh" then
				if API.Ped.is.in_veh(g.tbl.R_P.ped) then
					return  false
				end
			elseif _action == "in_air" then
				if not API.ent.is.in_air(g.tbl.R_P.ped) then
					return false
				end
			elseif _action == "not_in_air" then
				if API.ent.is.in_air(g.tbl.R_P.ped) then
					return false
				end
			elseif _action == "jump" then
				if not funcs.is.key_active(22,1) then
					return false
				end
			elseif _action == "jump_wait" then
				if not ai.is_task_active(g.tbl.R_P.ped, 422) and not  ai.is_task_active(g.tbl.R_P.ped, 421) then
					return false
				elseif not API.ent.is.in_air(g.tbl.R_P.ped) then
					if time2 == nil then
						time2 = API.util.t_ms() + 200
						time=time+200
					elseif time2 < API.util.t_ms() then
						API.Ped.clear_tasks(g.tbl.R_P.ped)
					end
				end
			elseif _action == "climb" then --["CTaskJumpVault = 421,"], ["CTaskVault = 50,"], ["CTaskClimbLadder = 1,"], ["CTaskUseClimbOnRoute = 41,"], ["CTaskGoToAndClimbLadder = 47,"],
				if ai.is_task_active(g.tbl.R_P.ped, 421) or ai.is_task_active(g.tbl.R_P.ped, 50) or
					ai.is_task_active(g.tbl.R_P.ped, 2) or ai.is_task_active(g.tbl.R_P.ped, 41) or
					ai.is_task_active(g.tbl.R_P.ped, 47) or ai.is_task_active(g.tbl.R_P.ped, 1) then
					return false
				end
			end
			system.yield(0)
			do_each_frame()
		end
		return true
	end
	function ped_is_aiming_or_shooting()
		if not API.wpn.ped_has(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash) then
			API.wpn.ped_give(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash, 100, true)
			funcs.doo.weap_upgr(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash)
			found, ammo = API.wpn.get_max_ammo(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash)
			if found then
				API.wpn.ped_set_ammo(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash,ammo)
			end
		end
		ray_start = funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),funcs.get.dist_pospos_v2(API.ent.get.coords(g.tbl.R_P.ped),API.cam.get.pos())+0.5)
		ray_start = ((in_veh and (ray_start + v3(0,0,1))) or ray_start)
		hit, ray_pos = funcs.get.ray_vctr_all(nil,false,ray_start,nil)
		if weapon.get_weapon_weapon_wheel_slot(g.tbl.remote_ped.weap_hash) == 7 then
			if hit then
				if funcs.get.dist_pospos_v3(ray_start,ray_pos) > 22 then
					aim_pos = funcs.get.front_of_dir(ray_start,API.cam.get.rot(),22)
				else
					aim_pos = ray_pos
				end
			else
				aim_pos = funcs.get.front_of_dir(ray_start,API.cam.get.rot(),22)
			end
		elseif hit then
			aim_pos = ray_pos
		else
			aim_pos = funcs.get.front_of_dir(ray_start,API.cam.get.rot(),1000)
		end
		screen_pos = funcs.get.screen_pos_3d(aim_pos)
		if screen_pos then
			API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.remote_ped.reticle.slct.value],screen_pos,1*g.tbl.remote_ped.reticle.mrkr_s.value*g.RES,0, funcs.get.rgb_to_int(g.tbl.remote_ped.reticle.mrkr_r.value,g.tbl.remote_ped.reticle.mrkr_g.value,g.tbl.remote_ped.reticle.mrkr_b.value,g.tbl.remote_ped.reticle.mrkr_a.value))
		end
	end
	-- g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function() --just testing
		-- while g.tbl.remote_ped.feat.on do
			-- if funcs.is.ent(g.tbl.R_P.ped) then
				-- for k,v in pairs(list) do
					-- if ai.is_task_active(g.tbl.R_P.ped, v) then
						-- menu.notify(k)
					-- end
				-- end
				-- if ped.is_ped_ragdoll(g.tbl.R_P.ped) then
					-- menu.notify("RAGDOLL")
				-- end
			-- end
			-- system.yield(100)
		-- end
	
	-- end)
	local function release_veh(_bool,_veh) -- might not be necessary
		if _bool and funcs.is.ent(_veh) and g.tbl.R_P.veh_control[_veh]=="mine" then
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local time=API.util.t_ms()+5000
				local VEH = _veh
				while time > API.util.t_ms() and funcs.is.ent(VEH) and not funcs.is.ped_in_seat(g.tbl.R_P.ped,VEH,-1) do
					if funcs.ntwrk.ask_quick(VEH) then
						funcs.doo.id_migrate(VEH,1)
						time=API.util.t_ms()
					end
				end
				g.tbl.R_P.veh_control[VEH]="released"
			end)
			
		end
	end
	local function get_input()
		if API.Ped.is.in_veh(g.tbl.R_P.ped) then
			in_veh=true
			ped_veh=API.Ped.get.veh(g.tbl.R_P.ped)
			ped_seat=funcs.get.what_seat_ped_in(ped_veh,g.tbl.R_P.ped)
			if not ai.is_task_active(g.tbl.R_P.ped, 2) then --CTaskExitVehicle =2
				if funcs.is.key_active(v_Exit,1) then
					if API.ent.get.speed(ped_veh) > 5 then
						ai.task_leave_vehicle(g.tbl.R_P.ped, ped_veh, 4160)
					else
						ai.task_leave_vehicle(g.tbl.R_P.ped, ped_veh, 0)
					end
					yield_do(500,"in_veh")
				elseif driving then
					dir=nil
					if g.tbl.R_P.veh_control[ped_veh]~="mine" then
						if funcs.ntwrk.ask_quick(ped_veh) then
							funcs.doo.id_migrate(ped_veh,0)
							g.tbl.R_P.veh_control[ped_veh]="mine"
						end
					elseif funcs.is.key_active(v_Accel,1) then
						dir=9
						if funcs.is.key_active(v_Brake,1) then 
							dir=30
							if funcs.is.key_active(v_Left,1) then
								dir=4
							elseif funcs.is.key_active(v_Right,1) then
								dir=5
							end
						elseif funcs.is.key_active(v_Left,1) then
							dir=7
							if funcs.is.key_active(v_HandBrake,1) then
								dir=25
							end
						elseif funcs.is.key_active(v_Right,1) then
							dir=8
							if funcs.is.key_active(v_HandBrake,1) then
								dir=26
							end
						elseif funcs.is.key_active(v_HandBrake,1) then
							dir=31
						end
					elseif funcs.is.key_active(v_Brake,1) then 
						dir=22
						if funcs.is.key_active(v_Left,1) then
							dir=13
						elseif funcs.is.key_active(v_Right,1) then
							dir=14
						end
					elseif funcs.is.key_active(v_Left,1) then
						dir=11
					elseif funcs.is.key_active(v_Right,1) then
						dir=10
					end
				else
					release_veh(true,ped_veh)
				end
			else
				dir=nil
			end
		else
			in_veh=false
			dir = 0
			if not ai.is_task_active(g.tbl.R_P.ped, 160) then --CTaskEnterVehicle 
				hopeful_veh=nil
				if funcs.is.key_active(v_Enter,1) then
					enter_type="free"
					should_hijack=yield_do(500,"hijack")
					if should_hijack then
						enter_type="steal"
					end
					hopeful_veh,seat,action = funcs.get.closest_veh_seat(API.ent.get.coords(g.tbl.R_P.ped),15,enter_type)
					if hopeful_veh then
						ai.task_enter_vehicle(g.tbl.R_P.ped, hopeful_veh, -1, seat, 2.0, action, 0)
						yield_do(500,"not_in_veh")
					end
				end
				if hopeful_veh == nil then
					if funcs.is.key_active(32,1) or funcs.is.key_active(33,1) or funcs.is.key_active(34,1) or funcs.is.key_active(35,1) then
						ped_speed = 1.0
						move = 0
					else
						ped_speed = 0.0
						move = 1
					end
					if move == 0 then
						if funcs.is.key_active(209,1) then
							ped_speed = 2.0
						end
						if funcs.is.key_active(32,1) then -- W
							if (not funcs.is.key_active(34,1) and not funcs.is.key_active(35,1)) or (funcs.is.key_active(34,1) and funcs.is.key_active(35,1)) then
								dir=0
							elseif funcs.is.key_active(34,1) then -- A 
								dir=45
							elseif funcs.is.key_active(35,1) then -- D
								dir=-45
							end
						elseif funcs.is.key_active(33,1) then-- S
							if (not funcs.is.key_active(34,1) and not funcs.is.key_active(35,1)) or (funcs.is.key_active(34,1) and funcs.is.key_active(35,1)) then
								dir=-180
							elseif funcs.is.key_active(34,1) then -- A 
								dir=135
							elseif funcs.is.key_active(35,1) then -- D
								dir=-135
							end
						elseif funcs.is.key_active(34,1) then -- A 
							dir=90
						elseif funcs.is.key_active(35,1) then -- D
							dir=-90
						end
					end
				end
			end
		end
		aim_or_shoot = (funcs.is.key_active(25,1.0) or funcs.is.key_active(24,1.0))
		shoot = funcs.is.bool_to_01(funcs.is.key_active(24,1.0))
	end

	plyr_pid=g.tbl.remote_ped.pid
	if f.on and funcs.is.valid_pid(plyr_pid) then
		make_ped()
		if funcs.is.ent(g.tbl.R_P.ped) then
			menu.get_feature_by_hierarchy_key("online.services.disable_out_of_bounds_death").on=true
			menu.get_feature_by_hierarchy_key("online.services.off_the_radar").on=true
			g.tbl.R_P.pos = funcs.ME._crds()
			good_ped=(funcs.is.ent(g.tbl.R_P.ped) and not API.ent.is.dead(g.tbl.R_P.ped))
			good_pid=(funcs.is.valid_pid(plyr_pid))
			while f.on and good_ped and good_pid do
				get_input()
				if in_veh then
					if driving then
						shuffle_once=false
						if dir then
							ntv.doo.drive_veh(g.tbl.R_P.ped, ped_veh, dir, -1)
							brake_once=false
						elseif not brake_once then
							brake_once=true
							--API.Ped.set.into_veh(g.tbl.R_P.ped, ped_veh,ped_seat)
							ntv.doo.drive_veh(g.tbl.R_P.ped, ped_veh, 1, -1)
						end
					elseif ntv.is.veh_seat_free(ped_veh,-1) then
						if ped_seat == 0 then
							if not shuffle_once then
								ntv.task.ped_seat_shuffle(g.tbl.R_P.ped, ped_veh)
								shuffle_once=true
							end
						else
							API.Ped.set.into_veh(g.tbl.R_P.ped, ped_veh,-1)
						end
						
					end
					if aim_or_shoot then
						ped_is_aiming_or_shooting()
						if shoot == 1 and shoot_time < API.util.t_ms() then
							gameplay.shoot_single_bullet_between_coords(ray_start, aim_pos, 1, g.tbl.remote_ped.weap_hash, g.tbl.R_P.ped, true, false, 1000)
							shoot_time = API.util.t_ms()+69
						end
					end
				else
					shuffle_once=false
					pos = funcs.get.front_of_dir(API.ent.get.coords(g.tbl.R_P.ped),API.cam.get.rot()+v3(0,0,dir),2.5)
					if API.cntrl.is.just_pressed(0, 22) then
						if not yield_do(150,"jump") then
							ntv.doo.ped_jump(g.tbl.R_P.ped,0,0) -- normal jump
						elseif not yield_do(90,"jump") then
							ntv.doo.ped_jump(g.tbl.R_P.ped,1,0) -- super jump (beast)
						elseif yield_do(80,"jump") then
							ntv.doo.ped_jump(g.tbl.R_P.ped,1,1) -- super SUPER jump
						else
							ntv.doo.ped_jump(g.tbl.R_P.ped,1,0)
						end
						yield_do(500,"not_in_air")
						yield_do(60000,"jump_wait") 
					elseif aim_or_shoot then
						ped_is_aiming_or_shooting()
						ntv.set.ped_weap(g.tbl.R_P.ped,g.tbl.remote_ped.weap_hash)
						ntv.doo.ped_refill_ammo_now(g.tbl.R_P.ped)
						ntv.doo.ped_mag_infinite(g.tbl.R_P.ped)
						if shoot == 1 then
							if weapon.get_weapon_weapon_wheel_slot(g.tbl.remote_ped.weap_hash) == 7 then
								ntv.task.thow_prjctl(g.tbl.R_P.ped,aim_pos)
								time=API.util.t_ms()+1250
							else
								if g.tbl.remote_ped.weap_hash == API.get_hash_key("weapon_rayminigun") or g.tbl.remote_ped.weap_hash == API.get_hash_key("weapon_minigun") then
									time=API.util.t_ms()+500
								else
									time=API.util.t_ms()+50
								end
								ntv.task.go_aim_coords(g.tbl.R_P.ped,pos,aim_pos,ped_speed,shoot,2.0,0.5,move,0,0,API.get_hash_key("FIRING_PATTERN_FULL_AUTO"))
							end
							while time > API.util.t_ms() and f.on and good_ped and good_pid do--and ai.is_task_active(g.tbl.R_P.ped, 289) do
								system.yield(0)
								do_each_frame()
							end
						else
							ntv.task.go_aim_coords(g.tbl.R_P.ped,pos,aim_pos,ped_speed,shoot,2.0,0.5,move,0,0,API.get_hash_key("FIRING_PATTERN_FULL_AUTO"))
						end
					elseif ped_speed > 0 then
						ntv.task.go_straight_coords(g.tbl.R_P.ped,pos,ped_speed,1,0.0,0.5)
					elseif not ai.is_task_active(g.tbl.R_P.ped, 160) and not hopeful_veh then --CTaskEnterVehicle 
						ntv.task.pause(g.tbl.R_P.ped)
					end
				end
				system.yield(0)
				do_each_frame()
			end
		end
		remove_ped()
		ntv.cam.set.no_focus_pos()
		ntv.map.unlock_mini_pos()
		if not otr then
			menu.get_feature_by_hierarchy_key("online.services.off_the_radar").on=false
		end
		if g.tbl.R_P.pos and funcs.get.dist_pospos_v3(funcs.ME._crds(),g.tbl.R_P.pos) > 5 then
			API.ent.set.coords(funcs.ME._ped(),g.tbl.R_P.pos)
		end
	end
	f.on=false
	g.tbl.R_P.pos=nil
	g.tbl.R_P.ped=nil
end)


g.tbl.remote_ped.pid_str={"PID"}
g.tbl.remote_ped.pid=nil
g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	local do_it = true
	while do_it do
		for i=0,31 do
			if funcs.is.valid_pid(i) then
				g.tbl.remote_ped.pid_str[i+1] = API.plyr.get.name(i)
			else
				g.tbl.remote_ped.pid_str[i+1]="PID "..i
			end
		end
		if API.plyr.is.valid(g.tbl.remote_ped.select_player.value) then
			g.tbl.remote_ped.pid=g.tbl.remote_ped.select_player.value
		else
			g.tbl.remote_ped.pid=nil
		end
		g.tbl.remote_ped.select_player:set_str_data(g.tbl.remote_ped.pid_str)
		system.yield(500)
	end
end)

function g.tbl.remote_ped.check_pid_selection()
	if API.plyr.is.valid(g.tbl.remote_ped.select_player.value) then
		g.tbl.remote_ped.selected_player=g.tbl.remote_ped.select_player.value
	else
		local down=false
		if g.tbl.remote_ped.previous_pid~=g.tbl.remote_ped.select_player.value then
			if g.tbl.remote_ped.select_player.value==g.tbl.remote_ped.previous_pid-1 or g.tbl.remote_ped.previous_pid-1==-1 then
				down=true
			end
		end
		repeat
			if not API.plyr.is.valid(g.tbl.remote_ped.select_player.value) then
				if down then
					if g.tbl.remote_ped.select_player.value == 0 then
						g.tbl.remote_ped.select_player.value=31
					else
						g.tbl.remote_ped.select_player.value=g.tbl.remote_ped.select_player.value-1
					end
				else
					if g.tbl.remote_ped.select_player.value == 31 then
						g.tbl.remote_ped.select_player.value=0
					else
						g.tbl.remote_ped.select_player.value=g.tbl.remote_ped.select_player.value+1
					end
				end
			end
		until API.plyr.is.valid(g.tbl.remote_ped.select_player.value)
		g.tbl.remote_ped.previous_pid=g.tbl.remote_ped.select_player.value
	end
end
g.tbl.remote_ped.previous_pid=0
g.tbl.remote_ped.select_player=menu.add_feature("Near player:", "autoaction_value_str", g.tbl.remote_ped.prnt.id,function(f)
	g.tbl.remote_ped.check_pid_selection()
end)
g.tbl.remote_ped.select_player:set_str_data(g.tbl.remote_ped.pid_str)

g.tbl.remote_ped.weapons = {}
g.tbl.remote_ped.weapons.main_prnt=menu.add_feature("Select Weapon", "parent", g.tbl.remote_ped.prnt.id)
g.tbl.remote_ped.weapons.srch_prnt=menu.add_feature("** Search **", "parent",g.tbl.remote_ped.weapons.main_prnt.id)
g.tbl.remote_ped.weapons.srch_list={}

g.tbl.remote_ped.search=menu.add_feature("Current weapon : "..API.wpn.get_name(g.tbl.remote_ped.weap_hash), "action",g.tbl.remote_ped.weapons.srch_prnt.id,function(f)
	local status,str = 1
	status,str = funcs.get.text_input("Type weapon name","",25,0)
	if status == 0 then 
		for i=1,#g.tbl.remote_ped.weapons.srch_list do
			g.tbl.remote_ped.weapons.srch_list[i].hidden=string.match(string.lower(g.tbl.remote_ped.weapons.srch_list[i].name), string.lower(str)) == nil
		end
	end
end)

for i=1,#weap_info.all_hash do
	g.tbl.remote_ped.weapons.srch_list[i]=menu.add_feature(API.wpn.get_name(weap_info.all_hash[i]), "action",g.tbl.remote_ped.weapons.srch_prnt.id,function(f)
		g.tbl.remote_ped.weap_hash= weap_info.all_hash[i]
		g.tbl.remote_ped.search.name="Current weapon : "..API.wpn.get_name(g.tbl.remote_ped.weap_hash)
		g.tbl.remote_ped.info_check("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
		g.tbl.remote_ped.info_write("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
	end)
	g.tbl.remote_ped.weapons.srch_list[i].hidden=true
end
		
		g.tbl.remote_ped.weapons.types={
		[0]="Pistols",
		[1]="Machine guns",
		[2]="Assault rifles",
		[3]="Snipers",
		[4]="Melee",
		[5]="Shotguns",
		[6]="Heavy weapons",
		[7]="Throwable/Other"
		}
		g.tbl.remote_ped.weapons.prnts={}
		g.tbl.remote_ped.weapons.temp={}
		g.tbl.remote_ped.weapons.one={}
		
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		for i=0,7 do
			--if i ~= 4 then --i couldnt figure out melee :(
				g.tbl.remote_ped.weapons.temp[i]={}
				g.tbl.remote_ped.weapons.prnts[i]=menu.add_feature(g.tbl.remote_ped.weapons.types[i], "parent", g.tbl.remote_ped.weapons.main_prnt.id)
				for ii=1,#weap_info.all_hash do
					if weapon.get_weapon_weapon_wheel_slot(weap_info.all_hash[ii])==i and API.wpn.get_name(weap_info.all_hash[ii]) ~= "Unarmed" then
						g.tbl.remote_ped.weapons.temp[i][#g.tbl.remote_ped.weapons.temp[i]+1]=weap_info.all_hash[ii]
					end
					if ii % 50 == 0 then
						system.yield(0)
					end
				end
				table.sort(g.tbl.remote_ped.weapons.temp[i], function(a, b) return API.wpn.get_name(a):lower() <  API.wpn.get_name(b):lower() end)
				g.tbl.remote_ped.weapons.one[i]={}
				for ii=1,#g.tbl.remote_ped.weapons.temp[i] do
					if g.tbl.remote_ped.weapons.temp[i][ii] == API.get_hash_key("weapon_stinger") then
						g.tbl.remote_ped.weapons.one[i][ii]=menu.add_feature("RPG Stinger", "action", g.tbl.remote_ped.weapons.prnts[i].id, function(f,pid)
							g.tbl.remote_ped.weap_hash= g.tbl.remote_ped.weapons.temp[i][ii]
							g.tbl.remote_ped.search.name="Current weapon : RPG Stinger"
							g.tbl.remote_ped.info_check("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
							g.tbl.remote_ped.info_write("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
							for iii=0,7 do
								for iiii=1,#g.tbl.remote_ped.weapons.one[iii] do
									if g.tbl.remote_ped.weapons.temp[iii][iiii] ~= g.tbl.remote_ped.weap_hash then
										if  g.tbl.remote_ped.weapons.temp[iii][iiii] == API.get_hash_key("weapon_stinger") then
											g.tbl.remote_ped.weapons.one[iii][iiii].name="RPG Stinger"
										else
											g.tbl.remote_ped.weapons.one[iii][iiii].name=API.wpn.get_name(g.tbl.remote_ped.weapons.temp[iii][iiii])
										end
									else
										if  g.tbl.remote_ped.weapons.temp[iii][iiii] == API.get_hash_key("weapon_stinger") then
											g.tbl.remote_ped.weapons.one[iii][iiii].name="** RPG Stinger **"
										else
											g.tbl.remote_ped.weapons.one[iii][iiii].name="** "..API.wpn.get_name(g.tbl.remote_ped.weapons.temp[iii][iiii]).." **"
										end
									end
								end
							end
						end)
					else
						g.tbl.remote_ped.weapons.one[i][ii]=menu.add_feature(API.wpn.get_name(g.tbl.remote_ped.weapons.temp[i][ii]), "action", g.tbl.remote_ped.weapons.prnts[i].id, function(f,pid)
							g.tbl.remote_ped.weap_hash= g.tbl.remote_ped.weapons.temp[i][ii]
							g.tbl.remote_ped.search.name="Current weapon : "..API.wpn.get_name(g.tbl.remote_ped.weap_hash)
							g.tbl.remote_ped.info_check("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
							g.tbl.remote_ped.info_write("Default Ped Weapon Hash",g.tbl.remote_ped.weap_hash)
							for iii=0,7 do
								for iiii=1,#g.tbl.remote_ped.weapons.one[iii] do
									if g.tbl.remote_ped.weapons.temp[iii][iiii] ~= g.tbl.remote_ped.weap_hash then
										if  g.tbl.remote_ped.weapons.temp[iii][iiii] == API.get_hash_key("weapon_stinger") then
											g.tbl.remote_ped.weapons.one[iii][iiii].name="RPG Stinger"
										else
											g.tbl.remote_ped.weapons.one[iii][iiii].name=API.wpn.get_name(g.tbl.remote_ped.weapons.temp[iii][iiii])
										end
									else
										if  g.tbl.remote_ped.weapons.temp[iii][iiii] == API.get_hash_key("weapon_stinger") then
											g.tbl.remote_ped.weapons.one[iii][iiii].name="** RPG Stinger **"
										else
											g.tbl.remote_ped.weapons.one[iii][iiii].name="** "..API.wpn.get_name(g.tbl.remote_ped.weapons.temp[iii][iiii]).." **"
										end
									end
								end
							end
						end)
					end
					if ii % 10 == 0 then
						system.yield(0)
					end
				end
			--end
			system.yield(0)
		end
		g.tbl.remote_ped.weapons.prnts[4].hidden=true
	end)
		
				

g.tbl.remote_ped.ped_name=ped_models.hash_is_name[g.tbl.remote_ped.ped_hash]
g.tbl.remote_ped.feat.name="Remote ped ("..g.tbl.remote_ped.ped_name..")"

g.tbl.remote_ped.ped_prnt=menu.add_feature("Select Ped", "parent", g.tbl.remote_ped.prnt.id)
g.tbl.remote_ped.ped_srch_prnt=menu.add_feature("** Search **", "parent", g.tbl.remote_ped.ped_prnt.id)
menu.add_feature("Search for ped", "action", g.tbl.remote_ped.ped_srch_prnt.id,function()
	local status,str,veh = 1
	status,str = funcs.get.text_input("Type part of the ped name","",25,0)
	if status == 0 then
		for i=1,#g.tbl.remote_ped.ped_srch_feats do
			g.tbl.remote_ped.ped_srch_feats[i].hidden=(string.match(string.lower(g.tbl.remote_ped.ped_srch_feats[i].name), string.lower(str)) == nil)
		end
	end
end)

g.tbl.remote_ped.ped_srch_feats={}
g.tbl.remote_ped.ped_prnts={}

g.tbl.remote_ped.reticle={}

g.tbl.remote_ped.reticle.prnt=menu.add_feature("Reticle Options","parent",g.tbl.remote_ped.prnt.id,function()
	g.tbl.remote_ped.reticle.start_test_display()
end)

	function g.tbl.remote_ped.reticle.start_test_display()
		if g.var.GS_has_loaded then 
			g.tbl.remote_ped.reticle.test_display=true
			g.tbl.remote_ped.reticle.test_display_feat.on=true
		end
	end
	
	g.tbl.remote_ped.reticle.test_display=false
	g.tbl.remote_ped.reticle.test_display_feat=menu.add_feature("Remote ped icon HIDDEN", "toggle",g.tbl.remote_ped.reticle.prnt.id,function(f)
		local time = API.util.t_ms() + 3000
		while time > API.util.t_ms() do
			if g.tbl.remote_ped.reticle.test_display then
				g.tbl.remote_ped.reticle.test_display=false
				time = API.util.t_ms() + 3000
			end
			API.SD.draw_sprt(g.tbl.reticle_sprites[g.tbl.remote_ped.reticle.slct.value],v2(0,0),1*g.tbl.remote_ped.reticle.mrkr_s.value,0, funcs.get.rgb_to_int(g.tbl.remote_ped.reticle.mrkr_r.value,g.tbl.remote_ped.reticle.mrkr_g.value,g.tbl.remote_ped.reticle.mrkr_b.value,mth.flr((time-API.util.t_ms())/3000*g.tbl.remote_ped.reticle.mrkr_a.value)))
			system.yield(5)
		end
		f.on=false
	end)
	g.tbl.remote_ped.reticle.test_display_feat.hidden=true
	
	g.tbl.remote_ped.reticle.slct = menu.add_feature("Select icon", "autoaction_value_i", g.tbl.remote_ped.reticle.prnt.id, function(f)
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.slct,1,#g.tbl.reticle_files,1,1,"g.tbl.remote_ped.reticle.slct")
	g.tbl.remote_ped.reticle.slct.value=46

	g.tbl.remote_ped.reticle.mrkr_s = menu.add_feature("Icon size", "autoaction_value_f",g.tbl.remote_ped.reticle.prnt.id,function()
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.mrkr_s,0,3,0.01,1,"g.tbl.remote_ped.reticle.mrkr_s")

	g.tbl.remote_ped.reticle.mrkr_r = menu.add_feature("Red", "autoaction_value_i",g.tbl.remote_ped.reticle.prnt.id,function()
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.mrkr_r,0,255,1,255,"g.tbl.remote_ped.reticle.mrkr_r")
	g.tbl.remote_ped.reticle.mrkr_g = menu.add_feature("Green", "autoaction_value_i",g.tbl.remote_ped.reticle.prnt.id,function()
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.mrkr_g,0,255,1,0,"g.tbl.remote_ped.reticle.mrkr_g")
	g.tbl.remote_ped.reticle.mrkr_b = menu.add_feature("Blue", "autoaction_value_i",g.tbl.remote_ped.reticle.prnt.id,function()
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.mrkr_b,0,255,1,0,"g.tbl.remote_ped.reticle.mrkr_b")
	g.tbl.remote_ped.reticle.mrkr_a = menu.add_feature("Alpha", "autoaction_value_i",g.tbl.remote_ped.reticle.prnt.id,function()
		g.tbl.remote_ped.reticle.start_test_display()
	end)
	funcs.set_feat_i_f(g.tbl.remote_ped.reticle.mrkr_a,0,255,1,255,"g.tbl.remote_ped.reticle.mrkr_a")
		
g.tbl.remote_ped.ped_god=menu.add_feature("Ped god","toggle",g.tbl.remote_ped.prnt.id)
funcs.add_to_S_L(g.tbl.remote_ped.ped_god,"g.tbl.remote_ped.ped_god")
g.tbl.remote_ped.veh_god=menu.add_feature("Vehicle god","toggle",g.tbl.remote_ped.prnt.id)
funcs.add_to_S_L(g.tbl.remote_ped.veh_god,"g.tbl.remote_ped.veh_god")

menu.add_feature("Set waypoint at this location","toggle", g.prnt.utils.id, function(f)
	local me=API.plyr.my_id()
	local my_pos = API.plyr.get.coords(me)
	while f.on do
		if (ui.get_waypoint_coord().x ~= my_pos.x) and (ui.get_waypoint_coord().y ~= my_pos.y) then
			ui.set_new_waypoint(v2(my_pos.x,my_pos.y))
			system.yield(1000)
		end
		system.yield(1000)
	end
end)

g._rand_wp_set=menu.add_feature("Set random waypoint","action_value_str", g.prnt.utils.id, function(f)
	local pos
	if f.value == 0 then
		pos = funcs.get.random_pos("land")
	elseif f.value == 1 then
		pos = funcs.get.random_pos("water")
	else
		pos = funcs.get.random_pos("anywhere")
	end
	ui.set_new_waypoint(v2(pos.x,pos.y))
end)
g._rand_wp_set:set_str_data({"Land","Water","Anywhere"})
funcs.add_to_S_L(g._rand_wp_set,"g._rand_wp_set")

g._rand_wp_set=menu.add_feature("Auto-remove dead NPC","toggle", g.prnt.utils.id, function(f)
	local all_peds
	local t = {}
	while f.on do
		all_peds=API.Ped.get.all()
		for i=1,#all_peds do
			if not t[all_peds[i]] and not API.Ped.is.plyr(all_peds[i]) and API.ent.is.dead(all_peds[i]) then
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local ent = all_peds[i]
					local t_ = t
					t_[ent]=true
					system.yield(5000)
					funcs.doo.remove_ent(ent,5000)
					t_[ent]=false
				end)
			end
		end
		system.yield(250)
	end
end)

event.add_event_listener("exit", function(f)
	ntv.cam.set.render_script(0,0,0,0,0)
	ntv.cam.doo.destroy_all()
	ntv.cam.set.no_focus_pos()
	ntv.map.unlock_mini_pos()
	if g.tbl.R_P.pos and funcs.get.dist_pospos_v3(funcs.ME._crds(),g.tbl.R_P.pos) > 5 then
		API.ent.set.coords(funcs.ME._ped(),g.tbl.R_P.pos)
	end
	g.tbl.plate_anim.reset_plate()
	event.remove_event_listener("player_leave", g.feat.plyr_leave)
	event.remove_event_listener("player_join", g.feat.plyr_join)
	for i=1,#g.tbl.spwn.history do
		if funcs.is.ent(g.tbl.spwn.history[i]) then
			for ii=1,funcs.get.veh_seats(g.tbl.spwn.history[i]) do
				if funcs.is.ent(API.veh.get.ped_in_seat(g.tbl.spwn.history[i],ii-2)) then
					API.Ped.clear_tasks(API.veh.get.ped_in_seat(g.tbl.spwn.history[i], ii-2))
				end
			end
			for ii=1,1000 do
				if funcs.ntwrk.ask_quick(g.tbl.spwn.history[i]) then
					break
				end
			end
			API.ent.set.no_need(g.tbl.spwn.history[i])
			API.ent.delete(g.tbl.spwn.history[i])
		end
	end
	for i=1,#g.tbl.threads do
		if g.tbl.threads[i] then
			menu.delete_thread(g.tbl.threads[i])
		end
	end
	for k,v in pairs(g.o.tbl.cages) do
		for kk,vv in pairs(v) do
			for i=1,1000 do
				if funcs.ntwrk.ask_quick(vv) then
					break
				end
			end
			API.ent.set.no_need(vv)
			API.ent.delete(vv)
		end
	end
	for  i=1,#g.tbl.entities do
		if funcs.is.ent(g.tbl.entities[i]) then
			for ii=1,1000 do
				if funcs.ntwrk.ask_quick(g.tbl.entities[i]) then
					break
				end
			end
			API.ent.set.no_need(g.tbl.entities[i])
			API.ent.delete(g.tbl.entities[i])
		end
	end
	hook.remove_script_event_hook(g.tbl.PID_INFO.typing_hook)
	--hook.remove_net_event_hook(g.tbl.aim_protex_main.net_hook)
	local _table,count={},0
	for i=1,#g.tbl.my_veh_hist do
		if not _table[g.tbl.my_veh_hist[i]] then
			count=count+1
			_table[g.tbl.my_veh_hist[i]]=true
		end
	end
	g.N_P(2,count.." vehicles used since Gee-Skid was loaded",__GV__,10,"Blue")
	for i=1,#g.tbl.PID_INFO.otr_blip do
		if g.tbl.PID_INFO.otr_blip[i] ~= v3(0,0,0) then -- remove any green otr blips 
			ui.remove_blip(g.tbl.PID_INFO.otr_blip[i])
		end	
	end		
	for i=1,#g.tbl.PID_INFO.undead_blip do
		if g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) then -- remove any undead blips 
			ui.remove_blip(g.tbl.PID_INFO.undead_blip[i])
		end	
	end	
	g.N_P(2,"Into the ether :(",__GV__,10,"Blue")
	local time = funcs.get._2_dec((API.util.t_ms()-g.script_load_time)/1000)
	if time > 60 then
		print("--- Gee-Skid unloaded - "..funcs.get._2_dec(time/60).." minutes run time ---")
	else
		print("--- Gee-Skid unloaded - "..time.." seconds run time ---")
	end
end)


g.print_load_info("Utilities",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)---------------------------------------------------UTILS END
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------PLAYER INFO STARTS



	g.tbl.PID_INFO = {}
	g.tbl.PID_INFO.funcs = {}

	g.tbl.PID_INFO.veh = {}
	g.tbl.PID_INFO.in_veh = {}
	g.tbl.PID_INFO.veh_erase_time = {}
	g.tbl.PID_INFO.veh_god = {}
	g.tbl.PID_INFO.scid = {}
	g.tbl.PID_INFO.name = {}
	g.tbl.PID_INFO.tp_sett = {}
	g.tbl.PID_INFO.kd = {}
	g.tbl.PID_INFO.rank = {}
	g.tbl.PID_INFO.money = {}
	g.tbl.PID_INFO.mph = {}
	g.tbl.PID_INFO.kph = {}
	g.tbl.PID_INFO.speed_erase_time = {}
	g.tbl.PID_INFO.otr = {}
	g.tbl.PID_INFO.otr_time = {}
	g.tbl.PID_INFO.otr_1_min = {}
	g.tbl.PID_INFO.otr_3_min = {}
	g.tbl.PID_INFO.otr_many_min = {}
	g.tbl.PID_INFO.otr_blip = {}
	g.tbl.PID_INFO.undead_blip = {}
	g.tbl.PID_INFO.plyr_god = {}
	g.tbl.PID_INFO.visible = {}
	g.tbl.PID_INFO.invisible = {}
	g.tbl.PID_INFO.modder = {}
	g.tbl.PID_INFO.interior = {}
	g.tbl.PID_INFO.interior_str = {}
	g.tbl.PID_INFO.interior_time = {}
	g.tbl.PID_INFO.pos_v2 = {}
	g.tbl.PID_INFO.pos_time = {}
	g.tbl.PID_INFO.dead = {}
	g.tbl.PID_INFO.plyr_play = {}
	g.tbl.PID_INFO.color = {}
	g.tbl.PID_INFO.typing = {}
	g.tbl.PID_INFO.typing_start_time = {}
	g.tbl.PID_INFO.typing_stop = {}
	g.tbl.PID_INFO.typing_stop_time = {}
	g.tbl.PID_INFO.ip = {}
	g.tbl.PID_INFO.mod_flags_str = {}
	g.tbl.PID_INFO.host_priority_str = {}
	g.tbl.PID_INFO.join_leave_str = {}
	g.tbl.PID_INFO.join_time = {}
	g.tbl.PID_INFO.join_time_str = {}
	g.tbl.PID_INFO.pause = {}
	g.tbl.PID_INFO.pause_start_time = {}
	g.tbl.PID_INFO.pause_stop = {}
	g.tbl.PID_INFO.pause_stop_time = {}
	g.tbl.PID_INFO.ff_jt = {}
	g.tbl.PID_INFO.ff_stlk = {}
	g.tbl.PID_INFO.ff_hide = {}
	g.tbl.PID_INFO.ff_frnd = {}
	g.tbl.PID_INFO.plyr_speed_pos_mps = {}
	g.tbl.PID_INFO.plyr_speed_pos_time = {}
	g.tbl.PID_INFO.plyr_speed_pos_mph = {}
	g.tbl.PID_INFO.plyr_speed_pos_kph = {}
	g.tbl.PID_INFO.plyr_speed_pos = {}
	g.tbl.PID_INFO.loading = {}
	g.tbl.PID_INFO.plyr_moving = {}
	g.tbl.PID_INFO.is_frnd = {}
	g.tbl.PID_INFO.net_hash = {}
	function g.tbl.PID_INFO.funcs.load_tables()
		for i = 1, 32 do
			g.tbl.PID_INFO.veh[#g.tbl.PID_INFO.veh+1]=-1
			g.tbl.PID_INFO.in_veh[#g.tbl.PID_INFO.in_veh+1]=false
			g.tbl.PID_INFO.veh_erase_time[#g.tbl.PID_INFO.veh_erase_time+1]=-1
			g.tbl.PID_INFO.veh_god[#g.tbl.PID_INFO.veh_god+1]=false
			g.tbl.PID_INFO.scid[#g.tbl.PID_INFO.scid+1]=-1
			g.tbl.PID_INFO.name[#g.tbl.PID_INFO.name+1]="Player"
			g.tbl.PID_INFO.tp_sett[#g.tbl.PID_INFO.tp_sett+1]=false --setting for online tab
			g.tbl.PID_INFO.kd[#g.tbl.PID_INFO.kd+1]=-1
			g.tbl.PID_INFO.rank[#g.tbl.PID_INFO.rank+1]=-1
			g.tbl.PID_INFO.money[#g.tbl.PID_INFO.money+1]=-1
			g.tbl.PID_INFO.mph[#g.tbl.PID_INFO.mph+1]=-1
			g.tbl.PID_INFO.kph[#g.tbl.PID_INFO.kph+1]=-1
			g.tbl.PID_INFO.speed_erase_time[#g.tbl.PID_INFO.speed_erase_time+1]=-1
			g.tbl.PID_INFO.otr[#g.tbl.PID_INFO.otr+1]=false
			g.tbl.PID_INFO.otr_time[#g.tbl.PID_INFO.otr_time+1]=-1
			g.tbl.PID_INFO.otr_1_min[#g.tbl.PID_INFO.otr_1_min+1]=false
			g.tbl.PID_INFO.otr_3_min[#g.tbl.PID_INFO.otr_3_min+1]=false
			g.tbl.PID_INFO.otr_many_min[#g.tbl.PID_INFO.otr_many_min+1]=-1
			g.tbl.PID_INFO.otr_blip[#g.tbl.PID_INFO.otr_blip+1]=v3(0,0,0)
			g.tbl.PID_INFO.undead_blip[#g.tbl.PID_INFO.undead_blip+1]=v3(0,0,0)
			g.tbl.PID_INFO.plyr_god[#g.tbl.PID_INFO.plyr_god+1]=false
			g.tbl.PID_INFO.visible[#g.tbl.PID_INFO.visible+1]=false
			g.tbl.PID_INFO.invisible[#g.tbl.PID_INFO.visible+1]=false
			g.tbl.PID_INFO.modder[#g.tbl.PID_INFO.modder+1]=false
			g.tbl.PID_INFO.interior[#g.tbl.PID_INFO.interior+1]=false
			g.tbl.PID_INFO.interior_str[#g.tbl.PID_INFO.interior_str+1]=""
			g.tbl.PID_INFO.interior_time[#g.tbl.PID_INFO.interior_time+1]=API.util.t_ms()
			g.tbl.PID_INFO.pos_v2[#g.tbl.PID_INFO.pos_v2+1]=v2(0,0)
			g.tbl.PID_INFO.pos_time[#g.tbl.PID_INFO.pos_time+1]=-1
			g.tbl.PID_INFO.dead[#g.tbl.PID_INFO.dead+1]=false
			g.tbl.PID_INFO.plyr_play[#g.tbl.PID_INFO.plyr_play+1]=false
			g.tbl.PID_INFO.color[#g.tbl.PID_INFO.color+1]=-1
			g.tbl.PID_INFO.typing[#g.tbl.PID_INFO.typing+1]=false
			g.tbl.PID_INFO.typing_start_time[#g.tbl.PID_INFO.typing_start_time+1]=-1
			g.tbl.PID_INFO.typing_stop[#g.tbl.PID_INFO.typing_stop+1]=false
			g.tbl.PID_INFO.typing_stop_time[#g.tbl.PID_INFO.typing_stop_time+1]=-1
			g.tbl.PID_INFO.ip[#g.tbl.PID_INFO.ip+1]="IP"
			g.tbl.PID_INFO.mod_flags_str[#g.tbl.PID_INFO.mod_flags_str+1]=""
			g.tbl.PID_INFO.host_priority_str[#g.tbl.PID_INFO.host_priority_str+1]="0 / 0"
			g.tbl.PID_INFO.join_leave_str[#g.tbl.PID_INFO.join_leave_str+1]=""
			g.tbl.PID_INFO.join_time[#g.tbl.PID_INFO.join_time+1]=-1
			g.tbl.PID_INFO.join_time_str[#g.tbl.PID_INFO.join_time_str+1]=""
			g.tbl.PID_INFO.pause[#g.tbl.PID_INFO.pause+1]=false
			g.tbl.PID_INFO.pause_start_time[#g.tbl.PID_INFO.pause_start_time+1]=-1
			g.tbl.PID_INFO.pause_stop[#g.tbl.PID_INFO.pause_stop+1]=false
			g.tbl.PID_INFO.pause_stop_time[#g.tbl.PID_INFO.pause_stop_time+1]=-1
			g.tbl.PID_INFO.ff_jt[#g.tbl.PID_INFO.ff_jt+1]=0
			g.tbl.PID_INFO.ff_stlk[#g.tbl.PID_INFO.ff_stlk+1]=0
			g.tbl.PID_INFO.ff_hide[#g.tbl.PID_INFO.ff_hide+1]=0
			g.tbl.PID_INFO.ff_frnd[#g.tbl.PID_INFO.ff_frnd+1]=0
			g.tbl.PID_INFO.plyr_speed_pos_mps[#g.tbl.PID_INFO.plyr_speed_pos_mps+1]=0
			g.tbl.PID_INFO.plyr_speed_pos_time[#g.tbl.PID_INFO.plyr_speed_pos_time+1]=0
			g.tbl.PID_INFO.plyr_speed_pos_mph[#g.tbl.PID_INFO.plyr_speed_pos_mph+1]=0
			g.tbl.PID_INFO.plyr_speed_pos_kph[#g.tbl.PID_INFO.plyr_speed_pos_kph+1]=0
			g.tbl.PID_INFO.plyr_speed_pos[#g.tbl.PID_INFO.plyr_speed_pos+1]=v3(0,0,0)
			g.tbl.PID_INFO.plyr_moving[#g.tbl.PID_INFO.plyr_moving+1]=false
			g.tbl.PID_INFO.loading[#g.tbl.PID_INFO.loading+1]=false
			g.tbl.PID_INFO.is_frnd[#g.tbl.PID_INFO.is_frnd+1]=false
			g.tbl.PID_INFO.net_hash[#g.tbl.PID_INFO.net_hash+1]=-1
		end
	end
	g.tbl.PID_INFO.funcs.load_tables()

function g.tbl.PID_INFO.funcs.pid_info_log(pidT,pid)
	if g.tbl.PID_INFO.name[pidT] ~= "Player" and g.tbl.PID_INFO.scid[pidT] ~= -1 and g.tbl.PID_INFO.ip[pidT] ~= "IP" and g.tbl.PID_INFO.host_priority_str[pidT] ~= "0 / 0" and funcs.is.not_not(g.tbl.PID_INFO.rank[pidT],-1,0,nil) and funcs.is.not_not(g.tbl.PID_INFO.kd[pidT],-1,0,nil) and funcs.is.not_not(g.tbl.PID_INFO.money[pidT],-1,0,nil) then
		return true
	end
end

function g.tbl.PID_INFO.funcs.pid_join_leave_get(_pidT,_pid)
	return g.tbl.PID_INFO.name[_pidT]..","..g.tbl.PID_INFO.scid[_pidT]..","..g.tbl.PID_INFO.ip[_pidT]..",".._pid..","..g.tbl.PID_INFO.funcs.frnd_str(_pid)..","..g.tbl.PID_INFO.funcs.pid_host_str(_pid)..","..tostring(API.plyr.get.host_priority(_pid)).." of "..tostring(API.plyr.count())..","..glbls.get_pid_rank(_pid)..","..funcs.get._2_dec(glbls.get_pid_kd(_pid))..",$"..glbls.get_pid_total_money(_pid)..","..g.tbl.PID_INFO.mod_flags_str[_pidT]
end

	
function g.tbl.PID_INFO.funcs.pid_host_str(_pid)
	if API.plyr.is.host(_pid) then
		return "Host"
	end
	return " "	
end


function g.tbl.PID_INFO.funcs.frnd_str(_pid)
	if funcs.is.valid_pid(_pid) and API.plyr.is.friend(_pid) then
		return "Friend"
	end
	return " "
end



function g.tbl.PID_INFO.funcs.pid_ip(_pid)
	local ip = "IP"
	if funcs.is.num(API.plyr.get.ip(_pid)) then
		ip = API.plyr.get.ip(_pid)
		ip = string.format("%i.%i.%i.%i", ip >> 24 & 255, ip >> 16 & 255, ip >> 8 & 255, ip & 255)
	end
	return ip
end



function g.tbl.PID_INFO.funcs.pid_join_info(_pid)
	local JL_msg = ""
	local mod_flags = ""
	if funcs.is.not_not(funcs.get.pid_name(_pid),"Player","Ped","Entity") then
		JL_msg = funcs.get.pid_name(_pid).."  SCID: "..API.plyr.get.scid(_pid)
		JL_msg = JL_msg .."\nPID:".._pid
		JL_msg = JL_msg.."   Host Priority:"..tostring(API.plyr.get.host_priority(_pid)).."/"..tostring(API.plyr.count())
		if g.tbl.PID_INFO.funcs.pid_ip(_pid) ~= "IP" then
			JL_msg = JL_msg .."\n"..g.tbl.PID_INFO.funcs.pid_ip(_pid)
		end
		if glbls.get_pid_rank(_pid) ~= 0 or glbls.get_pid_kd(_pid) ~= 0 then
			JL_msg = JL_msg .."\n"
			if glbls.get_pid_rank(_pid) ~= 0 then
				JL_msg = JL_msg .."Rank: "..glbls.get_pid_rank(_pid)
			end
			if glbls.get_pid_kd(_pid) ~= 0 then
				if glbls.get_pid_rank(_pid) ~= 0 then
					JL_msg = JL_msg .."   "
				end
				JL_msg = JL_msg .."K/D: "..funcs.get._2_dec(glbls.get_pid_kd(_pid))
			end
		end
		if glbls.get_pid_total_money(_pid) > 0 then
			JL_msg = JL_msg .."\nMoney: $"..funcs.get.add_commas(glbls.get_pid_total_money(_pid))
		end
		mod_flags = ""
		for k,v in pairs(mddrs.list) do
			if API.plyr.is.modder(_pid,k) then
				mod_flags=mod_flags..v.." "
			end
		end
		if mod_flags ~= "" then
			JL_msg = JL_msg .."\nMod Flags: "..mod_flags
		end
	end
	return JL_msg
end

function g.tbl.PID_INFO.funcs.check_for_mods(i,_pid,time)
	local function notif(_str)
		if g._mods_detex_notify.on then
			g.N_P(2,g.tbl.PID_INFO.name[_pid+1].._str,__GV__,7,"Yellow")
		end
	end
	if player.can_player_be_modder(_pid) and g.tbl.PID_INFO.join_time[i]+20 < time then
		if g._mods_detex_kd_tog.on and glbls.get_pid_kd(_pid) > g._mods_detex_kd_tog.value and not API.plyr.is.modder(_pid,mddrs.high_kd_flag) then 
			player.set_player_as_modder(_pid, mddrs.high_kd_flag)
			notif("\nHas a high K/D.\n --Marking as Modder--")
		end
		if g._mods_detex_kd_neg_tog.on and glbls.get_pid_kd(_pid) < 0 and not API.plyr.is.modder(_pid,mddrs.neg_kd_flag) then 
			player.set_player_as_modder(_pid, mddrs.neg_kd_flag)
			notif("\nHas a negative K/D.\n --Marking as Modder--")
		end
		if g._mods_detex_money_tog.on and glbls.get_pid_total_money(_pid) > ((250*g._mods_detex_money_tog.value+500)*1000000) and not API.plyr.is.modder(_pid,mddrs.high_money_flag) then 
			player.set_player_as_modder(_pid, mddrs.high_money_flag)
			notif("\nHas a lot of money.\n --Marking as Modder--")
		end
		if g._mods_detex_rank_tog.on and glbls.get_pid_rank(_pid) > g._mods_detex_rank_tog.value and not API.plyr.is.modder(_pid,mddrs.high_rank_flag) then 
			player.set_player_as_modder(_pid, mddrs.high_rank_flag)
			notif("\nHas a high rank.\n --Marking as Modder--")
		end
		if g._mods_detex_undead_tog.on and g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) and not API.plyr.is.modder(_pid,mddrs.undead_flag) then 
			player.set_player_as_modder(_pid, mddrs.undead_flag)
			notif("\nPlayer is un-dead.\n --Marking as Modder--")
		end
	end
end

function g.tbl.PID_INFO.funcs.pid_mod_flags_str(i,_pid)
	g.tbl.PID_INFO.mod_flags_str[i]=""
	for k,v in pairs(mddrs.list) do
		if API.plyr.is.modder(_pid,k) then
			g.tbl.PID_INFO.mod_flags_str[i]=g.tbl.PID_INFO.mod_flags_str[i]..v.." "
		end
	end
end

function g.tbl.PID_INFO.funcs.pid_typing_check(i)
	if i-1 ~= funcs.ME._id() then
		if g.tbl.PID_INFO.typing[i] then
			if g.tbl.PID_INFO.typing_stop[i] and (g.tbl.PID_INFO.typing_stop_time[i]+3 < API.util.t_s()) then
				funcs.doo.PID_INFO_default_typing(i)
			elseif (g.tbl.PID_INFO.typing_start_time[i]+30 < API.util.t_s())  then
				funcs.doo.PID_INFO_default_typing(i)
			end
		else
			funcs.doo.PID_INFO_default_typing(i)
		end
	end
end

function g.tbl.PID_INFO.funcs.pid_pause_check(i)
	if g.tbl.PID_INFO.pause[i] then
		if g.tbl.PID_INFO.pause_stop[i] then
			g.tbl.PID_INFO.funcs.default_pause(i)
		elseif (g.tbl.PID_INFO.pause_start_time[i]+60 < API.util.t_s())  then
			g.tbl.PID_INFO.funcs.default_pause(i)
		end
	else
		g.tbl.PID_INFO.funcs.default_pause(i)
	end
end

function g.tbl.PID_INFO.funcs.pid_stat_record(i,_pid,pos,time)
	local function pid_loading(_pid,time)
		if API.plyr.get.coords(_pid) ~= v3(0,0,0) and (time - g.tbl.PID_INFO.join_time[_pid+1]) > 60 then
			return false
		elseif API.ent.get.speed(API.plyr.get.ped(_pid)) < 1 then
			if API.plyr.get.coords(_pid) == v3(0,0,0) or glbls.get_pid_rank(_pid) == 0 then
				return true
			elseif glbls.get_pid_kd(_pid) +  glbls.get_pid_total_money(_pid) == 0 then
				return true
			elseif glbls.is_pid_otr(_pid) and (glbls.get_pid_kd(_pid) == 0 or glbls.get_pid_total_money(_pid) == 0) then
				return true
			end
		end
		return false
	end
	local function pid_invis(_pid)
		if not g.var.GS_has_loaded then -- ensures dist_table is loaded
			return false
		elseif g.tbl.PID_INFO.visible[_pid+1] or g.tbl.PID_INFO.interior[_pid+1] or g.tbl.PID_INFO.loading[_pid+1] or g.tbl.PID_OSD.dist_table[_pid+1][1] > 250 then
			return false
		elseif not g.tbl.PID_INFO.plyr_play[_pid+1] and not g.tbl.PID_INFO.plyr_moving[_pid+1] and g.tbl.PID_INFO.plyr_god[_pid+1] then -- entering interior possibly
			return false
		end
		return true
	end
	g.tbl.PID_INFO.host_priority_str[i] = tostring(API.plyr.get.host_priority(_pid)).." / "..tostring(API.plyr.count())
	g.tbl.PID_INFO.ip[i] = g.tbl.PID_INFO.funcs.pid_ip(_pid)
	g.tbl.PID_INFO.scid[i] = API.plyr.get.scid(_pid)
	g.tbl.PID_INFO.name[i] = API.plyr.get.name(_pid)
	g.tbl.PID_INFO.kd[i] = funcs.get._2_dec(glbls.get_pid_kd(_pid))
	g.tbl.PID_INFO.money[i] = glbls.get_pid_total_money(_pid)
	g.tbl.PID_INFO.rank[i] = glbls.get_pid_rank(_pid)
	g.tbl.PID_INFO.modder[i] = API.plyr.is.modder(_pid,-1)
	g.tbl.PID_INFO.plyr_god[i] = API.plyr.is.god(_pid)
	g.tbl.PID_INFO.visible[i] = API.ent.is.visible(API.plyr.get.ped(_pid))
	g.tbl.PID_INFO.color[i] = glbls.team_rgb_int(_pid)
	g.tbl.PID_INFO.dead[i] = API.ent.is.dead(API.plyr.get.ped(_pid))
	g.tbl.PID_INFO.is_frnd[i] = API.plyr.is.friend(_pid)
	g.tbl.PID_INFO.net_hash[i] = network.network_hash_from_player(_pid)
	if pid_loading(_pid,time) then
		g.tbl.PID_INFO.plyr_play[i] = false
		g.tbl.PID_INFO.loading[i] = true
	else
		g.tbl.PID_INFO.loading[i] = false
		if not API.plyr.is.playing(_pid) then
			if g.tbl.PID_INFO.dead[i] == true then
				g.tbl.PID_INFO.plyr_play[i] = true
			else
				g.tbl.PID_INFO.plyr_play[i] = false
				--g.tbl.PID_INFO.pos_v2[i] = v2(pos.x,pos.y)
				--g.tbl.PID_INFO.pos_time[i] = time
			end
		end
	end
	g.tbl.PID_INFO.invisible[i] = pid_invis(_pid)
end

function g.tbl.PID_INFO.funcs.pid_undead_check(i,_pid,pos)
	if (g.tbl.PID_INFO.dead[i] == true or API.plyr.get.max_health(_pid) == 0.0) and not g.tbl.PID_INFO.loading[i] then
		if g._show_undead_blips.on and pos ~= v3(0.0,0.0,0.0) and API.plyr.get.max_health(_pid) == 0.0 then
			if g.tbl.PID_INFO.undead_blip[i] == v3(0,0,0) then
				if g.tbl.PID_INFO.otr_blip[i] ~= v3(0,0,0) then
					ui.remove_blip(g.tbl.PID_INFO.otr_blip[i])
					g.tbl.PID_INFO.otr_blip[i] = v3(0,0,0)
				end
				g.tbl.PID_INFO.undead_blip[i] = ui.add_blip_for_coord(pos)
				ui.set_blip_colour(g.tbl.PID_INFO.undead_blip[i],72)
			else
				ui.set_blip_coord(g.tbl.PID_INFO.undead_blip[i],pos)
			end
		elseif g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) then
			ui.remove_blip(g.tbl.PID_INFO.undead_blip[i])
			g.tbl.PID_INFO.undead_blip[i] = v3(0,0,0)
		end 
	elseif g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) then
		ui.remove_blip(g.tbl.PID_INFO.undead_blip[i])
		g.tbl.PID_INFO.undead_blip[i] = v3(0,0,0)
	end 
end
				
function g.tbl.PID_INFO.funcs.pid_otr_check(i,_pid,time,pos)
	if not g.tbl.PID_INFO.loading[i] then g.tbl.PID_INFO.otr[i] = glbls.is_pid_otr(_pid) else g.tbl.PID_INFO.otr[i] = false end
	if g.tbl.PID_INFO.otr[i] == false then
		g.tbl.PID_INFO.otr_time[i] = -1
		g.tbl.PID_INFO.otr_1_min[i] = false
		g.tbl.PID_INFO.otr_3_min[i] = false
		g.tbl.PID_INFO.otr_many_min[i] = -1
		if g.tbl.PID_INFO.otr_blip[i] ~= v3(0,0,0) then
			ui.remove_blip(g.tbl.PID_INFO.otr_blip[i])
		end
		g.tbl.PID_INFO.otr_blip[i] = v3(0,0,0)
	elseif g.tbl.PID_INFO.otr[i] == true then
		if g.tbl.PID_INFO.otr_time[i] == -1 then
			g.tbl.PID_INFO.otr_time[i] = time -- start otr time count
		elseif _pid ~= API.plyr.my_id() then
			if g._show_otr_blips.on and g.tbl.PID_INFO.undead_blip[i] == v3(0,0,0) then
				if g.tbl.PID_INFO.otr_blip[i] == v3(0,0,0) then
					g.tbl.PID_INFO.otr_blip[i] = ui.add_blip_for_coord(pos)
					ui.set_blip_colour(g.tbl.PID_INFO.otr_blip[i],2)
				else
					ui.set_blip_coord(g.tbl.PID_INFO.otr_blip[i],pos)
				end
			end
			if g._mods_detex_otr_tog.on then
				if g.tbl.PID_INFO.otr_time[i]+61 < time and g.tbl.PID_INFO.otr_1_min[i] == false then
					g.N_P(2,g.tbl.PID_INFO.name[i].."\nOff-the-radar for more than one minute",__GV__,7,"Yellow")
					g.tbl.PID_INFO.otr_1_min[i] = true
				elseif g.tbl.PID_INFO.otr_time[i]+181 < time and g.tbl.PID_INFO.otr_3_min[i] == false then
					if player.can_player_be_modder(_pid) and not API.plyr.is.modder(_pid,mddrs.otr_flag) then
						player.set_player_as_modder(_pid, mddrs.otr_flag)
						g.N_P(2,g.tbl.PID_INFO.name[i].."\nOff-the-radar for more than three minutes.\n --Marking as Modder--",__GV__,7,"Yellow")
					end
					g.tbl.PID_INFO.otr_3_min[i] = true
				elseif g.tbl.PID_INFO.otr_1_min[i] == true and g.tbl.PID_INFO.otr_3_min[i] == true then
					if g.tbl.PID_INFO.otr_many_min[i] == -1 then
						g.tbl.PID_INFO.otr_many_min[i] = time + 300
					elseif g.tbl.PID_INFO.otr_many_min[i] < time then
						g.N_P(2,g.tbl.PID_INFO.name[i].."\nOff-the-radar for more than "..mth.flr((g.tbl.PID_INFO.otr_many_min[i]-g.tbl.PID_INFO.otr_time[i])/60).." minutes",__GV__,7,"Yellow")
						g.tbl.PID_INFO.otr_many_min[i] = -1
					end
				end
				if g.tbl.PID_INFO.otr_time[i]+181 < time and player.can_player_be_modder(_pid) and not API.plyr.is.modder(_pid,mddrs.otr_flag) then -- if the feature is toggled on after theyve been otr > 3 min
					player.set_player_as_modder(_pid, mddrs.otr_flag)
					g.N_P(2,g.tbl.PID_INFO.name[i].."\nOff-the-radar for more than three minutes.\n --Marking as Modder--",__GV__,7,"Yellow")
				end
			end
		end							
	end
end

function g.tbl.PID_INFO.funcs.pid_veh_check(i,_pid,time)
	if API.plyr.is.in_veh(_pid) and funcs.is.veh(API.plyr.get.veh(_pid)) then --actions will continue to work on vehicle even after they get out
		g.tbl.PID_INFO.veh_erase_time[i] = -1
		g.tbl.PID_INFO.veh[i] = API.plyr.get.veh(_pid)
		g.tbl.PID_INFO.in_veh[i] = true
		g.tbl.PID_INFO.veh_god[i] = API.plyr.is.veh_god(_pid)
		if API.ent.get.speed(g.tbl.PID_INFO.veh[i]) ~= nil then
			if API.ent.get.speed(g.tbl.PID_INFO.veh[i]) > 0 then
				g.tbl.PID_INFO.mph[i] = funcs.get._1_dec(API.ent.get.speed(g.tbl.PID_INFO.veh[i]) * 2.23694)
				g.tbl.PID_INFO.kph[i] = funcs.get._1_dec(API.ent.get.speed(g.tbl.PID_INFO.veh[i]) * 3.6) 
			elseif g.tbl.PID_INFO.mph[i] > 0 and g.tbl.PID_INFO.kph[i] > 0 then
				if g.tbl.PID_INFO.speed_erase_time[i] == -1 then 
					g.tbl.PID_INFO.speed_erase_time[i] = time + 3-- gta cant tell their speed half the time and this prevents flicker. If no speed reported it will display last speed for 3 seconds
				elseif g.tbl.PID_INFO.speed_erase_time[i] < time then  
					g.tbl.PID_INFO.mph[i] = -1
					g.tbl.PID_INFO.kph[i] = -1
					g.tbl.PID_INFO.speed_erase_time[i] = -1
				end
			end
		else
			g.tbl.PID_INFO.mph[i] = 0
			g.tbl.PID_INFO.kph[i] = 0
		end
	else
		g.tbl.PID_INFO.in_veh[i] = false
		g.tbl.PID_INFO.veh_god[i] = false
		g.tbl.PID_INFO.mph[i] = -1
		g.tbl.PID_INFO.kph[i] = -1
		if g.tbl.PID_INFO.veh[i] ~= -1 and g.tbl.PID_INFO.veh_erase_time[i] == -1 then  -- if they were in a vehicle and no timer set
			g.tbl.PID_INFO.veh_erase_time[i] = time + 120
		elseif g.tbl.PID_INFO.veh_erase_time[i] < time then -- will remove vehicle from table if 2 minutes have passed
			g.tbl.PID_INFO.veh[i] = -1
			g.tbl.PID_INFO.veh_erase_time[i] = -1
		end
	end
end

function g.tbl.PID_INFO.funcs.pid_info_all(i,_pid,time,_check_time)
	g.tbl.PID_INFO.funcs.pid_typing_check(i)
	g.tbl.PID_INFO.funcs.pid_pause_check(i)
	g.tbl.PID_INFO.funcs.pid_stat_record(i,_pid,API.plyr.get.coords(_pid),time)
	g.tbl.PID_INFO.funcs.pid_undead_check(i,_pid,API.plyr.get.coords(_pid))
	g.tbl.PID_INFO.funcs.pid_otr_check(i,_pid,time,API.plyr.get.coords(_pid))
	g.tbl.PID_INFO.funcs.pid_veh_check(i,_pid,time)
	g.tbl.PID_INFO.funcs.check_for_mods(i,_pid,time)
	g.tbl.PID_INFO.funcs.pid_mod_flags_str(i,_pid)
	g.tbl.PID_INFO.join_leave_str[i] = g.tbl.PID_INFO.funcs.pid_join_info(_pid)
	g.tbl.PID_INFO.join_leave_table[i][3]=g.tbl.PID_INFO.funcs.pid_join_leave_get(i,_pid)
end


	function g.tbl.PID_INFO.funcs.default_all(I)
		g.tbl.PID_INFO.veh[I] = -1
		g.tbl.PID_INFO.in_veh[I] = false
		g.tbl.PID_INFO.veh_erase_time[I] = -1
		g.tbl.PID_INFO.veh_god[I] = false
		g.tbl.PID_INFO.scid[I] = -1
		g.tbl.PID_INFO.name[I] = "Player"
		g.tbl.PID_INFO.tp_sett[I] = false
		g.tbl.PID_INFO.kd[I] = -1
		g.tbl.PID_INFO.money[I] = -1
		g.tbl.PID_INFO.rank[I] = -1
		g.tbl.PID_INFO.mph[I] = -1
		g.tbl.PID_INFO.kph[I] = -1
		g.tbl.PID_INFO.speed_erase_time[I] = -1
		g.tbl.PID_INFO.otr[I] = false
		g.tbl.PID_INFO.otr_time[I] = -1
		g.tbl.PID_INFO.otr_1_min[I] = false
		g.tbl.PID_INFO.otr_3_min[I] = false
		g.tbl.PID_INFO.otr_many_min[I] = -1
		if g.tbl.PID_INFO.otr_blip[I] ~= v3(0,0,0) then
			ui.remove_blip(g.tbl.PID_INFO.otr_blip[I])
		end
		g.tbl.PID_INFO.otr_blip[I] = v3(0,0,0)
		if g.tbl.PID_INFO.undead_blip[I] ~= v3(0,0,0) then
			ui.remove_blip(g.tbl.PID_INFO.undead_blip[I])
		end
		g.tbl.PID_INFO.undead_blip[I] = v3(0,0,0)
		g.tbl.PID_INFO.plyr_god[I] = false
		g.tbl.PID_INFO.visible[I] = false
		g.tbl.PID_INFO.invisible[I] = false
		g.tbl.PID_INFO.modder[I] = false
		--g.tbl.PID_INFO.interior[I] = false
		g.tbl.PID_INFO.pos_v2[I] = v2(0,0)
		g.tbl.PID_INFO.pos_time[I] = -1
		g.tbl.PID_INFO.dead[I]  = false
		g.tbl.PID_INFO.plyr_play[I]  = false
		g.tbl.PID_INFO.color[I] = -1
		g.tbl.PID_INFO.ip[I] = "IP"
		g.tbl.PID_INFO.mod_flags_str[I] = ""
		g.tbl.PID_INFO.host_priority_str[I] = "0 / 0"
		funcs.doo.PID_INFO_default_typing(I)
		g.tbl.PID_INFO.join_leave_str[I]="Player"
		g.tbl.PID_INFO.join_time[I] = -1
		g.tbl.PID_INFO.join_time_str[I] = ""
		g.tbl.PID_INFO.net_hash[I] = -1
		g.tbl.PID_INFO.is_frnd[I] = false
		for k,v in pairs (mddrs.list) do
			player.unset_player_as_modder(I-1,k)
		end
		g.tbl.PID_INFO.funcs.default_pause(I)
		g.tbl.PID_INFO.ff_jt[I] = 0
		g.tbl.PID_INFO.ff_stlk[I] = 0
		g.tbl.PID_INFO.ff_hide[I] = 0
		g.tbl.PID_INFO.ff_frnd[I] = 0
	end
	
	function funcs.doo.PID_INFO_default_typing(I)
		g.tbl.PID_INFO.typing[I] = false
		g.tbl.PID_INFO.typing_start_time[I] = -1
		g.tbl.PID_INFO.typing_stop[I] = false
		g.tbl.PID_INFO.typing_stop_time[I] = -1
	end
	
	function g.tbl.PID_INFO.funcs.default_pause(I)
		g.tbl.PID_INFO.pause[I] = false
		g.tbl.PID_INFO.pause_start_time[I] = -1
		g.tbl.PID_INFO.pause_stop[I] = false
		g.tbl.PID_INFO.pause_stop_time[I] = -1
	end
	
	g.tbl.PID_INFO.join_leave_table ={}
	for i=1, 32 do
		g.tbl.PID_INFO.join_leave_table[i] = {false,false,""}
	end
	


	g.tbl.PID_INFO.typing_hook=hook.register_script_event_hook(function(pid,target,prmtr)
		--print("PID: "..funcs.get.pid_name(pid).." -- "..target.." -- "..table.concat(prmtr,", "))

		if prmtr[1] == glbls.typing_start then
			--print("PID: "..funcs.get.pid_name(pid).."  typing start: "..prmtr[1])
			g.tbl.PID_INFO.typing[pid+1]=true
			g.tbl.PID_INFO.typing_start_time[pid+1]=API.util.t_s()
			g.tbl.PID_INFO.typing_stop[pid+1]=false
			g.tbl.PID_INFO.typing_stop_time[pid+1] = -1
		elseif  prmtr[1] == glbls.typing_stop then
			--print("PID: "..funcs.get.pid_name(pid).."  typing stop: "..prmtr[1])
			g.tbl.PID_INFO.typing_stop[pid+1]=true
			if g.tbl.PID_INFO.typing_stop_time[pid+1] == -1 then
				g.tbl.PID_INFO.typing_stop_time[pid+1]=API.util.t_s()
			end
		end 
		if prmtr[1] == glbls.pause_start then
			--print("PID: "..funcs.get.pid_name(pid).."  pause start: "..prmtr[1])
			g.tbl.PID_INFO.pause[pid+1]=true
			g.tbl.PID_INFO.pause_start_time[pid+1]=API.util.t_s()
			g.tbl.PID_INFO.pause_stop[pid+1]=false
			g.tbl.PID_INFO.pause_stop_time[pid+1] = -1
		elseif  prmtr[1] == glbls.pause_stop then
			--print("PID: "..funcs.get.pid_name(pid).."  pause stop: "..prmtr[1])
			g.tbl.PID_INFO.pause_stop[pid+1]=true
			if g.tbl.PID_INFO.pause_stop_time[pid+1] == -1 then
				g.tbl.PID_INFO.pause_stop_time[pid+1]=API.util.t_s()
			end
		end 
	end)
	
	-- g._net_test_hook=hook.register_net_event_hook(function(pid,target,prmtr)
		-- if pid == API.plyr.my_id() then
			-- if prmtr ~= nil then
				-- print("NETWORK PID: "..funcs.get.pid_name(pid).."  Target: "..funcs.get.pid_name(target).." Prmtr: "..prmtr)
			-- end
		-- end
	-- end)
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		while true do
			g.tbl.PID_INFO.typing[funcs.ME._id()+1]=ntv.is.chat_active()
			system.yield(100)
		end
	end)
	
	
	for  i=1,32 do
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local PID,pid = i,i-1
			local pos_check_time = API.util.t_s() + 3
			while true do
				if not funcs.is.valid_pid(pid)  then
					if g.tbl.PID_INFO.scid[PID] ~= -1 then
						g.tbl.PID_INFO.join_leave_table[PID][2]=true
						if API.util.t_s() > pos_check_time and g.feat.plyr_JL_notif.on and g.feat.plyr_JL_notif.value ~= 1 then
							g.N_P(2,"Player leaving\n"..tostring(g.tbl.PID_INFO.join_leave_str[PID]),__GV__,7,"Blue")
						end
					end
					g.tbl.PID_INFO.funcs.default_all(PID) -- all settings back to default
					while not funcs.is.valid_pid(pid) do
						system.yield(0)
					end
				elseif funcs.get.pid_name(pid) ~= "Player" then
					if g.tbl.PID_INFO.scid[PID] == -1 then
						g.tbl.PID_INFO.join_time_str[PID] = os.date("%Y-%m-%d %H%M-%S")
						g.tbl.PID_INFO.join_time[PID] = API.util.t_s()
						g.tbl.PID_INFO.join_leave_table[PID][1]=true
						g.tbl.PID_INFO.funcs.pid_info_all(PID,pid,API.util.t_s(),pos_check_time) -- this is a pretty big function functions
						if API.util.t_s() > pos_check_time and g.tbl.PID_INFO.join_leave_str[PID] ~= "" then
							if g.feat.plyr_JL_notif.on and g.feat.plyr_JL_notif.value ~= 2 then
								g.N_P(2,"Player joining\n"..tostring(g.tbl.PID_INFO.join_leave_str[PID]),__GV__,7,"Blue")
							end
						end
					else
						g.tbl.PID_INFO.funcs.pid_info_all(PID,pid,API.util.t_s(),pos_check_time)
					end
				else
					g.tbl.PID_INFO.funcs.default_all(PID)
				end
				system.yield(mth.rndm(250,500))
			end
		end)

			
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local PID,pid = i,i-1
			while true do
				if funcs.is.valid_pid(pid) then
					if pid == API.plyr.my_id() or g.tbl.PID_INFO.interior_time[PID] + mth.rndm(669,996) < API.util.t_ms() then --random seems dumb but it prevents every player detected as interior when loading from checking simultaneously
						if g.tbl.PID_INFO.interior[PID] then
							if intrr.is_pid_intrr(pid) then
								g.tbl.PID_INFO.interior_str[PID]=intrr.string(pid)
							else
								g.tbl.PID_INFO.interior[PID] = false
								g.tbl.PID_INFO.interior_str[PID]=""
							end
						elseif intrr.is_pid_intrr(pid) then
							g.tbl.PID_INFO.interior[PID]=true
							g.tbl.PID_INFO.interior_str[PID]=intrr.string(pid)
						else
							g.tbl.PID_INFO.interior[PID] = false
							g.tbl.PID_INFO.interior_str[PID]=""
						end
						g.tbl.PID_INFO.interior_time[PID]=API.util.t_ms()
					end
				else
					g.tbl.PID_INFO.interior[PID] = false
					g.tbl.PID_INFO.interior_str[PID]=""
					g.tbl.PID_INFO.interior_time[PID]=API.util.t_ms()
					while not funcs.is.valid_pid(pid) do
						system.yield(0)
					end
				end
				system.yield(mth.rndm(500,1000))
			end
		end)
			
			
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local PID,pid = i,i-1
			local plyr_ped,plyr_veh,speed,time_check = 0,0,0,0
			local function not_zero_nil(_val)
				if _val ~= nil and _val ~= 0 then
					return true
				end
				return false
			end
			local function record_speed_pos_time(_val,i)
				g.tbl.PID_INFO.plyr_speed_pos_mph[i] = funcs.get._1_dec(_val * 2.23694)
				g.tbl.PID_INFO.plyr_speed_pos_kph[i] = funcs.get._1_dec(_val * 3.6)
				g.tbl.PID_INFO.plyr_speed_pos_mps[i] = funcs.get._1_dec(_val)
				g.tbl.PID_INFO.plyr_speed_pos_time[i] = API.util.t_ms()
				g.tbl.PID_INFO.plyr_speed_pos[i] = API.plyr.get.coords(i-1)
				g.tbl.PID_INFO.plyr_moving[i] = funcs.is.num_in_range(_val * 2.23694,1,200)
				system.yield(5)
			end
				
			while true do
				if funcs.is.valid_pid(pid) then
					if API.plyr.is.in_veh(pid) and not_zero_nil(API.ent.get.speed(API.plyr.get.veh(pid))) then
						record_speed_pos_time(API.ent.get.speed(API.plyr.get.veh(pid)),PID)
					elseif not_zero_nil(API.ent.get.speed(API.plyr.get.ped(pid))) then
						record_speed_pos_time(API.ent.get.speed(API.plyr.get.ped(pid)),PID)
					elseif g.tbl.PID_INFO.plyr_speed_pos_time[PID] == 0 or g.tbl.PID_INFO.plyr_speed_pos[PID] == v3(0,0,0) then
						record_speed_pos_time(0,PID)
					else
						time_check = (API.util.t_ms()-g.tbl.PID_INFO.plyr_speed_pos_time[PID])
						if time_check > 250 then
							speed = (funcs.get.dist_pospos_v3(API.plyr.get.coords(pid),g.tbl.PID_INFO.plyr_speed_pos[PID])/(time_check/1000))
							record_speed_pos_time(speed,PID)
						end
					end
				else
					g.tbl.PID_INFO.plyr_speed_pos[PID] = v3(0,0,0)
					g.tbl.PID_INFO.plyr_speed_pos_mps[PID] = 0
					g.tbl.PID_INFO.plyr_speed_pos_mph[PID] = 0
					g.tbl.PID_INFO.plyr_speed_pos_kph[PID] = 0
					g.tbl.PID_INFO.plyr_speed_pos_time[PID] = 0
					g.tbl.PID_INFO.plyr_moving[PID] = false
					while not funcs.is.valid_pid(pid) do
						system.yield(0)
					end
				end
				system.yield(100)
			end
		end)
	end
	
	
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		local file_path,file,pid,pidT
		local function check()
			funcs.doo.check_create_dir(g.paths._user)
			funcs.doo.check_create_dir(g.paths._user.."Logs\\")
			funcs.doo.check_create_dir(g.paths._user.."Logs\\player_logs\\")
			funcs.doo.check_create_dir(g.paths._user.."Logs\\player_logs\\"..os.date("%Y-%m").."\\")
			file_path = g.paths._user.."Logs\\player_logs\\"..os.date("%Y-%m").."\\Player_logs_"..os.date("%Y-%m-%d")
			if not utils.file_exists(file_path..".csv") then
				file = io.open(file_path..".csv", "a")
				file:write(__GV__.."\nDate/Time,Join/Leave,Name,SCID,IP,PID,Friend,Host,Host Priority,Rank,K/D,Money,Modder Flags")
				file:close()
			end
		end
		while true do
			system.yield(25)
			for i=1, #g.tbl.PID_INFO.join_leave_table do
				if g.tbl.PID_INFO.join_leave_table[i][1] then -- joining
					pid=i-1
					pidT=i
					if (g.tbl.PID_INFO.join_time[i]+10 < API.util.t_s() and g.tbl.PID_INFO.funcs.pid_info_log(pidT,pid)) then 
						check()
						if g.feat.plyr_JL_print.on and g.feat.plyr_JL_print.value ~= 2 then
							print(g.tbl.PID_INFO.join_time_str[pidT]..",Join,"..g.tbl.PID_INFO.join_leave_table[i][3])
						end
						file = io.open(file_path..".csv", "a")
						file:write("\n"..g.tbl.PID_INFO.join_time_str[pidT]..",Join,"..g.tbl.PID_INFO.funcs.pid_join_leave_get(pidT,pid))
						file:close()
						g.tbl.PID_INFO.join_leave_table[i][1] = false
					end
				elseif g.tbl.PID_INFO.join_leave_table[i][2] then -- leaving
					check()
					if g.feat.plyr_JL_print.on and g.feat.plyr_JL_print.value ~= 1 then
						print(os.date("%Y-%m-%d %H%M-%S,Leave,")..g.tbl.PID_INFO.join_leave_table[i][3])
					end
					file = io.open(file_path..".csv", "a")
					file:write("\n"..os.date("%Y-%m-%d %H%M-%S,Leave,")..g.tbl.PID_INFO.join_leave_table[i][3])
					file:close()
					g.tbl.PID_INFO.join_leave_table[i][2] = false
				end
			end
		end
	end)

g.print_load_info("Player info features",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)--------------------------------------------PLAYER INFO END
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------PLAYERS ONLINE BEGIN

		g._SelfProtex_p = menu.add_player_feature("Aim protex", "parent", g.o.prnt.plyr.id)
		
		g._Fake_Friends = menu.add_player_feature("Fake Friends", "parent", g.o.prnt.plyr.id)
		
		g.o._weapon={}
		g.o._weapon.main_prnt=menu.add_player_feature("Weapons/Ammo", "parent", g.o.prnt.plyr.id)
		
		g.o._weapon.search_prnt=menu.add_player_feature("Search for weapon", "parent",g.o._weapon.main_prnt.id)
		g.o._weapon.search_feats={}
		g.o._weapon.search=menu.add_player_feature("Search", "action",g.o._weapon.search_prnt.id,function()
			local status,str = 1
			status,str = funcs.get.text_input("Type weapon name","",25,0)
			if status == 0 then 
				local _table={}
				for i=1,#weap_info.all_hash do
					if string.match(string.lower(API.wpn.get_name(weap_info.all_hash[i])), string.lower(str)) ~= nil then
						_table[#_table+1]= weap_info.all_hash[i]
					end
				end
				if #_table > 0 then 
					table.sort(_table, function(a, b) return API.wpn.get_name(a):lower() <  API.wpn.get_name(b):lower() end)
					for i=1,#g.o._weapon.search_feats do
						if g.o._weapon.search_feats[i] ~= nil then
							menu.delete_player_feature(g.o._weapon.search_feats[i].id)
							g.o._weapon.search_feats[i] = nil
							system.yield(0)
						end
					end
					for i=1,#_table do
						g.o._weapon.search_feats[i]=menu.add_player_feature(API.wpn.get_name(_table[i]), "action_value_str", g.o._weapon.search_prnt.id, function(f,pid)
							local given,removed,pre_removed=g.o._weapon.func(_table[i],f.value,pid)
							if given then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(_table[i]).."/ammo given :)",__GV__,5,"Green")
							elseif removed then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(_table[i]).." removed :)",__GV__,5,"Green")
							elseif pre_removed then g.N_P(2,funcs.get.pid_name(pid) .. "\nPlayer did not have "..API.wpn.get_name(_table[i]),__GV__,5,"Blue")
							else g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(_table[i]).." FAILED :(",__GV__,5,"Red")
							end
						end) g.o._weapon.search_feats[i]:set_str_data({"Give","Remove"})
					end
				end
			end
		end)

		g.o._weapon.GR_all=menu.add_player_feature("**All weapons**", "action_value_str",g.o._weapon.main_prnt.id, function(f,pid)
			API.wpn.ped_give(API.plyr.get.ped(pid), -72657034, 100, true)
			local given,removed,pre_removed,failed=0,0,0,0
			for i=1,#weap_info.all_hash do
				local _g,_r,_pr = g.o._weapon.func(weap_info.all_hash[i],f.value,pid)
				if _g then given = given+1 elseif _r then removed = removed+1 elseif _pr then pre_removed = pre_removed+1 else failed=failed+1 end
			end
			if f.value == 0 then
				if given > 0 then
					g.N_P(2,funcs.get.pid_name(pid) .. "\n"..given.."/"..(given+failed).." weapons/ammo given :)",__GV__,5,"Green")
				else
					g.N_P(2,funcs.get.pid_name(pid) .. "\nZero weapons given :(",__GV__,5,"Red")
				end
			elseif removed > 0 then
				g.N_P(2,funcs.get.pid_name(pid) .. "\n"..removed.."/"..(removed+failed).." weapons removed :)",__GV__,5,"Green")
			elseif pre_removed > 0 then
				g.N_P(2,funcs.get.pid_name(pid) .. "\nZero weapons because they didnt have any :)",__GV__,5,"Blue")
			end
		end)
		g.o._weapon.GR_all:set_str_data({"Give","Remove"})
		g.o._weapon.types={
		[0]="Pistols",
		[1]="Machine guns",
		[2]="Assault rifles",
		[3]="Snipers",
		[4]="Melee",
		[5]="Shotguns",
		[6]="Heavy weapons",
		[7]="Throwable/Other"
		}
		g.o._weapon.prnts={}
		g.o._weapon.temp={}
		g.o._weapon.all={}
		g.o._weapon.one={}
		function g.o._weapon.func(_weap,_val,_pid)
			local given,removed,pre_removed=false,false,false
			if _val==0 then
				given = funcs.doo.give_ped_weap(API.plyr.get.ped(_pid),_weap) --then
			elseif not API.wpn.ped_has(API.plyr.get.ped(_pid), _weap) then pre_removed = true
			else
				API.wpn.ped_remove(API.plyr.get.ped(_pid), _weap)
				system.yield(0)
				if not API.wpn.ped_has(API.plyr.get.ped(_pid), _weap) then removed = true end
			end
			return given,removed,pre_removed
		end
		for i=0,7 do
			g.o._weapon.temp[i]={}
			g.o._weapon.prnts[i]=menu.add_player_feature(g.o._weapon.types[i], "parent", g.o._weapon.main_prnt.id)
			for ii=1,#weap_info.all_hash do
				if weapon.get_weapon_weapon_wheel_slot(weap_info.all_hash[ii])==i and API.wpn.get_name(weap_info.all_hash[ii]) ~= "Unarmed" then
					g.o._weapon.temp[i][#g.o._weapon.temp[i]+1]=weap_info.all_hash[ii]
				end
			end
			table.sort(g.o._weapon.temp[i], function(a, b) return API.wpn.get_name(a):lower() <  API.wpn.get_name(b):lower() end)
			
			
			g.o._weapon.all[i]=menu.add_player_feature("**All "..g.o._weapon.types[i].."**", "action_value_str", g.o._weapon.prnts[i].id, function(f,pid)
				API.wpn.ped_give(API.plyr.get.ped(pid), -72657034, 100, true)
				local given,removed,pre_removed,_g,_r,_pr=false,false,false,false,false,false
				for ii=1,#g.o._weapon.temp[i] do
					local _g,_r,_pr = g.o._weapon.func(g.o._weapon.temp[i][ii],f.value,pid)
					if _g then given = true elseif _r then removed = true elseif _pr then pre_removed = true end
				end
				if given then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..g.o._weapon.types[i].."/ammo given :)",__GV__,5,"Green")
				elseif removed then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..g.o._weapon.types[i].." removed :)",__GV__,5,"Green")
				elseif pre_removed then g.N_P(2,funcs.get.pid_name(pid) .. "\nPlayer did not have "..g.o._weapon.types[i],__GV__,5,"Blue")
				else g.N_P(2,funcs.get.pid_name(pid) .. "\n"..g.o._weapon.types[i].." FAILED :(",__GV__,5,"Red")
				end
			end)g.o._weapon.all[i].set_str_data(g.o._weapon.all[i],{"Give","Remove"})
			if i== 7 then
				g.o._weapon.para=menu.add_player_feature("Parachute", "action_value_str", g.o._weapon.prnts[i].id, function(f,pid)
						API.wpn.ped_give(API.plyr.get.ped(pid), -72657034, 100, true)
						g.N_P(2,funcs.get.pid_name(pid) .. "\nParachute given :)",__GV__,5,"Blue")
				end)
				g.o._weapon.para:set_str_data({"Give"})
			end
			g.o._weapon.one[i]={}
			for ii=1,#g.o._weapon.temp[i] do
				g.o._weapon.one[i][ii]=menu.add_player_feature(API.wpn.get_name(g.o._weapon.temp[i][ii]), "action_value_str", g.o._weapon.prnts[i].id, function(f,pid)
					local given,removed,pre_removed=g.o._weapon.func(g.o._weapon.temp[i][ii],f.value,pid)
					if given then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(g.o._weapon.temp[i][ii]).."/ammo given :)",__GV__,5,"Green")
					elseif removed then g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(g.o._weapon.temp[i][ii]).." removed :)",__GV__,5,"Green")
					elseif pre_removed then g.N_P(2,funcs.get.pid_name(pid) .. "\nPlayer did not have "..API.wpn.get_name(g.o._weapon.temp[i][ii]),__GV__,5,"Blue")
					else g.N_P(2,funcs.get.pid_name(pid) .. "\n"..API.wpn.get_name(g.o._weapon.temp[i][ii]).." FAILED :(",__GV__,5,"Red")
					end
				end) g.o._weapon.one[i][ii].set_str_data(g.o._weapon.one[i][ii],{"Give","Remove"})
				g.load_break()
			end
		end
		
		g.print_load_info("Player Weapons",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
		
		g.o.prnt.Ass2In_main=menu.add_player_feature("Assassin", "parent", g.o.prnt.plyr.id)
		
		
	function funcs.doo.remove_ents_thread(_bool,_var1,_var2,_var3)
		local t1,t2 = {},{}
		if _var1 then t1[#t1+1]=_var1 end
		if _var2 then t1[#t1+1]=_var2 end
		if _var3 then t1[#t1+1]=_var3 end
		for k1,v1 in pairs(t1) do
			if type(v1)=="table" then
				for k2,v2 in pairs(v1) do
					if _bool and type(v2)=="number" then
						g.tbl.unaffected_ents[v2]=false
					end
					if funcs.is.ent(v2) then
						t2[#t2+1]=v2
					end
				end
			else
				if _bool and type(v1)=="number" then
					g.tbl.unaffected_ents[v1]=false
				end
				if funcs.is.ent(v1) then
					t2[#t2+1]=v1
				end
			end
		end
		for k,v in pairs(t2) do
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				local ENT=v
				funcs.doo.remove_ent(ENT,3000)
			end)
		end
	end
						
						
	function funcs.doo.ped_attack_ped_thread_simple(_perp,_vctm)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local __perp,__vctm = _perp,_vctm
			local pos,dist,in_veh,aircraft,plane,helo,have_los,los_time,vctm_inair,non_air_tp,found,spawn_points
			local function should_tp()
				if (helo and dist > 700) or (not helo and plane and dist > 2000) or (not aircraft and in_veh and not vctm_inair and dist > 300) or	(not in_veh and not vctm_inair and dist > 100) then
					return true
				elseif not have_los then
					if los_time == nil then
						if in_veh then
							los_time = API.util.t_s()+25
						else
							los_time = API.util.t_s()+15
						end
					elseif los_time < API.util.t_s() then
						if in_veh then
							los_time = API.util.t_s()+25
						else
							los_time = API.util.t_s()+15
						end
						return true
					end
				elseif in_veh then
					los_time = API.util.t_s()+25
				else
					los_time = API.util.t_s()+15
				end
				return false
			end
			while funcs.is.ped(__perp) and not API.ent.is.dead(__perp) and funcs.is.ped(__vctm) do
				in_veh = API.Ped.is.in_veh(__perp)
				helo = (in_veh and (API.ent.get.model_hash(API.Ped.get.veh(__perp)) == API.get_hash_key("oppressor2") or API.strm.is.valid_helo(API.ent.get.model_hash(API.Ped.get.veh(__perp)))))
				plane = (in_veh and API.strm.is.valid_plane(API.ent.get.model_hash(API.Ped.get.veh(__perp))))
				aircraft = (helo or plane)
				dist = funcs.get.dist_pospos_v3(API.ent.get.coords(__perp),API.ent.get.coords(__vctm))
				have_los = funcs.is.peds_have_los(__perp,__vctm)
				vctm_inair = (API.ent.is.in_air(__vctm) or (API.Ped.is.in_veh(__vctm) and API.ent.is.in_air(API.Ped.get.veh(__vctm))))
				--non_air_tp = (aircraft or not vctm_inair)
				if should_tp() and (not in_veh or API.veh.get.ped_in_seat(API.Ped.get.veh(__perp), -1) == __perp) then
					if API.Ped.is.plyr(__vctm) then
						pos = funcs.get.pid_pos_z_guess(API.plyr.get.plyr_from_ped(__vctm))
					else
						pos = API.ent.get.coords(__vctm)
					end
					if in_veh then
						if funcs.ntwrk.ask_long(API.Ped.get.veh(__perp),1000) then
							local size = funcs.get.basic_veh_dimensions(true,API.Ped.get.veh(__perp),2,2)
							local int = mth.flr(size*2)
							if helo then
								API.ent.set.coords(API.Ped.get.veh(__perp),pos+v3(mth.rndm(-(int*25),(int*25)),mth.rndm(-(int*25),(int*25)),100))
							elseif plane then
								API.ent.set.coords(API.Ped.get.veh(__perp),pos+v3(mth.rndm(-(int*69),(int*69)),mth.rndm(-(int*69),(int*69)),500))
							else
								spawn_points = funcs.get.spawn_points(pos,20)
								for i=1,#spawn_points do
									if funcs.get.dist_pospos_v3(spawn_points[i],API.ent.get.coords(__vctm)) < 300 then
										API.ent.set.coords(API.Ped.get.veh(__perp),spawn_points[i])
										break
									end
								end
							end
						end
					elseif vctm_inair then --gta wont let me know the victim is in air most of the time aaaa need to make my own
						pos = funcs.get.pos_nearby(pos,"single_closest",10,"water","xyz")
						if funcs.ntwrk.ask_long(__perp,1000) then
							API.ent.set.coords(__perp,pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),1))
						end
					elseif funcs.ntwrk.ask_long(__perp,1000) then
						API.ent.set.coords(__perp,pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),1))
					end
				end
				if in_veh and API.strm.is.valid_helo(API.ent.get.model_hash(API.Ped.get.veh(__perp))) then
					API.veh.set.helo_blades_full(API.Ped.get.veh(__perp))
				end
				ai.task_combat_ped(__perp, __vctm,0,16)
				system.yield(1000)
			end
			funcs.doo.remove_ent(__perp,1000)
		end)
	end
	
		function funcs.doo.Ass2In_pid_info(_pid)
			g.N_P(2,
			funcs.get.pid_name(_pid)..
			"\nAssassin: "..g.o.tbl.Ass2In.pids[_pid].PED_NAME..
			"\nWeapon: "..g.o.tbl.Ass2In.pids[_pid].WEAP_NAME..
			"\nVehicle: "..g.o.tbl.Ass2In.pids[_pid].VEH_NAME,
			__GV__,4,"Blue")
		end
	
		g.o.feat.Ass2In=menu.add_player_feature("Send Assassins", "value_i", g.o.prnt.Ass2In_main.id,function(f,pid)
			local peds_not_to_love,peds,start,veh,memory={},{},{},{},{}
			local veh_height,pid_group,pos,ped_count,peds_temp,all_peds,found,dist,new_pos,spawn_points
			local attacker_group = ped.create_group()
			while f.on do
				for a=1,f.value do
					start[a]=true
					if peds[a]==nil then
						peds[a]={}
					end
					if veh[a]==nil then
						veh[a]={}
					end
					for i=1,#peds[a] do
						if funcs.is.ent(peds[a][i]) and not API.ent.is.dead(peds[a][i]) then
							start[a]=false
							break
						end
					end
					if start[a] then
						funcs.doo.remove_ents_thread(true,peds[a],veh[a])
						if not ped.does_group_exist(attacker_group) then
							attacker_group = ped.create_group()
						end
						--funcs.doo.wipe_tbl(peds_not_to_love)
						funcs.doo.wipe_tbl(peds[a])
						peds_not_to_love[API.plyr.get.ped(pid)]=true
						pid_group = player.get_player_group(pid)
						ped_count=veh_stuff.info[g.o.tbl.Ass2In.pids[pid].VEH_HASH].SEATS
						spawn_points = funcs.get.spawn_points(API.plyr.get.coords(pid),20)
						pos = spawn_points[mth.rndm(1,#spawn_points)]
						if API.strm.is.valid_helo(g.o.tbl.Ass2In.pids[pid].VEH_HASH) or g.o.tbl.Ass2In.pids[pid].VEH_HASH == API.get_hash_key("oppressor2") then
							veh_height=mth.rndm(100,200)
							pos=pos+v3(mth.rndm(-150,150),mth.rndm(-150,150),2)
						elseif API.strm.is.valid_plane(g.o.tbl.Ass2In.pids[pid].VEH_HASH) then
							veh_height=mth.rndm(400,500)
							pos=pos+v3(mth.rndm(-500,500),mth.rndm(-500,500),2)
						else
							veh_height=0
						end
						funcs.doo.req_model(g.o.tbl.Ass2In.pids[pid].VEH_HASH)
						veh[a] = funcs.doo.spawn_veh(pos+v3(0,0,veh_height),g.o.tbl.Ass2In.pids[pid].VEH_HASH,true,0,true,true)
						system.yield(0)
						if funcs.is.veh(veh[a]) then
							g.tbl.unaffected_ents[veh[a]]=true
							memory[#memory+1]=veh[a]
							API.ent.set.god(veh[a],g.o.tbl.Ass2In.pids[pid].VEH_GOD)
							funcs.doo.req_model(g.o.tbl.Ass2In.pids[pid].PED_HASH)
							for i=1,ped_count do
								peds[a][#peds[a]+1]=funcs.doo.spawn_ped_angry(pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),2),g.o.tbl.Ass2In.pids[pid].PED_HASH,g.o.tbl.Ass2In.pids[pid].WEAP_HASH,API.get_hash_key("weapon_machinepistol"),pid,veh[a])
								system.yield(0)
								if funcs.is.ped(peds[a][#peds[a]]) then
									g.tbl.unaffected_ents[peds[a][#peds[a]]]=true
									memory[#memory+1]=peds[a][#peds[a]]
									API.ent.set.god(peds[a][#peds[a]],g.o.tbl.Ass2In.pids[pid].PED_GOD)
									peds_not_to_love[peds[a][#peds[a]]]=true
									ped.set_ped_as_group_member(peds[a][#peds[a]], attacker_group)
									ped.set_ped_never_leaves_group(peds[a][#peds[a]], true)
									ped.set_relationship_between_groups(5, attacker_group, pid_group)
									ped.set_relationship_between_groups(5, pid_group, attacker_group)
								end
							end
							for i=1,ped_count do
								if funcs.is.ped(peds[a][i]) then
									funcs.doo.ped_attack_ped_thread_simple(peds[a][i],API.plyr.get.ped(pid))
								end
							end
						end
					end
					peds_temp = {}
					for i=1,#peds do
						if funcs.is.ent(veh[i]) then
							API.ent.set.god(veh[i],g.o.tbl.Ass2In.pids[pid].VEH_GOD)
						end
						for ii=1,#peds[i] do
							if funcs.is.ent(peds[i][ii]) then
								API.ent.set.god(peds[i][ii],g.o.tbl.Ass2In.pids[pid].PED_GOD)
							end
							peds_temp[#peds_temp+1]=peds[i][ii]
						end
					end
					if attacker_group and ped.does_group_exist(attacker_group) and pid_group and ped.does_group_exist(pid_group) then

						if #peds_temp > 0 then
							all_peds = API.Ped.get.all()
							for i=1,#all_peds do
								if not ped.is_ped_group_member(all_peds[i],attacker_group) then
									if not ped.is_ped_group_member(all_peds[i],pid_group) then
										if not peds_not_to_love[all_peds[i]] then
											ped.set_relationship_between_groups(1, attacker_group, ped.get_ped_group(all_peds[i]))
											ped.set_relationship_between_groups(1, ped.get_ped_group(all_peds[i]), attacker_group)
										end
									end
								end	
							end
						end
					end
					if #peds > f.value then
						for i=1,#peds do
							if i > f.value then
								funcs.doo.remove_ents_thread(true,peds[i],veh[i])
							end
						end
						system.yield(0)
						for i=1,#peds do
							if i > f.value then
								peds[i]=nil
								veh[i]=nil
							end
						end
					end
				end
				funcs.doo.yield_while_true(f.on,2000)
			end
			funcs.doo.remove_ents_thread(true,memory)
		end)
		funcs.set_feat_i_f(g.o.feat.Ass2In,1,10,1,1)
			
	


			
		g.o.tbl.Ass2In = {}
		g.o.tbl.Ass2In.loaded=false
		g.o.tbl.Ass2In.loadedtime=API.util.t_ms()
		g.o.tbl.Ass2In.pids={}
		g.o.tbl.Ass2In.weapons = {}
		g.o.tbl.Ass2In.weapons.prnts={}
		g.o.tbl.Ass2In.weapons.temp={}
		g.o.tbl.Ass2In.ped_prnts={}
		g.o.tbl.Ass2In.weapons.types={
		[0]="Pistols",
		[1]="Machine guns",
		[2]="Assault rifles",
		[3]="Snipers",
		[4]="Melee",
		[5]="Shotguns",
		[6]="Heavy weapons",
		[7]="Throwable/Other"
		}

		for i=0,31 do
			g.o.tbl.Ass2In.pids[i]={
			VEH_HASH = API.get_hash_key("hunter"),
			VEH_NAME = veh_stuff.hash_is_name[API.get_hash_key("hunter")],
			VEH_GOD = false,
			PED_HASH = API.get_hash_key("s_m_y_clown_01"),
			PED_NAME = ped_models.hash_is_name[API.get_hash_key("s_m_y_clown_01")],
			PED_GOD = false,
			WEAP_HASH = API.get_hash_key("weapon_combatmg_mk2"),
			WEAP_NAME = API.wpn.get_name(API.get_hash_key("weapon_combatmg_mk2")),
			}
		end
		
	g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
		g.o.prnt.Ass2In_weapons=menu.add_player_feature("Select Weapon", "parent", g.o.prnt.Ass2In_main.id)
		g.o.prnt.Ass2In_ped_prnt=menu.add_player_feature("Select Assassin", "parent", g.o.prnt.Ass2In_main.id)
		g.o.prnt.Ass2In_veh_prnt=menu.add_player_feature("Select Vehicle", "parent",g.o.prnt.Ass2In_main.id)
		g.o.prnt.Ass2In_veh_prnt_recc=menu.add_player_feature("**Recommended**", "parent",g.o.prnt.Ass2In_veh_prnt.id)
		

		
		for i=0,7 do
			g.o.tbl.Ass2In.weapons.temp[i]={}
			g.o.tbl.Ass2In.weapons.prnts[i]=menu.add_player_feature(g.o.tbl.Ass2In.weapons.types[i], "parent", g.o.prnt.Ass2In_weapons.id)
			for ii=1,#weap_info.all_hash do
				if weapon.get_weapon_weapon_wheel_slot(weap_info.all_hash[ii])==i and API.wpn.get_name(weap_info.all_hash[ii]) ~= "Unarmed" then
					g.o.tbl.Ass2In.weapons.temp[i][#g.o.tbl.Ass2In.weapons.temp[i]+1]=weap_info.all_hash[ii]
				end
				g.load_break()
			end
			table.sort(g.o.tbl.Ass2In.weapons.temp[i], function(a, b) return API.wpn.get_name(a):lower() <  API.wpn.get_name(b):lower() end)
			for ii=1,#g.o.tbl.Ass2In.weapons.temp[i] do
				menu.add_player_feature(API.wpn.get_name(g.o.tbl.Ass2In.weapons.temp[i][ii]), "action", g.o.tbl.Ass2In.weapons.prnts[i].id, function(f,pid)
					g.o.tbl.Ass2In.pids[pid].WEAP_HASH=g.o.tbl.Ass2In.weapons.temp[i][ii]
					g.o.tbl.Ass2In.pids[pid].WEAP_NAME=API.wpn.get_name(g.o.tbl.Ass2In.weapons.temp[i][ii])
					funcs.doo.Ass2In_pid_info(pid)
				end)
				g.load_break()
			end
			g.load_break()
		end
		
		
		for i=1,#ped_models.types do
			g.o.tbl.Ass2In.ped_prnts[i]=menu.add_player_feature(ped_models.types[i][2], "parent", g.o.prnt.Ass2In_ped_prnt.id)
			g.tbl.remote_ped.ped_prnts[i]=menu.add_feature(ped_models.types[i][2], "parent", g.tbl.remote_ped.ped_prnt.id)
			for ii=1,#ped_models.peds do
				if string.match(string.sub(ped_models.peds[ii][1],1,string.len(ped_models.types[i][1])),ped_models.types[i][1]) then
					menu.add_player_feature(ped_models.peds[ii][2], "action", g.o.tbl.Ass2In.ped_prnts[i].id,function(f,pid)
						g.o.tbl.Ass2In.pids[pid].PED_HASH=API.get_hash_key(ped_models.peds[ii][1])
						g.o.tbl.Ass2In.pids[pid].PED_NAME=ped_models.hash_is_name[API.get_hash_key(ped_models.peds[ii][1])]
						funcs.doo.Ass2In_pid_info(pid)
					end)
					menu.add_feature(ped_models.peds[ii][2], "action", g.tbl.remote_ped.ped_prnts[i].id,function()
						g.tbl.remote_ped.ped_hash=API.get_hash_key(ped_models.peds[ii][1])
						g.tbl.remote_ped.ped_name=ped_models.hash_is_name[g.tbl.remote_ped.ped_hash]
						g.tbl.remote_ped.feat.name="Remote ped ("..g.tbl.remote_ped.ped_name..")"
						g.tbl.remote_ped.info_check("Default Ped Model Hash",g.tbl.remote_ped.ped_hash)
						g.tbl.remote_ped.info_write("Default Ped Model Hash",g.tbl.remote_ped.ped_hash)
						g.N_P(2,"Ped selected: "..g.tbl.remote_ped.ped_name,__GV__,4,"Blue")
					end)
				end
				if i==1 then
					g.tbl.remote_ped.ped_srch_feats[ii]=menu.add_feature(ped_models.peds[ii][2], "action", g.tbl.remote_ped.ped_srch_prnt.id,function()
						g.tbl.remote_ped.ped_hash=API.get_hash_key(ped_models.peds[ii][1])
						g.tbl.remote_ped.ped_name=ped_models.hash_is_name[g.tbl.remote_ped.ped_hash]
						g.tbl.remote_ped.feat.name="Remote ped ("..g.tbl.remote_ped.ped_name..")"
						g.tbl.remote_ped.info_check("Default Ped Model Hash",g.tbl.remote_ped.ped_hash)
						g.tbl.remote_ped.info_write("Default Ped Model Hash",g.tbl.remote_ped.ped_hash)
						g.N_P(2,"Ped selected: "..g.tbl.remote_ped.ped_name,__GV__,4,"Blue")
					end)
					g.tbl.remote_ped.ped_srch_feats[ii].hidden=true
				end
				g.load_break()
			end
		end
				
		
		
		g.o.tbl.Ass2In_recc_vehs={
		"barrage",
		"insurgent3",
		"scarab",
		"phantom2",
		"khanjali",
		"buzzard",
		"savage",
		"akula",
		"hunter",
		"nokota",
		"seabreeze",
		"rogue",
		"molotok",
		"strikeforce",
		"hydra",
		"lazer",
		"dinghy5",
		"patrolboat",
		}
		for i=1,#g.o.tbl.Ass2In_recc_vehs do
			menu.add_player_feature(veh_stuff.hash_is_name[API.get_hash_key(g.o.tbl.Ass2In_recc_vehs[i])], "action", g.o.prnt.Ass2In_veh_prnt_recc.id,function(f,pid)
				g.o.tbl.Ass2In.pids[pid].VEH_HASH=API.get_hash_key(g.o.tbl.Ass2In_recc_vehs[i])
				g.o.tbl.Ass2In.pids[pid].VEH_NAME=veh_stuff.hash_is_name[API.get_hash_key(g.o.tbl.Ass2In_recc_vehs[i])]
				funcs.doo.Ass2In_pid_info(pid)
			end)
			g.load_break()
		end
	
		g.o.tbl.Ass2In.vehs={}
		g.o.tbl.Ass2In.vehs.temp_list_sort={}
		g.o.tbl.Ass2In.vehs.feat_srch_table={}
		for i=1,#veh_stuff.class_list do
			if veh_stuff.class_list[i] ~= "Trains" then
				g.o.tbl.Ass2In.vehs.temp_list_sort[i]={}
			end
			g.tbl.spawn_veh_feature_p.temp_list_sort[i]={}
			for ii=1,#veh_stuff.master do
				if veh_stuff.master[ii][6] == veh_stuff.class_list[i] then
					if veh_stuff.class_list[i] ~= "Trains" then
						g.o.tbl.Ass2In.vehs.temp_list_sort[i][#g.o.tbl.Ass2In.vehs.temp_list_sort[i]+1]=veh_stuff.master[ii]
					end
					g.tbl.spawn_veh_feature_p.temp_list_sort[i][#g.tbl.spawn_veh_feature_p.temp_list_sort[i]+1]=veh_stuff.master[ii]
				end
				g.load_break()
			end
			if veh_stuff.class_list[i] ~= "Trains" then
				table.sort(g.o.tbl.Ass2In.vehs.temp_list_sort[i], function(a, b) return a[1]:lower() <  b[1]:lower() end)
			end
			table.sort(g.tbl.spawn_veh_feature_p.temp_list_sort[i], function(a, b) return a[1]:lower() <  b[1]:lower() end)
			g.load_break()
		end
		
		for i=1,#veh_stuff.class_list do
			if g.o.tbl.Ass2In.vehs.temp_list_sort[i] then
				g.o.tbl.Ass2In.vehs.feat_srch_table[i] = menu.add_player_feature(veh_stuff.class_list[i], "parent",g.o.prnt.Ass2In_veh_prnt.id)
				for ii=1,#g.o.tbl.Ass2In.vehs.temp_list_sort[i] do
					if veh_stuff.info[g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][5]].SEATS > 0 then
						if g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][2] == "" then
							g.o.tbl.Ass2In.vehs.temp_list_name = g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][1]
							menu.add_player_feature(g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][1], "action", g.o.tbl.Ass2In.vehs.feat_srch_table[i].id,function(f,pid)
								g.o.tbl.Ass2In.pids[pid].VEH_HASH=g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][5]
								g.o.tbl.Ass2In.pids[pid].VEH_NAME=veh_stuff.hash_is_name[g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][5]]
								funcs.doo.Ass2In_pid_info(pid)
							end)
						else
							menu.add_player_feature(g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][1].." - "..g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][2], "action", g.o.tbl.Ass2In.vehs.feat_srch_table[i].id,function(f,pid)
								g.o.tbl.Ass2In.pids[pid].VEH_HASH=g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][5]
								g.o.tbl.Ass2In.pids[pid].VEH_NAME=veh_stuff.hash_is_name[g.o.tbl.Ass2In.vehs.temp_list_sort[i][ii][5]]
								funcs.doo.Ass2In_pid_info(pid)
							end)
						end
					end
					g.load_break()
				end
			end
			g.load_break()
			g.tbl.spawn_veh_feature_p.feat_srch_table[i] = menu.add_player_feature(veh_stuff.class_list[i], "parent",g._VehicleSpawnP_class.id)
			for ii=1,#g.tbl.spawn_veh_feature_p.temp_list_sort[i] do
				g.tbl.spawn_veh_feature_p.temp_list_name = ""
				if g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][2] == "" then
					g.tbl.spawn_veh_feature_p.temp_list_name = g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][1]
				else
					g.tbl.spawn_veh_feature_p.temp_list_name = g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][1].." - "..g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][2]
				end
				menu.add_player_feature(g.tbl.spawn_veh_feature_p.temp_list_name, "action", g.tbl.spawn_veh_feature_p.feat_srch_table[i].id,function(f,pid)
					if intrr.is_pid_intrr(pid) then
						g.N_P(2,funcs.get.pid_name(pid) .. "\nIn interior.",__GV__,4,"Blue")
					else
						funcs.doo.req_model(g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][5])
						local veh = funcs.doo.spawn_veh_at_pid(pid,g.tbl.spawn_veh_feature_p.temp_list_sort[i][ii][5],true)
					end
				end)
				g.load_break()
			end
			g.load_break()
		end
		

		
		g.o.tbl.Ass2In.ped_god=menu.add_player_feature("Assassin god","toggle",g.o.prnt.Ass2In_main.id,function(f,pid)
			g.o.tbl.Ass2In.pids[pid].PED_GOD=f.on
		end)
		g.o.tbl.Ass2In.veh_god=menu.add_player_feature("Vehicle god","toggle",g.o.prnt.Ass2In_main.id,function(f,pid)
			g.o.tbl.Ass2In.pids[pid].VEH_GOD=f.on
		end)
		g.o.tbl.Ass2In.loaded=true
	end)

	
		g._VehicleGrief_p = menu.add_player_feature("Vehicle Grief", "parent", g.o.prnt.veh.id)
	
		g._VehicleModP = menu.add_player_feature("Vehicle Mods", "parent", g.o.prnt.veh.id)
		

		
		g._spawn_veh_options=menu.add_player_feature("Options", "parent", g.o.prnt.spwn.id)
		
		g._spawn_veh_search_p=menu.add_player_feature("Search for Make/Model", "parent", g.o.prnt.spwn.id)
	

	g.tbl.online_veh_grief = {}
	g.tbl.online_veh_grief.list = {}
	g.tbl.online_veh_grief.list.STR = 	{"Kick from veh",	 "Destroy","Freeze","TP away",		"Fuck their veh","Random force", "Launch"}
	g.tbl.online_veh_grief.list.A = 	{"kick_pid_from_veh","destroy","freeze","tp",	  		"fucked",		 "random_force", "float"}
	g.tbl.online_veh_grief.list.V = 	{[0]=pid,					   [2]=0,   [3]="anywhere",					 [5]=25,		 [6]=500}
	g.tbl.online_veh_grief.feats = {}
	g.tbl.online_veh_grief.msg = {}
	for i=1,#g.tbl.online_veh_grief.list.STR do
		g.tbl.online_veh_grief.msg[g.tbl.online_veh_grief.list.A[i]]=g.tbl.online_veh_grief.list.STR[i]
	end
	for i=0,31 do
		g.tbl.online_veh_grief[i]={}
	end

	function funcs.doo.online_veh_grief_set(_bool,_hash,_pid,_f_val)
		if _bool then
			g.tbl.online_veh_grief[_pid][_hash]={
				A = g.tbl.online_veh_grief.list.A[_f_val+1],
				V = g.tbl.online_veh_grief.list.V[_f_val]
			}
		else
			g.tbl.online_veh_grief[_pid][_hash]=false
		end
	
	end
	g.tbl.online_veh_grief.feats.main=menu.add_player_feature("Vehicle grief", "toggle", g._VehicleGrief_p.id, function(f,pid)

		local time = API.util.t_ms()-1
		local fails = 0
		local action,val
		while f.on do
			if API.plyr.is.in_veh(pid) and g.tbl.online_veh_grief[pid][API.ent.get.model_hash(API.plyr.get.veh(pid))] and time < API.util.t_ms() then
				action =  g.tbl.online_veh_grief[pid][API.ent.get.model_hash(API.plyr.get.veh(pid))].A
				if action == "kick_pid_from_veh" then
					val = pid
				else
					val =  g.tbl.online_veh_grief[pid][API.ent.get.model_hash(API.plyr.get.veh(pid))].V
				end
				if (action ~= "tp" and funcs.is.sssn_veh_action_chk(API.plyr.get.veh(pid),action,val)) or (action == "tp" and funcs.get.dist_me_pid_3d(pid) < 500) then	
					if funcs.doo.veh_action_list(API.plyr.get.veh(pid),2000,action,val) then
						time = API.util.t_ms()
						fails=0
					else
						time = API.util.t_ms() + fails
						if fails == 0 then
							g.N_P(2,funcs.get.pid_name(pid).."\n"..g.tbl.online_veh_grief.msg[action].." FAILED :(",__GV__,5,"Red")
						end
						fails=fails+1500
					end
				end
			else
				time = API.util.t_ms()
				fails=0
			end
			funcs.doo.yield_while_true(f.on,2000)
		end
	end)
	
	g.tbl.online_veh_grief.feats.avngr=menu.add_player_feature("Avenger", "value_str", g._VehicleGrief_p.id, function(f,pid)
		funcs.doo.online_veh_grief_set(f.on,API.get_hash_key("avenger"),pid,f.value)
		funcs.doo.online_veh_grief_set(f.on,API.get_hash_key("avenger2"),pid,f.value)
	end)
	g.tbl.online_veh_grief.feats.avngr:set_str_data(g.tbl.online_veh_grief.list.STR)
	
	for i=1,#veh_stuff.grief-2 do
		if i > 2 then
			g.tbl.online_veh_grief.feats[i]=menu.add_player_feature(veh_stuff.grief[i][3], "value_str", g._VehicleGrief_p.id,function(f,pid) 
				funcs.doo.online_veh_grief_set(f.on,veh_stuff.grief[i][1],pid,f.value)
			end)
			g.tbl.online_veh_grief.feats[i]:set_str_data(g.tbl.online_veh_grief.list.STR)
		end
	end
	
	g.tbl.online_veh_grief.feats.ramp=menu.add_player_feature("Ramp Buggy", "value_str", g._VehicleGrief_p.id, function(f,pid)
		funcs.doo.online_veh_grief_set(f.on,API.get_hash_key("dune4"),pid,f.value)
		funcs.doo.online_veh_grief_set(f.on,API.get_hash_key("dune5"),pid,f.value)
	end)
	g.tbl.online_veh_grief.feats.ramp:set_str_data(g.tbl.online_veh_grief.list.STR)
		
	g.print_load_info("Player vehicle grief",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
	
	g.tbl.spawn_veh_search_p_feat = {}
	g.tbl.spawn_veh_search_p_temp = {}
	g._spawn_veh_search_do_p=menu.add_player_feature("Search for Make/Model", "action_value_str", g._spawn_veh_search_p.id, function(f)
		local status,str,veh = 1
		status,str = funcs.get.text_input("Vehicle Make/Model","",25,0)
		if status == 0 then
			g.tbl.spawn_veh_search_p_temp = {}
			g.tbl.spwn.ovrly_srch_do(str,f.value,g.tbl.spawn_veh_search_p_temp)
			if #g.tbl.spawn_veh_search_p_temp > 0 then
				for i=1,#g.tbl.spawn_veh_search_p_feat do
					system.yield(0)
					if g.tbl.spawn_veh_search_p_feat[i] ~= nil then menu.delete_player_feature(g.tbl.spawn_veh_search_p_feat[i].id) end
				end
				g.tbl.spawn_veh_search_p_feat = {}
				for i=1,#g.tbl.spawn_veh_search_p_temp do
					if f.value == 0 then
						g.tbl.spawn_veh_search_p_feat[#g.tbl.spawn_veh_search_p_feat+1]=menu.add_player_feature(g.tbl.spawn_veh_search_p_temp[i][1], "action", g._spawn_veh_search_p.id,function(f,pid)
							if intrr.is_pid_intrr(pid) then
								g.N_P(2,funcs.get.pid_name(pid) .. "\nIn interior.",__GV__,4,"Blue")
							else
								funcs.doo.req_model(g.tbl.spawn_veh_search_p_temp[i][5])
								local veh = funcs.doo.spawn_veh_at_pid(pid,g.tbl.spawn_veh_search_p_temp[i][5],true)
							end
						end)
					else
						g.tbl.spawn_veh_search_p_feat[#g.tbl.spawn_veh_search_p_feat+1]=menu.add_player_feature(g.tbl.spawn_veh_search_p_temp[i][3], "action", g._spawn_veh_search_p.id,function(f,pid)
							if intrr.is_pid_intrr(pid) then
								g.N_P(2,funcs.get.pid_name(pid) .. "\nIn interior.",__GV__,4,"Blue")
							else
								funcs.doo.req_model(g.tbl.spawn_veh_search_p_temp[i][5])
								local veh = funcs.doo.spawn_veh_at_pid(pid,g.tbl.spawn_veh_search_p_temp[i][5],true)
							end
						end)
					end
				end
			end
		end
	end)g._spawn_veh_search_do_p.set_str_data(g._spawn_veh_search_do_p,{"Model", "Make","Make or Model"})

	g._VehicleSpawnP_class=menu.add_player_feature("All vehicles by type", "parent", g.o.prnt.spwn.id)
		
	g.tbl.spawn_veh_feature_p={}
	g.tbl.spawn_veh_feature_p.temp_list_sort={}
	g.tbl.spawn_veh_feature_p.feat_srch_table={}
	
	g.tbl.spawn_veh_feature_p.quick ={}
	g.tbl.spawn_veh_feature_p.quick.prnt=menu.add_player_feature("Quick spawn list", "parent", g.o.prnt.spwn.id)
	g.tbl.spawn_veh_feature_p.quick.feats={}
	
	g.print_load_info("Player vehicle spawns",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)

	
	menu.add_player_feature("Super Crash", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local was_on = g.o.tbl.spectate[pid].on
			local turn_on = f.value == 0
			local pid = pid
			local all_veh =  API.veh.get.all()
			local t = {}
			for i=1,#all_veh do
				local ent = API.veh.get.ped_in_seat(all_veh[i], -1)
				if ent and not API.Ped.is.plyr(ent) then
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						local _ent,_veh,_pid = ent,all_veh[i],pid
						if funcs.ntwrk.ask_long(_ent, 1200) and API.plyr.is.valid(_pid) then
							t[_veh]=true
							API.ent.set.coords(_veh,API.plyr.get.coords(_pid)+v3(mth.rndm(50,50),mth.rndm(50,50),200))
						end
					end)
				end
			end
			if turn_on and not was_on then
				g.o.tbl.spectate[pid].on = true
				system.yield(1250)
			end
			for k, v in pairs(t) do
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local _veh,_pid = k,pid
					if funcs.ntwrk.ask_long(_veh, 500) and API.plyr.is.valid(_pid) then
						API.ent.set.coords(_veh,API.plyr.get.coords(_pid)+v3(mth.rndm(5,5),mth.rndm(5,5),1))
					end
				end)
			end
			all_veh =  API.veh.get.all()
			for i=1,#all_veh do
				local ent = API.veh.get.ped_in_seat(all_veh[i], -1)
				if ent and not t[all_veh[i]] and not API.Ped.is.plyr(ent) then
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						local _veh,_pid = all_veh[i],pid
						if funcs.ntwrk.ask_long(_veh, 500) and API.plyr.is.valid(_pid) then
							API.ent.set.coords(_veh,API.plyr.get.coords(_pid)+v3(mth.rndm(5,5),mth.rndm(5,5),1))
						end
					end)
				end
			end
			system.yield(550)
			for k,v in pairs(g.o.tbl.crashes[pid]) do
				v:toggle()
			end
			if turn_on and not was_on then
				local time = API.util.t_ms() + 5000
				while API.plyr.is.valid(pid) and time > API.util.t_ms() do
					system.yield(100)
				end
				g.o.tbl.spectate[pid].on = false
			end
		end)
		system.yield(6000)
	end):set_str_data({"With spectate","Without spectate"})
	
	menu.add_player_feature("Send the plague", "toggle", g.o.prnt.plyr.id, function(f,pid)
		local rats = {}
		while f.on do
			for i=1,10 do
				if not API.ent.is.dead(API.plyr.get.ped(pid)) and (not funcs.is.ent(rats[i]) or API.ent.is.dead(rats[i])) then
					funcs.doo.req_model(API.get_hash_key("A_C_Rat"))
					rats[i]=funcs.doo.spawn_ped_angry(API.plyr.get.coords(pid)+v3(mth.rndm(-25,25),mth.rndm(-25,25),1),API.get_hash_key("A_C_Rat"),nil,nil,pid,nil)
					funcs.doo.plague_attack(rats[i],API.plyr.get.ped(pid),f)
					system.yield(50)
				end
			end
			system.yield(500)
		end
	end)
	
	function funcs.doo.plague_attack(__perp,__vctm,f)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local pos,dist,have_los,los_time,vctm_inair,coords
			local function should_tp()
				if  dist > 50 then
					return true
				elseif not have_los then
					if los_time == nil then
						los_time = API.util.t_s()+15
					elseif los_time < API.util.t_s() then
						los_time = API.util.t_s()+15
						return true
					end
				else
					los_time = API.util.t_s()+15
				end
				return false
			end
			while f.on and funcs.is.ped(__perp) and not API.ent.is.dead(__perp) and funcs.is.ped(__vctm) do
				coords = API.ent.get.coords(__perp)
				dist = funcs.get.dist_pospos_v3(coords,API.ent.get.coords(__vctm))
				have_los = funcs.is.peds_have_los(__perp,__vctm)
				vctm_inair = (API.ent.is.in_air(__vctm) or (API.Ped.is.in_veh(__vctm) and API.ent.is.in_air(API.Ped.get.veh(__vctm))))
				if should_tp() then
					if vctm_inair then
						pos = funcs.get.pos_nearby(pos,"single_closest",10,"water","xyz")
					elseif API.Ped.is.plyr(__vctm) then
						pos = funcs.get.pid_pos_z_guess(API.plyr.get.plyr_from_ped(__vctm))
					else
						pos = coords+v3()
					end
					if funcs.ntwrk.ask_long(__perp,1000) then
						API.ent.set.coords(__perp,pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),1))
						los_time = API.util.t_s()+15
					end
				elseif dist < 6.9 and not API.ent.is.in_air(__perp) and not API.Ped.is.ragdoll(__perp) and not API.ent.is.dead(__vctm) then
					gameplay.shoot_single_bullet_between_coords(coords, API.ent.get.coords(__vctm)+v3(0,0,-0.5), 1,API.get_hash_key("weapon_rpg"),__perp, true, false, 1000)
				end
				ai.task_combat_ped(__perp, __vctm,0,16)
				system.yield(1000)
			end
			funcs.doo.remove_ent(__perp,1000)
		end)
	end
	
	
	g._PlyrPed_shroud=menu.add_player_feature("Shroud player in smoke", "toggle", g.o.prnt.plyr.id, function(f,pid)
		g._PlyrPed_fire.on=false
		g._PlyrPed_water.on=false
		g._PlyrPed_flare.on=false
		local time = API.util.t_ms() + 1000
		local point1,point2,random_head
		while f.on do
			system.yield(0)
			if API.util.t_ms() < time then
				point1=mth.rndm(-1500,2000)*0.001 --elevation
				point2=mth.rndm(1000,2000)*0.001 -- distance
				random_head = mth.rndm(0,359) -- degrees
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,19, 25)
				point1=mth.rndm(-250,750)*0.001 --elevation
				point2=mth.rndm(1000,2000)*0.001 -- distance
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,79, 25)
			else
				funcs.doo.delay(200)
				time = API.util.t_ms() + 1000
			end
		end
	end)

	g._PlyrPed_flare=menu.add_player_feature("Bedazzle with flares (Blinding lag)", "toggle", g.o.prnt.plyr.id, function(f,pid)
		g._PlyrPed_fire.on=false
		g._PlyrPed_water.on=false
		g._PlyrPed_shroud.on=false
		local time = API.util.t_ms() + 1000
		local point1,point2,random_head
		while f.on do
			system.yield(0)
			if API.util.t_ms() < time then
				point1=mth.rndm(-500,1500)*0.001 --elevation
				point2=mth.rndm(100,2000)*0.001 -- distance
				random_head = mth.rndm(0,359) -- degrees
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,22, 25)
				point1=mth.rndm(1300)*0.001 --elevation
				point2=mth.rndm(2000,3000)*0.001 -- distance
				random_head = mth.rndm(185,190) -- degrees
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,22, 25)
			else
				funcs.doo.delay(50)
				time = API.util.t_ms() + 1000
			end
		end
	end)

	g._PlyrPed_water=menu.add_player_feature("Spam with water", "toggle", g.o.prnt.plyr.id, function(f,pid)
		g._PlyrPed_fire.on=false
		g._PlyrPed_flare.on=false
		g._PlyrPed_shroud.on=false
		local time = API.util.t_ms() + 1000
		local point1,point2,random_head
		while f.on do
			system.yield(0)
			if API.util.t_ms() < time then
				point1=mth.rndm(-3000,-1000)*0.001 --elevation
				point2=mth.rndm(500,1500)*0.001 -- distance
				random_head = mth.rndm(0,359) -- degrees
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,13, 250)
			else
				funcs.doo.delay(50)
				time = API.util.t_ms() + 1000
			end
		end
	end)

	g._PlyrPed_fire=menu.add_player_feature("Circle of fire", "toggle", g.o.prnt.plyr.id, function(f,pid)
		g._PlyrPed_water.on=false
		g._PlyrPed_flare.on=false
		g._PlyrPed_shroud.on=false
		local time = API.util.t_ms() + 1000
		local point1,point2,random_head
		while f.on do
			system.yield(0)
			if API.util.t_ms() < time then
				random_head = mth.rndm(0,359) -- degrees
				funcs.doo.expl_ent_pid(pid, -1, random_head, -4,12, 25)
				point1=mth.rndm(-500,1500)*0.001 --elevation
				point2 = mth.rndm(4,5) --distance
				funcs.doo.expl_ent_pid(pid, point1, random_head, point2,3, 25)
			else
				funcs.doo.delay(200)
				time = API.util.t_ms() + 1000
			end
		end
	end)
	
	g.o.tbl.cages = {}
	for i=0,31 do
		g.o.tbl.cages[i]={}
	end

	
	g.o.feat.big_cage=menu.add_player_feature("BIG Cage", "value_str", g.o.prnt.plyr.id, function(f,pid)
		-- [3883058484] = {
			-- model = bkr_prop_biker_bblock_huge_01,
			-- min = {x = -16.307489395142, y = -22.193475723267, z = -0.80736923217773},
			-- max = {x = 16.307489395142, y = 22.193475723267, z = 0.20263075828552}
		-- },
		if f.on then
			g.o.tbl.cages[pid] = {}
			local ent = API.plyr.is.in_veh(pid) and API.plyr.get.veh(pid) or API.plyr.get.ped(pid)
			local x = 16.307489395142
			local y = 22.193475723267
			local pos = funcs.get.pid_vel_pos(pid,0.1)+v3(0,0, API.ent.is.in_air(ent) and -x or -3)
			local hash = API.get_hash_key("bkr_prop_biker_bblock_huge_01")
			funcs.doo.req_model(hash)
			g.o.tbl.cages[pid][1] =  funcs.doo.spawn_obj(hash, pos,							v3(),			true,false,0,f.value==0)
			g.o.tbl.cages[pid][2] =  funcs.doo.spawn_obj(hash, pos + v3(x,	0,		x), 	v3(0, -90, 0),	true,false,0,f.value==0)
			g.o.tbl.cages[pid][3] =  funcs.doo.spawn_obj(hash, pos + v3(-x,	0,		x), 	v3(0, 90, 0),	true,false,0,f.value==0)
			g.o.tbl.cages[pid][4] =  funcs.doo.spawn_obj(hash, pos + v3(0,	0,		2*x), 	v3(0, 0, 0),	true,false,0,f.value==0)
			g.o.tbl.cages[pid][5] =  funcs.doo.spawn_obj(hash, pos + v3(0,	y,		x), 	v3(90, 0, 0),	true,false,0,f.value==0)
			g.o.tbl.cages[pid][6] =  funcs.doo.spawn_obj(hash, pos + v3(0,	-y,		x), 	v3(-90, 0, 0),	true,false,0,f.value==0)
			g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function() --in a thread to  remove cage if  the player leaves
				local f,pid = f,pid
				while f.on and API.plyr.is.valid(pid) do
					for i=1,6 do
						if funcs.is.ent(g.o.tbl.cages[pid][i]) and API.ent.is.visible(g.o.tbl.cages[pid][i]) ~= (f.value == 0) then
							API.ent.set.visible(g.o.tbl.cages[pid][i],f.value == 0)
						end
					end
					system.yield(100)
				end
				for i=1,#g.o.tbl.cages[pid] do
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						funcs.doo.remove_ent(g.o.tbl.cages[pid][i],5000)
					end)
				end
			end)
			while f.on do
				system.yield(0)
			end
		end
	end)
	g.o.feat.big_cage:set_str_data({"Visible","Invisible"})
	
	g.o.feat.big_cage_move=menu.add_player_feature("Move Cage", "value_str", g.o.prnt.plyr.id, function(f,pid)
		while f.on do
			for i=1,6 do
				if funcs.is.ent(g.o.tbl.cages[pid][i]) then
					API.ent.set.coords(g.o.tbl.cages[pid][i],API.ent.get.coords(g.o.tbl.cages[pid][i]) + v3(0,0,f.value == 0 and  .01 or -.01))
				end
			end
			system.yield(0)
		end
	end)
	g.o.feat.big_cage_move:set_str_data({"Up","Down"})
	
	g.o.feat.kamekaze=menu.add_player_feature("Kamekaze planes", "toggle", g.o.prnt.plyr.id, function(f,pid)
		local pilot,veh={},{}
		local memory={}
		local veh_hash = API.get_hash_key("duster")
		local ped_hash = API.get_hash_key("a_f_m_fatcult_01")
		while f.on do
			for i=1,3 do
				if not funcs.is.ent(veh[i]) or funcs.is.dead(veh[i]) then
					funcs.doo.req_model(veh_hash)
					veh[i] = funcs.doo.spawn_veh(API.plyr.get.coords(pid)+v3(mth.rndm(-500,500),mth.rndm(-500,500),500),veh_hash,true,0,true,true)
					system.yield(0)
					if funcs.is.veh(veh[i]) then
						g.tbl.unaffected_ents[veh[i]]=true
						memory[#memory+1]=veh[i]
						funcs.doo.req_model(ped_hash)
						pilot[i] = funcs.doo.spawn_ped_angry(API.plyr.get.coords(pid)+v3(mth.rndm(-500,500),mth.rndm(-500,500),500),ped_hash,nil,nil,pid,veh[i])
						system.yield(0)
						if funcs.is.ped(pilot[i]) then
							g.tbl.unaffected_ents[pilot[i]]=true
							memory[#memory+1]=pilot[i]
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local vehh=veh[i]
								while f.on and funcs.is.ent(vehh) and not funcs.is.dead(vehh) do
									--ai.task_vehicle_drive_to_coord_longrange(pilot, veh, API.plyr.get.coords(pid), 200.0,21758464, 0.0)
									--ai.task_vehicle_follow(pilot, veh, API.plyr.get.ped(pid), 200.0, 21758464, 0.0)
									--ai.task_vehicle_aim_at_ped(pilot, API.plyr.get.ped(pid))
									local trgt_crds_do,vec_to_trgt = g.tbl.a_b.get_movement(API.plyr.get.coords(pid),API.ent.get.coords(vehh),0.5)
									API.ent.set.rotation(vehh,funcs.get.vctr_to_pos(API.plyr.get.coords(pid),vehh))
									API.ent.set.velocity(vehh,trgt_crds_do)
									system.yield(25)
								end
							end)
							system.yield(1000)
						end
					end
				end
			end
			system.yield(100)
		end
		for i=1,#memory do
			if funcs.is.ent(memory[i]) then
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					funcs.doo.remove_ent(memory[i],3000)
				end)
			end
		end
	end)
	

	menu.add_player_feature("Give OTR", "action",g.o.prnt.plyr.id, function(f,pid)
		if glbls.is_pid_otr(pid) then
			g.N_P(2,funcs.get.pid_name(pid) .. "\nPlayer already off the radar.",__GV__,4,"Blue")
		else
			glbls.give_otr(pid)
		end
	end)
	
	
	g._PlyrPed_wntd = menu.add_player_feature("Set wanted level", "value_i",g.o.prnt.plyr.id, function(f,pid)
		while f.on do
			system.yield(100)
			funcs.doo.wntd_all_psngrs(pid,f.value)
		end
	end)
	funcs.set_feat_i_f(g._PlyrPed_wntd,0,5,1,0)
		
	g.o._mod_toggle=menu.add_player_feature("Modder flag toggle", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		if API.plyr.is.modder(pid,mddrs.str_is_int[f.str_data[f.value+1]]) then
			player.unset_player_as_modder(pid,mddrs.str_is_int[f.str_data[f.value+1]])
		elseif player.can_player_be_modder(pid) then
			player.set_player_as_modder(pid,mddrs.str_is_int[f.str_data[f.value+1]])
		else
			g.N_P(2,funcs.get.pid_name(pid) .. "\nCannot be marked as modder.",__GV__,4,"Blue")
		end
	end)
	g.o._mod_toggle:set_str_data(mddrs.str)

	g.o._mod_all_toggle=menu.add_player_feature("Modder flags - All", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		if f.value == 0 then
			if player.can_player_be_modder(pid) then
				for k,v in pairs (mddrs.list) do
					player.set_player_as_modder(pid,k)
				end
			else
				g.N_P(2,funcs.get.pid_name(pid) .. "\nCannot be marked as modder.",__GV__,4,"Blue")
			end
		else
			for k,v in pairs (mddrs.list) do
				player.unset_player_as_modder(pid,k)
			end
		end
	end)
	g.o._mod_all_toggle:set_str_data({"Set","Un-set"})
	
	g.o._drop_sparrows=menu.add_player_feature(">>Drop sparrows", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,false,(f.value*9*3000)+3500,"sparrow",nil,(f.value*9)+1,nil)
	end)
	g.o._drop_sparrows:set_str_data({"One", "Many"})

	g.o._plyr_burn=menu.add_player_feature(">>Burn player", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		local t = {funcs.ME._id(),pid}
		funcs.doo.online_plyr_start(pid,false,1000,"burn",3,10,t[f.value+1])
	end)
	g.o._plyr_burn:set_str_data({"Blame me","Blame them"})
	
	g.o._plyr_xpld=menu.add_player_feature(">>Explode player", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		local t = {funcs.ME._id(),pid}
		funcs.doo.online_plyr_start(pid,false,1000,"explode",40,10,t[f.value+1])
	end)
	g.o._plyr_xpld:set_str_data({"Blame me","Blame them"})
		
	g.o._plyr_fat_bitches=menu.add_player_feature("Spawn angry fat bitch", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		local t = {"bmx","deathbike2","toreador","rhino","phantom2","strikeforce","buzzard","foot"}
		funcs.doo.online_plyr_start(pid,false,1000,"fat_bitches",t[f.value+1],1,nil)
	end)
	g.o._plyr_fat_bitches:set_str_data({"On bicycle","On motorcycle","In Toreador","In Rhino","In Phantom Wedge","In B-11 Strikeforce","In Buzzard","On foot"})
	
	g.o._plyr_kick=menu.add_player_feature("Kick player", "action_value_str", g.o.prnt.plyr.id, function(f,pid)
		if pid == API.plyr.my_id() then
			g.N_P(2,"Really? You want to kick yourself?",__GV__,4,"Yellow")
		elseif f.value == 0 then
			funcs.doo.kick_plyr(pid)
		elseif f.value == 1 then
			funcs.doo.kick_plyr_org(pid)
		else
			funcs.doo.kick_plyrs_in_veh(pid)
		end
	end)
	g.o._plyr_kick:set_str_data({"Just them", "Their org/mc","Everyone in their car"})
	
	function funcs.doo.kick_plyr(_pid,_auto,_type,k_name)
		_auto = _auto or false
		if funcs.is.valid_pid(_pid) then
			local name,scid = funcs.get.pid_name(_pid), API.plyr.get.scid(_pid)
			local date_time = os.date("%Y-%m-%d %H%M-%S")
			if g.feat.kick_if_host.on and network.network_is_host() then
				network.network_session_kick_player(_pid)
			else
				g.o.tbl.kicks[_pid][g.feat.kick_type.value+1]:toggle()
			end
			local time = API.util.t_ms()+1500
			while time > API.util.t_ms() and funcs.is.valid_pid(_pid) do
				system.yield(0)
			end
			if not funcs.is.valid_pid(_pid) then
				funcs.doo.kick_notif(_auto,_type,k_name,name,"Kicked :)","Green")
				g.tbl.pid_kicked_mem[#g.tbl.pid_kicked_mem+1]=scid
				funcs.doo.check_create_dir(g.paths._user)
				funcs.doo.check_create_dir(g.paths._user.."Logs\\")
				funcs.doo.check_create_file(g.paths._user.."Logs\\Player Kicks History.csv",__GV__)
				local file = io.open(g.paths._user.."Logs\\Player Kicks History.csv", "a")
				if file then
					file:write("\n"..date_time..","..scid..","..name)
					file:close()
				else
					funcs.N_P(2,"Could not access Player Kicks History.csv\nDo you have that file open??",__GV__,7,"Red")
				end
				return true
			else
				funcs.doo.kick_notif(_auto,_type,k_name,name,"Failed to kick :(","Red")
			end
		else
			funcs.N_P(2,"Invalid player!\nFailed to kick :(",__GV__,4,"Red")
		end
		return false
	end

	function funcs.doo.kick_notif(_auto,_type,k_name,name,msg,color)
		if _auto then
			if k_name ~= name then
				funcs.N_P(2,_type.."  "..k_name.." / "..name.."\n"..msg,funcs.ver_text,4,color)
			else
				funcs.N_P(2,_type.." - "..name.."\n"..msg,funcs.ver_text,4,color)
			end
		else
			funcs.N_P(2,name.."\n"..msg,funcs.ver_text,4,color)
		end
	end

	function funcs.doo.kick_plyr_org(_pid)
		if g.tbl.PID_INFO.color[_pid+1] > -1 then
			local kick_table = {}
			for pid in funcs.get.all_plys_but_me() do
				if funcs.is.same_orgmc(_pid,pid) and not API.plyr.is.friend(pid) and pid ~= _pid then
					kick_table[#kick_table+1]=pid
				end
			end
			for i=1,#kick_table do
				funcs.doo.kick_plyr(kick_table[i])
			end
			funcs.doo.kick_plyr(_pid)
		else
			funcs.N_P(2,funcs.get.pid_name(_pid).."\nNot in an org/mc.",funcs.ver_text,4,"Yellow")
		end
	end

	function funcs.doo.kick_plyrs_in_veh(_pid)
		if funcs.is.valid_pid(_pid) then
			if API.plyr.is.in_veh(_pid) then
				local kick_table = {}
				local plyr_veh = API.plyr.get.veh(_pid)
				for s = 1, funcs.get.veh_seats(plyr_veh) do
					local seat_check = s-2
					if not funcs.ME._in_seat(plyr_veh,seat_check) and not funcs.is.friend_in_seat(plyr_veh,seat_check) and not funcs.is.this_pid_in_seat(plyr_veh,seat_check,_pid) then
						local plyr =  funcs.get.any_pid_in_seat(plyr_veh,seat_check)
						if plyr > -1 then
							kick_table[#kick_table+1]=plyr
						end
					end
				end
				for i=1,#kick_table do
					funcs.doo.kick_plyr(kick_table[i])
				end
				funcs.doo.kick_plyr(_pid)
			else
				funcs.N_P(2,funcs.get.pid_name(_pid).."\nHas no vehicle.",funcs.ver_text,4,"Yellow")
			end
		else
			funcs.N_P(2,"Invalid player!\nFailed to kick :(",funcs.ver_text,4,"Red")
		end
	end
	
	g.print_load_info("Player actions",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
	
g.o.tbl.aim_grief={}
for i=0,31 do
	g.o.tbl.aim_grief[i]={}
end

g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	local action_list = {"kick","weapon","all_weapon","burn","explode","fat_bitch","sparrow"}
	while true do
		for pid=0,31 do
			if API.plyr.is.valid(pid) then
				if funcs.is.pid_aim_at_me(pid) and not g.o.tbl.aim_grief[pid]["active"] then
					for i=1,#action_list do
						if g.o.tbl.aim_grief[pid][action_list[i]] then
							g.o.tbl.aim_grief[pid]["active"]=true
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local _pid = pid
								local _weap,_weap_once,_weap_done = API.Ped.get.weapon(API.plyr.get.ped(_pid)),false,false
								local til_death,dead,bitch,helo
								local time = API.util.t_ms() + 3000
								while API.plyr.is.valid(_pid) and not dead and time > API.util.t_ms() do
									local distance,head,pos = funcs.get.plyr_moving_pos(_pid)
									pos = funcs.get.front_of_pos(pos,head,distance,180,0.25)
									if g.o.tbl.aim_grief[_pid]["kick"] and funcs.doo.kick_plyr(_pid) then
										time = API.util.t_ms()
									else
										if g.o.tbl.aim_grief[_pid]["weapon"] or g.o.tbl.aim_grief[_pid]["all_weapon"] then
											if not _weap_once then
												_weap_once=true
												if g.o.tbl.aim_grief[_pid]["weapon"] then
													API.wpn.ped_remove(API.plyr.get.ped(_pid), _weap)
												else
													menu.get_feature_by_hierarchy_key("online.online_players.player_".._pid..".weapons.remove_all_weapons"):toggle()
												end
											elseif not _weap_done then
												_weap_done=true
												g.N_P(2,funcs.get.pid_name(_pid).."\nWeapon(s) removed :)",__GV__,5,"Green")
											elseif not til_death then
												time = API.util.t_ms()
											end
										end
										if g.o.tbl.aim_grief[_pid]["burn"] then
											til_death=true
											fire.add_explosion(pos, 3, true, false, 0, _pid)
										end
										if g.o.tbl.aim_grief[_pid]["explode"] then
											til_death=true
											fire.add_explosion(pos, 2, true, false, 0, _pid)
										end
										if g.o.tbl.aim_grief[_pid]["fat_bitch"] and not funcs.is.ent(bitch) then
											til_death=true
											funcs.doo.req_model(API.get_hash_key("a_f_m_fatcult_01"))
											bitch=funcs.doo.spawn_ped_angry(pos+v3(1,1,0),API.get_hash_key("a_f_m_fatcult_01"),API.get_hash_key("weapon_machinepistol"),API.get_hash_key("weapon_gusenberg"),_pid,nil)
											system.yield(0)
											if funcs.is.ent(bitch) then
												g.tbl.unaffected_ents[bitch]=true
												funcs.doo.set_ped_health(bitch,2500,50)
												funcs.doo.ped_attack_ped_thread(bitch,API.plyr.get.ped(_pid),true,true)
											end
										end
										if g.o.tbl.aim_grief[_pid]["sparrow"] and not funcs.is.ent(helo) then
											til_death=true
											funcs.doo.req_model(1229411063)
											helo = funcs.doo.spawn_veh(pos+v3(0,0,30),1229411063,nil,nil,true)
											system.yield(0)
											if funcs.is.ent(helo) then
												g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
													local _helo,__pid = helo,_pid
													API.veh.set.engine_health(_helo, -4000)
													ntv.set.veh_body_health(_helo,0)
													API.veh.set.out_of_control(_helo, false, true)
													funcs.doo.ent_seek_pid(_helo,__pid,60)
													funcs.doo.remove_ent(_helo,1000)
												end)
											end
										end
									end
									system.yield(250)
									dead=(til_death and API.plyr.is.valid(_pid) and API.ent.is.dead(API.plyr.get.ped(_pid)))
									if dead then
										g.N_P(2,funcs.get.pid_name(_pid).."\nMurdered :)",__GV__,5,"Green")
									end
								end
								g.o.tbl.aim_grief[_pid]["active"]=false
							end)
							break
						end
					end
				end
			else
				for k,v in pairs(g.o.tbl.aim_grief[pid]) do
					g.o.tbl.aim_grief[pid][k]=false
				end
			end
		end
		system.yield(25)
	end
end)
	
	g._AimGriefExplode_p=menu.add_player_feature("Explode player","toggle",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["explode"]=f.on
	end)

	g._AimGriefburn_p=menu.add_player_feature("Burn player","toggle",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["burn"]=f.on
	end)

	g._AimGriefSparrow_p=menu.add_player_feature("Drop sparrow on player","toggle",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["sparrow"]=f.on
	end)

	g._AimGriefFatBitch_p=menu.add_player_feature("Spawn angry fat bitch on player","toggle",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["fat_bitch"]=f.on
	end)
	
	g._AimGriefWeap_p=menu.add_player_feature("Remove weapons","value_str",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["weapon"]=(f.on and f.value == 0)
		g.o.tbl.aim_grief[pid]["all_weapon"]=(f.on and f.value == 1)
	end)
	g._AimGriefWeap_p:set_str_data({"Current weapon", "All weapons"})
	
	g._AimGriefKick_p=menu.add_player_feature("Kick player","toggle",g._SelfProtex_p.id, function(f,pid)
		g.o.tbl.aim_grief[pid]["kick"]=f.on
	end)
	
	g.print_load_info("Player aim griefs",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
	
	menu.add_player_feature("Add as fake friend","action",g._Fake_Friends.id, function(f,pid)
		if pid == API.plyr.my_id() then
			g.N_P(2,"You can't add yourself as a fake friend.",__GV__,4,"Yellow")
		else
			local file_path,file,contents,_start,_end,_last,_ff_sett,_ff_name
			local found,num = false,0
			file_path = "scid"
			if not utils.file_exists(g.paths._cfg..file_path..".cfg") then
				file = io.open(g.paths._cfg..file_path..".cfg", "a")
				file:write("[SCID]")
				file:close()
			end
			file = io.open(g.paths._cfg..file_path..".cfg", "r")
			for line in file:lines() do
				if line == nil then
					break
				else
					_start,_end = string.find(line, ":")
					if _start ~= nil and _end ~= nil then
						_ff_name = string.sub(line,1,_end-1)
						_last = _end+1
						_start,_end = string.find(line, ":",_last) 
						if _start ~= nil and _end ~= nil then
							if g.tbl.PID_INFO.scid[pid+1] == funcs.get.hex_to_dec(string.sub(line,_last,_end-1)) then
								found = true
								break
							end
						end
					end
				end
				--system.yield(0)
			end
			io.close(file)
			if found then
				g.N_P(2,"SCID already in fake friends as name: ".._ff_name,__GV__,4,"Yellow")
			else
				num = funcs.get.dec_to_hex(g.tbl.PID_INFO.ff_jt[pid+1] + g.tbl.PID_INFO.ff_stlk[pid+1] + g.tbl.PID_INFO.ff_hide[pid+1] + g.tbl.PID_INFO.ff_frnd[pid+1])
				file = io.open(g.paths._cfg..file_path..".cfg", "a")
				file:write("\n"..funcs.get.pid_name(pid)..":"..funcs.get.dec_to_hex(g.tbl.PID_INFO.scid[pid+1])..":"..num)
				file:close()
				g.N_P(2,"SCID saved in fake friends",__GV__,4,"Green")
			end
		end
	end)
	
	menu.add_player_feature("Join timeout","toggle",g._Fake_Friends.id, function(f,pid)
		if f.on then g.tbl.PID_INFO.ff_jt[pid+1] = 4 else g.tbl.PID_INFO.ff_jt[pid+1] = 0	end
	end)
	
	menu.add_player_feature("Stalk","toggle",g._Fake_Friends.id, function(f,pid)
		if f.on then g.tbl.PID_INFO.ff_stlk[pid+1] = 1 else g.tbl.PID_INFO.ff_stlk[pid+1] = 0 end
	end)
	
	menu.add_player_feature("Hidden","toggle",g._Fake_Friends.id, function(f,pid)
		if f.on then g.tbl.PID_INFO.ff_hide[pid+1] = 8 else g.tbl.PID_INFO.ff_hide[pid+1] = 0	end
	end)
	
	menu.add_player_feature("Friend list","toggle",g._Fake_Friends.id, function(f,pid)
		if f.on then g.tbl.PID_INFO.ff_frnd[pid+1] = 16 else	g.tbl.PID_INFO.ff_frnd[pid+1] = 0 end
	end)

	-----------------------------------------------------------------------------------------GEE-SKID
	-----------------------------------------------------------------------------------------GeeSkidP
	---------------------------------------------------------------------------------------TeleportsP
	-------------------------------------------------------------------------------------------Online
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------

	function funcs.is.not_my_pid(_pid,_bool,_str,_sec,_color)
		if _bool and funcs.ME._id() == _pid then
			if _str then
				_sec = _sec or 4
				_color = _color or "Yellow"
				g.N_P(2,_str,__GV__,_sec,_color)
			end
			return false
		end
		return true
	end
	
	function funcs.doo.tp_self_to_pid(_pid, _where)
		local name = funcs.get.pid_name(_pid)
		local pos = nil
		local temp_pos = nil
		local at_temp = false
		local veh_fail = false
		local in_intrr = false
		if g.tbl.PID_INFO.interior[_pid+1] and interior.get_interior_from_entity(API.plyr.get.ped(_pid)) ~= interior.get_interior_from_entity(funcs.ME._ped()) then
			funcs.N_P(2,name.."\nIn interior.",funcs.ver_text,4,"Yellow")
			in_intrr=true
		elseif _where == "nearby" then
			pos = funcs.get.pos_nearby(API.plyr.get.coords(_pid),"single_50_dist",100,"water")
		elseif funcs.get.dist_me_pid_3d(_pid) < 250 or API.plyr.get.coords(_pid).z > -45 then
			if _where == "on_top" then
				pos = API.plyr.get.coords(_pid) + v3(0,0,3)
			elseif _where == "behind" then
				pos = funcs.get.front_of_pos(API.plyr.get.coords(_pid),API.plyr.get.heading(_pid),5,0,1)
			end
		else
			temp_pos = funcs.get.pos_nearby(API.plyr.get.coords(_pid),"single_50_dist",100,"no_water")
			if funcs.ME._in_veh() then
				if funcs.ntwrk.ask_long(funcs.ME._veh(),1000) then
					API.ent.set.coords(funcs.ME._veh(),temp_pos)
					at_temp=true
				else
					veh_fail=true
				end
			else
				API.ent.set.coords(funcs.ME._ped(),temp_pos)
				at_temp=true
			end
			if at_temp then
				local time = API.util.t_ms() + 2500
				while time > API.util.t_ms() and API.plyr.is.valid(_pid) do
					if API.plyr.get.coords(_pid).z > -45 then
						time = API.util.t_ms()
						pos=API.plyr.get.coords(_pid)
					end
					system.yield(0)
				end
				if pos then
					if _where == "on_top" then
						pos.z=pos.z+3
					elseif _where == "behind" and API.plyr.is.valid(_pid) then
						pos = funcs.get.front_of_pos(API.plyr.get.coords(_pid),API.plyr.get.heading(_pid),5,0,1)
					end
				end
			end
		end
		if not in_intrr then
			if pos then
				if funcs.ME._in_veh() then
					if funcs.ntwrk.ask_long(funcs.ME._veh(),1000) then
						API.ent.set.coords(funcs.ME._veh(),pos)
					else
						funcs.N_P(2,"Failed to get control of vehicle :(",funcs.ver_text,4,"Red")
					end
				else
					API.ent.set.coords(funcs.ME._ped(),pos)
				end	
			elseif at_temp then
				funcs.N_P(2,"I hope this is close enough",funcs.ver_text,4,"Yellow")
			elseif veh_fail then
				funcs.N_P(2,"Failed to get control of vehicle :(",funcs.ver_text,4,"Red")
			else
				funcs.N_P(2,"Could not teleport to player :(",funcs.ver_text,4,"Red")
			end
		end
	end

		
	function funcs.get.online_plyr_tp_pos(_veh,_action,_pos)
		if _action == "50_up" then
			return (API.ent.get.coords(_veh)+v3(0,0,50))
		elseif _action == "250_up" then
			return (API.ent.get.coords(_veh)+v3(0,0,250))
		elseif _action == "1000_up" then
			return (API.ent.get.coords(_veh)+v3(0,0,1000))
		elseif _action == "forward" then
			return (funcs.get.front_of_dir(API.ent.get.coords(_veh),API.ent.get.rotation(_veh),_pos)+v3(0,0,1))
		end
		return _pos
	end

	function funcs.doo.online_plyr_tp(_action,_pos,_loc,_speed,_pid)
		local name = funcs.get.pid_name(_pid)
		local dist = funcs.get.dist_me_pid_3d(_pid)
		local pid_pos = API.plyr.get.coords(_pid)
		local do_hover = g.tbl.PID_INFO.tp_sett[_pid+1]
		local speed = v3(0,0,0)
		if g.tbl.PID_INFO.interior[_pid+1] and interior.get_interior_from_entity(API.plyr.get.ped(_pid)) ~= interior.get_interior_from_entity(funcs.ME._ped()) then
			funcs.N_P(2,name .. "\nIs in interior.",funcs.ver_text,4,"Yellow")
		elseif (dist < 250 or pid_pos.z > -45) and not API.plyr.is.in_veh(_pid) then
			funcs.N_P(2,name .. "\nHas no vehicle.",funcs.ver_text,4,"Yellow")
		elseif dist > 250 and pid_pos.z < -45 and not do_hover and not API.plyr.is.in_veh(_pid) then
			funcs.N_P(2,name .. "\nHas no vehicle. Try enabling force check.",funcs.ver_text,4,"Yellow")
		else
			local veh = nil
			g.tbl.online_plyr_temp[#g.tbl.online_plyr_temp+1]=false
			local t_good = #g.tbl.online_plyr_temp
			g.tbl.online_plyr_temp[#g.tbl.online_plyr_temp+1]=false
			local t_fail = #g.tbl.online_plyr_temp
			if API.plyr.is.in_veh(_pid) then
				veh = API.plyr.get.veh(_pid)
				if funcs.ntwrk.ask_long(veh,1000) then
					if _speed then
						speed = API.ent.get.velocity(veh)
					end
					API.ent.set.coords(veh, funcs.get.online_plyr_tp_pos(veh,_action,_pos)) 
					system.yield(50)
					funcs.ntwrk.ask_long(veh,500)
					API.ent.set.velocity(veh, speed) 
					g.tbl.online_plyr_temp[t_good]=true
				else
					g.tbl.online_plyr_temp[t_fail]=true
				end
			elseif do_hover and dist > 250 and pid_pos.z < -45 then
				local hover_tbl = funcs.get.hover_info()
				local time = API.util.t_ms() + 2500
				local do_once = false
				while funcs.is.valid_pid(_pid) and (API.util.t_ms() < time) do
					API.ent.set.coords(funcs.ME._ped(), API.plyr.get.coords(_pid)+v3(0,0,50)) 
					if API.plyr.is.in_veh(_pid) and not do_once then
						do_once=true
						veh = API.plyr.get.veh(_pid)
						time=time+1500
						g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
							local __action,__pos,__speed,__pid,__veh,__t_good,__t_fail = _action,_pos,_speed,_pid,veh,t_good,t_fail
							if funcs.ntwrk.ask_long(__veh,1000) then
								local speed = v3(0,0,0)
								if __speed then
									speed = API.ent.get.velocity(__veh)
								end
								API.ent.set.coords(__veh, funcs.get.online_plyr_tp_pos(__veh,__action,__pos)) 
								system.yield(50)
								funcs.ntwrk.ask_long(__veh,500)
								API.ent.set.velocity(__veh, speed) 
								g.tbl.online_plyr_temp[__t_good]=true
							else
								g.tbl.online_plyr_temp[__t_fail]=true
							end
						end)
					end
					if g.tbl.online_plyr_temp[t_good] or g.tbl.online_plyr_temp[t_fail] then
						time = API.util.t_ms()
					end
					system.yield(0)
				end
				funcs.doo.hover_back(hover_tbl)
			end
			if not veh then
				funcs.N_P(2,name .. "\nHas no vehicle.",funcs.ver_text,4,"Yellow")
			elseif g.tbl.online_plyr_temp[t_fail] then
				funcs.N_P(2,name .. "\nFAILED to teleport.",funcs.ver_text,4,"Red")
			end
		end
	end
	
	function funcs.get.OBJ_coords2()
		local objective = nil
		local found,obj_pos = ui.get_objective_coord()
		if found and obj_pos ~= v3(0.0,0.0,0.0) then --this prevents you from tp'ing under the city
			local bad_blip = false
			for i=1,#g.tbl.PID_INFO.otr_blip do
				if g.tbl.PID_INFO.otr_blip[i] ~= v3(0,0,0) and funcs.get.dist_pospos_v2(ui.get_blip_coord(g.tbl.PID_INFO.otr_blip[i]),obj_pos) < 25 then --this ensures that i wont tp to a green otr blip i made
					bad_blip=true
					break
				end
			end
			if not bad_blip then
				local un_dead_blip=false
				for i=1,#g.tbl.PID_INFO.undead_blip do
					if g.tbl.PID_INFO.undead_blip[i] ~= v3(0,0,0) and funcs.get.dist_pospos_v2(ui.get_blip_coord(g.tbl.PID_INFO.undead_blip[i]),obj_pos) < 25  then
						bad_blip=true
						break
					end
				end
			end
			if not bad_blip then
				objective = obj_pos+v3(0,0,.5)
			end
		end
		return objective
	end

	g.o._veh_tp_self2=menu.add_player_feature("TP self into their vehicle","action_value_str",g.o.prnt.tp.id,function(f,pid)
		if funcs.is.not_my_pid(pid,(f.value == 1 or f.value == 2),"You can't steal your own seat LOL") then
			funcs.doo.tp_into_plyr_veh2({pid}, f.value,false)
		end
	end)
	g.o._veh_tp_self2:set_str_data({"Free Seat", "Their Seat", "Hijack Driver"})

	g.o._veh_tp_self_near=menu.add_player_feature("TP self to them","action_value_str",g.o.prnt.tp.id,function(f,pid)
		if funcs.is.not_my_pid(pid,true,"You are that player LOL") then
			local t = {"on_top","behind","nearby"}
			funcs.doo.tp_self_to_pid(pid, t[f.value+1])
		end
	end)
	g.o._veh_tp_self_near:set_str_data({"On top", "Behind","Nearby"})

	g.o._veh_tp_to_me=menu.add_player_feature("TP them to me", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		if funcs.is.not_my_pid(pid,true,"You are that player LOL") then
			local my_pos = funcs.get.front_of_dir(funcs.ME._veh_or_me_crds(),funcs.ME._veh_or_me_rot(),5)+v3(0,0,1)
			if f.value==0 then
				funcs.doo.online_plyr_tp("tp",my_pos,"Teleport",false,pid)
			elseif f.value==1 then
				funcs.doo.online_plyr_tp("tp",funcs.get.pos_nearby(funcs.ME._veh_or_me_crds(),"single_50_dist",100,"water"),"Teleport",false,pid)
			elseif f.value==2 then
				funcs.doo.online_plyr_tp("tp",my_pos+v3(0,0,50),"Teleport",false,pid)
			elseif f.value==3 then
				funcs.doo.online_plyr_tp("tp",my_pos+v3(0,0,250),"Teleport",false,pid)
			else	
				funcs.doo.online_plyr_tp("tp",my_pos+v3(0,0,1000),"Teleport",false,pid)
			end
		end
	end)
	g.o._veh_tp_to_me:set_str_data({"In front of me", "Near me", "50m above me","250m above me", "1000m above me"})
		
	g.o._veh_tp_into_air=menu.add_player_feature("TP them above their position", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		local t = {"50_up","250_up","1000_up"}
		funcs.doo.online_plyr_tp(t[f.value+1],nil,"Teleport",true,pid)
	end)
	g.o._veh_tp_into_air:set_str_data({"50m up", "250m up", "1000m up"})


	
	g.o._veh_tp_mean_out=menu.add_player_feature("TP them high above", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		if f.value == 0 then
			funcs.doo.online_plyr_tp("tp",tp_pos.water[mth.rndm(1,#tp_pos.water)]+v3(0,0,2000),"Teleport",false,pid)
		elseif f.value == 1 then
			funcs.doo.online_plyr_tp("tp",v3(mth.rndm(-750,750), mth.rndm(-750,750), 2000),"Teleport",false,pid)
		else
			funcs.doo.online_plyr_tp("tp",v3(mth.rndm(485,499), mth.rndm(5580,5594), 2000),"Teleport",false,pid)
		end
	end)
	g.o._veh_tp_mean_out:set_str_data({"The water","The city","Mt. Chiliad"})
	
	g.o._veh_tp_mean_in=menu.add_player_feature("TP them to interior", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		if f.value == 0 then
			funcs.doo.online_plyr_tp("tp",v3(mth.rndm(-82, -67), mth.rndm(-825, -812), mth.rndm(312, 317)),"Teleport",false,pid)
		elseif f.value == 1 then
			funcs.doo.online_plyr_tp("tp",v3(mth.rndm(129,142),mth.rndm(-754,-743),mth.rndm(259,261)),"Teleport",false,pid)
		else
			funcs.doo.online_plyr_tp("tp",v3(mth.rndm(-799, -757),mth.rndm(318, 338),mth.rndm(107, 127)),"Teleport",false,pid)
		end
	end)
	g.o._veh_tp_mean_in:set_str_data({"Maze bank", "FIB interior","Apartment glitch"})
	
	g.o._veh_tp_rand=menu.add_player_feature("TP them to random location", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		local t = {"land","water","anywhere"}
		funcs.doo.online_plyr_tp("tp",funcs.get.random_pos(t[f.value+1]),"Teleport",false,pid)
	end)
	g.o._veh_tp_rand:set_str_data({"Land","Water","Anywhere"})
	
	g.o._veh_tp_spcfc=menu.add_player_feature("TP them to specific location", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		local pos
		if f.value == 0 then
			pos = funcs.get.pos_nearby(v3(-1315,-3051,15),"single_random",10)
		elseif f.value == 1 then
			pos = funcs.get.pos_nearby(v3(1794.3,3262.3,43.7),"single_random",5)
		elseif f.value == 2 then
			pos = funcs.get.pos_nearby(v3(2144.1,4809.3,42.4),"single_random",5)
		elseif f.value == 3 then
			funcs.sort.pos_v2(tp_pos.lsc,API.plyr.get.coords(pid))
			pos = funcs.get.pos_nearby(tp_pos.lsc[1],"single_random",5)
		elseif f.value == 4 then
			funcs.sort.pos_v2(tp_pos.ammu,API.plyr.get.coords(pid))
			pos = funcs.get.pos_nearby(tp_pos.ammu[1],"single_random",5)
		else
			pos = funcs.get.pos_nearby(v3(-1912.3,3042.7,34),"single_random",10)
		end
		funcs.doo.online_plyr_tp("tp",pos,"Teleport",false,pid)
	end)g.o._veh_tp_spcfc.set_str_data(g.o._veh_tp_spcfc,{"LSIA","Sandy Shores Airfield","Mackenzie Airfield","Los Santos Custom","Ammunation","Fort Zancudo"})
	
	g.o._veh_tp_forward=menu.add_player_feature("TP them forward", "action_value_i", g.o.prnt.tp.id, function(f,pid)
		funcs.doo.online_plyr_tp("forward",f.value,"Teleport",true,pid)
	end)
	funcs.set_feat_i_f(g.o._veh_tp_forward,5,50,5,5)
		
	menu.add_player_feature("TP them to objective", "action", g.o.prnt.tp.id, function(f,pid)
		local obj = funcs.get.OBJ_coords2()
		if obj then
			funcs.doo.online_plyr_tp("tp",obj,"Teleport",false,pid)
		else
			funcs.N_P(2,"No objective found.",__GV__,4,"Yellow")
		end
	end)
	
	g.o._veh_tp_to_wp=menu.add_player_feature("TP them to waypoint", "action_value_str", g.o.prnt.tp.id, function(f,pid)
		local t = {"anywhere","no_water"}
		local wp = funcs.get.WP_coords2(t[f.value+1])
		if wp then
			funcs.doo.online_plyr_tp("tp",wp,"Teleport",false,pid)
		else
			funcs.N_P(2,"No waypoint set.",__GV__,4,"Yellow")
		end
	end)g.o._veh_tp_to_wp.set_str_data(g.o._veh_tp_to_wp,{"Anywhere", "Ignore water"})
	
g.print_load_info("Player teleports",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
	-----------------------------------------------------------------------------------------GEE-SKID
	-----------------------------------------------------------------------------------------GeeSkidP
	-----------------------------------------------------------------------------------------VehicleP
	-------------------------------------------------------------------------------------------Online
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------

	g.o._player_veh_zoom_stop2=menu.add_player_feature("Vehicle stop/zoom","value_str",g.o.prnt.veh.id,function(f,pid)
		local no_veh,name,veh=0, funcs.get.pid_name(pid)
		while f.on do
			veh = g.tbl.PID_INFO.veh[pid+1]
			system.yield(0)
			if funcs.is.veh(veh) and funcs.ntwrk.ask_quick(veh) then
				if f.value == 0 then
					API.veh.set.forward_speed(veh,0)
				elseif f.value == 1 then
					API.veh.set.forward_speed(veh,100)
				end
			end
			if no_veh==0 and not funcs.is.veh(veh) then
				g.N_P(2,name .. " - No vehicle.\nWaiting...",__GV__,4,"Blue")
				no_veh=1
			end
		end
	end)
	g.o._player_veh_zoom_stop2:set_str_data({"Stop","Zoom Zoom"})
	
	g.o._veh_float=menu.add_player_feature("Vehicle floats","value_str",g.o.prnt.veh.id,function(f, pid)
		while f.on do
			system.yield(0)
			if API.plyr.is.in_veh(pid) then
				funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,"float",f.value+25+(f.value*174))
			end
		end
	end)
	g.o._veh_float:set_str_data({"Slowly","Rapture"})

	g.o._veh_down=menu.add_player_feature("Vehicle in air comes down","value_str",g.o.prnt.veh.id,function(f, pid)
		while f.on do
			system.yield(100)
			if API.plyr.is.in_veh(pid) and funcs.is.sssn_veh_action_chk(API.plyr.get.veh(pid),"air_down",nil) then
				funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,"air_down",(f.value+25+(f.value*174))*-1)
			end
		end
	end)			
	g.o._veh_down:set_str_data({"Gently","YEET"})
	
	g.o._veh_up=menu.add_player_feature("Vehicle on ground goes up","value_str",g.o.prnt.veh.id,function(f, pid)
		while f.on do
			system.yield(100)
			if API.plyr.is.in_veh(pid) and funcs.is.sssn_veh_action_chk(API.plyr.get.veh(pid),"ground_up",nil) then
				funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,"ground_up",f.value+25+(f.value*174))
			end
		end
	end)			
	g.o._veh_up:set_str_data({"Gently","YEET"})
	
	g.o._veh_grav=menu.add_player_feature("Vehicle gravity","value_str",g.o.prnt.veh.id,function(f, pid)
		while f.on do
			system.yield(100)
			if API.plyr.is.in_veh(pid) then
				funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,"gravity",f.value==0)
			end
		end
	end)			
	g.o._veh_grav:set_str_data({"Give","Remove"})

	
	g.o._veh_god=menu.add_player_feature("Vehicle god","value_str",g.o.prnt.veh.id,function(f, pid)
		while f.on do
			system.yield(100)
			if API.plyr.is.in_veh(pid) and API.ent.get.god(API.plyr.get.veh(pid)) ~= (f.value==0) then
				funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,"god",f.value==0)
			end
		end
	end)			
	g.o._veh_god:set_str_data({"Give","Remove"})
	
	g.o._veh_health_tog=menu.add_player_feature("Vehicle Health","value_str",g.o.prnt.veh.id,function(f, pid)
		local f_value
		while f.on do
			if API.plyr.is.in_veh(pid) and not API.ent.is.dead(API.plyr.get.veh(pid)) then
				f_value=f.value
				if funcs.doo.veh_action_list(API.plyr.get.veh(pid),1000,f.str_data[f.value+1]:lower(),nil) then
					funcs.doo.yield_while_true((f.on and f_value==f.value),5000)
				end
			end
			funcs.doo.yield_while_true(f.on,1000)
		end
	end)			
	g.o._veh_health_tog:set_str_data({"Damage","Destroy"})
	
	g.o._veh_auto_rpr=menu.add_player_feature("Auto-repair if less than %", "value_i", g.o.prnt.veh.id, function(f,pid)
		while f.on do
			if funcs.is.this_pid_in_seat(API.plyr.get.veh(pid),-1,pid) and funcs.get.veh_cmbnd_health_prcnt(API.plyr.get.veh(pid),true) < f.value then
				funcs.doo.veh_repair_most(API.plyr.get.veh(pid),250,funcs.plate_t_or_nil(),funcs.plate_i_or_nil())
			end
			funcs.doo.yield_while_true(f.on,500)
		end
	end)
	funcs.set_feat_i_f(g.o._veh_auto_rpr,50,100,5,75)
	
	g.tbl.online_plyr_temp={}
	
	function funcs.doo.online_plyr_start(_pid,_veh,_time,_action,_val,_num,_blame)
		local name = funcs.get.pid_name(_pid)
		local str = (g.tbl.sssn_action_str[_action] or "Action")
		local function failed()
			if g.tbl.PID_INFO.interior[_pid+1] then
				g.N_P(2,name.."\n"..str.." FAILED :(\n(They were in interior)",__GV__,5,"Red")
			else
				g.N_P(2,name.."\n"..str.." FAILED :(",__GV__,4,"Red")
			end
		end
		if _veh then
			if API.plyr.is.in_veh(_pid) then
				if not funcs.is.sssn_veh_action_chk(API.plyr.get.veh(_pid),_action,_val) then
					g.N_P(2,name.."\n"..str.." not needed/possible.",__GV__,5,"Yellow")
				elseif not funcs.doo.veh_action_list(API.plyr.get.veh(_pid),_time,_action,_val,_num) then
					failed()
				end
			elseif g.tbl.PID_INFO.tp_sett[_pid+1] then
				if funcs.get.dist_me_pid_3d(_pid) > 250 then
					g.tbl.online_plyr_temp[#g.tbl.online_plyr_temp+1]=false
					local temp = #g.tbl.online_plyr_temp
					local hover_tbl = funcs.get.hover_info()
					local time = API.util.t_ms() + 1750
					local completed,not_needed,do_once = false,false,false
					while funcs.is.valid_pid(_pid) and not completed and not not_needed and (API.util.t_ms() < time) do
						API.ent.set.coords(funcs.ME._ped(), API.plyr.get.coords(_pid)+v3(0,0,50)) 
						if API.plyr.is.in_veh(_pid) and not do_once then
							do_once=true
							if not funcs.is.sssn_veh_action_chk(API.plyr.get.veh(_pid),_action,_val) then
								g.N_P(2,name.."\n"..str.." not needed/possible.",__GV__,5,"Yellow")
								not_needed=true
							else
								time=time+_time
								g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
									local __veh,__time,__action,__val,__temp = API.plyr.get.veh(_pid),_time,_action,_val,temp
									if funcs.doo.veh_action_list(__veh,__time,__action,__val,_num) then
										g.tbl.online_plyr_temp[__temp]=true
									end
								end)
							end
						end
						if g.tbl.online_plyr_temp[temp] then
							completed=true
						end
						system.yield(0)
					end
					funcs.doo.hover_back(hover_tbl)
					if not completed and not not_needed then
						failed()
					end
				else
					g.N_P(2,name.."\nHas no vehicle.",__GV__,5,"Yellow")
				end
			else
				g.N_P(2,name.."\nHas no vehicle. Try enabling force check.",__GV__,5,"Yellow")
			end
		elseif g.tbl.PID_INFO.interior[_pid+1] then
			g.N_P(2,name.."\nIs in interior.",__GV__,4,"Yellow")
		else
			local pid_pos = API.plyr.get.coords(_pid)
			local dist = funcs.get.dist_me_pid_3d(_pid)
			local continue,do_hover = false,false
			if not g.tbl.PID_INFO.tp_sett[_pid+1] then
				if dist > 400 and pid_pos.z < 0 then
					g.N_P(2,name.."\nToo far away to be accurate :(\nTry enabling force check.",__GV__,4,"Yellow")
				else
					continue = true
				end
			else
				continue = true
				if dist > 250 and pid_pos.z < 0 then
					do_hover = true
				end
			end
			if continue then
				g.tbl.sssn_pid_active[#g.tbl.sssn_pid_active+1]={}
				local active = #g.tbl.sssn_pid_active
				g.tbl.sssn_pid_active[active][_pid]=true
				g.tbl.sssn_pid_count[active]=0
				local completed,do_once = false,false
				local dead = API.ent.is.dead(API.plyr.get.ped(_pid))
				if do_hover then
					local hover_tbl = funcs.get.hover_info()
					local time = API.util.t_ms() + 2500
					while funcs.is.valid_pid(_pid) and not completed and (API.util.t_ms() < time) do
						API.ent.set.coords(funcs.ME._ped(), API.plyr.get.coords(_pid)+v3(0,0,50)) 
						if API.plyr.get.coords(_pid).z > -49 and not do_once then
							do_once=true
							time=time+_time
							funcs.doo.sssn_plyr_pid_action_guts(_pid,active,_action,_val,_num,_blame)
						end
						if g.tbl.sssn_pid_count[active]>0 then
							completed=true
						end
						system.yield(10)
					end
					funcs.doo.hover_back(hover_tbl)
				else
					funcs.doo.sssn_plyr_pid_action_guts(_pid,active,_action,_val,_num,_blame)
					local time = API.util.t_ms() + 500 + _time
					while funcs.is.valid_pid(_pid) and not completed and (API.util.t_ms() < time) do
						if g.tbl.sssn_pid_count[active]>0 then
							completed=true
						end
						system.yield(10)
					end
				end
				if not funcs.is.valid_pid(_pid) then
					g.N_P(2,name.."\n"..str.." FAILED because the player left LOL",__GV__,4,"Red")
				elseif dead then
					g.N_P(2,name.."\n"..str.."\nPlayer was already dead :/",__GV__,4,"Red")
				elseif API.ent.is.dead(API.plyr.get.ped(_pid)) then
					g.N_P(2,name.."\nWas murdered :)",__GV__,4,"Green")	
				elseif _action ~= "fat_bitches" then
					g.N_P(2,name.."\n"..str.." FAILED to murder :(",__GV__,4,"Red")
				end
			end
		end
	end
	
	
	g.o._veh_health=menu.add_player_feature("Vehicle Health","action_value_str",g.o.prnt.veh.id,function(f, pid)
		funcs.doo.online_plyr_start(pid,true,1000,f.str_data[f.value+1]:lower(),nil)
	end)			
	g.o._veh_health:set_str_data({"Repair","Damage","Destroy"})
	
	g.o._veh_horn=menu.add_player_feature("Horn-boost","slider",g.o.prnt.veh.id,function(f,pid)
		while f.on do
			system.yield(25)
			if API.plyr.is.in_veh(pid) and not ntv.is.veh_alarm_on(API.plyr.get.veh(pid)) and ntv.is.veh_horn_on(API.plyr.get.veh(pid)) then
				if funcs.ntwrk.ask_long(API.plyr.get.veh(pid),333) then
					local speed = (API.ent.get.speed(API.plyr.get.veh(pid)))
					speed = speed + (3+(40*f.value)-(0.02*speed))
					speed = speed * (1.01+f.value)
					API.veh.set.forward_speed(API.plyr.get.veh(pid),speed)
					system.yield(333)
				end
			end
		end
	end)
	funcs.set_feat_i_f(g.o._veh_horn,0,.1,.01,0)
	
	menu.add_player_feature("Clone their vehicle", "action",g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,nil,"clone",
		funcs.get.front_of_dir(API.cam.get.pos(),API.cam.get.rot(),6.9 + funcs.get.dist_pospos_v3(funcs.ME._crds(),API.cam.get.pos())),
		API.cam.get.rot().z)
	end)
	
	g.o._veh_no_lock=menu.add_player_feature("Vehicle missile anti-lock","action_value_str",g.o.prnt.veh.id,function(f, pid)
		funcs.doo.online_plyr_start(pid,true,1000,"anti_lock",f.value==1)
	end)
	g.o._veh_no_lock:set_str_data({"Give","Remove"})

	g.o._veh_freeze=menu.add_player_feature("Freeze their vehicle","action_value_str",g.o.prnt.veh.id,function(f, pid)
		funcs.doo.online_plyr_start(pid,true,1000,"freeze",f.value*45000)
	end)
	g.o._veh_freeze:set_str_data({"Freeze","Un-Freeze"})
	
	g.o._veh_upgrades_action2=menu.add_player_feature("Vehicle Upgrades","action_value_str",g._VehicleModP.id,function(f,pid)
		local t = {"upgrades","perf","wheels","f1","headlights","neons","paint","livery","weapons"}
		funcs.doo.online_plyr_start(pid,true,1000,t[f.value+1],nil)
	end)
	g.o._veh_upgrades_action2:set_str_data({"Everything", "Performance mods","Wheels/Tires","Give F1 Wheels","Headlights","Neon lights","Paintjob","Livery","Weapons"})

	g.o._plyr_veh_force2=menu.add_player_feature("Vehicle max speed/torque %","action_value_i",g._VehicleModP.id,function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"speed_torque",f.value/100)
	end)
	funcs.set_feat_i_f(g.o._plyr_veh_force2,0,700,5,100)
	
	g.o._veh_accel_fuck=menu.add_player_feature("Vehicle acceleration is","action_value_str",g.o.prnt.veh.id,function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"speed_torque",(f.value-10)+(f.value*109))
	end)
	g.o._veh_accel_fuck.set_str_data(g.o._veh_accel_fuck,{"Fucked", "Normal"})
			
	menu.add_player_feature("Fuck vehicle", "action", g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"fucked",nil)
	end)
				
	menu.add_player_feature("Remove helicopter rotors", "action", g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"remove_rotor",nil)
	end)
	
	menu.add_player_feature("Remove vehicle weapons", "action", g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"rmv_veh_weap",nil)
	end)
	
	g.o._veh_kick_from=menu.add_player_feature("Vehicle Kick", "action_value_str", g.o.prnt.veh.id, function(f,pid)
		local t = {"kick_pid_from_veh","kick_all_from_veh"}
		funcs.doo.online_plyr_start(pid,true,3000,t[f.value+1],pid)
	end)
	g.o._veh_kick_from:set_str_data({"Just them", "All occupants"})
	
	g.o._veh_tire=menu.add_player_feature("Tire health", "action_value_str", g.o.prnt.veh.id, function(f,pid)
		local t = {"pop_tires","unpop_tires"}
		funcs.doo.online_plyr_start(pid,true,1000,t[f.value+1],nil)
	end)
	g.o._veh_tire:set_str_data({"Pop", "Repair"})

	menu.add_player_feature("Vehicle flip upside down", "action", g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"flip_wrong",nil)
	end)
	
	g.o._veh_visible=menu.add_player_feature("Vehicle visibility", "action_value_str", g.o.prnt.veh.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"visible",f.value==1)
	end)
	g.o._veh_visible:set_str_data({"Invisible", "Visible"})
	
	g.o._veh_weapons=menu.add_player_feature("Vehicle weapons", "action_value_str", g._VehicleModP.id, function(f,pid)
		local t = {"weapons","weapons_worst"}
		funcs.doo.online_plyr_start(pid,true,1000,t[f.value+1],nil)
	end)
	g.o._veh_weapons:set_str_data({"Best", "Worst"})

	g.o._veh_armor=menu.add_player_feature("Vehicle armor", "action_value_str", g._VehicleModP.id, function(f,pid)
		local t = {"best_armor","worst_armor"}
		funcs.doo.online_plyr_start(pid,true,1000,t[f.value+1],nil)
	end)g.o._veh_armor.set_str_data(g.o._veh_armor,{"Best", "Worst"})
	
	g.o._countermeasr=menu.add_player_feature("Countermeasures", "action_value_str", g._VehicleModP.id, function(f,pid)
		funcs.doo.online_plyr_start(pid,true,1000,"cntrmsrs",f.value)
	end)
	g.o._countermeasr:set_str_data({"Chaff", "Flare", "None"})

	--mk2 mod6 Countermeasures
	--helo/planes mod1 Countermeasures
	--0 chaff Countermeasures
	--1 flare Countermeasures
	--2 none Countermeasures
	
	g.o._air_bombs=menu.add_player_feature("Bombs", "action_value_str", g._VehicleModP.id, function(f,pid)
		local t = {0,3,4}
		funcs.doo.online_plyr_start(pid,true,1000,"bombs",t[f.value+1])
	end)
	g.o._air_bombs:set_str_data({"Explosive", "Cluster", "None"})

	--helo/planes mod9 Bombs
	--0 explosive  ---------- Bombs
	--1 incendiary --doesnt work on some vehicles Bombs
	--2 gas --doesnt work on some vehicles Bombs
	--3 cluster  -------------Bombs
	--4 none  ---------------Bombs


g.print_load_info("Player vehicle features",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)--------------------------------------PLAYERS ONLINE END
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------PLAYERS LOCAL BEGIN




	-----------------------------------------------------------------------------------------GEE-SKID
	------------------------------------------------------------------------------------------Players
	--------------------------------------------------------------------------------------------Local
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------

	
	g.tbl.sssn_stf={}
	g.tbl.sssn_stf.old={}
	g.tbl.sssn_stf.func={}
	g.tbl.sssn_stf.ent_thread={}


	
	g.tbl.sssn_veh_plyr_affect={}
	g.tbl.sssn_pid_plyr_affect={}
	
	function funcs.doo.sssn_veh_tog_hide(_bool)
		g.tbl.sssn_veh_plyr_affect.pers.hidden=_bool
		g.tbl.sssn_veh_plyr_affect.frnd.hidden=_bool
		g.tbl.sssn_veh_plyr_affect.orgmc.hidden=_bool
		g.tbl.sssn_veh_plyr_affect.mddr.hidden=_bool
		g.tbl.sssn_veh_plyr_affect.others.hidden=_bool
		g.tbl.sssn_veh_plyr_affect.force.hidden=_bool
	end
	
	function funcs.doo.sssn_plyr_pid_check(_pid)
		if not API.plyr.is.valid(_pid) or _pid == funcs.ME._id() then
			return false
		end
		local friend = API.plyr.is.friend(_pid)
		if friend and not g.tbl.sssn_pid_plyr_affect.frnd.on then
			return false
		end
		local mddr = API.plyr.is.modder(_pid, -1)
		if mddr and not g.tbl.sssn_pid_plyr_affect.mddr.on then
			return false
		end
		local orgmc = funcs.is.same_orgmc(funcs.ME._id(),_pid)
		if orgmc and not g.tbl.sssn_pid_plyr_affect.orgmc.on then
			return false
		end
		if not friend and not mddr and not orgmc and not g.tbl.sssn_pid_plyr_affect.others.on then
			return false
		end
		return true
	end
	
	function funcs.get.pid_not_dead_or_intrr(_pid,not_dead,not_intrr)
		if not_dead and API.ent.is.dead(API.plyr.get.ped(_pid)) then
			return false
		end
		if not_intrr and g.tbl.PID_INFO.interior[_pid+1] then
			return false
		end
		return true
	end
		
	function funcs.get.sssn_pid_plyr_table(not_dead,not_intrr,_action)
		local pidtable = {}
		for pid = 0,31 do
			if funcs.doo.sssn_plyr_pid_check(pid) and funcs.get.pid_not_dead_or_intrr(pid,not_dead,not_intrr) then
				pidtable[#pidtable+1]=pid
			end
		end
		return pidtable
	end
	
	function funcs.get.sssn_pid_plyr_start(_action,_show_notif,not_dead,not_intrr)
		local pid_table = funcs.get.sssn_pid_plyr_table(not_dead,not_intrr,_action)
		if #pid_table > 0 then
			return pid_table
		end
		if _show_notif then
			g.N_P(2,"No available players from selection.",__GV__,4,"Yellow")
		end
		return nil
	end
		
	function funcs.doo.ent_seek_pid(ent,pid,speed)	
		local _ent,_pid,_speed = ent,pid,speed
		if funcs.is.ent(ent) and funcs.is.valid_pid(pid) then
			local stop,trgt_crds_do = false
			local time = API.util.t_ms() + 3000
			while funcs.is.ent(_ent) and funcs.is.valid_pid(_pid) and not stop and time > API.util.t_ms() do
				trgt_crds_do = g.tbl.a_b.get_movement(API.plyr.get.coords(_pid),API.ent.get.coords(_ent),_speed)
				if funcs.is.in_grid(API.ent.get.coords(_ent),API.plyr.get.coords(_pid),2) or API.ent.is.dead(API.plyr.get.ped(_pid)) then
					stop=true
				elseif funcs.ntwrk.ask_quick(_ent) then
					API.ent.set.velocity(_ent,trgt_crds_do)
				end
				system.yield(10)
			end
		end
		return (funcs.is.valid_pid(_pid) and API.ent.is.dead(API.plyr.get.ped(_pid)))
	end
	
	function funcs.doo.sssn_plyr_pid_action_guts(pid,active,action,val,num,blame)
		local _pid,_active,_action,_val,_num,_blame = pid,active,action,val,num,blame
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local __pid,__active,__action,__val,__num,__blame = _pid,_active,_action,_val,_num,_blame
			local bitch_count,drop = 0
			if __action == "burn" or __action == "explode" then 
				if __blame then
					__blame=funcs.ME._ped()
				else
					__blame=API.plyr.get.ped(__pid)
				end
				for x=1,__num do
					if API.plyr.is.valid(__pid) and funcs.get.pid_not_dead_or_intrr(__pid,true,true) then
						fire.add_explosion(API.plyr.get.coords(__pid), __val, true, false, 0, __blame)
						system.yield(100)
					end
				end
			elseif __action == "sparrow" then
				local sparrows = {}
				funcs.doo.req_model(1229411063)
				for s=1,__num do
					if API.plyr.is.valid(__pid) and funcs.get.pid_not_dead_or_intrr(__pid,true,true) then
						sparrows[#sparrows+1] = funcs.doo.spawn_veh(API.plyr.get.coords(__pid)+v3(mth.rndm(-5,5),mth.rndm(-5,5),30),1229411063,false,nil,true)
						system.yield(0)
						if not funcs.is.ent(sparrows[#sparrows]) then
							break
						else
							API.veh.set.engine_health(sparrows[#sparrows], -4000)
							ntv.set.veh_body_health(sparrows[#sparrows],0)
							API.veh.set.out_of_control(sparrows[#sparrows], false, true)
							if funcs.doo.ent_seek_pid(sparrows[#sparrows],__pid,60) then
								break
							end
						end
					end
				end
				for r=1,#sparrows do
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						local veh = sparrows[r]
						funcs.doo.remove_ent(veh,1000)
					end)
				end
			elseif __action == "fat_bitches" then
				local ped_model = API.get_hash_key("a_f_m_fatcult_01")
				local weapon1 = API.get_hash_key("weapon_machinepistol")
				local weapon2 = API.get_hash_key("weapon_gusenberg")
				local veh_hash = nil
				if API.strm.is.valid(API.get_hash_key(__val)) then
					veh_hash = API.get_hash_key(__val)
					funcs.doo.req_model(veh_hash)
				end
				funcs.doo.req_model(ped_model)
				local bitches = {}
				local bitch_veh ={}
				for i=1,__num do
					if API.plyr.is.valid(__pid) and funcs.get.pid_not_dead_or_intrr(__pid,true,true) then
						local _pos = funcs.get.front_of_pos(funcs.get.pid_pos_z_guess(__pid), mth.rndm(-180,180), 7, 0, .5)
						if veh_hash then
							if API.strm.is.valid_helo(veh_hash) then
								_pos = _pos + v3(0,0,100)
							elseif API.strm.is.valid_plane(veh_hash) then
								_pos = _pos + v3(0,0,666)
							end
							bitch_veh[i] = funcs.doo.spawn_veh(_pos,veh_hash,true)
							if not funcs.is.ent(bitch_veh[i]) then
								break
							else
								system.yield(0)
							end
						end
						bitches[i] =funcs.doo.spawn_ped_angry(_pos,ped_model,weapon1,weapon2,__pid,bitch_veh[i])
						if not funcs.is.ent(bitches[i]) then
							break
						else
							g.tbl.unaffected_ents[bitches[i]]=true
							bitch_count=bitch_count+1
							system.yield(0)
							funcs.doo.ped_attack_ped_thread(bitches[i],API.plyr.get.ped(__pid),true,true)
						end
					end
				end
			elseif __action == "health" or __action == "armor" then
				drop = funcs.doo.make_drop(__action,API.plyr.get.coords(__pid)+v3(0,0,1))
			end
			if __action == "health" or __action == "armor" then
				if funcs.is.ent(drop) then
					g.tbl.sssn_pid_count[__active]=g.tbl.sssn_pid_count[__active]+1
				end
			elseif __action == "fat_bitches" then
				if bitch_count == __num then
					g.tbl.sssn_pid_count[__active]=g.tbl.sssn_pid_count[__active]+1
				end
			else
				funcs.doo.yield_while_true((API.plyr.is.valid(__pid) and not API.ent.is.dead(API.plyr.get.ped(__pid))),1000)
				if API.plyr.is.valid(__pid) and API.ent.is.dead(API.plyr.get.ped(__pid)) then
					g.tbl.sssn_pid_count[__active]=g.tbl.sssn_pid_count[__active]+1
				end
			end
			g.tbl.sssn_pid_active[__active][__pid]=false
		end)
	end

	-- function funcs.doo.move_plane_forward(_veh,_time,_speed) 
		-- if funcs.is.plane(_veh) then
			-- g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
				-- local __veh,__time,__speed,rot=_veh,_time,_speed
				-- local time=API.util.t_ms()+__time
				-- while time>API.util.t_ms() and funcs.is.ent(__veh) do
					-- if funcs.ntwrk.ask_quick(__veh) then
						-- rot = API.ent.get.rotation(__veh)
						-- API.ent.set.rotation(__veh,v3(0,0,rot.z))
						-- API.veh.set.forward_speed(__veh,__speed)
					-- end
					-- system.yield(0)
				-- end
			-- end)
		-- end
	-- end
	
	function funcs.doo.ped_attack_ped_thread(_perp,_vctm,_v_dead)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local __perp,__vctm,__v_dead = _perp,_vctm,_v_dead
			local pos,dist,stop,in_veh,aircraft,plane,helo,have_los,los_time
			local function should_tp()
				if (helo and dist > 500) or	(not helo and plane and dist > 2000) or	(not aircraft and in_veh and dist > 200) or	(not in_veh and dist > 100) then
					return true
				elseif not have_los then
					if los_time == nil then
						if in_veh then
							los_time = API.util.t_s()+15
						else
							los_time = API.util.t_s()+5
						end
					elseif los_time < API.util.t_s() then
						return true
					end
				elseif in_veh then
					los_time = API.util.t_s()+15
				else
					los_time = API.util.t_s()+5
				end
				return false
			end
			while funcs.is.ped(__perp) and funcs.is.ped(__vctm) and not stop do
				in_veh = API.Ped.is.in_veh(__perp)
				helo = (in_veh and API.strm.is.valid_helo(API.ent.get.model_hash(API.Ped.get.veh(__perp))))
				plane = (in_veh and API.strm.is.valid_plane(API.ent.get.model_hash(API.Ped.get.veh(__perp))))
				aircraft = (helo or plane)
				dist = funcs.get.dist_pospos_v3(API.ent.get.coords(__perp),API.ent.get.coords(__vctm))
				have_los = funcs.is.peds_have_los(__perp,__vctm)
				if should_tp() then
					if API.Ped.is.plyr(__vctm) then
						pos = funcs.get.pid_pos_z_guess(API.plyr.get.plyr_from_ped(__vctm))
					else
						pos = API.ent.get.coords(__vctm)
					end
					if in_veh and funcs.ntwrk.ask_long(API.Ped.get.veh(__perp),1000) then
						local size = g.tbl.a_b.get_veh_dmnsns2()
						local int = mth.flr(size*2)
						if helo then
							API.ent.set.coords(API.Ped.get.veh(__perp),pos+v3(mth.rndm(-int,int),mth.rndm(-int,int),100))
						elseif plane then
							API.ent.set.coords(API.Ped.get.veh(__perp),pos+v3(mth.rndm(-int,int),mth.rndm(-int,int),500))
						else
							API.ent.set.coords(API.Ped.get.veh(__perp),pos+v3(mth.rndm(-int,int),mth.rndm(-int,int),1))
						end
					elseif funcs.ntwrk.ask_long(__perp,1000) then
						API.ent.set.coords(__perp,pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),1))
					end
				end
				if in_veh then
					if aircraft then
						if helo then
							API.veh.set.helo_blades_full(API.Ped.get.veh(__perp))
						end
						ai.task_combat_ped(__perp, __vctm,0,16)
					elseif have_los then
						ai.task_combat_ped(__perp, __vctm,0,16)
					else
						ai.task_vehicle_drive_to_coord(__perp, API.Ped.get.veh(__perp),API.ent.get.coords(__vctm), 100, 1, API.ent.get.model_hash(API.Ped.get.veh(__perp)), 786956, 15, 1.0)
					end
				else
					if have_los then
						ai.task_combat_ped(__perp, __vctm,0,16)
					else
						ntv.task.go_straight_coords(__perp,API.ent.get.coords(__vctm),2.0,1,0.0,0.5)
					end
				end
				system.yield(1000)
				if not funcs.is.ent(__perp) or API.ent.is.dead(__perp) then
					stop = true
				elseif __v_dead and funcs.is.ent(__vctm) and API.ent.is.dead(__vctm) then
					stop = true
				end
			end
			g.tbl.unaffected_ents[__perp]=false
			funcs.doo.remove_ent(__perp,1000)
		end)
	end
	

	function funcs.is.peds_have_los(_ped1,_ped2)
		if funcs.is.ped(_ped1) and funcs.is.ped(_ped2) then
			if ntv.is.ents_in_los(_ped1,_ped2,3,true) then
				return true
			end
			local ent1,ent2
			if API.Ped.is.in_veh(_ped1) then
				ent1 = API.Ped.get.veh(_ped1)
			end
			if API.Ped.is.in_veh(_ped2) then
				ent2 = API.Ped.get.veh(_ped2)
			end
			if ent1 and ent2 and ntv.is.ents_in_los(ent1,ent2,3,true) then
				return true
			elseif ent1 and not ent2 and ntv.is.ents_in_los(ent1,_ped2,3,true) then
				return true
			elseif not ent1 and ent2 and ntv.is.ents_in_los(_ped1,ent2,3,true) then
				return true
			end
		end
		return false
	end
	
	function funcs.doo.sssn_plyr_pid_action(_action,_val,_num,_blame,_no_force,_show_notif,not_dead,not_intrr)
		local pid_table = funcs.get.sssn_pid_plyr_start(_action,_show_notif,not_dead,not_intrr)
		if pid_table then
			local action_str = (g.tbl.sssn_action_str[_action] or "Actions")
			local total = 0
			local count = 0
			g.tbl.sssn_pid_active[#g.tbl.sssn_pid_active+1]={}
			local active = #g.tbl.sssn_pid_active
			g.tbl.sssn_pid_count[active]=0
			g.var.sssn_temp_cnt=0
			local force =  (not _no_force and g.feat.sssn_pid_plyr_affect_force.on)
			local new_pid_table = {}
			local hover_tbl,i_hovered,hover_pos = funcs.get.hover_info(),false,v3()
			for i=1,#pid_table do
				if API.plyr.is.valid(pid_table[i]) and funcs.get.pid_not_dead_or_intrr(pid_table[i],not_dead,not_intrr) then
					if force then
						total=total+1
						new_pid_table[#new_pid_table+1]=pid_table[i]
					elseif API.plyr.get.coords(pid_table[i]).z > -49 then
						total=total+1
						new_pid_table[#new_pid_table+1]=pid_table[i]
					end
				end
			end
			funcs.sort.pid_pos_v3(new_pid_table,funcs.ME._crds(),"ascending")
			for i=1,#new_pid_table do
				local _pid = new_pid_table[i]
				if API.plyr.is.valid(_pid) and funcs.get.pid_not_dead_or_intrr(_pid,not_dead,not_intrr) then
					g.tbl.sssn_pid_active[active][_pid]=true
					if force and (API.plyr.get.coords(_pid).z < 0 or funcs.get.dist_me_pid_3d(_pid) > 750) then
						i_hovered=true
						hover_pos=funcs.doo.hover_above_pid2(_pid,1500,false,true)
						funcs.sort.pid_pos_v3(new_pid_table,funcs.ME._crds(),"ascending")
					end
					funcs.doo.sssn_plyr_pid_action_guts(_pid,active,_action,_val,_num,_blame)
					if i_hovered then
						for ii=1,#new_pid_table do
							local _pid2 = new_pid_table[ii]
							if API.plyr.is.valid(_pid2) and funcs.get.pid_not_dead_or_intrr(_pid2,not_dead,not_intrr) then
								if not g.tbl.sssn_pid_active[active][_pid2] and API.plyr.get.coords(_pid2).z > 0 and funcs.get.dist_me_pid_3d(_pid2) < 750 then
									g.tbl.sssn_pid_active[active][_pid2]=true
									funcs.doo.sssn_plyr_pid_action_guts(_pid2,active,_action,_val,_num,_blame)
								end
							end
						end
					end
				end
				
				if i_hovered then
					local found = true
					while found do
						found = false
						for k,v in pairs(g.tbl.sssn_pid_active[active]) do
							if v then found = true break end
						end
						if found then
							API.ent.set.coords(funcs.ME._ped(), hover_pos) 
						end
						system.yield(10)
					end
				end
			end
			if i_hovered then
				funcs.doo.hover_back(hover_tbl)
			end
			for i=0,31 do
				if g.tbl.sssn_pid_skip[i] then
					count=count+1
					g.tbl.sssn_pid_skip[i]=false
				end
			end
			if _show_notif then
				local found = true
				while found do
					found = false
					for k,v in pairs(g.tbl.sssn_pid_active[active]) do
						if v then found = true break end
					end
					system.yield(10)
				end
				g.N_P(2,action_str.." complete.".."\n"..g.tbl.sssn_pid_count[active].."/"..total.." successful",__GV__,5,"Blue")
			end
		end
	end


	
	

		g.tbl.sssn_stf.pid_trgt_prnt = menu.add_feature("Select Targets", "parent", g.prnt.sssn_plyrs.id)

			function funcs.doo.sssn_feat_no_tog(_bool,_table,_feat1,_feat2)
				if _bool then
					for _, feat in pairs(_table) do
						if feat ~= _feat1 and feat.on then
							return
						end
					end
					_feat2.on=true
				end
			end
			
			g.tbl.sssn_pid_plyr_affect.frnd=menu.add_feature("My friends","toggle",g.tbl.sssn_stf.pid_trgt_prnt.id,function(f)
				funcs.doo.sssn_feat_no_tog(not f.on,g.tbl.sssn_pid_plyr_affect,g.tbl.sssn_pid_plyr_affect.frnd,g.tbl.sssn_pid_plyr_affect.orgmc)
			end)
			funcs.add_to_S_L(g.tbl.sssn_pid_plyr_affect.frnd,"g.tbl.sssn_pid_plyr_affect.frnd")
			
			g.tbl.sssn_pid_plyr_affect.orgmc=menu.add_feature("My ORG/MC/VIP","toggle",g.tbl.sssn_stf.pid_trgt_prnt.id,function(f)
				funcs.doo.sssn_feat_no_tog(not f.on,g.tbl.sssn_pid_plyr_affect,g.tbl.sssn_pid_plyr_affect.orgmc,g.tbl.sssn_pid_plyr_affect.mddr)
			end)
			funcs.add_to_S_L(g.tbl.sssn_pid_plyr_affect.orgmc,"g.tbl.sssn_pid_plyr_affect.orgmc")
			
			g.tbl.sssn_pid_plyr_affect.mddr=menu.add_feature("Modders","toggle",g.tbl.sssn_stf.pid_trgt_prnt.id,function(f)
				funcs.doo.sssn_feat_no_tog(not f.on,g.tbl.sssn_pid_plyr_affect,g.tbl.sssn_pid_plyr_affect.mddr,g.tbl.sssn_pid_plyr_affect.others)
			end)
			funcs.add_to_S_L(g.tbl.sssn_pid_plyr_affect.mddr,"g.tbl.sssn_pid_plyr_affect.mddr")
			
			g.tbl.sssn_pid_plyr_affect.others=menu.add_feature("All other players","toggle",g.tbl.sssn_stf.pid_trgt_prnt.id,function(f)
				funcs.doo.sssn_feat_no_tog(not f.on,g.tbl.sssn_pid_plyr_affect,g.tbl.sssn_pid_plyr_affect.others,g.tbl.sssn_pid_plyr_affect.frnd)
			end)
			funcs.add_to_S_L(g.tbl.sssn_pid_plyr_affect.others,"g.tbl.sssn_pid_plyr_affect.others")
			
			g.feat.sssn_pid_plyr_affect_force=menu.add_feature(">> Force check for player position","toggle", g.tbl.sssn_stf.pid_trgt_prnt.id,function(f)
				funcs.doo.sssn_plyr_feat_force_name(f.on)
			end)
			funcs.add_to_S_L(g.feat.sssn_pid_plyr_affect_force,"g.feat.sssn_pid_plyr_affect_force")
	
			function funcs.doo.sssn_plyr_feat_force_name(_bool)
				if _bool then
					g.tbl.pid_stf.explode.name= ">> Explode players"
					g.tbl.pid_stf.burn.name= ">> Burn players"
					g.tbl.pid_stf.sparrow.name= ">> Drop sparrows"
					g.tbl.pid_stf.fat_bitches.name= ">> Spawn angry fat bitches"
					g.feat.sssn_pid_plyr_affect_force.name=">> Force check for player position"
				else
					g.tbl.pid_stf.explode.name= "Explode players"
					g.tbl.pid_stf.burn.name= "Burn players"
					g.tbl.pid_stf.sparrow.name= "Drop sparrows"
					g.tbl.pid_stf.fat_bitches.name= "Spawn angry fat bitches"
					g.feat.sssn_pid_plyr_affect_force.name="Force check for player position"
				end
			end
			g.tbl.sssn_pid_plyr_affect.others.on=true
			
		g.tbl.sssn_stf.spwn_prnt = menu.add_feature("Spawn Vehicles", "parent", g.prnt.sssn_plyrs.id)
			
		g.tbl.sssn_stf.drop_prnt = menu.add_feature("Drops", "parent", g.prnt.sssn_plyrs.id)
			
		menu.add_feature("Drop health","action",g.tbl.sssn_stf.drop_prnt.id,function(f)
			funcs.doo.sssn_plyr_pid_action("health","once",nil,nil,false,true,true,false)
		end)
		
		g.tbl.sssn_stf.drop_health=menu.add_feature("Drop health if needed","toggle",g.tbl.sssn_stf.drop_prnt.id,function(f)
			local history={}
			for pid=0,31 do
				history[pid]={}
			end
			while f.on do
				for pid=0,31 do
					if funcs.doo.sssn_plyr_pid_check(pid) and API.plyr.get.coords(pid).z > -49 and funcs.is.should_drop("health",pid) then
						if #history[pid]>=5 then
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local ENT = history[pid][1]
								funcs.doo.remove_ent(ENT,1000)
							end)
							table.remove(history[pid],1)
						end
						history[pid][#history[pid]+1]=funcs.doo.make_drop("health",API.plyr.get.coords(pid)+v3(0,0,1))
					end
				end
				funcs.doo.yield_while_true(f.on,1000)
			end
		end)	
		funcs.add_to_S_L(g.tbl.sssn_stf.drop_health,"g.tbl.sssn_stf.drop_health")
			
		menu.add_feature("Drop armor","action",g.tbl.sssn_stf.drop_prnt.id,function(f)
			funcs.doo.sssn_plyr_pid_action("armor","once",nil,nil,false,true,true,false)
		end)
			
		g.tbl.sssn_stf.drop_armor=menu.add_feature("Drop armor if needed","toggle",g.tbl.sssn_stf.drop_prnt.id,function(f)
			local history={}
			for pid=0,31 do
				history[pid]={}
			end
			while f.on do
				for pid=0,31 do
					if funcs.doo.sssn_plyr_pid_check(pid) and API.plyr.get.coords(pid).z > -49 and funcs.is.should_drop("armor",pid) then
						if #history[pid]>=5 then
							g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
								local ENT = history[pid][1]
								funcs.doo.remove_ent(ENT,1000)
							end)
							table.remove(history[pid],1)
						end
						history[pid][#history[pid]+1]=funcs.doo.make_drop("armor",API.plyr.get.coords(pid)+v3(0,0,1))
					end
				end
				funcs.doo.yield_while_true(f.on,1000)
			end
		end)	
		funcs.add_to_S_L(g.tbl.sssn_stf.drop_armor,"g.tbl.sssn_stf.drop_armor")
			

		g.print_load_info("Session player actions",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
		
		g.tbl.sssn_stf.veh_trgt_prnt = menu.add_feature("Select Targets", "parent", g.prnt.sssn_vehs.id)
		
			g.feat.sssn_veh_affect_npc_street=menu.add_feature("NPC/Street","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on then g.feat.sssn_veh_affect_plyrs.on=true end
			end)
			funcs.add_to_S_L(g.feat.sssn_veh_affect_npc_street,"g.feat.sssn_veh_affect_npc_street")
			
			g.feat.sssn_veh_affect_plyrs=menu.add_feature("Vehicles players have used","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on then g.feat.sssn_veh_affect_npc_street.on=true end
				funcs.doo.sssn_veh_tog_hide(not f.on)
			end)
			funcs.add_to_S_L(g.feat.sssn_veh_affect_plyrs,"g.feat.sssn_veh_affect_plyrs")
			
			g.tbl.sssn_veh_plyr_affect.pers=menu.add_feature("Personal vehicles","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.pers,"g.tbl.sssn_veh_plyr_affect.pers")

			g.tbl.sssn_veh_plyr_affect.frnd=menu.add_feature("Vehicles my friends are in/own","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on and not g.tbl.sssn_veh_plyr_affect.orgmc.on and not g.tbl.sssn_veh_plyr_affect.mddr.on and not g.tbl.sssn_veh_plyr_affect.others.on then
					g.tbl.sssn_veh_plyr_affect.others.on=true
				end
			end)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.frnd,"g.tbl.sssn_veh_plyr_affect.frnd")
			
			g.tbl.sssn_veh_plyr_affect.orgmc=menu.add_feature("Vehicles my ORG/MC/VIP are in/own","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on and not g.tbl.sssn_veh_plyr_affect.frnd.on and not g.tbl.sssn_veh_plyr_affect.mddr.on and not g.tbl.sssn_veh_plyr_affect.others.on then
					g.tbl.sssn_veh_plyr_affect.others.on=true
				end
			end)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.orgmc,"g.tbl.sssn_veh_plyr_affect.orgmc")
			
			g.tbl.sssn_veh_plyr_affect.mddr=menu.add_feature("Vehicles modders are in/own","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on and not g.tbl.sssn_veh_plyr_affect.frnd.on and not g.tbl.sssn_veh_plyr_affect.orgmc.on and not g.tbl.sssn_veh_plyr_affect.others.on then
					g.tbl.sssn_veh_plyr_affect.others.on=true
				end
			end)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.mddr,"g.tbl.sssn_veh_plyr_affect.mddr")
			
			g.tbl.sssn_veh_plyr_affect.others=menu.add_feature("All other player vehicles","toggle",g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				if not f.on and not g.tbl.sssn_veh_plyr_affect.frnd.on and not g.tbl.sssn_veh_plyr_affect.orgmc.on and not g.tbl.sssn_veh_plyr_affect.mddr.on then
					g.tbl.sssn_veh_plyr_affect.frnd.on=true
				end
			end)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.others,"g.tbl.sssn_veh_plyr_affect.others")
			
			g.tbl.sssn_veh_plyr_affect.force=menu.add_feature(">> Force check for player vehicle","toggle", g.tbl.sssn_stf.veh_trgt_prnt.id,function(f)
				funcs.doo.sssn_veh_feat_force_name(f.on)
			end)
			funcs.add_to_S_L(g.tbl.sssn_veh_plyr_affect.force,"g.tbl.sssn_veh_plyr_affect.force")
	
			g.feat.sssn_veh_affect_plyrs.on=true
			g.feat.sssn_veh_affect_npc_street.on=true
			g.tbl.sssn_veh_plyr_affect.others.on=true
			g.tbl.sssn_veh_plyr_affect.pers.on=true
			
			function funcs.doo.sssn_veh_feat_force_name(_bool)
				if _bool then
					g.tbl.veh_near.health.name= ">> Vehicle health"
					g.tbl.veh_near.collision.name= ">> Vehicle Collision"
					g.tbl.sssn_stf.veh_god2.name= ">> Vehicle God"
					g.tbl.sssn_stf.veh_no_lock2.name= ">> Missile anti-lock"
					g.tbl.sssn_stf.veh_force2.name= ">> Vehicle max speed/torque %"
					g.tbl.sssn_stf.veh_upgr2.name= ">> Vehicle upgrades"
					g.tbl.sssn_stf.veh_fuck2.name=">> Fuck vehicles"
					g.tbl.sssn_stf.veh_kick2.name= ">> Vehicle kick"
					g.tbl.sssn_stf.helo_fuck2.name=">> Remove helicopter rotors"
					g.tbl.sssn_stf.veh_rmv_weap.name=">> Remove vehicle weapons"
					g.tbl.sssn_stf.veh_tire_pop2.name= ">> Tire health"
					g.tbl.sssn_stf.veh_tp_mean_in2.name= ">> Interior"
					g.tbl.sssn_stf.veh_tp_mean_out2.name= ">> High above"
					g.tbl.sssn_stf.veh_tp_into_air2.name= ">> Above their position"
					g.tbl.sssn_stf.veh_tp_to_me2.name= ">> To me"
					g.tbl.sssn_stf.veh_tp_to_random.name=">> TP to random location"
					g.tbl.sssn_stf.veh_flip_wrong.name=">> Flip vehicle upside down"
					g.tbl.sssn_stf.veh_visible.name=">> Vehicle visibility"
					g.tbl.sssn_veh_plyr_affect.force.name= ">> Force check for player vehicle"
				else
					g.tbl.veh_near.health.name= "Vehicle health"
					g.tbl.veh_near.collision.name= "Vehicle Collision"
					g.tbl.sssn_stf.veh_god2.name= "Vehicle God"
					g.tbl.sssn_stf.veh_no_lock2.name= "Missile anti-lock"
					g.tbl.sssn_stf.veh_force2.name= "Vehicle max speed/torque %"
					g.tbl.sssn_stf.veh_upgr2.name= "Vehicle upgrades"
					g.tbl.sssn_stf.veh_fuck2.name="Fuck vehicles"
					g.tbl.sssn_stf.veh_kick2.name= "Vehicle kick"
					g.tbl.sssn_stf.helo_fuck2.name="Remove helicopter rotors"
					g.tbl.sssn_stf.veh_rmv_weap.name="Remove vehicle weapons"
					g.tbl.sssn_stf.veh_tire_pop2.name= "Tire health"
					g.tbl.sssn_stf.veh_tp_mean_in2.name= "Interior"
					g.tbl.sssn_stf.veh_tp_mean_out2.name= "High above"
					g.tbl.sssn_stf.veh_tp_into_air2.name= "Above their position"
					g.tbl.sssn_stf.veh_tp_to_me2.name= "To me"
					g.tbl.sssn_stf.veh_tp_to_random.name="TP to random location"
					g.tbl.sssn_stf.veh_flip_wrong.name="Flip vehicle upside down"
					g.tbl.sssn_stf.veh_visible.name="Vehicle visibility"
					g.tbl.sssn_veh_plyr_affect.force.name= "Force check for player vehicle"
				end
			end
		
		g.tbl.sssn_stf.tp_prnt = menu.add_feature("Teleports", "parent", g.prnt.sssn_vehs.id)
		
		g.tbl.sssn_stf.hrn_bst = menu.add_feature("Horn", "parent", g.prnt.sssn_vehs.id)
	
		g.tbl.sssn_stf.opex_prnt = menu.add_feature("Hold Key Actions", "parent", g.prnt.sssn_vehs.id)
			
	g.tbl.sssn_stf.new = {}
	g.tbl.sssn_stf.new.feat_srch_table = {}
	g.tbl.spwn.spwn_plate_check("Session Vehicle Spawn")
	g.tbl.sssn_stf.new.spwn_plate_txt = g.tbl.spwn.spwn_plate_get("Session Vehicle Spawn")
	function g.tbl.sssn_stf.new.apply_upgrades(_veh)
		if funcs.is.ent(_veh) then
			funcs.ntwrk.ask_quick(_veh)
			API.veh.set.kit_type(_veh, 0)
			if g.tbl.sssn_stf.new.spwn_god.on then
				API.ent.set.god(_veh,true)
			end
			if g.tbl.sssn_stf.new.spwn_upg.on then
				if g.tbl.sssn_stf.new.spwn_upg.value == 0 then
					funcs.doo.veh_upgr_basic(_veh)
					funcs.doo.veh_upgr_perf(_veh)
					funcs.doo.veh_upgr_wheels(_veh)			
					funcs.doo.veh_upgr_lights(_veh,"random")
					funcs.doo.veh_upgr_neons(_veh,"random")
					funcs.doo.veh_upgr_paint(_veh,"random")
					funcs.doo.veh_upgr_livery(_veh)
					funcs.doo.veh_weap_best(_veh)
					funcs.doo.veh_upgr_bombs(_veh)
					funcs.doo.veh_upgr_cntrmsrs(_veh)
				else
					funcs.doo.veh_upgr_perf(_veh)
				end
			end
			if g.tbl.sssn_stf.new.spwn_f1.on then
				funcs.doo.veh_upgr_wheels(_veh,"f1")	
			end
			API.ent.set.max_speed(_veh, 45000)
			API.veh.set.top_speed(_veh, (g.tbl.sssn_stf.new.spwn_spd_tq.value/100 - 1) * 100)
			if g.tbl.sssn_stf.new.spwn_rand_paint.on then
				if g.tbl.sssn_stf.new.spwn_rand_paint.value == 0 then
					funcs.doo.veh_upgr_paint(_veh,"random")
				elseif g.tbl.sssn_stf.new.spwn_rand_paint.value == 1 then
					funcs.doo.veh_upgr_paint(_veh,"random_solid")
				elseif g.tbl.sssn_stf.new.spwn_rand_paint.value == 2 then
					funcs.doo.veh_upgr_paint(_veh,funcs.get.rand_paint_shade("Dark")) 
				else
					funcs.doo.veh_upgr_paint(_veh,funcs.get.rand_paint_shade("Bright")) 
				end
			elseif g.tbl.sssn_stf.new.spwn_cust_paint.value == 0 then
				funcs.doo.veh_upgr_paint(_veh,(g.tbl.sssn_stf.new.spwn_cust_paint_r.value * 65536 + g.tbl.sssn_stf.new.spwn_cust_paint_g.value * 256 + g.tbl.sssn_stf.new.spwn_cust_paint_b.value)) 
			else
				funcs.doo.veh_upgr_paint(_veh,g.tbl.sssn_stf.new.paint_list_slct)
			end
			if g.tbl.sssn_stf.new.neon.choose.value == 0 then
				funcs.doo.veh_upgr_neons(_veh,"random")
			else
				funcs.doo.veh_upgr_neons(_veh,g.tbl.sssn_stf.new.neon_slct)
			end
			if g.tbl.sssn_stf.new.h_light.choose.value == 0 then
				funcs.doo.veh_upgr_lights(_veh,"random")
			else
				funcs.doo.veh_upgr_lights(_veh,g.tbl.sssn_stf.new.h_light_slct)
			end
			if g.tbl.sssn_stf.new.max_tint.on then
				vehicle.set_vehicle_window_tint(_veh,1)
			end
			if g.tbl.sssn_stf.new.invcn_wind.on then
				ntv.set.veh_invncbl_wndws(_veh,1)
			end
			if g.tbl.sssn_stf.new.plate_i.on then
				API.veh.set.plate_index(_veh, g.tbl.sssn_stf.new.plate_i.value)
			end
			if g.tbl.sssn_stf.new.plate.on then
				API.veh.set.plate_text(_veh, g.tbl.sssn_stf.new.spwn_plate_txt)
			end
			system.yield(0)
			g.tbl.spwn.history[#g.tbl.spwn.history+1]=_veh
		end
	end

	g.tbl.sssn_stf.new.optns_prnt=menu.add_feature("Options", "parent", g.tbl.sssn_stf.spwn_prnt.id)


	g.tbl.sssn_stf.new.qck_srch_optns = menu.add_feature("Quick Search Options", "parent", g.tbl.sssn_stf.new.optns_prnt.id)
	menu.add_feature("Display 'quick search' test", "action", g.tbl.sssn_stf.new.qck_srch_optns.id, function()
		local time = API.util.t_ms() + 10000
		local _table = {}
		for i=1,7 do
			_table[i] = veh_stuff.master[mth.rndm(1,#veh_stuff.master)]
		end
		while time > API.util.t_ms() do
			system.yield(0)
			g.tbl.spwn.ovrly_srch_show(_table, "Vehicle test - Session "..funcs.get.round_num((time - API.util.t_ms())/1000),0,g.tbl.sssn_stf.new.quick_x.value/300, g.tbl.sssn_stf.new.quick_y.value/300,false)
		end
	end)
	g.tbl.sssn_stf.new.quick_x = menu.add_feature("Quick search X Pos", "action_slider", g.tbl.sssn_stf.new.qck_srch_optns.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.quick_x,0,300,1,150,"g.tbl.sssn_stf.new.quick_x")

	g.tbl.sssn_stf.new.quick_y = menu.add_feature("Quick search Y Pos", "action_slider", g.tbl.sssn_stf.new.qck_srch_optns.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.quick_y,0,300,1,175,"g.tbl.sssn_stf.new.quick_y")
	
	g.tbl.sssn_stf.new.mk_mdl_clss_prnt=menu.add_feature("All vehicles by type", "parent", g.tbl.sssn_stf.spwn_prnt.id)
	g.tbl.sssn_stf.action_spwn = {}
	g.tbl.sssn_stf.temp_list_sort = {}
	for i=1,#veh_stuff.class_list do
		g.tbl.sssn_stf.temp_list_sort[i]={}
		for ii=1,#veh_stuff.master do
			if veh_stuff.master[ii][6] == veh_stuff.class_list[i] then
				g.tbl.sssn_stf.temp_list_sort[i][#g.tbl.sssn_stf.temp_list_sort[i]+1]=veh_stuff.master[ii]
			end
			g.load_break()
		end
		table.sort(g.tbl.sssn_stf.temp_list_sort[i], function(a, b) return a[1]:lower() <  b[1]:lower() end)
	end
	for i=1,#veh_stuff.class_list do
		g.tbl.sssn_stf.action_spwn[#g.tbl.sssn_stf.action_spwn+1] = menu.add_feature(veh_stuff.class_list[i], "parent",g.tbl.sssn_stf.new.mk_mdl_clss_prnt.id)
		for ii=1,#g.tbl.sssn_stf.temp_list_sort[i] do
			g.tbl.sssn_stf.temp_list_name = ""
			if g.tbl.sssn_stf.temp_list_sort[i][ii][2] == "" then
				g.tbl.sssn_stf.temp_list_name = g.tbl.sssn_stf.temp_list_sort[i][ii][1]
			else
				g.tbl.sssn_stf.temp_list_name = g.tbl.sssn_stf.temp_list_sort[i][ii][1].." - "..g.tbl.sssn_stf.temp_list_sort[i][ii][2]
			end
			menu.add_feature(g.tbl.sssn_stf.temp_list_name, "action", g.tbl.sssn_stf.action_spwn[i].id,function()
				funcs.doo.sssn_spawn_vehs(g.tbl.sssn_stf.temp_list_sort[i][ii][5])
			end)
			g.load_break()
		end
	end
	
	g.tbl.sssn_stf.new.spwn_upg = menu.add_feature("Upgrades", "value_str", g.tbl.sssn_stf.new.optns_prnt.id)
	g.tbl.sssn_stf.new.spwn_upg:set_str_data({"All","Only performance"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.spwn_upg,"g.tbl.sssn_stf.new.spwn_upg")
	g.tbl.sssn_stf.new.spwn_upg.on=true
	
	g.tbl.sssn_stf.new.spwn_f1 = menu.add_feature("Always F1 Wheels", "toggle", g.tbl.sssn_stf.new.optns_prnt.id)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.spwn_f1,"g.tbl.sssn_stf.new.spwn_f1")
		
	g.tbl.sssn_stf.new.spwn_god = menu.add_feature("God-Mode", "toggle", g.tbl.sssn_stf.new.optns_prnt.id)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.spwn_god,"g.tbl.sssn_stf.new.spwn_god")
		
	g.tbl.sssn_stf.new.max_tint = menu.add_feature("Max tint", "toggle", g.tbl.sssn_stf.new.optns_prnt.id)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.max_tint,"g.tbl.sssn_stf.new.max_tint")
		
	g.tbl.sssn_stf.new.invcn_wind = menu.add_feature("Invincible windows", "toggle", g.tbl.sssn_stf.new.optns_prnt.id)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.invcn_wind,"g.tbl.sssn_stf.new.invcn_wind")
		
	g.tbl.sssn_stf.new.plate_i=menu.add_feature("Plate color", "value_str", g.tbl.sssn_stf.new.optns_prnt.id)
	g.tbl.sssn_stf.new.plate_i:set_str_data({"Blue/White","Yellow/black","Yellow/Blue","Blue/White2","Blue/White3","Yankton"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.plate_i,"g.tbl.sssn_stf.new.plate_i")
	g.tbl.sssn_stf.new.plate_i.value=1
	g.tbl.sssn_stf.new.plate_i.on=true
	
	g.tbl.sssn_stf.new.plate = menu.add_feature("Plate text - "..g.tbl.sssn_stf.new.spwn_plate_txt, "toggle", g.tbl.sssn_stf.new.optns_prnt.id,function(f)
		if f.on and g.var.GS_has_loaded then
			local status,str = 1,""
			status,str = funcs.get.text_input("Non alpha-numeric characters act as blank space",g.tbl.spwn.spwn_plate_txt,8,0)
			if status == 0 then
				g.tbl.spwn.spwn_plate_check("Session Vehicle Spawn")
				g.tbl.spwn.spwn_plate_write(str,"Session Vehicle Spawn")
				g.tbl.sssn_stf.new.spwn_plate_txt=str
				f.name="Plate text - "..g.tbl.sssn_stf.new.spwn_plate_txt
			else
				f.on=false
			end
		end
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.plate,"g.tbl.sssn_stf.new.plate")
	g.tbl.sssn_stf.new.plate.on=true
		
	g.tbl.sssn_stf.new.spwn_spd_tq=menu.add_feature("Vehicle max speed/torque %","action_value_i", g.tbl.sssn_stf.new.optns_prnt.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.spwn_spd_tq,0,700,5,100,"g.tbl.sssn_stf.new.spwn_spd_tq")	

	g.tbl.sssn_stf.new.paint_prnt = menu.add_feature("Paint", "parent", g.tbl.sssn_stf.new.optns_prnt.id, function ()
		g.tbl.sssn_stf.new.hide_paint(true)
	end)

	function g.tbl.sssn_stf.new.hide_paint(_bool)
		system.yield(0)
		if _bool then
			for _,feat in pairs(g.tbl.sssn_stf.new.paint_list) do
				feat.hidden=(not g.tbl.sssn_stf.new.spwn_cust_paint.on or g.tbl.sssn_stf.new.spwn_cust_paint.value==0)
			end
			g.tbl.sssn_stf.new.spwn_cust_paint_r.hidden=(not g.tbl.sssn_stf.new.spwn_cust_paint.on or g.tbl.sssn_stf.new.spwn_cust_paint.value==1)
			g.tbl.sssn_stf.new.spwn_cust_paint_g.hidden=(not g.tbl.sssn_stf.new.spwn_cust_paint.on or g.tbl.sssn_stf.new.spwn_cust_paint.value==1)
			g.tbl.sssn_stf.new.spwn_cust_paint_b.hidden=(not g.tbl.sssn_stf.new.spwn_cust_paint.on or g.tbl.sssn_stf.new.spwn_cust_paint.value==1)
		end
	end

	g.tbl.sssn_stf.new.spwn_rand_paint = menu.add_feature("Random paint", "value_str", g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.spwn_cust_paint.on=not f.on
		g.tbl.sssn_stf.new.hide_paint(f.on)
	end)
	g.tbl.sssn_stf.new.spwn_rand_paint:set_str_data({"Non-matching", "Matching","Dark","Bright"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.spwn_rand_paint,"g.tbl.sssn_stf.new.spwn_rand_paint")
	g.tbl.sssn_stf.new.spwn_rand_paint.on=true

	g.tbl.sssn_stf.new.spwn_cust_paint = menu.add_feature("Custom paint", "value_str", g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.spwn_rand_paint.on=not f.on
		g.tbl.sssn_stf.new.hide_paint(f.on)
	end)
	g.tbl.sssn_stf.new.spwn_cust_paint:set_str_data({"RGB","List"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.spwn_cust_paint,"g.tbl.sssn_stf.new.spwn_cust_paint")

	g.tbl.sssn_stf.new.spwn_cust_paint_r=menu.add_feature("Custom Red","autoaction_value_i",g.tbl.sssn_stf.new.paint_prnt.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.spwn_cust_paint_r,0,255,1,0,"g.tbl.sssn_stf.new.spwn_cust_paint_r")

	g.tbl.sssn_stf.new.spwn_cust_paint_g=menu.add_feature("Custom Green","autoaction_value_i",g.tbl.sssn_stf.new.paint_prnt.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.spwn_cust_paint_g,0,255,1,0,"g.tbl.sssn_stf.new.spwn_cust_paint_g")

	g.tbl.sssn_stf.new.spwn_cust_paint_b=menu.add_feature("Custom Blue","autoaction_value_i",g.tbl.sssn_stf.new.paint_prnt.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.new.spwn_cust_paint_b,0,255,1,0,"g.tbl.sssn_stf.new.spwn_cust_paint_b")

	function g.tbl.sssn_stf.new.paint_tog_do(_bool,_feat,_paint)
		if _bool then
			g.tbl.sssn_stf.new.paint_list_slct=_paint
			for _, feat in pairs(g.tbl.sssn_stf.new.paint_list) do
				if feat ~=_feat then
					feat.on = false
				end
			end
		end
	end

	g.tbl.sssn_stf.new.paint_list_slct = nil
	g.tbl.sssn_stf.new.paint_list={}

	g.tbl.sssn_stf.new.paint_list.pnt_Purewhite=menu.add_feature("Pure white","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Purewhite,16777215)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Purewhite,"g.tbl.sssn_stf.new.paint_list.pnt_Purewhite")
	
	g.tbl.sssn_stf.new.paint_list.pnt_White=menu.add_feature("White","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_White,13487565)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_White,"g.tbl.sssn_stf.new.paint_list.pnt_White")
	
	g.tbl.sssn_stf.new.paint_list.pnt_Cream=menu.add_feature("Cream","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Cream,10197915)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Cream,"g.tbl.sssn_stf.new.paint_list.pnt_Cream")

	g.tbl.sssn_stf.new.paint_list.pnt_Grey=menu.add_feature("Grey","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Grey,5066061)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Grey,"g.tbl.sssn_stf.new.paint_list.pnt_Grey")

	g.tbl.sssn_stf.new.paint_list.pnt_Black=menu.add_feature("Black","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Black,0)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Black,"g.tbl.sssn_stf.new.paint_list.pnt_Black")

	g.tbl.sssn_stf.new.paint_list.pnt_PastelPink=menu.add_feature("Pastel Pink","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_PastelPink,15767961)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_PastelPink,"g.tbl.sssn_stf.new.paint_list.pnt_PastelPink")

	g.tbl.sssn_stf.new.paint_list.pnt_Pink=menu.add_feature("Pink","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Pink,13317780)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Pink,"g.tbl.sssn_stf.new.paint_list.pnt_Pink")

	g.tbl.sssn_stf.new.paint_list.pnt_PinkRed=menu.add_feature("Pink/Red","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_PinkRed,14692914)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_PinkRed,"g.tbl.sssn_stf.new.paint_list.pnt_PinkRed")

	g.tbl.sssn_stf.new.paint_list.pnt_WineRed=menu.add_feature("Wine Red","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_WineRed,3014656)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_WineRed,"g.tbl.sssn_stf.new.paint_list.pnt_WineRed")

	g.tbl.sssn_stf.new.paint_list.pnt_Red=menu.add_feature("Red","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Red,7346457)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Red,"g.tbl.sssn_stf.new.paint_list.pnt_Red")

	g.tbl.sssn_stf.new.paint_list.pnt_BrightRed=menu.add_feature("Bright Red","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_BrightRed,16711680)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_BrightRed,"g.tbl.sssn_stf.new.paint_list.pnt_BrightRed")

	g.tbl.sssn_stf.new.paint_list.pnt_Salmon=menu.add_feature("Salmon","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Salmon,16761514)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Salmon,"g.tbl.sssn_stf.new.paint_list.pnt_Salmon")

	g.tbl.sssn_stf.new.paint_list.pnt_BrightBlue=menu.add_feature("Bright Blue","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_BrightBlue,56306)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_BrightBlue,"g.tbl.sssn_stf.new.paint_list.pnt_BrightBlue")

	g.tbl.sssn_stf.new.paint_list.pnt_LightBlue=menu.add_feature("Light Blue","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_LightBlue,6141669)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_LightBlue,"g.tbl.sssn_stf.new.paint_list.pnt_LightBlue")

	g.tbl.sssn_stf.new.paint_list.pnt_Teal=menu.add_feature("Teal","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Teal,3103859)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Teal,"g.tbl.sssn_stf.new.paint_list.pnt_Teal")

	g.tbl.sssn_stf.new.paint_list.pnt_RoyalBlue=menu.add_feature("Royal Blue","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_RoyalBlue,18309)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_RoyalBlue,"g.tbl.sssn_stf.new.paint_list.pnt_RoyalBlue")

	g.tbl.sssn_stf.new.paint_list.pnt_CreamYellow=menu.add_feature("Cream Yellow","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_CreamYellow,16706473)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_CreamYellow,"g.tbl.sssn_stf.new.paint_list.pnt_CreamYellow")

	g.tbl.sssn_stf.new.paint_list.pnt_Yellow=menu.add_feature("Yellow","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Yellow,15779920)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Yellow,"g.tbl.sssn_stf.new.paint_list.pnt_Yellow")

	g.tbl.sssn_stf.new.paint_list.pnt_Mustard=menu.add_feature("Mustard","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Mustard,8284969)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Mustard,"g.tbl.sssn_stf.new.paint_list.pnt_Mustard")

	g.tbl.sssn_stf.new.paint_list.pnt_Brightyellow=menu.add_feature("Bright yellow","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Brightyellow,16757504)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Brightyellow,"g.tbl.sssn_stf.new.paint_list.pnt_Brightyellow")

	g.tbl.sssn_stf.new.paint_list.pnt_Schoolbus=menu.add_feature("Schoolbus","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_Schoolbus,16750350)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_Schoolbus,"g.tbl.sssn_stf.new.paint_list.pnt_Schoolbus")

	g.tbl.sssn_stf.new.paint_list.pnt_DarkOrange=menu.add_feature("Dark Orange","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_DarkOrange,8340010)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_DarkOrange,"g.tbl.sssn_stf.new.paint_list.pnt_DarkOrange")

	g.tbl.sssn_stf.new.paint_list.pnt_CreamGreen=menu.add_feature("Cream Green","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_CreamGreen,12183225)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_CreamGreen,"g.tbl.sssn_stf.new.paint_list.pnt_CreamGreen")

	g.tbl.sssn_stf.new.paint_list.pnt_LightGreen=menu.add_feature("Light Green","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_LightGreen,7523442)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_LightGreen,"g.tbl.sssn_stf.new.paint_list.pnt_LightGreen")

	g.tbl.sssn_stf.new.paint_list.pnt_BrightGreen=menu.add_feature("Bright Green","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_BrightGreen,2803792)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_BrightGreen,"g.tbl.sssn_stf.new.paint_list.pnt_BrightGreen")

	g.tbl.sssn_stf.new.paint_list.pnt_DarkGreen=menu.add_feature("Dark Green","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_DarkGreen,3761721)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_DarkGreen,"g.tbl.sssn_stf.new.paint_list.pnt_DarkGreen")

	g.tbl.sssn_stf.new.paint_list.pnt_CreamPurple=menu.add_feature("Cream Purple","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_CreamPurple,12628975)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_CreamPurple,"g.tbl.sssn_stf.new.paint_list.pnt_CreamPurple")

	g.tbl.sssn_stf.new.paint_list.pnt_BrightPurple=menu.add_feature("Bright Purple","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_BrightPurple,8677090)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_BrightPurple,"g.tbl.sssn_stf.new.paint_list.pnt_BrightPurple")

	g.tbl.sssn_stf.new.paint_list.pnt_DarkPurple=menu.add_feature("Dark Purple","toggle",g.tbl.sssn_stf.new.paint_prnt.id,function(f)
		g.tbl.sssn_stf.new.paint_tog_do(f.on,g.tbl.sssn_stf.new.paint_list.pnt_DarkPurple,4405615)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.paint_list.pnt_DarkPurple,"g.tbl.sssn_stf.new.paint_list.pnt_DarkPurple")

	g.tbl.sssn_stf.new.paint_list.pnt_DarkGreen.on=true

	g.tbl.sssn_stf.new.neon = {}
	g.tbl.sssn_stf.new.neon.list={}
	g.tbl.sssn_stf.new.neon_slct=nil 
	function g.tbl.sssn_stf.new.neon_tog_do(_bool,_feat,_neon)
		if _bool then
			g.tbl.sssn_stf.new.neon_slct=_neon
			for _, feat in pairs(g.tbl.sssn_stf.new.neon.list) do
				if feat ~=_feat then
					feat.on = false
				end
			end
		end
	end

	function g.tbl.sssn_stf.new.hide_neon(_bool)
		system.yield(0)
		if _bool then
			for _, feat in pairs (g.tbl.sssn_stf.new.neon.list) do
				feat.hidden=(g.tbl.sssn_stf.new.neon.choose.value==0)
			end
		end
	end

	g.tbl.sssn_stf.new.neon.prnt = menu.add_feature("Neon lights", "parent", g.tbl.sssn_stf.new.optns_prnt.id, function (f)
		g.tbl.sssn_stf.new.hide_neon(g.tbl.sssn_stf.new.neon.choose.value==0)
	end)


	g.tbl.sssn_stf.new.neon.choose=menu.add_feature("Neon color","autoaction_value_str",g.tbl.sssn_stf.new.neon.prnt.id,function(f)
		g.tbl.sssn_stf.new.hide_neon(true)
	end)
	g.tbl.sssn_stf.new.neon.choose:set_str_data({"Random","List"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.choose,"g.tbl.sssn_stf.new.neon.choose")

	g.tbl.sssn_stf.new.neon.list.White=menu.add_feature("White", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.White,4292796159)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.White,"g.tbl.sssn_stf.new.neon.list.White")	
	
	g.tbl.sssn_stf.new.neon.list.Blue=menu.add_feature("Blue", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.Blue,4278326783)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.Blue,"g.tbl.sssn_stf.new.neon.list.Blue")	

	g.tbl.sssn_stf.new.neon.list.ElectricBlue=menu.add_feature("Electric Blue", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.ElectricBlue,4278408191)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.ElectricBlue,"g.tbl.sssn_stf.new.neon.list.ElectricBlue")	

	g.tbl.sssn_stf.new.neon.list.MintGreen=menu.add_feature("Mint Green", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.MintGreen,4278255500)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.MintGreen,"g.tbl.sssn_stf.new.neon.list.MintGreen")	

	g.tbl.sssn_stf.new.neon.list.LimeGreen=menu.add_feature("Lime Green", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.LimeGreen,4284415745)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.LimeGreen,"g.tbl.sssn_stf.new.neon.list.LimeGreen")	

	g.tbl.sssn_stf.new.neon.list.Yellow=menu.add_feature("Yellow", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.Yellow,4294967040)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.Yellow,"g.tbl.sssn_stf.new.neon.list.Yellow")	

	g.tbl.sssn_stf.new.neon.list.GoldenShower=menu.add_feature("Golden Shower", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.GoldenShower,4294940165)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.GoldenShower,"g.tbl.sssn_stf.new.neon.list.GoldenShower")	

	g.tbl.sssn_stf.new.neon.list.Orange=menu.add_feature("Orange", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.Orange,4294917632)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.Orange,"g.tbl.sssn_stf.new.neon.list.Orange")	

	g.tbl.sssn_stf.new.neon.list.Red=menu.add_feature("Red", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.Red,4294902017)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.Red,"g.tbl.sssn_stf.new.neon.list.Red")	

	g.tbl.sssn_stf.new.neon.list.PonyPink=menu.add_feature("Pony Pink", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.PonyPink,4294914660)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.PonyPink,"g.tbl.sssn_stf.new.neon.list.PonyPink")	

	g.tbl.sssn_stf.new.neon.list.HotPink=menu.add_feature("Hot Pink", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.HotPink,4294903230)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.HotPink,"g.tbl.sssn_stf.new.neon.list.HotPink")	

	g.tbl.sssn_stf.new.neon.list.Purple=menu.add_feature("Purple", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.Purple,4280484351)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.Purple,"g.tbl.sssn_stf.new.neon.list.Purple")	

	g.tbl.sssn_stf.new.neon.list.BlackLight=menu.add_feature("Black Light", "toggle", g.tbl.sssn_stf.new.neon.prnt.id, function (f)
		g.tbl.sssn_stf.new.neon_tog_do(f.on,g.tbl.sssn_stf.new.neon.list.BlackLight,4279174143)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.neon.list.BlackLight,"g.tbl.sssn_stf.new.neon.list.BlackLight")	

	g.tbl.sssn_stf.new.neon.list.MintGreen.on=true

	g.tbl.sssn_stf.new.h_light={}
	g.tbl.sssn_stf.new.h_light.list={}
	g.tbl.sssn_stf.new.h_light_slct=nil 

	function g.tbl.sssn_stf.new.h_light_tog_do(_bool,_feat,_h_light)
		if _bool then
			g.tbl.sssn_stf.new.h_light_slct=_h_light
			for _, feat in pairs(g.tbl.sssn_stf.new.h_light.list) do
				if feat ~=_feat then
					feat.on = false
				end
			end
		end
	end

	function g.tbl.sssn_stf.new.hide_h_light(_bool)
		system.yield(0)
		if _bool then
			for _, feat in pairs (g.tbl.sssn_stf.new.h_light.list) do
				feat.hidden=(g.tbl.sssn_stf.new.h_light.choose.value==0)
			end
		end
	end

	g.tbl.sssn_stf.new.h_light.prnt = menu.add_feature("Headlights", "parent", g.tbl.sssn_stf.new.optns_prnt.id, function (f)
		g.tbl.sssn_stf.new.hide_h_light(g.tbl.sssn_stf.new.h_light.choose.value==0)
	end)


	g.tbl.sssn_stf.new.h_light.choose=menu.add_feature("Headlight color","autoaction_value_str",g.tbl.sssn_stf.new.h_light.prnt.id,function(f)
		g.tbl.sssn_stf.new.hide_h_light(true)
	end)
	g.tbl.sssn_stf.new.h_light.choose:set_str_data({"Random","List"})
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.choose,"g.tbl.sssn_stf.new.h_light.choose")	
	
	g.tbl.sssn_stf.new.h_light.list.White=menu.add_feature("White", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.White,0)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.White,"g.tbl.sssn_stf.new.h_light.list.White")	

	g.tbl.sssn_stf.new.h_light.list.Blue=menu.add_feature("Blue", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.Blue,1)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.Blue,"g.tbl.sssn_stf.new.h_light.list.Blue")

	g.tbl.sssn_stf.new.h_light.list.ElectricBlue=menu.add_feature("Electric Blue", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.ElectricBlue,2)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.ElectricBlue,"g.tbl.sssn_stf.new.h_light.list.ElectricBlue")

	g.tbl.sssn_stf.new.h_light.list.MintGreen=menu.add_feature("Mint Green", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.MintGreen,3)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.MintGreen,"g.tbl.sssn_stf.new.h_light.list.MintGreen")

	g.tbl.sssn_stf.new.h_light.list.LimeGreen=menu.add_feature("Lime Green", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.LimeGreen,4)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.LimeGreen,"g.tbl.sssn_stf.new.h_light.list.LimeGreen")

	g.tbl.sssn_stf.new.h_light.list.Yellow=menu.add_feature("Yellow", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.Yellow,5)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.Yellow,"g.tbl.sssn_stf.new.h_light.list.Yellow")

	g.tbl.sssn_stf.new.h_light.list.GoldenShower=menu.add_feature("Golden Shower", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.GoldenShower,6)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.GoldenShower,"g.tbl.sssn_stf.new.h_light.list.GoldenShower")

	g.tbl.sssn_stf.new.h_light.list.Orange=menu.add_feature("Orange", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.Orange,7)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.Orange,"g.tbl.sssn_stf.new.h_light.list.Orange")

	g.tbl.sssn_stf.new.h_light.list.Red=menu.add_feature("Red", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.Red,8)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.Red,"g.tbl.sssn_stf.new.h_light.list.Red")

	g.tbl.sssn_stf.new.h_light.list.PonyPink=menu.add_feature("Pony Pink", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.PonyPink,9)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.PonyPink,"g.tbl.sssn_stf.new.h_light.list.PonyPink")

	g.tbl.sssn_stf.new.h_light.list.HotPink=menu.add_feature("Hot Pink", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.HotPink,10)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.HotPink,"g.tbl.sssn_stf.new.h_light.list.HotPink")

	g.tbl.sssn_stf.new.h_light.list.Purple=menu.add_feature("Purple", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.Purple,11)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.Purple,"g.tbl.sssn_stf.new.h_light.list.Purple")

	g.tbl.sssn_stf.new.h_light.list.BlackLight=menu.add_feature("Black Light", "toggle", g.tbl.sssn_stf.new.h_light.prnt.id, function (f)
		g.tbl.sssn_stf.new.h_light_tog_do(f.on,g.tbl.sssn_stf.new.h_light.list.BlackLight,12)
	end)
	funcs.add_to_S_L(g.tbl.sssn_stf.new.h_light.list.BlackLight,"g.tbl.sssn_stf.new.h_light.list.BlackLight")

	g.tbl.sssn_stf.new.h_light.list.MintGreen.on=true

	g.tbl.sssn_stf.spwn_srch_prnt=menu.add_feature("Make/Model search list", "parent", g.tbl.sssn_stf.spwn_prnt.id)
	
	g.tbl.sssn_stf.list_spwn = {}
	g.tbl.sssn_stf.list_spwn_temp = {}
	g.tbl.sssn_stf.list_spwn_feat=menu.add_feature("Search for vehicles", "action_value_str", g.tbl.sssn_stf.spwn_srch_prnt.id, function(f)
		local status,str,veh = 1
		status,str = funcs.get.text_input("Vehicle Make/Model","",25,0)
		if status == 0 then
			g.tbl.sssn_stf.list_spwn_temp = {}
			g.tbl.spwn.ovrly_srch_do(str,f.value,g.tbl.sssn_stf.list_spwn_temp)
			if #g.tbl.sssn_stf.list_spwn_temp > 0 then
				for i=1,#g.tbl.sssn_stf.list_spwn do
					system.yield(0)
					if g.tbl.sssn_stf.list_spwn[i] ~= nil then menu.delete_feature(g.tbl.sssn_stf.list_spwn[i].id) end
				end
				g.tbl.sssn_stf.list_spwn = {}
				for i=1,#g.tbl.sssn_stf.list_spwn_temp do
					if f.value == 0 then
						g.tbl.sssn_stf.list_spwn[#g.tbl.sssn_stf.list_spwn+1]=menu.add_feature(g.tbl.sssn_stf.list_spwn_temp[i][1], "action", g.tbl.sssn_stf.spwn_srch_prnt.id,function(f,pid)
							funcs.doo.sssn_spawn_vehs(g.tbl.sssn_stf.list_spwn_temp[i][5])
						end)
					else
						g.tbl.sssn_stf.list_spwn[#g.tbl.sssn_stf.list_spwn+1]=menu.add_feature(g.tbl.sssn_stf.list_spwn_temp[i][3], "action", g.tbl.sssn_stf.spwn_srch_prnt.id,function(f,pid)
							funcs.doo.sssn_spawn_vehs(g.tbl.sssn_stf.list_spwn_temp[i][5])
						end)
					end
				end
			end
		end
	end)g.tbl.sssn_stf.list_spwn_feat.set_str_data(g.tbl.sssn_stf.list_spwn_feat,{"Model", "Make","Make or Model"})
	
	g.tbl.sssn_stf.quick_spwn_prnt=menu.add_feature("Quick spawn list", "parent", g.tbl.sssn_stf.spwn_prnt.id)
	g.tbl.sssn_stf.quick_spawn_feats = {}
	for i=1, #g.tbl.spwn.quick_spawn_list do
		if veh_stuff.info[API.get_hash_key(g.tbl.spwn.quick_spawn_list[i])]~= nil then
			g.tbl.sssn_stf.quick_spawn_feats[i]=menu.add_feature(veh_stuff.info[API.get_hash_key(g.tbl.spwn.quick_spawn_list[i])].MODEL, "action", g.tbl.sssn_stf.quick_spwn_prnt.id,function()
				funcs.doo.req_model(API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]))
				funcs.doo.sssn_spawn_vehs(API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]))
			end)
			g.tbl.spawn_veh_feature_p.quick.feats[i]=menu.add_player_feature(veh_stuff.info[API.get_hash_key(g.tbl.spwn.quick_spawn_list[i])].MODEL, "action", g.tbl.spawn_veh_feature_p.quick.prnt.id,function(f,pid)
				if intrr.is_pid_intrr(pid) then
					g.N_P(2,funcs.get.pid_name(pid) .. "\nIn interior.",__GV__,4,"Blue")
				else
					funcs.doo.req_model(API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]))
					local veh = funcs.doo.spawn_veh_at_pid(pid,API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]),true)
				end
			end)
			g.tbl.spwn.quick_spawn_feats[i]=menu.add_feature(veh_stuff.info[API.get_hash_key(g.tbl.spwn.quick_spawn_list[i])].MODEL, "action", g.tbl.spwn.quick_spwn_prnt.id,function()
				if g.tbl.spwn.remove_old.on and funcs.ntwrk.ask_long(g.tbl.spwn.old_veh,250) then
					API.ent.set.no_need(g.tbl.spwn.old_veh)
					API.ent.delete(g.tbl.spwn.old_veh)
				end
				funcs.doo.req_model(API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]))
				local veh = funcs.doo.spawn_veh_at_pid(API.plyr.my_id(),API.get_hash_key(g.tbl.spwn.quick_spawn_list[i]),false,g.tbl.spwn.spwn_front.value==0)
				g.tbl.spwn.apply_upgrades(veh)
			end)
		end
	end
	g.tbl.sssn_stf.quick_spwn = {}
	menu.add_feature("Quick search on-screen", "action", g.tbl.sssn_stf.spwn_prnt.id, function(f)
		g.tbl.spwn.quick_start(g.tbl.sssn_stf.quick_spwn,"Vehicle Spawn - Session",true)
	end)
	
	function funcs.doo.sssn_spawn_vehs(_hash)
		local pid_table = funcs.get.sssn_pid_plyr_table(true,true)
		if #pid_table == 0 then
			g.N_P(2,"No available players from selection.",__GV__,4,"Yellow")
		else
			local count = 0
			funcs.doo.req_model(_hash)
			for i=1,#pid_table do
				local veh = funcs.doo.spawn_veh_at_pid(pid_table[i],_hash,true)
				if not funcs.is.ent(veh) then
					break
				else
					count=count+1
				end
			end
			g.N_P(2,count.."/"..#pid_table.." vehicles spawned.",__GV__,4,"Blue")
		end
	end
	
	g.tbl.sssn_stf.hold = {}
	
	g.tbl.sssn_stf.hold.show_rpr=false
	g.tbl.sssn_stf.hold.show_rpr_time=5000
	g.tbl.sssn_stf.hold.rpr=menu.add_feature("Hold (R) repair nearby veh", "value_i", g.tbl.sssn_stf.opex_prnt.id, function(f)
		local f_value,key = f.value
		while f.on do
			system.yield(25)
			key = inputs.vk_list[g.tbl.sssn_stf.hold.rpr_key.value+1]
			f.name = "Hold ("..key..") repair nearby veh"
			if f_value ~= f.value then
				g.tbl.sssn_stf.hold.show_rpr_time=5000
				g.tbl.sssn_stf.hold.show_rpr=true
				g.tbl.sssn_stf.hold.show_debug.on=true
				f_value = f.value
			end
			if g.tbl.sssn_stf.hold.chk(key) and g.tbl.sssn_stf.hold._do("repair",f.value) and g.tbl.sssn_stf.hold.show_in_use.on then
				g.tbl.sssn_stf.hold.show_rpr_time=3000
				g.tbl.sssn_stf.hold.show_rpr=true
				g.tbl.sssn_stf.hold.show_debug.on=true
			end
			while funcs.is.vk_key_down(key) do
				system.yield(0)
			end
		end 
	end)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hold.rpr,5,100,5,15,"g.tbl.sssn_stf.hold.rpr")
	
	g.tbl.sssn_stf.hold.show_upgrd=false
	g.tbl.sssn_stf.hold.show_upgrd_time=5000
	g.tbl.sssn_stf.hold.upgrd=menu.add_feature("Hold (U) upgrade nearby veh", "value_i", g.tbl.sssn_stf.opex_prnt.id, function(f)
		local f_value,key = f.value
		while f.on do
			system.yield(25)
			key = inputs.vk_list[g.tbl.sssn_stf.hold.upgrd_key.value+1]
			f.name = "Hold ("..key..") upgrade nearby veh"
			if f_value ~= f.value then
				g.tbl.sssn_stf.hold.show_upgrd_time=5000
				g.tbl.sssn_stf.hold.show_upgrd=true
				g.tbl.sssn_stf.hold.show_debug.on=true
				f_value = f.value
			end
			if g.tbl.sssn_stf.hold.chk(key) and g.tbl.sssn_stf.hold._do("upgrades",f.value) and g.tbl.sssn_stf.hold.show_in_use.on then
				g.tbl.sssn_stf.hold.show_upgrd_time=3000
				g.tbl.sssn_stf.hold.show_upgrd=true
				g.tbl.sssn_stf.hold.show_debug.on=true
			end
			while funcs.is.vk_key_down(key) do
				system.yield(0)
			end
		end 
	end)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hold.upgrd,5,100,5,15,"g.tbl.sssn_stf.hold.upgrd")
	
	g.tbl.sssn_stf.hold.show_dstry=false
	g.tbl.sssn_stf.hold.show_dstry_time=5000
	g.tbl.sssn_stf.hold.dstry=menu.add_feature("Hold (~) destroy nearby veh", "value_i", g.tbl.sssn_stf.opex_prnt.id, function(f)
		local f_value,key = f.value
		while f.on do
			system.yield(25)
			key = inputs.vk_list[g.tbl.sssn_stf.hold.dstry_key.value+1]
			f.name = "Hold ("..key..") destroy nearby veh"
			if f_value ~= f.value then
				g.tbl.sssn_stf.hold.show_dstry_time=5000
				g.tbl.sssn_stf.hold.show_dstry=true
				g.tbl.sssn_stf.hold.show_debug.on=true
				f_value = f.value
			end
			if g.tbl.sssn_stf.hold.chk(key) and g.tbl.sssn_stf.hold._do("destroy",f.value) and g.tbl.sssn_stf.hold.show_in_use.on then
				g.tbl.sssn_stf.hold.show_dstry_time=3000
				g.tbl.sssn_stf.hold.show_dstry=true
				g.tbl.sssn_stf.hold.show_debug.on=true
			end
			while funcs.is.vk_key_down(key) do
				system.yield(0)
			end
		end 
	end)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hold.dstry,5,100,5,15,"g.tbl.sssn_stf.hold.dstry")

	g.tbl.sssn_stf.hold.time=menu.add_feature("Hold delay (ms)", "action_value_i", g.tbl.sssn_stf.opex_prnt.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hold.time,250,1500,25,750,"g.tbl.sssn_stf.hold.time")
	
	g.tbl.sssn_stf.hold.show_in_use=menu.add_feature("Show range when in use", "toggle", g.tbl.sssn_stf.opex_prnt.id)
	funcs.add_to_S_L(g.tbl.sssn_stf.hold.show_in_use,"g.tbl.sssn_stf.hold.show_in_use")
	
	g.tbl.sssn_stf.hold.rpr_key=menu.add_feature("Key1 for Hold Repair HIDDEN","autoaction_value_str",g.tbl.sssn_stf.opex_prnt.id)
	g.tbl.sssn_stf.hold.rpr_key:set_str_data(inputs.vk_list)
	funcs.add_to_S_L(g.tbl.sssn_stf.hold.rpr_key,"g.tbl.sssn_stf.hold.rpr_key")
	g.tbl.sssn_stf.hold.rpr_key.hidden=true
	g.tbl.sssn_stf.hold.rpr_key.value=17

	menu.add_feature("Set key for repair","action",g.tbl.sssn_stf.opex_prnt.id,function()
		funcs.doo.set_keybinds(1,"Repair hold",g.tbl.sssn_stf.hold.rpr_key)
	end)
	
	g.tbl.sssn_stf.hold.upgrd_key=menu.add_feature("Key1 for Hold Upgrade HIDDEN","autoaction_value_str",g.tbl.sssn_stf.opex_prnt.id)
	g.tbl.sssn_stf.hold.upgrd_key:set_str_data(inputs.vk_list)
	funcs.add_to_S_L(g.tbl.sssn_stf.hold.upgrd_key,"g.tbl.sssn_stf.hold.upgrd_key")
	g.tbl.sssn_stf.hold.upgrd_key.hidden=true
	g.tbl.sssn_stf.hold.upgrd_key.value=20

	menu.add_feature("Set key for upgrade","action",g.tbl.sssn_stf.opex_prnt.id,function()
		funcs.doo.set_keybinds(1,"Upgrade hold",g.tbl.sssn_stf.hold.upgrd_key)
	end)
	
	g.tbl.sssn_stf.hold.dstry_key=menu.add_feature("Key1 for Hold Destroy HIDDEN","autoaction_value_str",g.tbl.sssn_stf.opex_prnt.id)
	g.tbl.sssn_stf.hold.dstry_key:set_str_data(inputs.vk_list)
	funcs.add_to_S_L(g.tbl.sssn_stf.hold.dstry_key,"g.tbl.sssn_stf.hold.dstry_key")
	g.tbl.sssn_stf.hold.dstry_key.hidden=true
	g.tbl.sssn_stf.hold.dstry_key.value=63

	menu.add_feature("Set key for destroy","action",g.tbl.sssn_stf.opex_prnt.id,function()
		funcs.doo.set_keybinds(1,"Destroy hold",g.tbl.sssn_stf.hold.dstry_key)
	end)
	
	g.tbl.sssn_stf.hold.show_debug=menu.add_feature("Show  debugs HIDDEN", "toggle", g.tbl.sssn_stf.opex_prnt.id,function(f)
		local time,red_time,green_time,blue_time = API.util.t_ms() + 5000,API.util.t_ms(),API.util.t_ms(),API.util.t_ms()
		while time > API.util.t_ms() do
			system.yield(5)
			if g.tbl.sssn_stf.hold.show_rpr then
				green_time = API.util.t_ms()+g.tbl.sssn_stf.hold.show_rpr_time
				time = API.util.t_ms() + 5000
				g.tbl.sssn_stf.hold.show_rpr=false
			end
			if green_time > API.util.t_ms() then 
				graphics.draw_marker(28, API.plyr.get.coords(API.plyr.my_id()), v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.sssn_stf.hold.rpr.value, g.tbl.sssn_stf.hold.rpr.value, g.tbl.sssn_stf.hold.rpr.value), 0, 255, 0, mth.flr((green_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
			end
			if g.tbl.sssn_stf.hold.show_upgrd then
				blue_time = API.util.t_ms()+g.tbl.sssn_stf.hold.show_upgrd_time
				time = API.util.t_ms() + 5000
				g.tbl.sssn_stf.hold.show_upgrd=false
			end
			if blue_time > API.util.t_ms() then 
				graphics.draw_marker(28, API.plyr.get.coords(API.plyr.my_id()), v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.sssn_stf.hold.upgrd.value, g.tbl.sssn_stf.hold.upgrd.value, g.tbl.sssn_stf.hold.upgrd.value), 0, 0, 255, mth.flr((blue_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
			end
			if g.tbl.sssn_stf.hold.show_dstry then
				red_time = API.util.t_ms()+g.tbl.sssn_stf.hold.show_dstry_time
				time = API.util.t_ms() + 5000
				g.tbl.sssn_stf.hold.show_dstry=false
			end
			if red_time > API.util.t_ms() then 
				graphics.draw_marker(28, API.plyr.get.coords(API.plyr.my_id()), v3(0, 90, 0), v3(0, 90, 0), v3(g.tbl.sssn_stf.hold.dstry.value, g.tbl.sssn_stf.hold.dstry.value, g.tbl.sssn_stf.hold.dstry.value), 255, 0, 0, mth.flr((red_time-API.util.t_ms()) /1000/5*100), false, false, 2, false, nil, "MarkerTypeDebugSphere", false)
			end
		end
		f.on=false
	end)g.tbl.sssn_stf.hold.show_debug.hidden=true

	function g.tbl.sssn_stf.hold.chk(_key_name)
		local time = API.util.t_ms() + g.tbl.sssn_stf.hold.time.value
		while funcs.is.vk_key_down(_key_name) do
			system.yield(0)
			if time < API.util.t_ms() then
				return true
			end
		end
		return false
	end
	
	function g.tbl.sssn_stf.hold._do(_action,_dist)
		local all_veh,found=funcs.get.closest_vehs()
		for i=1,#all_veh do
			continue=false
			if funcs.get.dist_me_ent_3d(all_veh[i]) > _dist then
				break
			elseif funcs.is.sssn_veh_check(all_veh[i],true) then
				found=true
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local __veh,__action=all_veh[i],_action
					funcs.doo.veh_action_list(__veh,1000,__action,nil)
				end)
			end
		end
		return found
	end
	
	g.tbl.sssn_action_str={
	["god"] = "God",
	["collision"] = "Collision",
	["repair"] = "Repair",
	["damage"] = "Damage",
	["destroy"] = "Destroy",
	["health"] = "Health drop",
	["armor"] = "Armor drop",
	["anti_lock"] = "Anti-lock",
	["speed_torque"] = "Speed/torque",
	["fucked"] = "Fucks",
	["upgrades"] = "Upgrades",
	["perf"] = "Performance upgrade",
	["wheels"] = "Wheels/Tires upgrade",
	["f1"] = "F1 Wheels upgrade",
	["headlights"] = "Headlights upgrade",
	["neons"] = "Neon lights upgrade",
	["paint"] = "Paintjob upgrade",
	["livery"] = "Livery upgrade",
	["weapons"] = "Weapons upgrade",
	["upgrade_single"] = "Upgrade",
	["veh_kick"] = "Kicks",
	["remove_rotor"] = "Helicopter fuck",
	["rmv_veh_weap"] = "Weapon removal",
	["pop_tires"] = "Tire pops",
	["unpop_tires"] = "Tire repairs",
	["visible"] = "Visibilty",
	["tp"] = "Teleport",
	["tp_up"] = "Teleport",
	["tp_2_me"] = "Teleport",
	["random"] = "Teleport",
	["plyr_explodes"] = "Explosion",
	["plyr_burns"] = "Burns",
	["sparrow"] = "Sparrow drops",
	["repair_auto"] = "Auto-Repair",
	["repair_auto"] = "Auto-Repair",
	["horn_stop"] = "Horn stop",
	["horn_honk"] = "Horn honk",
	["horn_boost"] = "Horn boost",
	["flip_wrong"] = "Flip",
	["burn"] = "Burn with fire",
	["explode"] = "Explode",
	["fat_bitches"] = "Fat bitch spawns",
	["freeze"] = "Freeze/Unfreeze",
	["kick_pid_from_veh"] = "Kick player from vehicle",
	["kick_all_from_veh"] = "Kick all from vehicle",
	["best_armor"] = "Best armor",
	["worst_armor"] = "Worst armor",
	["weapons_worst"] = "Worst weapons",
	["cntrmsrs"] = "Countermeasures",
	["bombs"] = "Bombs",
	}
	
	
	function funcs.get.sssn_pid_veh_table()
		local pidtable = {}
		for pid = 0,31 do
			if funcs.doo.sssn_veh_pid_check(pid) then
				pidtable[#pidtable+1]=pid
			end
		end
		return pidtable
	end
		
	function funcs.get.sssn_pid_veh_start(_show_notif)
		if not g.feat.sssn_veh_affect_plyrs.on or
			(not g.tbl.sssn_veh_plyr_affect.frnd.on and not
			g.tbl.sssn_veh_plyr_affect.orgmc.on and not
			g.tbl.sssn_veh_plyr_affect.mddr.on and not
			g.tbl.sssn_veh_plyr_affect.others.on) then
			return nil
		end
		local pid_table = funcs.get.sssn_pid_veh_table()
		if #pid_table > 0 then
			return pid_table
		end
		if _show_notif then
			g.N_P(2,"No available players from selection.",__GV__,4,"Yellow")
		end
		return nil
	end
	
	g.tbl.sssn_pid_skip={}
	g.tbl.sssn_pid_active={}
	g.tbl.sssn_pid_count={}
	g.tbl.sssn_veh_skip={}
	g.tbl.sssn_veh_temp={}
	g.tbl.sssn_veh_count={}
	g.tbl.sssn_veh_active={}
	g.tbl.sssn_my_pos_front={}
	g.tbl.sssn_veh_bst_dly={}
	g.var.sssn_temp_cnt=0
	g.tbl.sssn_veh_not_if_dead={
	["horn_honk"] = true,
	["anti_lock"] = true,
	["horn_boost"] = true,
	["repair_auto"] = true,
	["damage"] = true,
	["destroy"] = true,
	["upgrades"] = true,
	["perf"] = true,
	["wheels"] = true,
	["f1"] = true,
	["headlights"] = true,
	["neons"] = true,
	["paint"] = true,
	["livery"] = true,
	["weapons"] = true,
	["speed_torque"] = true,
	["remove_rotor"] = true,
	["rmv_veh_weap"] = true,
	["pop_tires"] = true,
	["unpop_tires"] = true,
	}
	g.tbl.sssn_veh_should_yield = {
	["upgrades"] = true,
	["perf"] = true,
	["wheels"] = true,
	["f1"] = true,
	["headlights"] = true,
	["neons"] = true,
	["paint"] = true,
	["livery"] = true,
	["weapons"] = true,
	}
	
	
	function funcs.doo.sssn_plyr_veh_action_thread(_actn,_val,_veh,_v_actv,_cnt)
		g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
			local __actn,__val = _actn,_val
			local __veh = _veh
			local __v_actv = _v_actv
			local __cnt = _cnt
			if funcs.doo.veh_action_list(__veh,2000,__actn,__val) then
				g.tbl.sssn_veh_count[__cnt]=g.tbl.sssn_veh_count[__cnt]+1
			end
			g.tbl.sssn_veh_active[__v_actv][__veh]=false
		end)
	end
	
	function funcs.doo.sssn_plyr_veh_action_guts(f)
		local pause = false
		for i=1,#f.TBL do
			if API.plyr.is.valid(f.TBL[i]) and API.plyr.is.in_veh(f.TBL[i]) and not g.tbl.sssn_veh_temp[f.T_ACTV][API.plyr.get.veh(f.TBL[i])] then
				local veh = API.plyr.get.veh(f.TBL[i])
				if funcs.is.sssn_veh_action_chk(veh,f.ACTN,f.VAL) and funcs.is.sssn_veh_check(veh,true) then
					pause=true
					g.tbl.sssn_veh_temp[f.T_ACTV][veh]=true
					g.tbl.sssn_veh_active[f.V_ACTV][veh]=true
					funcs.doo.sssn_plyr_veh_action_thread(f.ACTN,f.VAL,veh,f.V_ACTV,f.CNT)
				end
			end
		end
		if pause then
			if f.POS then
				funcs.doo.hover_at_pos(f.POS,500)--stay at their pos to allow npc vehs to load
				funcs.doo.all_veh_action_thread_start(1000,f.ACTN,f.VAL)--affect npc vehs at their pos
				funcs.doo.hover_at_pos(f.POS,250)--give npc a little time to complete
			end
			local found = true
			while found do
				found = false
				for k,v in pairs(g.tbl.sssn_veh_active[f.V_ACTV]) do
					if v then found = true break end
				end
				if f.POS then
					API.ent.set.coords(funcs.ME._ped(), f.POS)
				end
				system.yield(10)
			end
		end
	end
	
	
	
	function funcs.doo.sssn_plyr_veh_action(_action,_val,_no_force,_show_notif)
		local pid_table = funcs.get.sssn_pid_veh_start(_show_notif)
		if pid_table then
			local action_str = (g.tbl.sssn_action_str[_action] or "Actions")
			local total = #pid_table
			g.tbl.sssn_veh_count[#g.tbl.sssn_veh_count+1]=0
			local count=#g.tbl.sssn_veh_count
			g.tbl.sssn_veh_active[#g.tbl.sssn_veh_active+1]={}
			local v_active = #g.tbl.sssn_veh_active
			if _no_force or not g.tbl.sssn_veh_plyr_affect.force.on then
				for i=1,#pid_table do
					if API.plyr.is.valid(pid_table[i]) and API.plyr.is.in_veh(pid_table[i]) then
						local _veh = API.plyr.get.veh(pid_table[i])
						if funcs.is.sssn_veh_action_chk(_veh,_action,_val) and funcs.is.sssn_veh_check(_veh,true) then
							g.tbl.sssn_veh_active[v_active][_veh]=true
							if _action == "kick_pid_from_veh" then
								funcs.doo.sssn_plyr_veh_action_thread(_action,pid_table[i],_veh,v_active,count)
							else
								funcs.doo.sssn_plyr_veh_action_thread(_action,_val,_veh,v_active,count)
							end
						end
					end
				end
			else
				g.tbl.sssn_veh_temp[#g.tbl.sssn_veh_temp+1]={}
				local t_active = #g.tbl.sssn_veh_temp
				funcs.doo.sssn_plyr_veh_action_guts({TBL = pid_table, ACTN = _action, VAL = _val, V_ACTV = v_active, T_ACTV = t_active, CNT = count}) -- do what i can without hovering
				local hover_tbl,i_hovered,pos = funcs.get.hover_info(),false,v3()
				for i=1,#pid_table do
					if API.plyr.is.valid(pid_table[i]) and funcs.get.dist_me_pid_3d(pid_table[i]) > 250 then
						i_hovered=true
						pos = funcs.doo.hover_above_pid2(pid_table[i],1500,true,false)
						funcs.doo.sssn_plyr_veh_action_guts({TBL = pid_table, ACTN = _action, VAL = _val, V_ACTV = v_active, T_ACTV = t_active, CNT = count, POS = pos})
					end
				end
				if i_hovered then
					funcs.doo.hover_back(hover_tbl)
				end
			end
			if _show_notif then
				local found = true
				while found do
					found = false
					for k,v in pairs(g.tbl.sssn_veh_active[v_active]) do
						if v then found = true break end
					end
					system.yield(10)
				end
				g.N_P(2,"Player vehicles\n"..action_str.." complete.".."\n"..g.tbl.sssn_veh_count[count].."/"..total.." successful",__GV__,5,"Blue")
			end
		end
	end

	

		
	function funcs.is.sssn_veh_check(_veh,_plyr_check)
		if funcs.is.veh(_veh) then
			local owner = decorator.decor_get_int(_veh, "Player_Vehicle")
			local has_plyr = false
			if (funcs.ME._net_hash() == owner) or (funcs.ME._veh() == _veh) then --check if its mine
				return false
			elseif API.veh.get.been_owned(_veh) and (not g.feat.sssn_veh_affect_plyrs.on or not _plyr_check) then --check for street/npc 
				return false
			end
			if not _plyr_check then
				return true
			end
			if owner > 0 then --street vehicles have 0, spawned vehicles can have 1024 or similar. Real net hashes are maybe 7-8 digits
				for i=1,32 do
					if g.tbl.PID_INFO.net_hash[i]==owner then --look for owner of the vehicle
						if not g.tbl.sssn_veh_plyr_affect.pers.on or not funcs.doo.sssn_veh_pid_check(i-1) then --check for affect personal and if owner should be affected
							return false
						end
						has_plyr = true
						break
					end
				end
			end
			for i = 1,funcs.get.veh_seats(_veh) do
				if API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, i-2)) then
					if not funcs.doo.sssn_veh_pid_check(API.plyr.get.plyr_from_ped(API.veh.get.ped_in_seat(_veh, i-2))) then --check each pid in the vehicle
						return false
					end
					has_plyr = true
				end
			end
			if not API.veh.get.been_owned(_veh) and not has_plyr then --been_owned and has_plyr should always match but whatever
				return  g.feat.sssn_veh_affect_npc_street.on --check if i want to affect street vehicles
			end
			return true
		end
		return false
	end
	
	function funcs.doo.sssn_veh_pid_check(_pid)
		if not API.plyr.is.valid(_pid) or _pid == funcs.ME._id() then
			return false
		end
		local friend = API.plyr.is.friend(_pid)
		if friend and not g.tbl.sssn_veh_plyr_affect.frnd.on then
			return false
		end
		local mddr = API.plyr.is.modder(_pid, -1)
		if mddr and not g.tbl.sssn_veh_plyr_affect.mddr.on then
			return false
		end
		local orgmc = funcs.is.same_orgmc(funcs.ME._id(),_pid)
		if orgmc and not g.tbl.sssn_veh_plyr_affect.orgmc.on then
			return false
		end
		if not friend and not mddr and not orgmc and not g.tbl.sssn_veh_plyr_affect.others.on then
			return false
		end
		return true
	end
	
	g.print_load_info("Session vehicle actions",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
		
	-----------------------------------------------------------------------------------------GEE-SKID
	--------------------------------------------------------------------------------------PlayersPeds
	--------------------------------------------------------------------------------------------Local
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	g.tbl.pid_stf = {}
	
	g.tbl.pid_stf.set_wanted = menu.add_feature("Set wanted level", "value_i",g.prnt.sssn_plyrs.id, function(f)
		while f.on do
			for i=0,31 do
				if funcs.doo.sssn_plyr_pid_check(i) and API.plyr.get.wanted(i) ~= f.value then
					funcs.doo.wntd(i,f.value)
				end
			end
			system.yield(250)
		end
	end)
	funcs.set_feat_i_f(g.tbl.pid_stf.set_wanted,0,5,1,0,"g.tbl.pid_stf.set_wanted")
	

	
	g.tbl.pid_stf.explode=menu.add_feature(">> Explode players","action_value_str",g.prnt.sssn_plyrs.id,function(f)
		funcs.doo.sssn_plyr_pid_action("explode",81,10,f.value==0,false,true,true,true)
	end)
	g.tbl.pid_stf.explode:set_str_data({"Blame me","Blame them"})
	funcs.add_to_S_L(g.tbl.pid_stf.explode,"g.tbl.pid_stf.explode")
	
	g.tbl.pid_stf.burn=menu.add_feature(">> Burn players","action_value_str",g.prnt.sssn_plyrs.id,function(f)
		funcs.doo.sssn_plyr_pid_action("burn",3,10,f.value==0,false,true,true,true)
	end)
	g.tbl.pid_stf.burn:set_str_data({"Blame me","Blame them"})
	funcs.add_to_S_L(g.tbl.pid_stf.burn,"g.tbl.pid_stf.burn")
	
	g.tbl.pid_stf.sparrow=menu.add_feature(">> Drop sparrows","action_value_str",g.prnt.sssn_plyrs.id,function(f)
		funcs.doo.sssn_plyr_pid_action("sparrow",nil,(f.value*9)+1,nil,false,true,true,true)
	end)
	g.tbl.pid_stf.sparrow:set_str_data({"One", "Many"})
	funcs.add_to_S_L(g.tbl.pid_stf.sparrow,"g.tbl.pid_stf.sparrow")
	
	g.tbl.pid_stf.fat_bitches=menu.add_feature("Spawn angry fat bitch", "action_value_str", g.prnt.sssn_plyrs.id, function(f) 
		local t = {"bmx","deathbike2","toreador","rhino","phantom2","strikeforce","buzzard","foot"}
		funcs.doo.sssn_plyr_pid_action("fat_bitches",t[f.value+1],1,nil,false,true,true,true)
	end)
	g.tbl.pid_stf.fat_bitches:set_str_data({"On bicycle","On motorcycle","In toreador","In Rhino","In Phantom Wedge","In B-11 Strikeforce","In Buzzard","On foot"})
	funcs.add_to_S_L(g.tbl.pid_stf.fat_bitches,"g.tbl.pid_stf.fat_bitches")
			
	g._all_plyr_ammo_weap=menu.add_feature("All weapons","action_value_str",g.prnt.sssn_plyrs.id,function(f)
		local pid_table = funcs.get.sssn_pid_plyr_table(false,false)
		if #pid_table == 0 then
			g.N_P(2,"No available players from selection.",__GV__,4,"Yellow")
		else
			g.tbl.sssn_pid_active[#g.tbl.sssn_pid_active+1]={}
			local active = #g.tbl.sssn_pid_active
			g.tbl.sssn_pid_count[active]=0
			local f_value = f.value
			for i=1,#pid_table do
				if API.plyr.is.valid(pid_table[i]) then --and g.tbl.PID_INFO.plyr_play[pid_table2[i]+1] then
					local pid = pid_table[i]
					g.tbl.sssn_pid_active[active][pid]=true
					g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
						local _active = active 
						local _pid = pid
						local _f_value = f_value
						local success=false
						if _f_value == 1 then
							menu.get_feature_by_hierarchy_key("online.online_players.player_".._pid..".weapons.remove_all_weapons"):toggle()
							success=true
						else
							for i=1,#weap_info.all_hash do
								if funcs.doo.give_ped_weap2(API.plyr.get.ped(_pid),weap_info.all_hash[i]) then
									success=true
								end
							end
						end
						if success then
							g.tbl.sssn_pid_count[_active]=g.tbl.sssn_pid_count[_active]+1
						end
						g.tbl.sssn_pid_active[_active][_pid]=false
					end)
					system.yield(69)
				end
			end
			local found,a_count = true,0
			while found do
				found = false
				a_count=0
				for k,v in pairs(g.tbl.sssn_pid_active[active]) do
					if v then
						found = true
						a_count=a_count+1
					end
				end
				system.yield(5)
				if f.value == 0 then
					funcs.doo.overlay((#pid_table-g.tbl.sssn_pid_count[active]).." players remaining...",255,255,255,255,0.25,0,0.5,0.97)
				end
			end
			g.N_P(2,"Weapons complete.".."\n"..g.tbl.sssn_pid_count[active].."/"..#pid_table.." successful",__GV__,5,"Blue")
		end
	end)
	g._all_plyr_ammo_weap:set_str_data({"Give","Remove"})
	
	-----------------------------------------------------------------------------------------GEE-SKID
	---------------------------------------------------------------------------------------PlayersVeh
	--------------------------------------------------------------------------------------------Local
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------------
	
function funcs.doo.all_veh_action_thread_start(time,action,val,notif)
	if g.feat.sssn_veh_affect_npc_street.on then
		local all_veh=API.veh.get.all()
		local action_str = (g.tbl.sssn_action_str[action] or "Actions")
		g.tbl.sssn_veh_count[#g.tbl.sssn_veh_count+1]=0
		local count=#g.tbl.sssn_veh_count
		g.tbl.sssn_veh_active[#g.tbl.sssn_veh_active+1]={}
		local active = #g.tbl.sssn_veh_active
		local total=0
		for i=1,#all_veh do
			if not g.tbl.sssn_veh_skip[all_veh[i]] and funcs.is.sssn_veh_check(all_veh[i],false) and funcs.is.sssn_veh_action_chk(all_veh[i],action,val) then
				local veh = all_veh[i]
				g.tbl.sssn_veh_skip[veh]=true
				g.tbl.sssn_veh_active[active][veh]=true
				total=total+1
				g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
					local _veh,_time,_action,_val,_count,_active = veh,time,action,val,count,active
					if funcs.doo.veh_action_list(_veh,_time,_action,_val) then
						g.tbl.sssn_veh_count[_count]=g.tbl.sssn_veh_count[_count]+1
					end
					g.tbl.sssn_veh_skip[_veh]=false
					g.tbl.sssn_veh_active[_active][_veh]=false
				end)
				if g.tbl.sssn_veh_should_yield[action] then --upgrades like to crash
					system.yield(0)
				elseif i % 50 == 0 then
					system.yield(10)
				end
			end
		end
		if notif then
			local found = true
			while found do
				found = false
				for k,v in pairs(g.tbl.sssn_veh_active[active]) do
					if v then found = true break end
				end
				system.yield(10)
			end
			g.N_P(2,"Ped/Empty vehicles\n"..action_str.." complete.".."\n"..g.tbl.sssn_veh_count[count].."/"..total.." successful",__GV__,5,"Blue")
		end
		return true
	end
	return false
end
	
function funcs.doo.spawn_veh(_pos,_hash,_upgrade,_heading,_keep,_ntwrk,_cllsn)
	_ntwrk = _ntwrk or true
	_upgrade = _upgrade or false
	_heading = _heading or mth.rndm(0,359)
	local _veh = vehicle.create_vehicle(_hash, _pos+v3(0,0,100), 0.0, _ntwrk, false)
	if not funcs.is.veh(_veh) then
		funcs.N_P(2,"Failed to create "..tostring(veh_stuff.hash_is_name[_hash]).."\nPossibly at max spawn limit.",funcs.ver_text,4,"Red")
	else
		if _keep then
			funcs.doo.id_migrate(_veh,0)
		end
		if _cllsn then
			API.ent.set.collision(_veh,false)
		end
		API.ent.set.heading(_veh,_heading)
		API.ent.set.coords(_veh, _pos)
		API.veh.set.on_ground(_veh)
		if _upgrade then
			funcs.doo.veh_action_list(_veh,1000,"upgrades",nil)
		end
		decorator.decor_set_int(_veh, "MPBitset", 1 << 10)
		API.veh.set.fixed(_veh)
		ntv.set.veh_dirt_level(_veh,0.0)
		API.veh.set.engine_on(_veh, true, true, false)
		g.tbl.spwn.history[#g.tbl.spwn.history+1]=_veh
		return _veh
	end
	return nil
end

				
function funcs.doo.spawn_ped_angry(_pos,_model_hash,_weapon_hash1,_weapon_hash2,_pid,_veh)
	local _ped
	local _seat = funcs.get.veh_1st_free_seat(_veh)
	if _seat then
		_ped=ntv.doo.create_ped_in_veh(_veh,6,_model_hash,_seat,1,0)
	elseif _pos then
		_ped=API.Ped.create(6, _model_hash,_pos, mth.rndm(0,359), true, false)
	end
	if funcs.is.ent(_ped) then
		funcs.doo.id_migrate(_ped,0)
		ntv.set.ped_no_high_fall_damage(_ped,1)
		if _weapon_hash1 then
			funcs.doo.give_ped_weap(_ped,_weapon_hash1)
		end
		if _weapon_hash2 then
			funcs.doo.give_ped_weap(_ped,_weapon_hash2)
		end
		funcs.doo.ped_combat_attrib(_ped,true)
		funcs.doo.set_ped_health(_ped,2500,50)
		ntv.set.ped_critical_dmg(_ped,0)
		if _pid ~= nil then
			gameplay.shoot_single_bullet_between_coords(_pos, _pos + v3(0,0,.25), 0, API.get_hash_key("weapon_pistol"), API.plyr.get.ped(_pid), false, true, 100)
			ai.task_combat_ped(_ped, API.plyr.get.ped(_pid), 0, 16)
		end
		funcs.doo.ped_ragdoll(_ped,false,50)
		g.tbl.entities[#g.tbl.entities+1]=_ped
	end
	return _ped
end

function funcs.doo.spawn_veh_at_pid(_pid,_hash,_upgrade,_cam)
	_upgrade = _upgrade or false
	_cam = _cam or false
	if funcs.is.valid_pid(_pid) then
		local _veh = vehicle.create_vehicle(_hash, funcs.get.pid_pos_z_guess(_pid)+v3(0,0,100), 0.0, true, false)
		if not funcs.is.veh(_veh) then
			funcs.N_P(2,"Failed to create "..tostring(veh_stuff.hash_is_name[_hash]).."\nPossibly at max spawn limit.",funcs.ver_text,4,"Red")
		else
			if _cam then
				API.ent.set.heading(_veh,API.cam.get.rot().z)
				API.ent.set.coords(_veh, funcs.get.front_of_pos(funcs.get.pid_pos_z_guess(_pid), API.cam.get.rot().z, funcs.get.spawn_front_dist(_pid,_veh), 184, 1.5))
			else
				API.ent.set.heading(_veh,API.plyr.get.heading(_pid))
				API.ent.set.coords(_veh, funcs.get.front_of_pos(funcs.get.pid_pos_z_guess(_pid), API.plyr.get.heading(_pid), funcs.get.spawn_front_dist(_pid,_veh), 184, 1.5))
			end
			API.veh.set.on_ground(_veh)
			if _upgrade then
				funcs.doo.veh_action_list(_veh,1000,"upgrades",nil)
			end
			decorator.decor_set_int(_veh, "MPBitset", 1 << 10)
			API.veh.set.fixed(_veh)
			ntv.set.veh_dirt_level(_veh,0.0)
			API.veh.set.engine_on(_veh, true, true, false)
			g.tbl.spwn.history[#g.tbl.spwn.history+1]=_veh
			return _veh
		end
	end
	return nil
end


	function funcs.is.should_horn_boost(_veh)
		if not ntv.is.veh_alarm_on(_veh) and ntv.is.veh_horn_on(_veh) then
			if g.tbl.sssn_veh_bst_dly[_veh] == nil then
				return true
			elseif g.tbl.sssn_veh_bst_dly[_veh] < API.util.t_ms() then
				return true
			end
		end
		return false
	end
	
	function funcs.is.sssn_veh_action_chk(_veh,_action,_val)
		if g.tbl.unaffected_ents[_veh] or (g.tbl.sssn_veh_not_if_dead[_action] and API.ent.is.dead(_veh)) then
			return false
		elseif _action == "horn_honk" and ntv.is.veh_horn_on(_veh) then
			return false
		elseif _action == "horn_stop" and not ntv.is.veh_horn_on(_veh) then
			return false
		elseif _action == "air_down" and not API.ent.is.in_air(_veh) then
			return false
		elseif _action == "ground_up" and API.ent.is.in_air(_veh) then
			return false
		elseif _action == "god" and API.ent.get.god(_veh) == _val then
			return false
		elseif _action == "remove_rotor" and not funcs.is.helo(_veh) then
			return false
		elseif _action == "rmv_veh_weap" and not ntv.is.veh_have_weap(_veh) then
			return false
		elseif _action == "weapons" and not ntv.is.veh_have_weap(_veh) then
			return false
		elseif _action == "weapons_worst" and not ntv.is.veh_have_weap(_veh) then
			return false
		elseif _action == "visible" and API.ent.is.visible(_veh) == _val  then
			return false
		elseif _action == "repair_auto" and funcs.get.veh_cmbnd_health_prcnt(_veh,true) > _val then
			return false
		elseif _action == "horn_boost" and not funcs.is.should_horn_boost(_veh) then
			return false
		elseif _action == "livery" and API.veh.get.num_mods(_veh, 48) == 0 then
			return false
		elseif _action == "cntrmsrs" and not veh_stuff.has_cntrmsrs[API.ent.get.model_hash(_veh)] then
			return false
		elseif _action == "bombs" and not veh_stuff.has_bombs[API.ent.get.model_hash(_veh)] then
			return false
		elseif _action == "window_smash" and ntv.get.num_windows_good(_veh) == 0 then
			return false
		elseif _action == "window_repair" and ntv.is.windows_good(_veh) then
			return false
		end
		return true
	end
	
function funcs.doo.veh_action_list(_veh,_time,_action,_val,_num)
	if _action == "window_smash" and ntv.get.num_windows_good(_veh) > 0 and funcs.ntwrk.ask_long(_veh,_time) then
		ntv.set.veh_invncbl_wndws(_veh, 0)
		ntv.doo.brk_veh_wndws(_veh)
		return true
	elseif _action == "window_repair" and not ntv.is.windows_good(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		ntv.doo.fix_veh_wndws(_veh)
		return true
	elseif _action == "window_invncbl" and funcs.ntwrk.ask_long(_veh,_time) then
		if not ntv.is.windows_good(_veh) then
			ntv.doo.fix_veh_wndws(_veh)
		end
		API.veh.set.kit_type(_veh, 0)
		ntv.set.veh_invncbl_wndws(_veh, _val)
		return true
	elseif _action == "random_force" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		local _25 = math.tointeger(math.floor(_val/2.5))
		local _5 = math.tointeger(math.floor(_val/5))
		if API.ent.is.in_air(_veh) then
			entity.apply_force_to_entity(_veh, 1,mth.rndm(-_val*_val,_val*_val), mth.rndm(-_val*_val,_val*_val),mth.rndm(-_25,-_5) , 0,0,0, false, true)
			--API.ent.set.velocity(_veh,v3(mth.rndm(-_val,_val),mth.rndm(-_val,_val),mth.rndm(-(_val/2.5),-(_val/5))))
		else
			entity.apply_force_to_entity(_veh, 1,mth.rndm(-_val*_val,_val*_val), mth.rndm(-_val*_val,_val*_val),mth.rndm(_5,_25), 0,0,0, false, true)
			--API.ent.set.velocity(_veh,v3(mth.rndm(-_val,_val),mth.rndm(-_val,_val),mth.rndm((_val/5),(_val/2.5))))
		end
		return true
	elseif _action == "horn_honk" and not ntv.is.veh_horn_on(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		ntv.set.veh_horn_on(_veh,5000,API.get_hash_key("HELDDOWN"),1)
		return true
	elseif _action == "anti_lock" and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.be_locked_on(_veh, _val, true)
		return true
	elseif _action == "horn_stop" and ntv.is.veh_horn_on(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		ntv.set.veh_horn_on(_veh,0,0,0)
		return true
	elseif _action == "horn_boost" and funcs.is.should_horn_boost(_veh) then
		g.tbl.sssn_veh_bst_dly[_veh]=API.util.t_ms()+g.tbl.sssn_stf.hrn_bst_delay.value
		if funcs.ntwrk.ask_long(_veh,_time) then
			API.ent.set.max_speed(_veh,45000)
			local initial = g.tbl.sssn_stf.hrn_bst_initial.value
			local speed = API.ent.get.speed(_veh)
			speed = speed + (initial*3+(initial*40*_val)-(initial*0.02*speed))
			speed = speed * (1.01+_val)
			API.veh.set.forward_speed(_veh,speed)
			return true
		end
	elseif _action == "repair" then
		if funcs.doo.veh_repair_most(_veh,_time,funcs.plate_t_or_nil(),funcs.plate_i_or_nil()) then
			local veh_peds = funcs.get.all_peds_in_veh(__ent,false,nil)
			for i=1, #veh_peds do
				fire.stop_entity_fire(veh_peds[i])
			end
			return true
		end
	elseif _action == "repair_auto" and funcs.get.veh_cmbnd_health_prcnt(_veh,true) < _val then
		if funcs.doo.veh_repair_most(_veh,_time,funcs.plate_t_or_nil(),funcs.plate_i_or_nil()) then
			return true
		end
	elseif _action == "damage" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_damage_guts(_veh)
		return true
	elseif _action == "destroy" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_destroy_guts(_veh, funcs.get.veh_ped_for_blame(_veh))
		return true
	elseif _action == "fucked" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		funcs.doo.veh_superfuck(_veh)
		return true
	elseif _action == "upgrades" then
		local _1_basics,_2_perf,_3_wheels,_4_lights,_5_paint,_6_livery,_7_weap,upgraded = false,false,false,false,false,false,false,false
		local speed = API.ent.get.velocity(_veh)
		local time = API.util.t_ms() + (_time*0.85)
		while funcs.is.veh(_veh) and (API.util.t_ms() < time) and not upgraded do
			system.yield(0)
			if not _1_basics and funcs.ntwrk.ask_quick(_veh) then
				API.veh.set.kit_type(_veh, 0)
				funcs.doo.veh_upgr_basic(_veh)
				_1_basics=true
			elseif _1_basics and not _2_perf and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_upgr_perf(_veh)
				_2_perf=true
			elseif _2_perf and not _3_wheels and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_upgr_wheels(_veh)			
				_3_wheels=true
			elseif _3_wheels and not _4_lights and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_upgr_lights(_veh,"random")
				funcs.doo.veh_upgr_neons(_veh,"random")
				_4_lights=true
			elseif _4_lights and not _5_paint and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_upgr_paint(_veh,"random")
				_5_paint=true
			elseif _5_paint and not _6_livery and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_upgr_livery(_veh)
				_6_livery=true
			elseif _6_livery and not _7_weap and funcs.ntwrk.ask_quick(_veh) then
				funcs.doo.veh_weap_best(_veh)
				funcs.doo.veh_upgr_bombs(_veh)
				funcs.doo.veh_upgr_cntrmsrs(_veh)
				system.yield(50)
				_7_weap=true
			elseif _7_weap and not upgraded and funcs.ntwrk.ask_quick(_veh) then
				if g.tbl.plate_rpr_upgr.style_tog.on then
					API.veh.set.plate_index(_veh, g.tbl.plate_rpr_upgr.style_tog.value)
				end
				if g.tbl.plate_rpr_upgr.tog.on then
					API.veh.set.plate_text(_veh,g.tbl.plate_rpr_upgr.text)
				end
				API.ent.set.velocity(_veh,speed)
				upgraded=true
			end
		end
		return upgraded
	elseif _action=="perf" and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_perf(_veh)
		return true
	elseif (_action=="wheels" or _action=="f1") and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_wheels(_veh,_action)	
		return true
	elseif _action=="headlights" and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_lights(_veh,_val)
		return true
	elseif _action=="neons" and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_neons(_veh,_val)
		return true
	elseif _action=="paint" and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_paint(_veh,_val)
		return true
	elseif _action=="livery" and API.veh.get.num_mods(_veh, 48) == 0 and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_upgr_livery(_veh)
		return true
	elseif _action=="weapons" and ntv.is.veh_have_weap(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.kit_type(_veh, 0)
		funcs.doo.veh_weap_best(_veh)
		funcs.doo.veh_upgr_bombs(_veh)
		funcs.doo.veh_upgr_cntrmsrs(_veh)
		return true
	elseif _action=="weapons_worst" and ntv.is.veh_have_weap(_veh) and funcs.ntwrk.ask_long(_veh,_time) then		
		funcs.doo.veh_weap_worst(_veh)
		return true
	elseif _action == "best_armor" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_armor_best(_veh)
		return true
	elseif _action == "worst_armor" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_armor_worst(_veh)
		return true
	elseif _action == "veh_kick" and funcs.doo.kick_all_from_veh(_veh) then
		return true
	elseif _action == "flip_wrong" and funcs.ntwrk.ask_long(_veh,_time) then
		local speed = API.ent.get.velocity(_veh)
		API.ent.set.rotation(_veh,v3(API.ent.get.rotation(_veh).x,180,API.ent.get.rotation(_veh).z))
		API.ent.set.velocity(_veh,speed)
		return true
	elseif _action == "flip_right" and funcs.ntwrk.ask_long(_veh,_time) then
		local speed = API.ent.get.velocity(_veh)
		API.veh.set.on_ground(_veh)
		API.ent.set.velocity(_veh,speed)
		return true
	elseif _action == "stop" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.velocity(_veh,v3(0,0,0))
		return true
	elseif _action == "zoom_zoom" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		API.veh.set.forward_speed(_veh,_val)
		return true
	elseif _action == "float" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		API.ent.set.velocity(_veh,v3(0,0,_val))
		return true
	elseif _action == "air_down" and API.ent.is.in_air(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		API.ent.set.velocity(_veh,v3(0,0,_val))
		return true
	elseif _action == "ground_up" and not API.ent.is.in_air(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,45000)
		API.ent.set.velocity(_veh,v3(0,0,_val))
		return true
	elseif _action == "gravity" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.gravity(_veh, _val)
		return true
	elseif _action == "collision" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.collision(_veh, _val,false)
		return true
	elseif _action == "god" and API.ent.get.god(_veh) ~= _val and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.god(_veh, _val)
		return true
	elseif _action == "speed_torque" and funcs.ntwrk.ask_long(_veh,_time) then
		if _val < 1 then
			API.ent.set.max_speed(_veh,_val*125)
		else
			API.ent.set.max_speed(_veh,45000)
		end
		API.veh.set.top_speed(_veh, (_val - 1) * 100)
		return true
	elseif _action == "freeze" and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.max_speed(_veh,_val)
		return true
	elseif _action == "remove_rotor" and funcs.is.helo(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.extra(_veh, 1, 0)
		API.veh.set.extra(_veh, 2, 0)
		API.veh.set.extra(_veh, 7, 0)
		return true
	elseif _action == "rmv_veh_weap" and ntv.is.veh_have_weap(_veh) and funcs.ntwrk.ask_long(_veh,_time) then
		ntv.doo.rmv_veh_weap(_veh)
		return true
	elseif _action == "pop_tires" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_tire_pop_guts(_veh,true)
		return true
	elseif _action == "unpop_tires" and funcs.ntwrk.ask_long(_veh,_time) then
		funcs.doo.veh_tire_pop_guts(_veh,false)
		return true
	elseif _action == "visible" and API.ent.is.visible(_veh) ~= _val and funcs.ntwrk.ask_long(_veh,_time) then
		API.ent.set.visible(_veh,_val)
		return true
	elseif (_action == "tp" or _action == "tp_up" or _action == "tp_2_me") and funcs.ntwrk.ask_long(_veh,_time*0.85) then
		local speed = v3(0,0,0)
		if _action == "tp" then
			local pos = funcs.get.rand_tp_pos(_val)
			speed = API.ent.get.velocity(_veh)
			if pos then
				API.ent.set.coords(_veh,pos)
			else
				API.ent.set.coords(_veh,_val)
			end
		elseif _action == "tp_up" then
			speed = API.ent.get.velocity(_veh)
			local pos =  API.ent.get.coords(_veh)
			pos.z=pos.z+_val
			API.ent.set.coords(_veh,pos)
		elseif _action == "tp_2_me" then
			API.ent.set.coords(_veh,g.tbl.sssn_my_pos_front[_val][mth.rndm(1,200)])
		end
		system.yield(50)
		if funcs.ntwrk.ask_long(_veh,100) then
			API.ent.set.velocity(_veh,speed)
		end			
		return true		
	elseif _action == "kick_pid_from_veh" and funcs.doo.pid_veh_kick2(_veh, _val) then
		return true
	elseif _action == "kick_all_from_veh" and funcs.doo.kick_all_from_veh(_veh,false) then
		return true
	elseif _action == "kick_all_npc_from_veh" then
		local empty_veh = true
		for i=1,funcs.get.veh_seats(_veh) do
			if funcs.is.ent(API.veh.get.ped_in_seat(_veh, i-2)) and not API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, i-2)) then
				API.Ped.clear_tasks(API.veh.get.ped_in_seat(_veh, i-2))
				empty_veh=false
			end
		end
		if empty_veh then
			return true
		end
		local found_npc = false
		system.yield(500)
		for i=1,funcs.get.veh_seats(_veh) do
			if funcs.is.ent(API.veh.get.ped_in_seat(_veh, i-2)) and not API.Ped.is.plyr(API.veh.get.ped_in_seat(_veh, i-2)) then
				found_npc = true
			end
		end
		return (not found_npc)
	elseif _action == "cntrmsrs" and veh_stuff.has_cntrmsrs[API.ent.get.model_hash(_veh)] and funcs.ntwrk.ask_long(_veh,_time) then
		if funcs.is.this_veh(_veh,"oppressor2") then
			API.veh.set.mod(_veh, 6, _val)
		else
			API.veh.set.mod(_veh, 1, _val)
		end
		return true
	elseif _action == "bombs" and veh_stuff.has_bombs[API.ent.get.model_hash(_veh)] and funcs.ntwrk.ask_long(_veh,_time) then
		API.veh.set.mod(_veh, 9, _val)
		return true
	elseif _action == "clone" and funcs.doo.clone_veh_for_me(_veh,_val,_num) then
		return true
	end
	return false
end

function funcs.doo.veh_superfuck(_veh)
	funcs.doo.veh_fuck_guts(_veh)
	local trgt_crds_do
	local time = API.util.t_ms() + 10000
	while funcs.is.ent(_veh) and time > API.util.t_ms() do
		trgt_crds_do = g.tbl.a_b.get_movement(API.ent.get.coords(_veh)+v3(mth.rndm(-100,100),mth.rndm(-100,100),-100),API.ent.get.coords(_veh),69)
		if API.ent.is.dead(_veh) then
			time = API.util.t_ms()
		elseif funcs.ntwrk.ask_quick(_veh) then
			API.ent.set.god(_veh, false)
			API.ent.set.velocity(_veh,trgt_crds_do)
		end
		system.yield(10)
	end
end

function funcs.get.rand_tp_pos(_type)
	if _type == "water" or _type == "land" or _type == "anywhere" then
		return funcs.get.random_pos(_type,nil,nil)
	elseif _type == "ocean_high" then
		local ocean = mth.rndm(0,3)
		if ocean == 0 then
			return v3(mth.rndm(1230, 1250), mth.rndm(10200, 10220), 2200) -- ocean north
		elseif ocean == 1 then
			return v3(mth.rndm(410, 430), mth.rndm(-7820, -7800), 2200) -- ocean south
		elseif ocean == 2 then
			return v3(mth.rndm(7930, 7950), mth.rndm(2180, 2200), 2200) -- ocean east
		end
		return v3(mth.rndm(-7980, -7960), mth.rndm(1880, 1900), 2200) -- ocean west
	elseif _type == "chiliad_high" then
		return v3(mth.rndm(487, 497), mth.rndm(5582, 5592), 2200)
	elseif _type == "city_high" then
		return v3(mth.rndm(-1000, 850), mth.rndm(-1600, 130), 2200)
	elseif _type == "maze_glitch" then
		return v3(mth.rndm(-82, -67), mth.rndm(-825, -812), mth.rndm(312, 317))
	elseif _type == "fib_top" then
		return v3(mth.rndm(129,142),mth.rndm(-754,-743),mth.rndm(259,261))
	elseif _type == "apt_glitch" then
		return v3(mth.rndm(-799, -757),mth.rndm(318, 338),mth.rndm(107, 127))
	end
	return nil
end

function funcs.get.vehicle_player(_veh)
	local seats =  vehicle.get_vehicle_model_number_of_seats(entity.get_entity_model_hash(_veh))
	for s=-1,(seats-2) do
		local PED = vehicle.get_ped_in_vehicle_seat(_veh, s)
		if ped.is_ped_a_player(PED) then
			return player.get_player_from_ped(PED)
		end
	end
	for s=-1,(seats-2) do
		local PED = ntv.get.last_ped_in_seat(_veh,s)
		if ped.is_ped_a_player(PED) then
			return player.get_player_from_ped(PED)
		end
	end
	return -1
end


	g.feat.fuck_mors=menu.add_feature("Fuck Mors Mutual","value_str",g.prnt.sssn_vehs.id,function(f)
		local hash_is_pid,pos
		local dmgd = {}
		while f.on do
			hash_is_pid={}
			for pid=0,31 do
				if funcs.doo.sssn_veh_pid_check(pid) then
					hash_is_pid[network.network_hash_from_player(pid)]=pid
				end
			end
			for k,v in pairs(API.veh.get.all()) do
				if not API.ent.is.dead(v) and (f.value == 1 or not dmgd[v]) then
					if hash_is_pid[decorator.decor_get_int(v, "Player_Vehicle")] and funcs.get.vehicle_player(v) == -1 then --if its their personal veh and no one's been in yet
						if funcs.is.v2_in_range(API.ent.get.coords(v),-250,-4,-1220,-1137) then -- if its in the mors depot area
							if funcs.ntwrk.ask_long(v,1000) then
								funcs.doo.veh_damage_guts(v)
								if f.value==0 then
									dmgd[v]=true
								else
									fire.add_explosion(API.ent.get.coords(v), 0, true, false, 0, v)
								end
							end
						end
					end
				end
			end
			

			system.yield(500)
		end
	end)
	g.feat.fuck_mors:set_str_data({"Damage","Destroy"})
	g.feat.fuck_mors.hint="Any personal vehicle (friend/org/modder selected) that is claimed through Mors Mutual and is sitting at the depot will be destroyed."

	
	g.tbl.veh_near = {}
	g.tbl.veh_near.stop_zoom=menu.add_feature("Nearby Vehicles stop/zoom","value_str",g.prnt.sssn_vehs.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"zoom_zoom",f.value*200)
			funcs.doo.sssn_plyr_veh_action("zoom_zoom",f.value*200,true)
			system.yield(25)
		end
	end)
	g.tbl.veh_near.stop_zoom:set_str_data({"Stop","Zoom Zoom"})
	
-------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.float=menu.add_feature("Nearby Vehicles float","value_str",g.prnt.sssn_vehs.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"float",f.value+25+(f.value*174))
			funcs.doo.sssn_plyr_veh_action("float",f.value+25+(f.value*174),true)
			system.yield(250)
		end
	end)
	g.tbl.veh_near.float:set_str_data({"Gently","YEET"})
	
-------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.go_down=menu.add_feature("Nearby Vehicles in air go down","value_str",g.prnt.sssn_vehs.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"air_down",(f.value+25+(f.value*174))*-1)
			funcs.doo.sssn_plyr_veh_action("air_down",(f.value+25+(f.value*174))*-1,true)
			system.yield(250)
		end
	end)
	g.tbl.veh_near.go_down:set_str_data({"Gently","YEET"})
	
-------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.go_up=menu.add_feature("Nearby Vehicles on ground go up","value_str",g.prnt.sssn_vehs.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"ground_up",f.value+25+(f.value*174))
			funcs.doo.sssn_plyr_veh_action("ground_up",f.value+25+(f.value*174),true)
			system.yield(250)
		end
	end)
	g.tbl.veh_near.go_up:set_str_data({"Gently","YEET"})

-------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.gravity=menu.add_feature("Gravity","value_str",g.prnt.sssn_vehs.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"gravity",f.value==0)
			funcs.doo.sssn_plyr_veh_action("gravity",f.value==0,true)
			system.yield(250)
		end
	end)
	g.tbl.veh_near.gravity:set_str_data({"Give","Remove"})

-------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.auto_repair=menu.add_feature("Auto-repair if less than %","value_i",g.prnt.sssn_vehs.id,function(f, pid)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"repair_auto",f.value)
			funcs.doo.sssn_plyr_veh_action("repair_auto",f.value,true)
			system.yield(250)
		end
	end)
	funcs.set_feat_i_f(g.tbl.veh_near.auto_repair,50,100,5,75)
	
	--------------------------------------------------------------------------------------------------------------------------------------------
	g.tbl.sssn_stf.hrn_bst_feat=menu.add_feature("Horn-boost","slider",g.tbl.sssn_stf.hrn_bst.id,function(f)
		while f.on do
			funcs.doo.all_veh_action_thread_start(1000,"horn_boost",f.value)
			funcs.doo.sssn_plyr_veh_action("horn_boost",f.value,true)
			system.yield(25)
		end
	end)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hrn_bst_feat,0,.1,.01,.01)
	
	g.tbl.sssn_stf.hrn_bst_delay=menu.add_feature("Boost delay","action_value_i",g.tbl.sssn_stf.hrn_bst.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hrn_bst_delay,25,1000,25,75)
	
	g.tbl.sssn_stf.hrn_bst_initial=menu.add_feature("Initial boost","action_value_f",g.tbl.sssn_stf.hrn_bst.id)
	funcs.set_feat_i_f(g.tbl.sssn_stf.hrn_bst_initial,.5,3,.1,1)
	
	g.tbl.sssn_stf.hrn_hnk=menu.add_feature("Honk horn","action_value_str",g.tbl.sssn_stf.hrn_bst.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,"horn_"..string.lower(f.str_data[f.value+1]),f.value,true)
		funcs.doo.sssn_plyr_veh_action("horn_"..string.lower(f.str_data[f.value+1]),f.value,false,true)
	end)
	g.tbl.sssn_stf.hrn_hnk:set_str_data({"Honk","Stop"})	
		
----------------------------------------------------------------------------------------------------------------------------------
	g.tbl.veh_near.health=menu.add_feature(">> Vehicle health","action_value_str",g.prnt.sssn_vehs.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,f.str_data[f.value+1]:lower(),nil,true)
		funcs.doo.sssn_plyr_veh_action(f.str_data[f.value+1]:lower(),nil,false,true)
	end)			
	g.tbl.veh_near.health:set_str_data({"Repair","Damage","Destroy"})

	g.tbl.veh_near.collision=menu.add_feature(">> Vehicle Collision","action_value_str",g.prnt.sssn_vehs.id,function(f, pid) 
		funcs.doo.all_veh_action_thread_start(1000,"collision",f.value==0,true)
		funcs.doo.sssn_plyr_veh_action("collision",f.value==0,false,true)
	end)			
	g.tbl.veh_near.collision:set_str_data({"Give","Remove"})

	g.tbl.sssn_stf.veh_god2=menu.add_feature(">> Vehicle God","action_value_str",g.prnt.sssn_vehs.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,"god",f.value==0,true)
		funcs.doo.sssn_plyr_veh_action("god",f.value==0,false,true)
	end)			
	g.tbl.sssn_stf.veh_god2:set_str_data({"Give","Remove"})

	g.tbl.sssn_stf.veh_no_lock2=menu.add_feature(">> Missile anti-lock","action_value_str",g.prnt.sssn_vehs.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,"anti_lock",f.value==1,true)
		funcs.doo.sssn_plyr_veh_action("anti_lock",f.value==1,false,true)
	end)			
	g.tbl.sssn_stf.veh_no_lock2:set_str_data({"Give","Remove"})

	g.tbl.sssn_stf.veh_force2=menu.add_feature(">> Vehicle max speed/torque %","action_value_f",g.prnt.sssn_vehs.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,"speed_torque",f.value,true)
		funcs.doo.sssn_plyr_veh_action("speed_torque",f.value,false,true)
	end)
	funcs.set_feat_i_f(g.tbl.sssn_stf.veh_force2,0,700,5,100,"g.tbl.sssn_stf.veh_force2")
	
	g.tbl.sssn_stf.veh_fuck2=menu.add_feature(">> Fuck vehicles","action",g.prnt.sssn_vehs.id,function(f)
		funcs.doo.all_veh_action_thread_start(1000,"fucked",nil,true)
		funcs.doo.sssn_plyr_veh_action("fucked",nil,false,true)
	end)
	
	g.tbl.sssn_stf.veh_upgr2=menu.add_feature(">> Vehicle Upgrades","action_value_str",g.prnt.sssn_vehs.id,function(f)
		local _table = {[0] = "upgrades",[1] = "perf",[2] = "wheels",[3] = "f1",[4] = "headlights",[5] = "neons",[6] = "paint",[7] = "livery",[8] = "weapons"}
		funcs.doo.all_veh_action_thread_start(1000,_table[f.value],nil,true)
		funcs.doo.sssn_plyr_veh_action(_table[f.value],nil,false,true)
	end)
	g.tbl.sssn_stf.veh_upgr2:set_str_data({"Everything", "Performance mods","Wheels/Tires","Give F1 Wheels","Headlights","Neon lights","Paintjob","Livery","Weapons"})
	
	g.tbl.sssn_stf.veh_kick2=menu.add_feature(">> Vehicle kick","action",g.prnt.sssn_vehs.id,function(f, pid)
		funcs.doo.all_veh_action_thread_start(1000,"kick_all_npc_from_veh",nil,true)
		funcs.doo.sssn_plyr_veh_action("kick_pid_from_veh",nil,false,true)
	end)
	
	g.tbl.sssn_stf.helo_fuck2=menu.add_feature(">> Remove helicopter rotors","action",g.prnt.sssn_vehs.id,function(f, pid)
		funcs.doo.all_veh_action_thread_start(1000,"remove_rotor",nil,true)
		funcs.doo.sssn_plyr_veh_action("remove_rotor",nil,false,true)
	end)
	
	g.tbl.sssn_stf.veh_rmv_weap=menu.add_feature(">> Remove vehicle weapons","action",g.prnt.sssn_vehs.id,function(f, pid)
		funcs.doo.all_veh_action_thread_start(1000,"rmv_veh_weap",nil,true)
		funcs.doo.sssn_plyr_veh_action("rmv_veh_weap",nil,false,true)
	end)
	
	g.tbl.sssn_stf.veh_tire_pop2=menu.add_feature(">> Tire health","action_value_str",g.prnt.sssn_vehs.id,function(f, pid)
		local _table = {[0]="pop_tires",[1]="unpop_tires"}
		funcs.doo.all_veh_action_thread_start(1000,_table[f.value],nil,true)
		funcs.doo.sssn_plyr_veh_action(_table[f.value],nil,false,true)
	end)g.tbl.sssn_stf.veh_tire_pop2.set_str_data(g.tbl.sssn_stf.veh_tire_pop2,{"Pop", "Repair"})
	
	g.tbl.sssn_stf.veh_flip_wrong=menu.add_feature(">> Flip vehicle upside down","action",g.prnt.sssn_vehs.id,function(f, pid)
		funcs.doo.all_veh_action_thread_start(1000,"flip_wrong",nil,true)
		funcs.doo.sssn_plyr_veh_action("flip_wrong",nil,false,true)
	end)

	g.tbl.sssn_stf.veh_visible=menu.add_feature(">> Vehicle visibility", "action_value_str", g.prnt.sssn_vehs.id, function(f,pid)
		funcs.doo.all_veh_action_thread_start(1000,"visible",f.value==1,true)
		funcs.doo.sssn_plyr_veh_action("visible",f.value==1,false,true)
	end)
	g.tbl.sssn_stf.veh_visible:set_str_data({"Invisible", "Visible"})
	
	
	g.tbl.sssn_stf.veh_tp_mean_in2=menu.add_feature(">> Interior","action_value_str",g.tbl.sssn_stf.tp_prnt.id,function(f, pid)
		local _table = {[0] = "maze_glitch",[1] = "fib_top",[2] = "apt_glitch"}
		funcs.doo.all_veh_action_thread_start(1000,"tp",_table[f.value],true)
		funcs.doo.sssn_plyr_veh_action("tp",_table[f.value],false,true)
	end)
	g.tbl.sssn_stf.veh_tp_mean_in2:set_str_data({"Maze bank glitch", "FIB building top","Apartment glitch"})			
	
	g.tbl.sssn_stf.veh_tp_mean_out2=menu.add_feature(">> High above","action_value_str",g.tbl.sssn_stf.tp_prnt.id,function(f, pid)
		local _table = {[0] = "ocean_high",[1] = "chiliad_high",[2] = "city_high"}
		funcs.doo.all_veh_action_thread_start(1000,"tp",_table[f.value],true)
		funcs.doo.sssn_plyr_veh_action("tp",_table[f.value],false,true)
	end)
	g.tbl.sssn_stf.veh_tp_mean_out2:set_str_data({"The Ocean","Mt. Chiliad","The City"})		

	g.tbl.sssn_stf.veh_tp_into_air2=menu.add_feature(">> Above their position","action_value_str",g.tbl.sssn_stf.tp_prnt.id,function(f, pid)
		local _table = {[0]=50,[1]=250,[2]=1000}
		funcs.doo.all_veh_action_thread_start(1000,"tp_up",_table[f.value],true)
		funcs.doo.sssn_plyr_veh_action("tp_up",_table[f.value],false,true)
	end)
	g.tbl.sssn_stf.veh_tp_into_air2:set_str_data({"50m up","250m up","1000m up"})		

	g.tbl.sssn_stf.veh_tp_to_me2=menu.add_feature(">> To me","action_value_str",g.tbl.sssn_stf.tp_prnt.id,function(f)
		g.tbl.sssn_my_pos_front[#g.tbl.sssn_my_pos_front+1]={}
		local _int=#g.tbl.sssn_my_pos_front
		local my_pos = funcs.get.front_of_pos(funcs.ME._crds(), funcs.ME._head(), 10, 180, 1)
		for i=1,200 do
			if f.value == 0 then
				g.tbl.sssn_my_pos_front[_int][i]=(my_pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),mth.rndm(1,5)))
			elseif f.value==1 then
				g.tbl.sssn_my_pos_front[_int][i]=(my_pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),mth.rndm(240,260)))
			else
				g.tbl.sssn_my_pos_front[_int][i]=(my_pos+v3(mth.rndm(-5,5),mth.rndm(-5,5),mth.rndm(990,1010)))
			end
		end
		funcs.doo.all_veh_action_thread_start(1000,"tp_2_me",_int,true)
		funcs.doo.sssn_plyr_veh_action("tp_2_me",_int,false,true)
	end)
	g.tbl.sssn_stf.veh_tp_to_me2:set_str_data({"In front of me","250m up","1000m up"})
	
	g.tbl.sssn_stf.veh_tp_to_random=menu.add_feature(">> TP to random location","action_value_str",g.tbl.sssn_stf.tp_prnt.id,function(f, pid)
		local _table = {[0] = "land",[1] = "water",[2] = "anywhere"}
		funcs.doo.all_veh_action_thread_start(1000,"tp",_table[f.value],true)
		funcs.doo.sssn_plyr_veh_action("tp",_table[f.value],false,true)
	end)
	g.tbl.sssn_stf.veh_tp_to_random:set_str_data({"On land","In water","Anywhere"})	


g.print_load_info("Local session features",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)---------------------------------------PLAYERS LOCAL END
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------SAVE START



g._save_stuff = {}


g._old_save_list ={
["g._gee_eye_aud"]=true,		--renamed in v1.02
["g._gee_eye_blame"]=true,		--renamed in v1.02
["g._gee_eye_delay"]=true,		--renamed in v1.02
["g._gee_eye_flare"]=true,		--renamed in v1.02
["g._gee_eye_main"]=true,		--renamed in v1.02
["g._gee_eye_spread"]=true,		--renamed in v1.02
["g._gee_eye_spread_type"]=true,--renamed in v1.02
["g._gee_eye_vis"]=true,		--renamed in v1.02
["g._gee_eyeSelect1"]=true,		--renamed in v1.02
["g._veh_rapid_fire_khan"]=true,--renamed in v1.04

["g.tbl.prjctl_aim.feat"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.guide_heavy"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.guide_throw"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.guide_veh"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mg_veh"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.guide_type"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.max_guide"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_show_line"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.auto_sticky"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.keep"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_x"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_y"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_show"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_r"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_g"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_b"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_a"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_x_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_y_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.fov_show_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_r_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_g_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_b_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.box_a_v"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_show"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_show_stay"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.slct"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_s"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_r"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_g"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_b"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_a"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_rot"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_wbl"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_rot_spd"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.orb_height"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.hght_init"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.hght_crv"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_up_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_dwn_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_up_key_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_dwn_key_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.speed_stop_key_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.slct_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_s_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_r_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_g_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_b_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_a_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_rot_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_wbl_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.mrkr_rot_spd_k"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.show_name"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_just"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_s"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_x"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_y"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_r"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_g"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_b"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.name_a"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_npc"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_csa"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_mssn"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_othr_npc"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_plyr"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_frnd"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_org"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.type_othr_plyr"]=true, --renamed in v1.05
["g.tbl.prjctl_aim.god"]=true, --renamed in v1.05
}

g._save_stuff.type_bool={}
g._save_stuff.type_bool[1]=true 	-- toggle

g._save_stuff.type_val = {}
g._save_stuff.type_val[518]=true	--action_slider
g._save_stuff.type_val[522]=true	--action_value_i
g._save_stuff.type_val[546]=true	--action_value_str
g._save_stuff.type_val[642]=true	--action_value_f
g._save_stuff.type_val[1030]=true	--autoaction_slider
g._save_stuff.type_val[1034]=true	--autoaction_value_i
g._save_stuff.type_val[1058]=true	--autoaction_value_str
g._save_stuff.type_val[1154]=true	--autoaction_value_f

g._save_stuff.type_both = {}
g._save_stuff.type_both[7]=true	 	--slider 	toggle
g._save_stuff.type_both[11]=true 	--value_i 	toggle
g._save_stuff.type_both[35]=true 	--value_str toggle
g._save_stuff.type_both[131]=true	--value_f 	toggle


function g._save_stuff.get_feat_bool(_feat)
    return tostring(_feat.on)
end

function g._save_stuff.should_count(_feat,_state)
	if g.tbl.S_L_FEAT[_feat] ~= nil then
		if (tostring(_state)=="true" or tostring(_state)=="false") then
			return true
		elseif g.tbl.S_L_FEAT[_feat].value ~= nil then
			return true
		end
    end
	return false
end


function g._save_stuff.load_sett(_feat,_state)
	if g.tbl.S_L_FEAT[_feat] == nil then
		g.N_P(2,"Invalid entry in config file:\n"..tostring(_feat).." = "..tostring(_state).."\nError will be fixed after save." ,__GV__,7,"Yellow")
	elseif tostring(_state)=="true" then
        g.tbl.S_L_FEAT[_feat].on=true
	elseif tostring(_state)=="false" then
        g.tbl.S_L_FEAT[_feat].on=false
    elseif g.tbl.S_L_FEAT[_feat].value == nil then
		g.N_P(2,"Invalid entry in config file:\n"..tostring(_feat).." = "..tostring(_state).."\nError will be fixed after save." ,__GV__,7,"Yellow")
	else
		g.tbl.S_L_FEAT[_feat].value=tonumber(_state)
    end
end

g._save_stuff.save_it=menu.add_feature("Save Settings", "action", g.prnt.optns.id, function()
	local save_file_text=""
	local file=io.open(g.paths._user.."GeeSkid_Saved_Settings.cfg","w")
	local _type,_bool,_name
	table.sort(g.tbl.S_L_NAME, function(a, b) return a:lower() <  b:lower() end)
	for i=1,#g.tbl.S_L_NAME do
		if g.tbl.S_L_FEAT[g.tbl.S_L_NAME[i]] == nil or g.tbl.S_L_FEAT[g.tbl.S_L_NAME[i]].type == nil then
			g.N_P(2,"Invalid entry in save table:\n"..tostring(g.tbl.S_L_NAME[i]).."\nContact dev." ,__GV__,7,"Red")
		else
			_type = g.tbl.S_L_FEAT[g.tbl.S_L_NAME[i]].type
			_bool = g._save_stuff.get_feat_bool(g.tbl.S_L_FEAT[g.tbl.S_L_NAME[i]])
			_name = g.tbl.S_L_NAME[i]
			_value = g.tbl.S_L_FEAT[_name].value
			if g._save_stuff.type_both[_type] then
				if save_file_text~="" then save_file_text=save_file_text.."\n" end
				save_file_text=save_file_text.._name.."=".._bool.."\n".._name.."=".._value
			elseif g._save_stuff.type_val[_type] then
				if save_file_text~="" then save_file_text=save_file_text.."\n" end
				save_file_text=save_file_text.._name.."=".._value
			elseif g._save_stuff.type_bool[_type] then
				if save_file_text~="" then save_file_text=save_file_text.."\n" end
				save_file_text=save_file_text.._name.."=".._bool
			else
				g.N_P(2,"Invalid entry in save table\n".."type: "..tostring(_type).." bool: "..tostring(_bool).." name: "..tostring(_name).." value: "..tostring(_value).."\nContact dev.",__GV__,7,"Red")
			end
		end
		if i % 50 == 0 then
			system.yield(0)
		end
	end
	file:write(save_file_text)
	file:close()
	g.N_P(2,"Settings saved to:\nGeeSkid_Saved_Settings.cfg",__GV__,7,"Green")
end)
g.print_load_info("Config file begins",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
g._save_stuff.load_it=menu.add_feature("Load Settings", "action", g.prnt.optns.id, function()
	local temp,load_count,old_save = nil,0,false
	if utils.file_exists(g.paths._user.."GeeSkid_Saved_Settings.cfg") then
		local file=io.open(g.paths._user.."GeeSkid_Saved_Settings.cfg","r")
		for i in file:lines() do
			local fields = {}
			i:gsub(string.format("([^%s]+)", "="), function(c) fields[#fields+1] = c end)
			if g._old_save_list[fields[1]] then
				old_save=true
			else
				g._save_stuff.load_sett(fields[1],fields[2])
				if g._save_stuff.should_count(fields[1],fields[2]) then
					if temp ~= fields[1] then
						temp = fields[1]
						load_count=load_count+1
					end
				end
			end
			-- if load_count % 250 == 0 then
				-- system.yield(0)
			-- end
		end
		file:close()
		if old_save then
			g.N_P(2,"Gee-Skid has been updated. Some saved settings will be skipped until re-save.",__GV__,7,"Blue")
		end
		g.N_P(2,load_count.."/"..#g.tbl.S_L_NAME.." Settings loaded",__GV__,7,"Green")
	else
		g.N_P(2,"Default settings loaded.\nSave your settings here:\nOptions > Save Settings",__GV__,7,"Blue")
	end
	g.tbl.veh_esp.math_do()
	system.yield(1000)
	
	g.var.GS_has_loaded=true
	
end)
g._save_stuff.load_it.on=true
g.print_load_info("Config file or defaults",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
----------------------------------------------------------SAVE END
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------

function funcs.doo.yield_while_true2(_bool,_val)
	local time = API.util.t_ms() + _val
	while _bool and time > API.util.t_ms() do
		system.yield(0)
	end
end
-------------------------------------------------------------------------------------------------Start Screen
-------------------------------------------------------------------------------------------------Below
g.tbl.threads[#g.tbl.threads+1]=menu.create_thread(function()
	local time = API.util.t_ms() + 20000
	local esp,aim,ass = false,false,false
	while 
		(not g.tbl.veh_esp.loaded or
		not g.tbl.aim_protex_main.loaded or
		not g.o.tbl.Ass2In.loaded) and
		time > API.util.t_ms() do
			system.yield(0)
			if g.tbl.veh_esp.loaded and not esp then
				g.print_load_info("g.tbl.veh_esp.loaded",(API.util.t_ms()-g.tbl.veh_esp.loadedtime),debug.getinfo(1).currentline)
				esp=true
			end
			if g.tbl.aim_protex_main.loaded and not aim then
				g.print_load_info("g.tbl.aim_protex_main.loaded",(API.util.t_ms()-g.tbl.aim_protex_main.loadedtime),debug.getinfo(1).currentline)
				aim=true
			end
			if g.o.tbl.Ass2In.loaded and not ass then
				g.print_load_info("g.o.tbl.Ass2In.loaded",(API.util.t_ms()-g.o.tbl.Ass2In.loadedtime),debug.getinfo(1).currentline)
				ass=true
			end
	end
	
	
	

	g.print_load_info("Completed",(API.util.t_ms()-g.script_load_time_temp),debug.getinfo(1).currentline)
	print("--- "..__GV__.." - Loaded in "..(API.util.t_ms()-g.script_load_time).."ms ---")
	ui.notify_above_map("Welcome to ~g~"..__GV__.."\n~w~"..os.getenv("USERNAME").."", "", 2)
	if g._show_voidkot.on then
		local int = 1
		local splash_table = {}
		for i=1,90 do
			splash_table[i] = scriptdraw.register_sprite(g.paths._2t1.."\\scripts\\GeeSkid_v2\\Images\\Voidkot\\"..i..".png")
			if i%2==0 then
				system.yield(0)
			end
		end
		while mth.flr(int) <= 90 do
			system.yield(5)
			API.SD.draw_sprt(splash_table[mth.flr(int)],v2(0,0),API.gfx.get_h()/1080,0, funcs.get.rgb_to_int(255,255,255,255))
			int=int+0.15
		end
	end
end)

	



-- menu.add_feature("Globals","action",0, function(f)
-- local globalCount = 0
-- for k,v in pairs(_G) do
    -- globalCount = globalCount + 1
	-- print(k)
-- end
-- menu.notify(globalCount)
-- end)


---------------------------------------------------------------------------------------------------------------------------------------------------

-- local function not_too_close(_pos,t1,t2,dist) 
	-- for i=1, #t1 do
		-- if funcs.get.dist_pospos_v2(_pos,t1[i]) < dist then
			-- return false
		-- end
	-- end
	-- for i=1, #t2 do
		-- if funcs.get.dist_pospos_v2(_pos,t2[i]) < dist then
			-- return false
		-- end
	-- end
	-- return true
-- end

-- local _G_save_pos=menu.add_feature("Save pos ", "value_i", 0, function(f)--just used for tp pos
	-- local new_pos,file,msg
	-- local path = utils.get_appdata_path("PopstarDevs", "").."\\2Take1Menu\\NEW_POS_ADD.txt"
	-- local time = utils.time_ms() + 1000
	-- local  my_grid = funcs.get.pos_100_v2(funcs.ME._crds())
	-- local grid_tbl = nil
	-- local popo_tbl = nil
	-- local new_tbl = {
	
-- v3(-2531.07,-63.26,53.0),
-- v3(-2650.31,15.72,41.5),
-- v3(-2757.15,84.61,55.9),
-- v3(-2842.63,136.42,57.77),
-- v3(-2927.89,192.44,70.04),
-- v3(-2922.86,314.32,51.73),
-- v3(-2881.54,451.49,57.4),
-- v3(-2879.21,548.11,40.88),
-- v3(-2887.96,676.8,67.4),
-- v3(-3040.06,988.7,72.07),
-- v3(-3096.53,947.46,42.74),
-- v3(-3051.85,919.3,75.25),
-- v3(-2917.28,830.51,77.31),
-- v3(-2993.97,901.07,88.5),
-- v3(-2987.21,997.39,107.43),
-- v3(-2153.83,1050.58,204.79),
-- v3(-2122.15,1143.56,254.55),
-- v3(-2097.04,1252.47,283.44),
-- v3(-2098.46,1305.15,254.91),
-- v3(-2112.08,1374.23,267.74),
-- v3(-2125.05,1424.73,284.89),
-- v3(-2153.81,1515.58,298.68),
-- v3(-2190.54,1628.27,255.68),
-- v3(-2208.2,1715.16,243.43),
-- v3(-2336.17,2077.6,89.63),
-- v3(-2387.0,2079.11,109.32),
-- v3(-2448.77,1821.49,182.78),
-- v3(-1689.25,1551.92,203.11),
-- v3(-1768.32,1469.84,205.64),
-- v3(-1812.36,1413.32,205.09),
-- v3(-1844.09,1372.39,191.32),
-- v3(-1847.25,1320.07,205.69),
-- v3(-1845.55,1269.5,218.7),
-- v3(-1843.19,1219.16,208.17),
-- v3(-1824.44,1117.03,222.62),
-- v3(-1807.0,1067.6,215.5),
-- v3(-1794.02,966.42,191.54),
-- v3(-1844.67,896.57,160.93),
-- v3(-1880.35,859.89,171.97),
-- v3(-1101.16,486.03,82.16),
-- v3(-1085.47,507.62,86.16),
-- v3(-1025.54,540.54,80.81),
-- v3(-999.17,541.5,79.61),
-- v3(-973.37,539.77,81.63),
-- v3(-949.0,532.58,83.2),
-- v3(-927.08,517.34,86.31),
-- v3(-912.46,494.42,89.84),
-- v3(-904.52,468.87,88.27),
-- v3(-907.3,536.23,103.92),
-- v3(-936.02,554.64,106.56),
-- v3(-970.4,569.21,100.41),
-- v3(-1003.81,574.06,99.85),
-- v3(-1030.86,571.2,109.01),
-- v3(-1058.91,568.39,100.91),
-- v3(-1095.08,554.74,102.72),
-- v3(-1139.9,536.0,100.08),
-- v3(-1170.69,527.04,94.7),
-- v3(-1198.62,525.49,96.03),
-- v3(-1221.74,497.59,101.26),
-- v3(-1195.16,496.4,96.89),
-- v3(-1169.41,495.42,95.03),
-- v3(-1142.14,495.5,86.63),
-- v3(-1070.74,486.35,85.13),
-- v3(-951.81,494.57,81.67),
-- v3(-938.22,465.01,98.13),
	
-- v3(-1070.07,515.41,87.78),
-- v3(-1056.16,508.36,84.88),
-- v3(-1041.36,500.88,84.42),
-- v3(-1026.93,507.7,83.11),
-- v3(-1011.46,514.58,92.11),
-- v3(-996.03,521.25,92.11),
-- v3(-979.88,526.08,82.16),
-- v3(-962.81,525.85,89.77),
-- v3(-948.35,517.0,82.17),
-- v3(-937.79,504.32,80.33),
-- v3(-930.21,490.14,85.3),
-- v3(-924.48,474.99,85.3),
-- v3(-919.15,460.66,85.3),
-- v3(-901.23,453.95,88.77),
-- v3(-886.07,452.94,97.43),
-- v3(-870.36,455.66,97.43),
-- v3(-867.38,482.21,97.43),
-- v3(-875.8,495.39,91.51),
-- v3(-885.19,508.08,97.51),
-- v3(-896.02,519.21,96.61),
-- v3(-924.16,532.25,96.51),
-- v3(-954.02,549.11,109.12),
-- v3(-983.15,561.13,107.99),
-- v3(-1011.47,560.42,101.01),
-- v3(-1036.69,557.12,101.01),
-- v3(-1066.97,543.98,98.88),
-- v3(-1080.09,534.77,97.72),
-- v3(-1093.27,526.28,96.07),
-- v3(-1107.26,520.17,87.52),
-- v3(-1121.99,516.22,82.66),
-- v3(-1137.28,512.94,86.27),
-- v3(-1156.32,511.48,86.59),
-- v3(-1172.42,511.51,86.79),
-- v3(-1188.42,511.55,99.32),
-- v3(-1205.65,511.97,104.31),
-- v3(-1219.8,519.14,96.54),
-- v3(-1192.88,549.08,99.41),
-- v3(-1149.84,553.68,101.97),
-- v3(-1118.03,564.67,103.03),
-- v3(-1104.3,571.12,103.28),
-- v3(-1076.6,584.2,103.62),
-- v3(-1048.5,589.94,105.07),
-- v3(-1007.26,593.33,103.24),
-- v3(-973.08,589.16,102.3),
-- v3(-934.74,577.09,100.41),
-- v3(-900.51,557.38,96.73),
-- v3(-872.75,526.73,90.83),
-- v3(-855.24,453.03,87.6),
-- v3(-822.78,444.08,89.12),
-- v3(-784.71,457.14,100.34),
-- v3(-760.09,468.32,102.16),
-- v3(-659.27,506.8,110.22),
-- v3(-644.33,510.7,109.92),
-- v3(-611.13,516.34,107.68),
-- v3(-582.0,523.95,107.61),
-- v3(-561.1,533.19,115.5),
-- v3(-549.17,542.88,114.6),
-- v3(-537.94,555.51,116.17),
-- v3(-527.97,566.74,121.31),
-- v3(-517.58,579.15,126.01),
-- v3(-512.89,594.97,123.95),
-- v3(-527.03,640.86,143.4),
-- v3(-570.97,666.79,149.11),
-- v3(-637.76,682.73,150.17),
-- v3(-667.86,684.63,153.99),
-- v3(-664.98,669.59,150.92),
-- v3(-648.94,667.64,154.54),
-- v3(-633.5,666.32,148.97),
-- v3(-618.1,664.22,158.52),
-- v3(-602.2,661.7,157.11),
-- v3(-587.38,659.12,150.91),
-- v3(-565.19,651.99,149.54),
-- v3(-552.41,643.38,141.6),
-- v3(-540.42,633.04,141.88),
-- v3(-530.46,620.58,142.14),
-- v3(-528.24,604.6,128.35),
-- v3(-530.2,589.08,126.01),
-- v3(-555.16,558.66,116.13),
-- v3(-567.63,550.14,108.81),
-- v3(-581.22,543.76,111.63),
-- v3(-596.81,539.96,121.62),
-- v3(-612.89,536.77,118.2),
-- v3(-628.82,535.59,117.85),
-- v3(-644.99,534.04,120.74),
-- v3(-659.95,531.12,113.25),
-- v3(-674.38,526.88,110.81),
-- v3(-689.99,521.69,121.17),
-- v3(-703.3,528.67,111.93),
-- v3(-713.52,540.69,120.66),
-- v3(-727.48,553.86,127.12),
-- v3(-742.6,564.2,131.12),
-- v3(-756.71,574.86,131.01),
-- v3(-768.58,584.89,129.45),
-- v3(-777.98,596.81,128.52),
-- v3(-783.79,611.56,129.58),
-- v3(-789.24,625.54,139.66),
-- v3(-795.89,639.41,139.66),
-- v3(-807.23,655.3,138.43),
-- v3(-820.12,665.4,141.25),
-- v3(-833.91,673.94,140.59),
-- v3(-849.19,677.99,141.73),
-- v3(-865.3,679.78,142.47),
-- v3(-881.48,681.35,156.49),
-- v3(-896.5,682.67,151.66),
-- v3(-911.97,682.54,159.29),
-- v3(-927.99,681.57,157.49),
-- v3(-943.7,680.34,157.49),
-- v3(-958.72,678.81,154.24),
-- v3(-974.87,677.11,166.16),
-- v3(-990.33,676.0,156.95),
-- v3(-1005.82,675.82,166.06),
-- v3(-1022.03,676.75,166.06),
-- v3(-1037.43,678.93,166.24),
-- v3(-1057.35,683.27,155.13),
-- v3(-1072.48,688.71,149.6),
-- v3(-1086.77,693.55,147.37),
-- v3(-1102.52,695.63,147.55),
-- v3(-1118.01,696.93,150.04),
-- v3(-1132.83,699.46,156.44),
-- v3(-1147.12,705.84,155.96),
-- v3(-1159.16,715.14,161.62),
-- v3(-1156.71,730.15,160.68),
-- v3(-1143.1,739.04,160.08),
-- v3(-1130.02,747.59,169.43),
-- v3(-1116.64,754.51,169.43),
-- v3(-1101.67,757.68,165.12),
-- v3(-1085.8,760.03,173.7),
-- v3(-1069.98,761.11,177.31),
-- v3(-1064.48,742.84,169.25),
-- v3(-1075.37,732.16,164.71),
-- v3(-1090.59,726.99,160.44),
-- v3(-1105.65,725.48,159.69),
-- v3(-1120.67,724.05,159.69),
-- v3(-1135.69,722.67,155.96),
-- v3(-1086.5,712.45,161.41),
-- v3(-1071.67,708.04,165.96),
-- v3(-1057.38,703.4,163.96),
-- v3(-1041.69,697.64,165.11),
-- v3(-1027.2,691.0,161.65),
-- v3(-1015.98,662.66,161.79),
-- v3(-998.71,662.09,152.13),
-- v3(-983.07,661.48,166.16),
-- v3(-973.39,649.81,139.13),
-- v3(-957.47,651.78,138.18),
-- v3(-941.1,653.19,137.37),
-- v3(-901.71,655.42,135.37),
-- v3(-885.95,656.32,134.46),
-- v3(-870.68,657.2,133.32),
-- v3(-854.81,656.22,132.0),
-- v3(-827.23,641.44,129.6),
-- v3(-817.49,628.32,128.56),
-- v3(-810.39,614.27,128.22),
-- v3(-803.86,599.5,127.81),
-- v3(-790.35,571.35,126.71),
-- v3(-778.91,560.66,125.31),
-- v3(-765.76,552.85,122.67),
-- v3(-752.45,545.62,119.25),
-- v3(-724.02,527.0,113.22),
-- v3(-713.63,515.24,111.56),
-- v3(-704.86,501.47,110.12),
-- v3(-731.48,513.65,110.03),
-- v3(-724.81,499.44,114.5),
-- v3(-705.7,507.84,110.53),
-- v3(-709.24,511.77,111.0),
-- v3(-717.37,520.39,112.15),
-- v3(-728.99,530.68,113.97),
-- v3(-741.78,539.37,116.65),
-- v3(-747.3,542.55,117.9),
-- v3(-757.06,547.97,120.4),
-- v3(-770.77,556.14,123.94),
-- v3(-782.1,566.02,126.04),
-- v3(-790.84,576.44,126.9),

-- v3(-1169.34,371.49,72.19),
-- v3(-1148.51,373.48,79.01),
-- v3(-1093.05,355.24,69.01),
-- v3(-1112.65,354.76,70.59),
-- v3(-1128.68,355.57,72.21),
-- v3(-1144.02,355.8,75.43),
-- v3(-1160.03,356.89,71.8),
-- v3(-1161.77,385.01,71.8),
-- v3(-1066.34,403.53,69.34),
-- v3(-1033.0,406.62,71.01),
-- v3(-1017.85,408.55,73.15),
-- v3(-985.06,417.94,75.66),
-- v3(-969.76,422.62,84.76),
-- v3(-966.77,437.72,85.0),
-- v3(-954.15,446.28,80.25),
-- v3(-964.85,486.41,80.25),
-- v3(-992.46,504.4,80.19),
-- v3(-1047.07,459.33,76.68),
-- v3(-1064.82,426.69,73.67),
-- v3(-1052.2,418.41,75.17),
-- v3(-1027.45,420.57,73.36),
-- v3(-1012.59,422.92,74.29),
-- v3(-982.96,437.69,85.04),
-- v3(-983.64,453.64,86.05),
-- v3(-980.32,468.84,81.96),
-- v3(-982.82,484.68,93.56),
-- v3(-997.78,489.33,82.72),
-- v3(-1008.52,478.71,90.27),
-- v3(-1017.21,466.48,85.55),
-- v3(-1027.44,454.01,76.84),
-- v3(-1038.21,443.17,82.33),
-- v3(-1022.71,438.74,80.34),
-- v3(-1007.17,442.84,79.07),
-- v3(-938.69,447.3,85.76),
-- v3(-923.61,444.94,80.91),
-- v3(-896.54,438.63,86.32),
-- v3(-884.43,469.4,87.9),
-- v3(-888.02,484.79,88.65),
-- v3(-897.14,497.87,96.36),
-- v3(-909.52,511.92,92.82),
-- v3(-954.95,569.33,109.12),
-- v3(-921.59,549.38,97.51),
-- v3(-841.22,401.99,91.22),
-- v3(-830.16,457.23,98.48),
-- v3(-832.17,472.39,99.5),
-- v3(-835.87,487.64,91.02),
-- v3(-840.95,502.75,91.67),
-- v3(-846.82,516.87,103.14),
-- v3(-853.49,531.12,93.8),
-- v3(-861.38,544.89,97.53),
-- v3(-870.62,557.3,100.62),
-- v3(-881.28,568.82,97.73),
-- v3(-894.83,577.21,112.29),
-- v3(-909.09,583.73,103.86),
-- v3(-923.38,589.45,102.89),
-- v3(-938.46,594.95,105.94),
-- v3(-953.96,600.12,109.8),
-- v3(-969.04,604.33,104.4),
-- v3(-990.64,610.04,111.55),
-- v3(-1006.6,612.15,115.21),
-- v3(-1022.57,612.98,117.57),
-- v3(-1038.3,612.45,112.9),
-- v3(-1054.28,611.07,112.25),
-- v3(-1074.63,606.69,107.21),
-- v3(-1088.88,599.53,106.59),
-- v3(-1102.8,591.79,104.85),
-- v3(-1117.18,584.59,104.85),
-- v3(-1131.49,578.31,104.6),
-- v3(-1146.24,573.49,102.33),
-- v3(-1161.06,570.51,110.56),
-- v3(-1176.82,568.28,110.59),
-- v3(-1192.64,566.15,104.52),
-- v3(-1208.44,563.89,104.29),
-- v3(-1224.19,561.33,103.29),
-- v3(-1239.07,555.7,104.63),
-- v3(-1251.92,544.48,103.09),
-- v3(-1258.88,530.95,99.11),
-- v3(-1263.39,515.69,101.46),
-- v3(-1266.73,500.53,97.39),
-- v3(-1270.02,484.9,97.97),
-- v3(-1283.74,477.44,98.06),
-- v3(-1299.2,479.36,98.15),
-- v3(-1315.17,478.66,101.5),
-- v3(-1331.13,478.53,113.01),
-- v3(-1346.56,479.4,113.01),
-- v3(-1362.45,480.79,105.18),
-- v3(-1378.17,482.53,105.54),
-- v3(-1393.37,486.71,117.35),
-- v3(-1406.12,496.25,121.74),
-- v3(-1419.51,517.09,120.4),
-- v3(-1418.28,532.78,121.6),
-- v3(-1402.44,536.68,129.14),
-- v3(-1387.16,536.35,129.67),
-- v3(-1371.64,538.05,122.82),
-- v3(-1356.47,542.26,134.87),
-- v3(-1343.28,549.48,136.61),
-- v3(-1334.1,563.09,137.36),
-- v3(-1329.74,578.3,131.13),
-- v3(-1332.7,593.99,139.51),
-- v3(-1330.7,609.05,140.31),
-- v3(-1315.1,610.09,134.86),
-- v3(-1299.48,611.35,138.8),
-- v3(-1283.99,613.88,145.81),
-- v3(-1269.6,619.27,142.62),
-- v3(-1255.42,626.4,140.9),
-- v3(-1241.6,633.38,147.66),
-- v3(-1228.36,640.52,147.66),
-- v3(-1214.82,648.8,149.44),
-- v3(-1202.68,657.86,145.12),
-- v3(-1191.59,668.39,142.4),
-- v3(-1181.92,681.21,156.45),
-- v3(-1166.73,675.88,141.12),
-- v3(-1152.79,668.45,135.83),
-- v3(-1139.28,676.48,146.39),
-- v3(-1125.44,682.43,145.89),
-- v3(-1110.38,678.33,144.68),
-- v3(-1076.38,666.75,143.73),
-- v3(-1062.67,659.22,142.56),
-- v3(-1049.99,650.04,142.4),
-- v3(-1036.93,641.82,141.78),
-- v3(-1020.83,641.32,141.52),
-- v3(-1005.81,640.41,140.91),
-- v3(-981.49,634.89,139.46),
-- v3(-966.07,634.58,128.44),
-- v3(-950.73,635.45,120.09),
-- v3(-934.36,636.63,122.54),
-- v3(-918.52,637.28,119.17),
-- v3(-902.56,637.02,125.31),
-- v3(-886.57,636.9,126.37),
-- v3(-870.52,636.8,126.15),
-- v3(-854.53,636.61,125.1),
-- v3(-839.66,632.79,125.38),
-- v3(-821.06,602.73,121.7),
-- v3(-816.33,587.55,118.81),
-- v3(-811.4,572.43,117.59),
-- v3(-804.37,558.18,118.9),
-- v3(-793.41,546.04,116.66),
-- v3(-779.53,539.02,116.88),
-- v3(-765.01,532.35,114.75),
-- v3(-751.69,523.54,111.31),
-- v3(-737.58,490.91,114.5),
-- v3(-748.84,501.12,109.87),
-- v3(-761.71,511.34,107.98),
-- v3(-775.02,520.18,108.91),
-- v3(-811.61,542.64,106.74),
-- v3(-823.65,553.23,105.72),
-- v3(-832.27,566.52,103.33),
-- v3(-837.9,581.43,104.32),
-- v3(-842.48,596.69,107.69),
-- v3(-846.87,611.7,112.88),
-- v3(-908.62,622.91,114.63),
-- v3(-924.43,620.9,108.85),
-- v3(-940.29,619.71,115.82),
-- v3(-955.56,619.66,107.42),
-- v3(-971.54,619.73,114.22),
-- v3(-1029.74,626.17,127.48),
-- v3(-1062.94,634.71,128.17),
-- v3(-1078.04,639.99,125.04),
-- v3(-1092.84,646.18,124.45),
-- v3(-1107.42,653.13,127.15),
-- v3(-1122.73,657.53,130.43),
-- v3(-1138.62,657.51,129.12),
-- v3(-1160.42,655.07,123.71),
-- v3(-1175.91,653.62,127.34),
-- v3(-1189.05,644.58,129.37),
-- v3(-1200.89,633.92,130.98),
-- v3(-1213.07,624.2,136.27),
-- v3(-1227.11,616.7,139.04),
-- v3(-1241.74,611.46,139.6),
-- v3(-1256.45,606.41,139.77),
-- v3(-1271.66,601.45,139.77),
-- v3(-1287.15,597.48,138.6),
-- v3(-1302.65,593.73,131.14),
-- v3(-1314.86,584.09,139.51),
-- v3(-1317.98,568.74,126.03),
-- v3(-1317.16,552.73,126.03),
-- v3(-1322.18,538.28,122.37),
-- v3(-1333.6,527.24,120.14),
-- v3(-1347.53,519.5,112.11),
-- v3(-1362.85,516.11,117.86),
-- v3(-1378.64,517.62,121.52),
-- v3(-1394.07,521.47,131.17),
-- v3(-1394.16,505.53,120.34),
-- v3(-1378.61,501.92,120.03),
-- v3(-1363.07,498.67,104.46),
-- v3(-1345.71,495.4,108.18),
-- v3(-1330.23,494.9,102.94),
-- v3(-1314.95,497.86,101.94),
-- v3(-1299.43,501.18,98.05),
-- v3(-1284.42,505.01,102.11),
-- v3(-1286.59,520.14,102.7),
-- v3(-1283.29,535.62,102.45),
-- v3(-1276.7,549.98,108.7),
-- v3(-1247.13,578.35,118.2),
-- v3(-1231.79,583.1,113.08),
-- v3(-1216.17,584.8,103.91),
-- v3(-1200.25,586.49,100.63),
-- v3(-1184.39,588.39,101.44),
-- v3(-1168.44,590.31,102.33),
-- v3(-1153.58,592.8,102.33),
-- v3(-1137.74,597.08,109.95),
-- v3(-1122.67,602.63,104.9),
-- v3(-1108.64,609.21,110.54),
-- v3(-1094.22,614.75,104.4),
-- v3(-1074.9,622.02,115.86),
-- v3(-1098.14,629.5,110.65),
-- v3(-1114.03,629.31,105.53),
-- v3(-1129.53,625.51,105.28),
-- v3(-1144.93,627.32,105.53),
-- v3(-1160.04,628.2,109.82),
-- v3(-1228.66,601.18,123.91),
-- v3(-1243.31,594.7,128.89),
-- v3(-1258.33,588.9,132.52),
-- v3(-1273.66,584.44,131.32),
-- v3(-1288.88,579.79,130.09),
-- v3(-1300.92,569.68,129.34),
-- v3(-1325.37,511.84,104.63),
-- v3(-1306.6,537.18,104.41),
-- v3(-1297.12,549.98,110.21),
-- v3(-1281.61,564.48,123.91),
-- v3(-1200.52,601.51,109.41),
-- v3(-1178.01,609.53,103.19),
-- v3(-1162.98,613.45,105.29),
-- v3(-1124.45,538.32,106.79),
-- v3(-1109.86,544.33,102.85),
-- v3(-1080.43,560.82,110.39),
-- v3(-989.02,385.16,74.15),
-- v3(-973.94,382.73,73.41),
-- v3(-960.08,389.23,74.35),
-- v3(-945.37,396.17,78.23),
-- v3(-930.43,402.4,79.62),
-- v3(-947.37,381.11,75.15),
-- v3(-951.96,395.45,79.76),
-- v3(-942.78,387.75,81.87),
-- v3(-933.37,398.79,85.52),
-- v3(-929.9,369.35,75.29),
-- v3(-949.38,369.94,73.49),
-- v3(-975.94,372.12,73.04),
-- v3(-989.21,376.59,72.98),
-- v3(-1000.83,383.34,72.8),
-- v3(-1008.25,392.44,72.88),
-- v3(-1019.95,397.99,71.8),
-- v3(-1004.44,358.21,77.42),
-- v3(-943.15,272.21,70.7),
-- v3(-942.2,284.47,70.78),
-- v3(-942.99,300.29,71.26),
-- v3(-954.34,310.75,71.59),
-- v3(-944.03,316.9,75.51),
-- v3(-968.82,358.23,72.9),
-- v3(-985.32,355.13,72.8),
-- v3(-994.29,338.25,71.52),
-- v3(-1076.89,333.82,67.35),
-- v3(-1065.05,317.11,66.4),
-- v3(-1049.36,321.44,67.15),
-- v3(-1041.29,324.19,67.33),
-- v3(-1061.28,310.26,66.53),
-- v3(-1062.71,295.37,70.91),
-- v3(-1032.75,308.17,76.82),
-- v3(-1042.48,292.96,72.33),
-- v3(-1027.18,290.28,67.08),
-- v3(-1016.82,292.74,67.44),
-- v3(-1012.54,331.27,70.09),
-- v3(-1001.17,336.51,71.06),
-- v3(-755.38,228.38,76.22),
-- v3(-711.94,247.5,80.72),
-- v3(-686.78,258.19,81.71),
-- v3(-673.96,270.51,81.74),
-- v3(-697.98,269.16,94.8),
-- v3(-706.69,280.1,84.45),
-- v3(-714.82,279.56,84.94),
-- v3(-732.86,271.7,132.82),
-- v3(-762.03,243.77,132.78),
-- v3(-697.07,200.99,141.25),
-- v3(-688.5,209.8,138.03),
-- v3(-676.77,200.32,80.8),
-- v3(-684.04,186.02,75.29),
-- v3(-698.56,179.1,75.29),
-- v3(-713.05,172.21,75.48),
-- v3(-698.53,152.42,81.19),
-- v3(-684.1,158.04,73.74),
-- v3(-581.3,155.17,82.63),
-- v3(-596.3,157.13,82.93),
-- v3(-611.24,158.9,81.49),
-- v3(-615.86,166.55,81.23),
-- v3(-603.0,167.52,81.73),
-- v3(-587.81,168.27,82.63),
-- v3(-573.19,163.76,84.98),
-- v3(-573.19,163.76,84.98),
-- v3(-565.45,187.54,86.34),
-- v3(-560.27,205.12,83.23),
-- v3(-570.49,205.82,86.43),
-- v3(-578.87,205.89,90.03),
-- v3(-574.01,216.25,92.83),
-- v3(-593.75,216.31,91.92),
-- v3(-594.99,231.62,90.8),
-- v3(-590.05,239.09,90.8),
-- v3(-611.79,222.47,93.41),
-- v3(-622.29,225.41,92.35),
-- v3(-630.07,213.82,92.37),
-- v3(-653.12,263.07,81.91),
-- v3(-605.62,286.5,89.7),
-- v3(-613.17,300.47,89.7),
-- v3(-612.38,314.84,89.7),
-- v3(-601.64,316.93,89.7),
-- v3(-599.58,304.86,89.7),
-- v3(-591.69,293.6,89.7),
-- v3(-580.26,281.49,94.59),
-- v3(-576.41,292.25,94.59),
-- v3(-572.82,285.55,94.59),
-- v3(-572.82,285.55,94.59),
-- v3(-556.81,287.82,92.29),
-- v3(-556.81,287.82,92.29),
-- v3(-550.29,316.78,87.41),
-- v3(-550.29,316.78,87.41),
-- v3(-548.13,304.19,83.55),
-- v3(-548.13,304.19,83.55),
-- v3(-562.68,300.34,83.59),
-- v3(-555.51,302.53,83.72),
-- v3(-548.24,327.7,84.13),
-- v3(-558.65,329.08,84.91),
-- v3(-569.81,330.54,84.99),
-- v3(-580.35,331.89,85.29),
-- v3(-591.05,333.27,85.61),
-- v3(-616.63,336.56,85.61),
-- v3(-611.26,345.59,85.61),
-- v3(-600.72,345.15,85.61),
-- v3(-590.64,344.68,85.61),
-- v3(-580.45,344.19,85.92),
-- v3(-570.37,343.61,85.67),
-- v3(-551.68,341.67,84.24),
-- v3(-538.0,321.21,83.42),
-- v3(-560.63,319.07,84.9),
-- v3(-570.78,320.09,84.98),
-- v3(-581.01,320.21,85.3),
-- v3(-591.66,320.34,90.22),
-- v3(-615.82,324.56,82.76),
-- v3(-626.88,333.14,88.22),
-- v3(-629.06,343.37,88.22),
-- v3(-639.2,347.18,91.82),
-- v3(-649.59,347.59,91.82),
-- v3(-659.66,348.09,91.82),
-- v3(-670.95,348.7,91.82),
-- v3(-681.74,349.29,91.82),
-- v3(-692.48,349.88,91.82),
-- v3(-702.8,350.54,91.82),
-- v3(-713.96,351.35,91.82),
-- v3(-721.26,343.6,91.98),
-- v3(-722.87,332.61,95.5),
-- v3(-724.33,322.2,95.5),
-- v3(-725.36,311.35,95.5),
-- v3(-746.76,307.37,107.06),
-- v3(-757.58,307.18,107.06),
-- v3(-769.16,307.02,107.06),
-- v3(-780.56,307.4,107.06),
-- v3(-791.65,307.81,107.06),
-- v3(-801.94,308.19,107.06),
-- v3(-812.99,308.6,108.05),
-- v3(-838.34,312.42,86.65),
-- v3(-842.59,332.97,86.63),
-- v3(-842.28,350.31,87.3),
-- v3(-825.73,350.75,87.29),
-- v3(-815.29,351.01,87.3),
-- v3(-805.14,351.26,107.06),
-- v3(-794.99,351.5,107.06),
-- v3(-784.05,351.76,107.06),
-- v3(-772.9,352.03,107.06),
-- v3(-762.36,352.28,107.06),
-- v3(-746.07,343.26,107.06),
-- v3(-803.67,329.79,234.44),
-- v3(-786.33,317.61,231.14),
-- v3(-774.99,317.09,231.14),
-- v3(-752.56,316.2,231.14),
-- v3(-715.75,315.4,140.65),
-- v3(-701.77,314.69,140.65),
-- v3(-691.09,314.23,140.65),
-- v3(-680.73,313.77,140.65),
-- v3(-670.23,313.34,140.65),
-- v3(-659.19,312.46,140.65),
-- v3(-648.56,311.05,140.65),
-- v3(-637.81,309.87,140.65),
-- v3(-627.1,308.75,92.66),
-- v3(-624.81,230.4,92.33),
-- v3(-624.81,230.4,92.33),
-- v3(-600.83,239.39,90.8),
-- v3(-600.83,239.39,90.8),
-- v3(-574.12,234.66,92.69),
-- v3(-574.12,234.66,92.69),
-- v3(-563.98,222.57,92.79),
-- v3(-563.98,222.57,92.79),
-- v3(-563.98,222.57,92.79),
-- v3(-570.75,192.29,86.62),
-- v3(-610.35,214.15,89.29),
-- v3(-610.35,214.15,89.29),
-- v3(-589.26,108.84,68.7),
-- v3(-588.05,96.17,68.7),
-- v3(-608.72,107.19,64.95),
-- v3(-619.09,106.18,64.95),
-- v3(-627.83,100.2,64.51),
-- v3(-621.7,89.31,60.95),
-- v3(-611.98,85.03,61.99),
-- v3(-599.67,82.57,60.95),
-- v3(-585.07,79.11,58.2),
-- v3(-555.91,73.79,55.48),

-- v3(-501.55,64.6,56.99),
-- v3(-500.29,54.99,56.99),
-- v3(-500.62,45.09,56.99),
-- v3(-512.46,37.09,54.36),
-- v3(-505.44,28.15,45.22),
-- v3(-483.06,32.67,61.65),
-- v3(-446.12,29.35,61.11),
-- v3(-448.73,48.38,61.65),
-- v3(-420.94,39.4,61.65),
-- v3(-447.15,72.58,63.64),
-- v3(-447.46,89.47,75.16),
-- v3(-446.01,100.61,76.15),
-- v3(-471.96,97.63,77.7),
-- v3(-486.58,98.2,77.71),
-- v3(-506.18,98.77,77.69),
-- v3(-493.21,82.95,77.71),
-- v3(-473.92,82.45,77.7),
-- v3(-498.77,92.78,77.7),
-- v3(-578.26,43.29,117.04),
-- v3(-593.43,43.76,117.04),
-- v3(-615.9,44.35,117.04),
-- v3(-619.77,54.63,117.04),
-- v3(-608.83,55.9,120.66),
-- v3(-595.91,56.52,120.66),
-- v3(-584.47,56.23,117.04),
-- v3(-577.08,66.71,117.04),

-- v3(-574.25,56.25,119.6),
-- v3(-545.47,-34.57,43.82),
-- v3(-531.37,-41.23,42.93),
-- v3(-516.27,-46.87,41.67),
-- v3(-500.47,-50.69,40.53),
-- v3(-484.96,-51.52,40.49),
-- v3(-469.4,-51.81,44.3),
-- v3(-453.05,-51.73,45.02),
-- v3(-436.69,-51.38,53.86),
-- v3(-421.23,-51.28,45.12),
-- v3(-445.74,-64.97,53.94),
-- v3(-457.44,-74.57,50.5),
-- v3(-468.72,-85.1,46.86),
-- v3(-480.12,-95.38,39.38),
-- v3(-494.44,-90.81,39.24),
-- v3(-508.79,-83.74,39.83),
-- v3(-522.65,-77.15,40.7),
-- v3(-537.15,-70.28,41.66),
-- v3(-550.93,-61.36,42.54),
-- v3(-557.04,-45.99,42.89),
-- v3(-509.59,4.63,45.24),
-- v3(-494.53,4.8,45.71),
-- v3(-478.55,4.1,46.18),
-- v3(-436.47,1.37,46.66),
-- v3(-419.97,0.42,46.98),
-- v3(-403.92,-0.5,47.41),
-- v3(-398.45,-33.32,47.29),
-- v3(-404.15,-48.17,46.15),
-- v3(-426.69,-74.06,42.68),
-- v3(-437.58,-85.47,41.33),
-- v3(-450.58,-95.1,40.26),
-- v3(-488.32,-119.46,39.43),
-- v3(-501.77,-127.47,39.47),
-- v3(-516.51,-130.98,39.4),
-- v3(-533.11,-99.99,40.13),
-- v3(-543.23,-87.15,41.25),
-- v3(-587.41,-59.48,42.43),
-- v3(-603.18,-55.46,42.7),
-- v3(-652.98,-54.85,40.54),
-- v3(-667.81,-58.45,39.26),
-- v3(-683.33,-63.77,38.25),
-- v3(-692.07,-51.36,38.24),
-- v3(-681.28,-40.26,38.72),
-- v3(-665.78,-37.54,39.48),
-- v3(-650.34,-35.63,40.76),
-- v3(-623.5,-34.04,42.59),
-- v3(-608.24,-34.38,43.16),
-- v3(-592.05,-34.96,43.72),
-- v3(-575.25,-35.39,43.47),
-- v3(-560.96,-30.14,43.9),
-- v3(-472.43,44.38,61.65),
-- v3(-366.54,56.94,64.02),
-- v3(-330.43,58.83,64.7),
-- v3(-353.0,48.59,55.37),
-- v3(-335.86,43.64,52.74),
-- v3(-354.54,16.83,57.75),
-- v3(-371.78,30.08,48.47),
-- v3(-362.5,32.13,48.38),
-- v3(-352.8,25.13,48.34),
-- v3(-335.61,15.01,58.22),
-- v3(-332.77,29.4,58.55),
-- v3(-343.57,37.16,58.27),
-- v3(-370.39,49.52,65.19),
-- v3(-357.02,60.97,65.24),
-- v3(-343.02,60.34,65.06),
-- v3(-323.33,62.22,68.3),
-- v3(-294.99,53.53,58.43),
-- v3(-272.21,48.46,59.49),
-- v3(-258.2,45.3,60.07),
-- v3(-262.82,35.6,56.71),
-- v3(-267.48,26.13,60.48),
-- v3(-268.36,17.77,54.56),
-- v3(-269.72,4.78,52.73),
-- v3(-283.34,8.46,54.21),
-- v3(-288.3,9.55,55.25),
-- v3(-291.4,1.21,52.01),
-- v3(-293.62,-8.42,49.41),
-- v3(-300.55,1.08,69.82),
-- v3(-297.06,11.55,69.82),
-- v3(-294.19,19.12,69.82),
-- v3(-281.61,24.37,76.44),
-- v3(-278.62,32.43,79.6),
-- v3(-288.8,35.47,76.44),
-- v3(-303.71,39.65,79.6),
-- v3(-304.27,39.76,79.6),
-- v3(-301.46,44.08,76.44),
-- v3(-290.59,41.03,79.65),
-- v3(-280.46,40.33,78.37),
-- v3(-273.16,41.39,76.75),
-- v3(-314.0,26.36,69.82),
-- v3(-314.24,13.24,69.82),
-- v3(-304.73,10.43,73.04),
-- v3(-215.13,-59.75,50.73),
-- v3(-171.26,-74.83,53.77),
-- v3(-74.61,-111.43,58.37),
-- v3(-96.88,-90.0,58.09),
-- v3(-91.2,-32.3,62.69),
-- v3(-135.04,-61.94,62.58),
-- v3(-141.0,-50.78,61.22),
-- v3(-146.77,-44.06,60.41),
-- v3(-128.01,-49.76,62.58),
-- v3(-104.68,-58.14,56.86),
-- v3(-117.52,-67.69,66.45),
-- v3(-97.22,-75.31,66.45),
-- v3(-85.52,-68.02,67.52),
-- v3(-93.17,-49.53,74.69),
-- v3(-106.84,-46.28,74.69),
-- v3(-108.77,-36.88,74.69),
-- v3(-97.83,-36.59,74.69),
-- v3(-92.66,-26.43,79.55),
-- v3(-82.8,-19.68,79.81),
-- v3(-96.78,-19.21,80.34),
-- v3(-111.23,-15.3,80.65),
-- v3(-102.39,-1.74,83.32),
-- v3(-98.56,4.51,84.94),
-- v3(-86.75,0.86,85.08),
-- v3(-80.71,-8.18,82.24),
-- v3(-78.2,2.8,82.81),
-- v3(-66.95,12.41,78.27),
-- v3(-65.14,23.3,78.27),
-- v3(-73.06,27.89,78.27),
-- v3(-81.2,22.12,78.27),
-- v3(-88.96,25.17,76.86),
-- v3(-100.93,27.72,76.86),
-- v3(-99.41,38.25,76.86),
-- v3(-85.64,34.79,76.86),
-- v3(-135.84,54.48,82.08),
-- v3(-135.84,54.48,82.08),
-- v3(-139.47,38.71,82.08),
-- v3(-149.21,38.17,82.07),
-- v3(-148.11,53.58,82.02),
-- v3(-158.88,57.27,82.22),
-- v3(-168.46,63.8,82.24),
-- v3(-177.75,75.74,82.22),
-- v3(-183.53,66.91,82.22),
-- v3(-192.55,55.0,82.02),
-- v3(-198.52,72.15,80.99),
-- v3(-197.86,82.21,81.04),
-- v3(-207.35,51.43,75.67),
-- v3(-209.41,42.49,75.67),
-- v3(-215.39,12.61,64.87),
-- v3(-201.61,5.77,64.87),
-- v3(-197.59,-6.69,64.87),
-- v3(-214.23,-0.9,64.87),
-- v3(-215.93,20.8,56.33),
-- v3(-191.23,11.26,56.6),
-- v3(-165.72,2.08,57.9),
-- v3(-170.04,-11.45,70.71),
-- v3(-157.67,-7.62,70.71),
-- v3(-149.63,-11.84,70.71),
-- v3(-151.92,-22.12,70.71),
-- v3(-163.95,-18.23,70.71),
-- v3(-176.89,-26.5,61.06),
-- v3(-181.05,-43.46,61.02),
-- v3(-190.27,-44.07,59.29),
-- v3(-199.07,-39.42,59.23),
-- v3(-208.05,-33.82,59.23),
-- v3(-218.03,-25.4,57.79),
-- v3(-217.78,-16.98,57.79),
-- v3(-206.05,-17.76,59.23),
-- v3(-196.81,-20.68,59.23),
-- v3(-185.98,-24.22,59.3),
-- v3(-179.8,-36.1,61.13),
-- v3(-52.38,-74.67,64.47),
-- v3(-42.7,-78.3,63.52),
-- v3(-32.15,-82.19,57.75),
-- v3(-21.58,-86.03,65.27),
-- v3(-7.5,-91.1,65.27),
-- v3(1.88,-95.39,58.12),
-- v3(26.05,-105.09,66.33),
-- v3(35.87,-108.5,66.33),
-- v3(45.68,-112.42,69.35),
-- v3(55.46,-116.47,64.69),
-- v3(65.62,-120.38,62.59),
-- v3(115.66,-141.15,66.62),
-- v3(125.77,-145.34,66.62),
-- v3(135.47,-149.35,66.62),
-- v3(145.41,-153.45,66.62),
-- v3(127.32,-155.92,66.62),
-- v3(117.42,-152.46,66.62),
-- v3(83.03,-139.79,55.6),
-- v3(64.23,-132.1,65.05),
-- v3(53.6,-127.47,63.08),
-- v3(43.66,-123.15,69.35),
-- v3(34.26,-119.21,56.46),
-- v3(24.43,-115.42,72.51),
-- v3(-3.49,-106.38,57.59),
-- v3(-13.86,-102.77,65.27),
-- v3(-23.44,-99.26,65.27),
-- v3(-34.29,-95.81,57.8),
-- v3(-43.91,-92.05,63.52),
-- v3(-54.69,-87.51,63.52),
-- v3(-45.65,-84.14,63.52),
-- v3(-4.65,-71.8,73.37),
-- v3(-3.27,-67.42,73.57),
-- v3(-12.75,-66.3,76.31),
-- v3(-22.14,-60.45,61.87),
-- v3(-30.67,-55.19,78.24),
-- v3(-37.36,-53.53,75.71),
-- v3(-39.95,-50.0,75.71),
-- v3(-38.38,-41.29,67.34),
-- v3(-31.01,-42.61,69.33),
-- v3(-20.69,-44.52,69.48),
-- v3(-16.9,-49.73,65.29),
-- v3(-27.87,-34.65,76.97),
-- v3(-34.91,-26.7,76.84),
-- v3(-25.66,-22.7,77.45),
-- v3(-24.98,-11.91,71.64),
-- v3(-30.07,-2.21,84.15),
-- v3(-29.26,4.19,84.15),
-- v3(-20.02,-1.73,84.78),
-- v3(-10.56,-5.12,85.59),
-- v3(-4.55,-13.71,85.07),
-- v3(5.37,-10.88,79.25),
-- v3(13.01,-11.66,80.35),
-- v3(9.2,-19.64,80.53),
-- v3(4.72,-28.88,78.16),
-- v3(4.07,-38.41,79.72),
-- v3(1.14,-48.84,82.1),
-- v3(-6.4,-56.51,71.29),
-- v3(-9.98,-63.35,75.37),
-- v3(-19.52,-112.52,57.44),
-- v3(-30.38,-109.13,57.69),
-- v3(-49.93,-103.5,58.16),
-- v3(-60.56,-100.41,58.23),
-- v3(-68.57,-92.13,58.32),
-- v3(-57.54,-41.4,64.37),
-- v3(-55.83,-30.06,66.8),
-- v3(-52.89,-15.99,69.61),
-- v3(-47.29,6.86,72.48),
-- v3(-28.52,20.11,72.33),
-- v3(-18.67,16.34,72.26),
-- v3(-8.71,12.86,71.6),
-- v3(1.23,9.47,71.29),
-- v3(10.91,6.11,70.94),
-- v3(20.36,2.7,70.63),
-- v3(29.99,-0.81,70.31),
-- v3(30.77,10.29,70.53),
-- v3(28.2,-10.98,70.43),
-- v3(24.58,-21.7,69.87),
-- v3(21.36,-32.44,68.67),
-- v3(17.57,-43.26,66.85),
-- v3(13.09,-55.62,64.36),
-- v3(6.04,-75.85,60.89),
-- v3(-6.75,-116.69,57.05),
-- v3(-9.13,-126.72,57.18),
-- v3(32.61,-86.59,73.57),
-- v3(36.38,-77.03,73.57),
-- v3(39.76,-67.51,75.43),
-- v3(43.18,-56.66,68.14),
-- v3(46.86,-44.9,77.4),
-- v3(50.07,-34.96,77.4),
-- v3(53.22,-25.3,77.4),
-- v3(59.59,-5.82,69.59),
-- v3(61.71,-31.2,77.4),
-- v3(59.14,-41.23,77.4),
-- v3(54.78,-54.63,69.89),
-- v3(51.39,-64.46,77.09),
-- v3(47.88,-74.13,77.08),
-- v3(44.32,-83.89,75.65),
-- v3(3.09,-167.91,63.02),
-- v3(-0.84,-178.52,63.02),
-- v3(-3.8,-188.55,63.02),
-- v3(4.75,-195.05,59.14),
-- v3(12.0,-187.98,59.14),
-- v3(16.79,-178.22,62.18),
-- v3(32.97,-144.61,56.15),
-- v3(64.63,-99.88,72.58),
-- v3(69.48,-89.81,71.6),
-- v3(74.12,-79.75,77.27),
-- v3(78.63,-69.91,81.07),
-- v3(82.98,-60.27,81.8),
-- v3(87.22,-49.83,80.94),
-- v3(98.79,-20.18,68.53),
-- v3(107.14,1.29,78.35),
-- v3(117.79,1.38,78.58),
-- v3(99.94,-40.54,69.22),
-- v3(93.3,-58.43,80.84),
-- v3(78.05,-99.71,71.1),
-- v3(47.69,-181.69,66.11),
-- v3(43.71,-192.16,64.13),
-- v3(39.7,-202.6,64.43),
-- v3(35.68,-212.34,53.16),
-- v3(29.9,-221.93,51.7),
-- v3(23.41,-230.46,60.16),
-- v3(17.33,-239.53,60.16),
-- v3(11.32,-248.77,48.18),
-- v3(2.91,-243.02,60.16),
-- v3(6.2,-232.33,59.66),
-- v3(10.27,-222.06,48.15),
-- v3(14.0,-212.68,56.8),
-- v3(18.61,-202.36,60.2),
-- v3(23.0,-192.33,60.2),
-- v3(26.78,-182.87,60.2),
-- v3(35.18,-160.08,55.98),
-- v3(-3.14,-147.15,56.91),
-- v3(-7.28,-156.75,69.04),
-- v3(-11.12,-166.68,69.07),
-- v3(-15.03,-177.11,67.97),
-- v3(-18.82,-187.32,63.91),
-- v3(-25.32,-205.51,52.85),
-- v3(-29.03,-216.24,50.64),
-- v3(-32.71,-226.87,50.62),
-- v3(-54.84,-220.9,45.94),
-- v3(-51.37,-210.44,50.64),
-- v3(-48.11,-200.55,50.64),
-- v3(-44.68,-190.13,52.67),
-- v3(-41.32,-179.96,67.06),
-- v3(-37.84,-169.72,67.06),
-- v3(-34.51,-160.2,67.06),
-- v3(-35.49,-117.83,57.88),
-- v3(-42.02,-126.27,58.07),
-- v3(-49.24,-145.36,68.03),
-- v3(-53.32,-158.06,67.06),
-- v3(-57.23,-168.49,67.06),
-- v3(-61.08,-178.84,67.06),
-- v3(-64.75,-189.25,52.3),
-- v3(-68.12,-199.65,50.62),
-- v3(-73.63,-216.27,45.94),
-- v3(-69.44,-215.42,45.94),
-- v3(-48.56,-220.95,45.94),
-- v3(-50.04,-231.24,45.99),
-- v3(-35.99,-264.22,46.77),
-- v3(-27.74,-243.99,46.66),
-- v3(-24.03,-233.95,46.68),
-- v3(-20.0,-224.03,46.68),
-- v3(-11.13,-220.08,48.15),
-- v3(-15.32,-231.56,48.15),
-- v3(-12.88,-246.07,47.25),
-- v3(2.87,-278.08,47.95),
-- v3(-8.32,-300.47,46.49),
-- v3(-12.26,-310.96,46.17),
-- v3(-15.66,-320.72,45.64),
-- v3(-18.96,-330.94,44.53),
-- v3(-22.14,-341.03,44.62),
-- v3(-25.72,-353.28,44.21),
-- v3(-33.1,-373.84,39.71),
-- v3(-38.89,-388.65,39.39),
-- v3(-45.61,-406.56,39.51),
-- v3(-51.4,-422.75,39.63),
-- v3(-56.07,-436.28,39.91),
-- v3(-59.59,-445.96,39.89),
-- v3(-63.43,-456.05,39.24),
-- v3(-67.3,-465.81,37.88),
-- v3(-72.11,-475.56,35.55),
-- v3(-82.72,-476.02,35.12),
-- v3(-88.42,-460.66,36.18),
-- v3(-84.74,-446.73,36.86),
-- v3(-81.82,-435.99,37.19),
-- v3(-78.7,-425.57,37.43),
-- v3(-72.36,-404.81,37.77),
-- v3(-68.69,-394.32,56.15),
-- v3(-64.85,-383.85,56.37),
-- v3(-61.14,-373.31,56.37),
-- v3(-54.64,-355.2,56.15),
-- v3(-50.55,-344.42,57.57),
-- v3(-41.03,-320.07,57.07),
-- v3(-32.79,-295.58,63.57),
-- v3(-29.19,-284.88,46.74),
-- v3(-40.75,-273.63,46.65),
-- v3(-43.28,-283.9,46.09),
-- v3(-45.92,-293.62,63.57),
-- v3(-49.63,-307.26,64.63),
-- v3(-57.68,-332.65,57.07),
-- v3(-61.41,-343.37,44.21),
-- v3(-65.29,-354.4,56.15),
-- v3(-69.19,-365.21,56.15),
-- v3(-77.77,-386.63,56.15),
-- v3(-81.99,-396.59,37.49),
-- v3(-86.08,-407.01,37.36),
-- v3(-90.06,-417.21,37.12),
-- v3(-94.11,-427.55,36.85),
-- v3(-98.15,-437.88,36.44),
-- v3(-102.27,-448.45,36.4),
-- v3(-112.6,-467.6,34.71),
-- v3(-122.51,-472.27,34.45),
-- v3(-130.95,-479.77,32.37),
-- v3(-141.44,-480.46,31.85),
-- v3(-145.12,-470.22,33.16),
-- v3(-139.32,-461.02,34.59),
-- v3(-133.7,-451.02,34.83),
-- v3(-128.68,-441.21,35.16),
-- v3(-124.11,-431.53,36.41),
-- v3(-119.69,-421.74,35.92),
-- v3(-106.11,-390.52,37.02),
-- v3(-102.08,-380.14,56.15),
-- v3(-95.74,-365.17,56.15),
-- v3(-91.09,-354.59,42.62),
-- v3(-86.75,-344.85,41.01),
-- v3(-81.69,-335.2,41.11),
-- v3(-76.6,-326.53,45.24),
-- v3(-71.17,-317.26,63.57),
-- v3(-59.2,-288.39,63.57),
-- v3(-55.16,-277.72,45.83),
-- v3(-70.59,-246.6,45.69),
-- v3(-81.25,-256.12,45.47),
-- v3(-84.74,-278.8,49.23),
-- v3(-86.54,-289.56,67.39),
-- v3(-93.12,-322.08,42.65),
-- v3(-97.7,-332.26,42.65),
-- v3(-103.3,-343.93,42.61),
-- v3(-107.78,-355.43,56.15),
-- v3(-110.94,-365.07,56.15),
-- v3(-114.23,-375.05,56.15),
-- v3(-117.83,-384.96,35.97),
-- v3(-122.91,-394.43,35.57),
-- v3(-133.41,-410.87,34.74),
-- v3(-138.61,-419.52,34.28),
-- v3(-144.17,-428.77,34.09),
-- v3(-152.1,-441.94,34.12),
-- v3(-152.27,-420.27,34.32),
-- v3(-141.94,-373.94,34.28),
-- v3(-136.68,-350.69,35.99),
-- v3(-122.21,-306.21,40.19),
-- v3(-115.41,-283.98,42.13),
-- v3(-112.39,-273.51,43.0),
-- v3(-109.46,-262.81,44.15),
-- v3(-98.63,-223.02,45.26),
-- v3(-93.17,-199.78,46.86),
-- v3(-87.37,-172.7,51.9),
-- v3(-80.97,-142.44,57.48),
-- v3(-64.41,-65.4,59.87),
-- v3(-39.97,33.97,72.66),
-- v3(-34.62,51.32,72.69),
-- v3(-18.57,52.42,94.73),
-- v3(-5.78,48.37,94.73),
-- v3(4.43,44.97,94.73),
-- v3(14.31,41.68,93.89),
-- v3(83.06,17.06,74.75),
-- v3(92.91,13.48,74.75),
-- v3(110.22,11.58,78.35),
-- v3(116.48,40.4,86.02),
-- v3(107.02,44.72,86.02),
-- v3(97.81,48.74,86.02),
-- v3(50.23,64.81,74.56),
-- v3(34.2,69.07,97.67),
-- v3(24.04,72.73,98.11),
-- v3(14.02,76.07,97.27),
-- v3(4.29,79.09,98.15),
-- v3(-6.55,82.27,98.11),
-- v3(-27.76,88.27,76.88),
-- v3(-29.73,98.81,78.34),
-- v3(-15.84,116.47,83.48),
-- v3(3.08,109.02,79.52),
-- v3(13.23,105.27,91.52),
-- v3(23.19,102.47,91.52),
-- v3(90.44,83.58,96.64),
-- v3(101.28,79.59,98.27),
-- v3(111.18,75.96,96.64),
-- v3(121.74,72.13,100.07),
-- v3(132.4,68.26,80.84),
-- v3(169.13,54.95,85.32),
-- v3(179.85,51.07,93.84),
-- v3(189.57,47.52,93.84),
-- v3(199.83,43.17,88.32),
-- v3(247.09,22.25,96.43),
-- v3(256.05,17.38,95.93),
-- v3(265.8,11.68,95.93),
-- v3(321.84,-22.73,101.11),
-- v3(332.32,-25.53,153.79),
-- v3(343.1,-27.49,153.79),
-- v3(354.22,-29.5,153.8),
-- v3(363.42,-35.08,155.34),
-- v3(358.75,-44.49,101.11),
-- v3(351.4,-53.78,155.34),
-- v3(346.21,-63.17,153.8),
-- v3(335.02,-61.71,153.79),
-- v3(324.79,-57.63,153.79),
-- v3(321.77,-46.29,153.79),
-- v3(326.65,-35.88,153.79),
-- v3(337.2,-15.31,153.8),
-- v3(367.98,-19.03,153.79),
-- v3(383.56,-36.93,87.84),
-- v3(386.38,-47.85,123.03),
-- v3(391.46,-56.85,123.03),
-- v3(398.8,-65.39,124.97),
-- v3(407.87,-59.71,73.16),
-- v3(414.55,-52.22,153.45),
-- v3(414.55,-52.22,153.45),
-- v3(419.4,-42.3,153.45),
-- v3(425.37,-33.34,107.01),
-- v3(428.74,-28.81,153.45),
-- v3(434.37,-19.67,153.45),
-- v3(439.25,-10.14,107.01),
-- v3(444.22,-1.09,153.45),
-- v3(433.33,2.74,153.45),
-- v3(415.67,-7.95,153.45),
-- v3(414.43,-14.13,157.24),
-- v3(405.34,-8.26,118.8),
-- v3(397.03,-2.67,118.8),
-- v3(380.2,15.21,91.79),
-- v3(370.13,20.28,91.79),
-- v3(351.01,30.0,87.82),
-- v3(332.74,40.96,90.35),
-- v3(309.57,53.48,100.39),
-- v3(296.26,59.81,100.39),
-- v3(227.01,80.65,97.31),
-- v3(222.72,70.17,98.04),
-- v3(205.23,0.88,87.98),
-- v3(184.96,-25.81,69.19),
-- v3(180.07,-43.08,68.8),
-- v3(174.35,-62.86,68.84),
-- v3(170.43,-73.87,81.03),
-- v3(166.99,-83.51,81.03),
-- v3(163.58,-93.06,81.03),
-- v3(159.56,-103.53,74.86),
-- v3(155.35,-113.69,74.29),
-- v3(146.95,-133.96,66.62),
-- v3(132.93,-164.67,66.62),
-- v3(128.92,-174.05,55.14),
-- v3(124.97,-183.51,55.15),
-- v3(120.7,-193.7,55.06),
-- v3(116.67,-203.28,55.17),
-- v3(112.64,-212.58,59.47),
-- v3(106.91,-222.48,59.47),
-- v3(100.73,-231.26,59.47),
-- v3(91.1,-228.31,59.47),
-- v3(81.42,-224.6,59.47),
-- v3(71.43,-221.29,60.05),
-- v3(110.8,-235.46,59.47),
-- v3(121.88,-239.07,60.84),
-- v3(131.91,-242.35,55.76),
-- v3(141.65,-245.53,52.01),
-- v3(154.91,-249.85,65.0),
-- v3(164.51,-252.99,65.0),
-- v3(175.46,-256.65,63.89),
-- v3(186.29,-260.52,62.36),
-- v3(215.79,-256.36,53.2),
-- v3(199.99,-242.74,66.23),
-- v3(190.46,-239.0,66.23),
-- v3(177.67,-233.98,66.23),
-- v3(168.28,-230.29,66.23),
-- v3(158.65,-226.51,60.18),
-- v3(148.65,-222.6,60.18),
-- v3(139.18,-219.13,61.2),
-- v3(129.5,-215.79,60.35),
-- v3(102.85,-206.5,54.99),
-- v3(92.36,-202.76,54.99),
-- v3(81.92,-199.04,54.99),
-- v3(73.15,-207.1,54.99),
-- v3(82.52,-211.7,54.99),
-- v3(91.77,-216.25,54.99),
-- v3(51.76,-226.89,51.31),
-- v3(93.51,-290.77,46.89),
-- v3(117.19,-299.87,46.12),
-- v3(146.65,-310.99,45.23),
-- v3(194.86,-317.78,44.55),
-- v3(176.11,-305.06,58.64),
-- v3(165.72,-300.82,58.08),
-- v3(156.3,-297.22,46.8),
-- v3(145.35,-293.04,54.16),
-- v3(135.94,-289.53,46.8),
-- v3(125.3,-285.72,58.81),
-- v3(114.61,-281.95,58.81),
-- v3(104.37,-278.4,47.92),
-- v3(94.8,-275.09,59.3),
-- v3(85.03,-271.71,47.92),
-- v3(74.91,-268.16,56.07),
-- v3(64.9,-264.37,56.07),
-- v3(54.53,-260.43,49.4),
-- v3(44.21,-256.11,48.3),
-- v3(57.54,-245.53,51.41),
-- v3(67.28,-249.44,56.56),
-- v3(77.22,-253.13,56.07),
-- v3(86.75,-256.62,48.69),
-- v3(97.41,-260.49,61.44),
-- v3(108.0,-264.29,60.3),
-- v3(118.23,-267.89,58.81),
-- v3(127.76,-271.07,58.31),
-- v3(138.47,-274.69,48.15),
-- v3(148.21,-278.09,54.16),
-- v3(158.67,-281.94,54.16),
-- v3(169.2,-285.89,59.58),
-- v3(179.6,-289.65,59.69),
-- v3(215.03,-302.17,46.33),
-- v3(233.75,-309.29,60.5),
-- v3(302.98,-334.86,45.51),
-- v3(306.14,-323.68,50.36),
-- v3(309.28,-313.1,69.97),
-- v3(329.33,-260.32,54.44),
-- v3(321.91,-224.46,57.96),
-- v3(239.32,-215.28,54.52),
-- v3(229.32,-219.81,54.53),
-- v3(218.47,-216.57,54.55),
-- v3(204.83,-212.41,54.61),
-- v3(194.34,-209.17,54.52),
-- v3(184.11,-205.88,54.61),
-- v3(174.12,-202.49,54.92),
-- v3(164.41,-199.05,55.01),
-- v3(154.87,-195.59,55.08),
-- v3(108.95,-178.5,55.5),
-- v3(43.78,-152.89,55.83),
-- v3(-57.27,-111.12,58.44),
-- v3(-87.51,-100.15,58.36),
-- v3(-105.66,-95.09,57.93),
-- v3(-125.08,-89.71,56.8),
-- v3(-135.61,-86.55,56.25),
-- v3(-145.9,-83.41,55.59),
-- v3(-198.96,-65.1,51.87),
-- v3(-238.03,-50.98,49.99),
-- v3(-248.31,-32.45,50.04),
-- v3(-246.1,-21.38,50.42),
-- v3(-243.8,-10.29,51.08),
-- v3(-241.37,0.19,52.39),
-- v3(-238.81,10.87,54.11),
-- v3(-236.33,21.72,56.18),
-- v3(-233.98,32.96,58.62),
-- v3(-231.73,45.75,61.66),
-- v3(-229.71,57.94,64.47),
-- v3(-228.14,68.42,66.72),
-- v3(-226.65,79.07,68.24),
-- v3(-225.82,90.36,69.35),
-- v3(-225.74,101.51,70.04),
-- v3(-225.7,112.76,70.19),
-- v3(-225.67,123.56,70.18),
-- v3(-214.04,124.75,70.17),
-- v3(-203.4,121.63,70.19),
-- v3(-176.76,107.6,70.72),
-- v3(-167.36,101.79,70.89),
-- v3(-157.85,95.98,71.1),
-- v3(-146.17,89.22,71.3),
-- v3(-136.73,84.3,71.45),
-- v3(-127.78,79.74,71.59),
-- v3(-117.76,74.42,71.75),
-- v3(-106.82,67.88,71.93),
-- v3(-97.24,61.98,71.99),
-- v3(-87.81,56.32,72.26),
-- v3(-78.68,51.14,72.42),
-- v3(-68.38,45.81,72.59),
-- v3(-59.1,41.36,72.74),
-- v3(-49.81,37.01,72.75),
-- v3(70.39,-7.29,69.32),
-- v3(80.87,-10.49,69.03),
-- v3(90.99,-13.64,68.78),
-- v3(122.7,-24.89,68.26),
-- v3(115.81,-55.65,67.98),
-- v3(105.06,-83.75,63.51),
-- v3(79.4,-149.13,55.6),
-- v3(64.63,-187.97,55.4),
-- v3(3.76,-212.46,53.24),
-- v3(-6.34,-208.79,53.21),
-- v3(-73.67,-183.19,50.48),
-- v3(-99.53,-189.41,48.1),
-- v3(-103.22,-199.5,46.52),
-- v3(-107.11,-209.79,45.37),
-- v3(-110.36,-219.29,45.35),
-- v3(-114.8,-233.04,45.31),
-- v3(-122.43,-256.57,44.34),
-- v3(-126.09,-267.6,43.31),
-- v3(-134.76,-293.73,41.0),
-- v3(-137.99,-303.44,40.08),
-- v3(-143.63,-320.43,38.47),
-- v3(-159.96,-368.94,34.08),
-- v3(-163.25,-378.7,34.0),
-- v3(-171.7,-385.74,33.71),
-- v3(-181.82,-387.67,33.53),
-- v3(-193.27,-389.82,32.82),
-- v3(-218.47,-392.26,31.78),
-- v3(-248.3,-391.58,30.69),
-- v3(-258.73,-391.06,30.64),
-- v3(-270.2,-390.19,30.61),
-- v3(-295.51,-388.12,30.61),
-- v3(-306.82,-387.21,30.62),
-- v3(-318.09,-386.3,30.61),
-- v3(-338.67,-384.63,30.76),
-- v3(-363.36,-382.31,31.46),
-- v3(-374.55,-380.79,31.85),
-- v3(-385.63,-379.14,32.2),
-- v3(-396.86,-377.49,32.54),
-- v3(-408.09,-375.85,32.87),
-- v3(-419.27,-374.21,33.11),
-- v3(-430.55,-372.55,33.48),
-- v3(-456.57,-368.74,34.32),
-- v3(-467.9,-367.11,34.56),
-- v3(-485.2,-365.24,34.91),
-- v3(-495.42,-364.55,35.25),
-- v3(-506.76,-364.05,35.66),
-- v3(-517.55,-363.58,35.8),
-- v3(-528.93,-363.07,35.82),
-- v3(-540.33,-362.79,35.81),
-- v3(-570.03,-362.76,35.66),
-- v3(-587.32,-362.74,35.56),
-- v3(-597.72,-362.73,35.44),
-- v3(-608.02,-362.72,35.33),
-- v3(-619.52,-362.71,35.22),
-- v3(-630.82,-362.8,35.31),
-- v3(-629.43,-375.12,35.3),
-- v3(-618.17,-375.21,35.21),
-- v3(-606.81,-375.32,35.29),
-- v3(-556.36,-375.52,35.54),
-- v3(-521.11,-376.45,35.66),
-- v3(-509.82,-376.86,35.64),
-- v3(-476.11,-378.31,34.79),
-- v3(-464.67,-379.49,34.5),
-- v3(-442.49,-383.21,33.84),
-- v3(-431.51,-385.43,33.45),
-- v3(-420.31,-387.54,33.09),
-- v3(-393.18,-390.87,32.37),
-- v3(-382.47,-392.16,32.03),
-- v3(-371.11,-393.52,31.65),
-- v3(-348.96,-396.44,30.96),
-- v3(-325.39,-400.61,30.62),
-- v3(-314.16,-402.54,30.63),
-- v3(-302.88,-404.47,30.63),
-- v3(-292.0,-406.07,30.63),
-- v3(-280.53,-406.65,30.64),
-- v3(-269.14,-406.79,30.65),
-- v3(-257.71,-406.67,30.69),
-- v3(-246.0,-405.91,30.76),
-- v3(-235.35,-405.05,30.98),
-- v3(-225.2,-404.22,31.43),
-- v3(-215.1,-403.41,31.91),
-- v3(-204.85,-402.56,32.4),
-- v3(-193.6,-401.28,32.86),
-- v3(-174.33,-396.9,33.95),
-- v3(-183.88,-415.01,34.14),
-- v3(-186.96,-425.87,34.25),
-- v3(-190.49,-436.34,34.31),
-- v3(-193.87,-446.28,34.39),
-- v3(-197.46,-456.83,34.52),
-- v3(-200.79,-466.62,34.66),
-- v3(-204.09,-476.32,34.8),
-- v3(-207.85,-486.77,34.94),
-- v3(-213.17,-501.59,35.11),
-- v3(-237.28,-572.97,35.01),
-- v3(-245.63,-597.44,34.64),
-- v3(-249.04,-608.36,34.42),
-- v3(-251.64,-618.07,34.27),
-- v3(-254.98,-630.53,34.07),
-- v3(-257.91,-641.44,33.84),
-- v3(-232.07,-613.54,34.45),
-- v3(-222.09,-575.58,35.06),
-- v3(-218.24,-562.69,35.15),
-- v3(-209.5,-537.32,35.24),
-- v3(-199.41,-508.87,35.26),
-- v3(-195.98,-499.18,35.19),
-- v3(-178.88,-450.81,34.74),
-- v3(-175.15,-440.22,34.51),
-- v3(-167.16,-417.15,34.39),
-- v3(-160.31,-504.95,29.09),
-- v3(-149.04,-504.36,29.51),
-- v3(-138.22,-503.8,29.92),
-- v3(-128.2,-503.3,30.29),
-- v3(-117.12,-502.82,30.7),
-- v3(-91.53,-501.73,31.63),
-- v3(-81.3,-501.29,31.99),
-- v3(-61.74,-500.45,40.78),
-- v3(-9.04,-498.33,34.08),
-- v3(39.15,-498.91,34.57),
-- v3(63.12,-499.83,34.57),
-- v3(84.61,-499.92,34.57),
-- v3(120.33,-499.92,43.66),
-- v3(139.77,-499.92,43.7),
-- v3(151.11,-499.92,34.57),
-- v3(175.3,-499.92,34.57),
-- v3(202.23,-499.65,34.56),
-- v3(212.26,-499.16,34.55),
-- v3(239.65,-497.49,34.55),
-- v3(250.68,-496.83,34.55),
-- v3(277.16,-495.91,43.73),
-- v3(303.56,-495.47,43.85),
-- v3(314.95,-495.58,43.85),
-- v3(325.59,-496.04,34.55),
-- v3(336.65,-496.88,34.56),
-- v3(347.12,-497.64,34.58),
-- v3(358.69,-498.46,34.72),
-- v3(370.06,-499.19,34.98),
-- v3(385.72,-500.2,35.49),
-- v3(417.75,-501.97,36.36),
-- v3(427.93,-502.52,36.46),
-- v3(449.53,-503.82,36.47),
-- v3(564.26,-512.33,36.4),
-- v3(637.31,-553.63,36.49),
-- v3(666.72,-575.04,36.49),
-- v3(694.08,-584.82,36.5),
-- v3(696.65,-619.12,36.47),
-- v3(735.12,-637.56,37.02),
-- v3(854.79,-714.75,43.11),
-- v3(777.54,-759.61,27.28),
-- v3(807.25,-1187.88,46.15),
-- v3(883.35,-1182.06,46.95),
-- v3(919.21,-1180.09,48.73),
-- v3(935.68,-1179.27,49.7),
-- v3(940.79,-1195.39,50.13),
-- v3(1143.07,-1177.12,54.67),
-- v3(1314.85,-1129.26,52.1),
-- v3(1344.54,-1117.02,52.64),
-- v3(1384.76,-1097.8,53.55),
-- v3(1401.97,-1089.07,54.05),
-- v3(1451.15,-1062.06,55.59),
-- v3(1493.7,-1034.95,57.19),
-- v3(1510.53,-1024.35,57.78),
-- v3(1524.03,-1015.85,58.22),
-- v3(1537.94,-1007.08,58.68),
-- v3(1558.18,-994.41,59.43),
-- v3(1571.67,-986.04,60.15),
-- v3(1600.33,-968.49,61.78),
-- v3(1614.12,-960.05,62.59),
-- v3(1635.46,-947.38,64.01),
-- v3(1652.88,-936.79,65.06),
-- v3(1676.15,-922.38,66.43),
-- v3(1713.7,-897.71,68.93),
-- v3(1735.16,-883.45,70.34),
-- v3(1759.78,-867.1,71.99),
-- v3(1806.99,-835.6,75.39),
-- v3(1828.91,-819.63,77.25),
-- v3(1849.57,-804.32,79.14),
-- v3(1872.35,-787.44,81.34),
-- v3(1894.65,-770.93,83.55),
-- v3(1916.52,-754.73,97.77),
-- v3(1997.9,-694.4,99.36),
-- v3(2033.4,-666.47,94.84),
-- v3(2045.61,-656.69,95.32),
-- v3(2076.53,-631.92,96.04),
-- v3(2088.37,-622.23,96.15),
-- v3(2100.1,-612.49,96.2),
-- v3(2124.37,-592.34,96.04),
-- v3(2260.05,-463.43,90.6),
-- v3(2271.49,-451.55,89.98),
-- v3(2282.15,-440.44,89.41),
-- v3(2293.37,-428.41,88.85),
-- v3(2326.89,-382.79,87.28),
-- v3(2345.13,-358.1,86.52),
-- v3(2361.96,-333.03,85.92),
-- v3(2370.88,-319.22,85.69),
-- v3(2379.37,-305.42,85.54),
-- v3(2387.82,-291.66,85.47),
-- v3(2396.31,-277.68,85.5),
-- v3(2408.64,-256.75,85.74),
-- v3(2416.44,-242.78,86.05),
-- v3(2433.01,-211.65,87.15),
-- v3(2580.34,137.57,98.14),
-- v3(2590.25,170.96,98.48),
-- v3(2624.24,358.11,97.78),
-- v3(2636.27,440.65,96.69),
-- v3(2637.42,457.05,96.54),
-- v3(2637.97,492.63,96.3),
-- v3(2627.12,574.84,95.84),
-- v3(2600.81,697.4,93.56),
-- v3(2587.55,745.2,92.04),
-- v3(2571.59,780.74,90.53),
-- v3(2543.86,839.09,88.27),
-- v3(2537.26,852.71,87.98),
-- v3(2530.26,867.14,87.74),
-- v3(2512.68,899.42,87.44),
-- v3(2492.19,931.81,87.11),
-- v3(2466.7,963.28,86.87),
-- v3(2405.29,1051.12,81.84),
-- v3(2381.53,1080.26,75.21),
-- v3(2371.57,1092.91,73.07),
-- v3(2361.59,1105.59,72.67),
-- v3(2351.63,1118.24,70.87),
-- v3(2342.19,1130.47,66.87),
-- v3(2332.39,1143.24,61.4),
-- v3(2322.99,1155.24,60.16),
-- v3(2312.12,1167.22,66.44),
-- v3(2302.47,1180.07,67.96),
-- v3(2292.6,1192.76,68.18),
-- v3(2282.45,1205.23,67.93),
-- v3(2272.32,1217.65,71.03),
-- v3(2254.12,1239.99,69.32),
-- v3(2244.39,1251.9,70.74),
-- v3(2234.19,1264.4,72.2),
-- v3(2224.02,1276.85,73.79),
-- v3(2213.85,1289.31,74.72),
-- v3(2196.15,1314.06,76.42),
-- v3(2186.48,1326.92,76.74),
-- v3(2176.79,1339.76,76.58),
-- v3(2166.86,1352.93,76.05),
-- v3(2157.14,1365.82,76.18),
-- v3(2147.28,1378.91,76.84),
-- v3(2137.6,1392.2,76.35),
-- v3(2128.63,1405.75,75.94),
-- v3(2119.46,1423.85,75.65),
-- v3(2110.03,1442.49,76.27),
-- v3(2100.76,1461.71,77.72),
-- v3(2092.17,1480.75,76.87),
-- v3(2083.72,1499.8,77.78),
-- v3(2075.4,1518.96,77.9),
-- v3(2067.13,1538.08,76.41),
-- v3(2058.67,1557.83,76.71),
-- v3(2050.6,1577.1,76.68),
-- v3(2042.42,1596.65,76.2),
-- v3(2034.36,1615.92,76.28),
-- v3(2026.53,1635.23,75.48),
-- v3(2019.18,1655.0,74.55),
-- v3(2012.03,1674.74,74.6),
-- v3(2004.96,1694.4,76.74),
-- v3(1998.34,1714.16,73.16),
-- v3(1991.7,1734.02,71.55),
-- v3(1985.24,1754.05,67.81),
-- v3(1979.22,1774.16,69.45),
-- v3(1973.37,1794.22,69.92),
-- v3(1967.53,1814.29,68.66),
-- v3(1961.7,1834.3,68.2),
-- v3(1955.76,1854.7,67.53),
-- v3(1950.09,1874.85,67.04),
-- v3(1944.88,1895.19,66.61),
-- v3(1939.65,1915.02,66.88),
-- v3(1934.21,1934.7,65.33),
-- v3(1928.89,1959.65,65.71),
-- v3(1925.3,1980.24,64.08),
-- v3(1921.53,2000.71,63.56),
-- v3(1917.8,2021.31,63.25),
-- v3(1914.38,2042.06,61.81),
-- v3(1911.9,2063.36,62.04),
-- v3(1910.03,2084.16,61.94),
-- v3(1908.08,2105.05,61.47),
-- v3(1905.43,2125.73,61.08),
-- v3(1902.72,2146.55,60.3),
-- v3(1899.1,2188.62,58.05),
-- v3(1902.22,2212.48,59.67),
-- v3(1908.5,2260.1,59.49),
-- v3(1912.27,2290.76,59.32),
-- v3(1918.69,2321.97,61.73),
-- v3(1924.64,2342.16,62.8),
-- v3(1931.57,2362.5,61.74),
-- v3(1938.73,2381.91,59.48),
-- v3(1947.01,2402.38,59.22),
-- v3(1956.07,2421.71,59.28),
-- v3(1966.12,2440.02,59.16),
-- v3(1977.98,2459.56,58.99),
-- v3(1988.85,2477.47,58.44),
-- v3(2017.6,2519.18,57.37),
-- v3(2032.53,2534.39,57.3),
-- v3(2048.16,2548.54,56.81),
-- v3(2064.46,2562.22,57.39),
-- v3(2080.48,2575.67,59.75),
-- v3(2096.51,2589.13,59.71),
-- v3(2112.44,2602.31,58.07),
-- v3(2128.74,2615.36,58.18),
-- v3(2145.12,2628.47,54.73),
-- v3(2161.67,2642.09,54.08),
-- v3(2177.62,2656.11,53.36),
-- v3(2193.41,2670.0,51.85),
-- v3(2209.17,2683.86,50.96),
-- v3(2224.91,2697.66,52.55),
-- v3(2240.8,2711.37,52.45),
-- v3(2256.62,2723.84,45.12),
-- v3(2277.38,2739.56,45.99),
-- v3(2294.16,2752.26,45.26),
-- v3(2310.92,2764.23,44.87),
-- v3(2328.49,2776.08,44.34),
-- v3(2345.72,2787.0,43.72),
-- v3(2363.26,2797.72,43.48),
-- v3(2399.61,2819.93,45.9),
-- v3(2417.87,2831.09,47.35),
-- v3(2462.57,2818.41,48.52),
-- v3(2444.82,2807.93,48.09),
-- v3(2426.6,2798.17,44.26),
-- v3(2408.84,2788.38,43.5),
-- v3(2390.36,2778.02,42.99),
-- v3(2372.04,2767.67,43.35),
-- v3(2326.84,2741.3,45.36),
-- v3(2309.12,2729.63,46.41),
-- v3(2292.17,2716.85,46.9),
-- v3(2269.31,2699.2,48.8),
-- v3(2252.19,2686.4,50.89),
-- v3(2234.81,2673.81,52.38),
-- v3(2205.86,2653.61,52.66),
-- v3(2185.27,2637.46,53.45),
-- v3(2166.61,2622.25,54.16),
-- v3(2150.42,2609.06,53.51),
-- v3(2133.77,2595.49,54.32),
-- v3(2117.61,2582.03,55.29),
-- v3(2101.95,2567.9,55.81),
-- v3(2086.73,2553.58,57.64),
-- v3(2072.29,2539.48,59.81),
-- v3(2057.47,2524.53,60.76),
-- v3(2043.36,2510.16,61.26),
-- v3(2028.95,2494.27,61.69),
-- v3(2016.11,2477.85,63.22),
-- v3(2003.91,2460.76,65.48),
-- v3(1992.91,2443.18,66.24),
-- v3(1982.24,2425.09,64.35),
-- v3(1971.91,2406.41,65.52),
-- v3(1962.8,2386.94,66.14),
-- v3(1955.38,2367.14,65.88),
-- v3(1949.2,2348.03,64.14),
-- v3(1943.75,2328.63,65.78),
-- v3(1938.74,2307.98,64.59),
-- v3(1934.59,2287.62,64.28),
-- v3(1930.82,2267.08,63.11),
-- v3(1927.21,2245.95,61.18),
-- v3(1924.89,2224.88,62.12),
-- v3(1925.5,2203.84,63.96),
-- v3(1926.1,2182.8,66.43),
-- v3(1926.7,2161.85,67.01),
-- v3(1927.28,2141.81,66.87),
-- v3(1927.89,2120.67,66.05),
-- v3(1928.49,2099.68,66.11),
-- v3(1929.13,2077.39,65.22),
-- v3(1930.45,2055.65,65.38),
-- v3(1944.14,1972.69,67.55),
-- v3(1948.01,1952.01,68.7),
-- v3(1975.82,1849.21,75.42),
-- v3(1982.71,1829.5,78.47),
-- v3(1988.56,1809.23,75.55),
-- v3(1994.36,1789.83,73.19),
-- v3(2000.65,1770.01,72.81),
-- v3(2007.08,1750.03,74.68),
-- v3(2014.57,1729.92,73.89),
-- v3(2021.89,1710.34,75.98),
-- v3(2028.96,1690.72,75.34),
-- v3(2035.97,1670.98,75.43),
-- v3(2043.47,1651.36,76.51),
-- v3(2051.12,1632.16,76.55),
-- v3(2059.54,1613.28,78.36),
-- v3(2068.9,1593.89,78.03),
-- v3(2078.23,1574.59,80.06),
-- v3(2087.07,1556.28,79.97),
-- v3(2095.78,1538.24,80.62),
-- v3(2105.05,1520.08,80.47),
-- v3(2115.11,1501.32,80.57),
-- v3(2126.69,1483.56,81.05),
-- v3(2138.21,1466.13,81.25),
-- v3(2150.2,1447.98,80.93),
-- v3(2161.25,1431.26,80.7),
-- v3(2172.8,1413.78,80.38),
-- v3(2184.32,1396.34,80.23),
-- v3(2195.97,1378.76,80.04),
-- v3(2208.18,1362.11,80.04),
-- v3(2220.34,1345.66,79.78),
-- v3(2233.08,1328.41,79.78),
-- v3(2245.0,1312.28,79.78),
-- v3(2257.18,1295.8,79.8),
-- v3(2269.77,1278.8,79.98),
-- v3(2282.79,1261.76,80.02),
-- v3(2295.17,1245.74,80.03),
-- v3(2309.04,1229.31,80.03),
-- v3(2322.41,1213.25,80.15),
-- v3(2335.49,1196.89,80.15),
-- v3(2371.04,1154.41,80.15),
-- v3(2384.95,1138.01,80.15),
-- v3(2427.55,1087.79,80.03),
-- v3(2450.1,1060.63,80.19),
-- v3(2466.22,1041.08,80.46),
-- v3(2477.9,1023.47,80.63),
-- v3(2488.74,1005.48,80.88),
-- v3(2499.33,988.04,81.53),
-- v3(2522.38,951.21,83.09),
-- v3(2533.15,934.06,83.34),
-- v3(2543.41,916.49,84.94),
-- v3(2553.56,897.77,85.51),
-- v3(2563.12,878.9,86.39),
-- v3(2571.85,859.7,88.5),
-- v3(2591.24,816.64,89.36),
-- v3(2625.43,721.09,91.83),
-- v3(2638.23,679.3,91.73),
-- v3(2662.73,573.29,94.73),
-- v3(2672.4,531.61,95.11),
-- v3(2677.25,510.78,95.03),
-- v3(2681.66,490.2,94.76),
-- v3(2684.47,469.21,94.11),
-- v3(2684.06,447.37,93.74),
-- v3(2683.58,426.32,93.04),
-- v3(2683.08,405.23,93.03),
-- v3(2681.81,383.82,93.42),
-- v3(2679.68,362.88,93.98),
-- v3(2677.03,342.78,94.75),
-- v3(2670.58,300.01,95.0),
-- v3(2667.46,279.29,95.07),
-- v3(2664.34,258.61,94.99),
-- v3(2661.24,238.17,94.77),
-- v3(2652.83,193.61,94.72),
-- v3(2648.97,173.56,94.62),
-- v3(2644.73,152.97,94.51),
-- v3(2629.62,93.21,94.19),
-- v3(2623.36,73.16,94.12),
-- v3(2609.73,29.47,94.23),
-- v3(2598.22,-5.87,94.33),
-- v3(2591.47,-25.7,94.14),
-- v3(2584.73,-44.59,94.09),
-- v3(2577.63,-63.76,94.03),
-- v3(2570.23,-83.74,93.98),
-- v3(2562.43,-102.58,93.92),
-- v3(2553.66,-121.19,94.01),
-- v3(2545.08,-140.07,93.98),
-- v3(2536.87,-158.66,93.94),
-- v3(2528.12,-178.23,93.9),
-- v3(2519.2,-196.8,93.9),
-- v3(2510.39,-214.99,93.91),
-- v3(2496.88,-240.82,93.94),
-- v3(2405.32,-363.05,94.88),
-- v3(2326.96,-459.06,95.79),
-- v3(2313.95,-474.32,95.93),
-- v3(2299.82,-490.06,96.08),
-- v3(2285.55,-505.94,103.36),
-- v3(2271.48,-521.6,96.17),
-- v3(2256.76,-537.53,96.31),
-- v3(2208.76,-584.02,96.7),
-- v3(2179.02,-612.31,96.92),
-- v3(2147.09,-641.84,97.09),
-- v3(2110.23,-671.43,97.31),
-- v3(2072.95,-695.73,97.47),
-- v3(2024.81,-725.98,97.58),
-- v3(2005.48,-735.71,97.59),
-- v3(1987.23,-744.37,97.57),
-- v3(1966.66,-750.78,97.75),
-- v3(1400.37,-1001.34,44.36),
-- v3(1382.12,-1015.0,44.06),
-- v3(1363.66,-1028.53,41.51),
-- v3(1334.95,-1048.82,41.04),
-- v3(1317.14,-1061.05,40.42),
-- v3(1258.87,-1036.45,40.45),
-- v3(1296.23,-1011.38,44.79),
-- v3(1328.49,-996.8,43.88),
-- v3(1349.28,-987.88,49.11),
-- v3(1399.42,-960.86,59.92),
-- v3(1419.12,-949.48,56.33),
-- v3(1437.77,-938.46,54.3),
-- v3(1456.1,-927.47,56.87),
-- v3(1475.71,-915.48,58.8),
-- v3(1509.23,-895.03,69.78),
-- v3(1526.54,-884.62,76.76),
-- v3(1587.48,-849.61,86.84),
-- v3(1607.05,-837.75,93.83),
-- v3(1639.54,-817.17,109.52),
-- v3(1681.55,-793.01,111.93),
-- v3(1771.47,-748.74,110.48),
-- v3(1815.64,-723.19,107.7),
-- v3(1965.46,-629.73,108.34),
-- v3(1984.67,-617.43,110.51),
-- v3(2001.52,-606.64,108.96),
-- v3(2028.02,-587.93,105.89),
-- v3(2048.09,-568.29,105.97),
-- v3(2061.38,-550.68,100.43),
-- v3(2072.82,-533.8,104.44),
-- v3(2085.28,-515.68,110.19),
-- v3(2096.73,-499.16,115.88),
-- v3(2109.94,-480.09,123.1),
-- v3(2346.6,-159.79,110.93),
-- v3(2368.79,-136.76,118.98),
-- v3(2405.52,-115.03,93.59),
-- v3(2421.93,-99.53,98.05),
-- v3(2435.84,-81.77,98.14),
-- v3(2465.4,21.57,100.35),
-- v3(2461.4,42.47,102.98),
-- v3(2464.87,65.49,103.6),
-- v3(2468.36,88.28,103.81),
-- v3(2471.44,108.3,103.92),
-- v3(2474.15,128.37,105.33),
-- v3(2476.38,149.76,111.0),
-- v3(2478.69,171.85,115.75),
-- v3(2480.74,194.18,116.98),
-- v3(2482.64,217.24,112.88),
-- v3(2484.53,240.19,110.78),
-- v3(2486.4,262.85,113.73),
-- v3(2488.3,286.0,116.36),
-- v3(2490.27,309.85,118.15),
-- v3(2491.85,330.23,118.06),
-- v3(2493.55,352.41,119.4),
-- v3(2495.21,373.89,119.09),
-- v3(2496.76,395.68,116.85),
-- v3(2497.15,416.44,119.65),
-- v3(2497.45,438.71,118.55),
-- v3(2497.62,460.38,114.56),
-- v3(2497.8,483.35,111.62),
-- v3(2497.97,506.02,113.95),
-- v3(2498.11,528.79,115.97),
-- v3(2496.0,548.86,119.17),
-- v3(2492.52,569.97,121.58),
-- v3(2488.81,592.36,121.85),
-- v3(2485.37,614.19,122.36),
-- v3(2482.52,634.29,121.36),
-- v3(2479.76,655.41,119.15),
-- v3(2477.3,677.67,115.87),
-- v3(2475.18,700.47,117.38),
-- v3(2472.69,722.53,107.04),
-- v3(2469.39,744.48,107.3),
-- v3(2465.81,765.97,107.47),
-- v3(2461.62,788.26,104.51),
-- v3(2453.35,808.48,110.63),
-- v3(2442.16,826.71,110.04),
-- v3(2434.82,847.7,104.34),
-- v3(2427.77,867.85,96.27),
-- v3(2420.0,888.67,98.04),
-- v3(2411.57,910.31,99.88),
-- v3(2403.09,930.4,101.37),
-- v3(2392.7,950.14,102.09),
-- v3(2381.49,970.12,91.39),
-- v3(2321.28,1039.85,74.01),
-- v3(2264.56,1114.6,66.03),
-- v3(2252.23,1134.25,69.48),
-- v3(2241.29,1151.7,70.96),
-- v3(2230.61,1168.73,72.16),
-- v3(2218.81,1187.53,73.63),
-- v3(2206.65,1206.93,75.06),
-- v3(2194.48,1226.32,76.16),
-- v3(2181.74,1245.58,76.55),
-- v3(2169.19,1262.91,76.4),
-- v3(2149.55,1273.3,75.84),
-- v3(2137.1,1290.32,75.82),
-- v3(2123.88,1308.76,76.09),
-- v3(2110.6,1327.29,77.03),
-- v3(2097.11,1346.4,77.55),
-- v3(2085.22,1363.46,79.02),
-- v3(2072.78,1381.83,78.47),
-- v3(2060.06,1400.86,76.89),
-- v3(2049.08,1417.92,77.27),
-- v3(2037.74,1436.4,75.7),
-- v3(2026.96,1454.62,76.2),
-- v3(2016.34,1474.42,76.19),
-- v3(2007.39,1492.61,76.59),
-- v3(1998.62,1510.67,76.15),
-- v3(1988.64,1530.46,75.35),
-- v3(1977.51,1550.99,77.14),
-- v3(1959.35,1581.96,75.56),
-- v3(1920.51,1615.73,79.88),
-- v3(1897.32,1614.94,80.13),
-- v3(1875.09,1612.15,82.26),
-- v3(1852.14,1608.46,83.89),
-- v3(1833.47,1600.63,85.84),
-- v3(1814.95,1586.39,93.92),
-- v3(1799.71,1571.96,89.6),
-- v3(1788.28,1555.0,94.53),
-- v3(1777.93,1537.3,94.93),
-- v3(1769.96,1516.12,98.48),
-- v3(1763.76,1493.77,99.91),
-- v3(1757.59,1471.73,98.35),
-- v3(1751.36,1449.49,97.64),
-- v3(1745.65,1429.08,98.94),
-- v3(1739.48,1407.04,88.77),
-- v3(1733.34,1385.09,90.47),
-- v3(1735.68,1364.52,94.89),
-- v3(1730.68,1344.23,93.99),
-- v3(1724.98,1322.17,93.16),
-- v3(1719.85,1302.34,95.31),
-- v3(1708.66,1259.09,100.2),
-- v3(1703.24,1239.13,107.19),
-- v3(1696.17,1213.92,106.96),
-- v3(1688.33,1188.74,109.53),
-- v3(1681.34,1167.27,110.69),
-- v3(1674.43,1147.68,102.54),
-- v3(1667.18,1127.47,98.97),
-- v3(1660.04,1108.06,93.6),
-- v3(1652.76,1088.6,98.68),
-- v3(1645.22,1068.49,99.83),
-- v3(1637.96,1049.13,106.07),
-- v3(1639.49,1021.88,111.28),
-- v3(1617.39,965.87,95.43),
-- v3(1608.61,944.86,89.36),
-- v3(1591.06,907.62,82.7),
-- v3(1581.63,889.51,83.34),
-- v3(1561.09,857.35,78.11),
-- v3(1495.89,779.7,77.96),
-- v3(1462.92,738.2,78.03),
-- v3(1450.01,720.18,78.7),
-- v3(1425.81,687.54,80.64),
-- v3(1411.39,671.91,80.09),
-- v3(1396.07,655.48,80.0),
-- v3(1373.12,630.87,80.48),
-- v3(1359.15,615.91,80.49),
-- v3(1329.52,583.19,81.03),
-- v3(1315.65,565.91,82.14),
-- v3(1302.63,548.84,84.24),
-- v3(1290.24,532.55,83.52),
-- v3(1276.76,514.82,83.84),
-- v3(1263.28,497.09,85.42),
-- v3(1250.4,481.04,89.48),
-- v3(1236.89,464.97,1.5),
-- v3(1221.1,446.12,92.69),
-- v3(1203.5,422.73,93.13),
-- v3(1246.74,391.85,96.97),
-- v3(1268.61,384.75,95.1),
-- v3(1289.47,375.01,99.62),
-- v3(1309.21,363.67,100.44),
-- v3(1352.98,327.17,107.98),
-- v3(1356.62,306.85,104.74),
-- v3(1349.38,287.88,94.77),
-- v3(1341.66,267.71,92.05),
-- v3(1333.96,247.74,91.47),
-- v3(1325.96,227.56,88.16),
-- v3(1240.47,57.57,76.67),
-- v3(1199.24,-10.99,106.32),
-- v3(1224.51,-152.39,66.61),
-- v3(1216.46,-199.35,67.98),
-- v3(1214.46,-219.78,69.48),
-- v3(1298.08,-330.63,93.46),
-- v3(1324.82,-358.12,90.52),
-- v3(1337.84,-376.46,80.04),
-- v3(1350.16,-395.76,76.97),
-- v3(1359.74,-415.2,94.34),
-- v3(1367.18,-436.69,103.18),
-- v3(1371.2,-464.75,93.82),
-- v3(1288.34,-831.79,78.18),
-- v3(1322.91,-865.81,84.22),
-- v3(1431.35,-877.92,102.91),
-- v3(1418.35,-897.43,90.37),
-- v3(1398.97,-907.79,81.03),
-- v3(1376.38,-909.1,83.56),
-- v3(1353.76,-911.33,87.9),
-- v3(1370.08,-888.24,98.35),
-- v3(1451.26,-866.77,104.55),
-- v3(1482.68,-861.53,94.94),
-- v3(1505.14,-857.78,87.41),
-- v3(1562.38,-824.08,86.63),
-- v3(1570.49,-804.69,95.98),
-- v3(1644.06,-765.69,107.14),
-- v3(1662.51,-755.93,113.75),
-- v3(1680.75,-746.15,120.7),
-- v3(1717.71,-726.4,137.07),
-- v3(1938.99,-594.6,119.13),
-- v3(1956.02,-584.05,123.32),
-- v3(2128.9,-468.06,123.69),
-- v3(2145.64,-451.74,127.8),
-- v3(2161.49,-435.24,131.31),
-- v3(2178.75,-415.57,124.73),
-- v3(2193.34,-398.19,123.64),
-- v3(2212.0,-375.63,112.26),
-- v3(2226.22,-357.85,103.07),
-- v3(2239.33,-341.34,97.85),
-- v3(2254.42,-322.33,101.65),
-- v3(2268.76,-304.26,95.21),
-- v3(2315.42,-237.03,112.29),
-- v3(2327.39,-217.75,116.14),
-- v3(2384.92,-97.31,103.79),
-- v3(2392.17,-78.02,111.48),
-- v3(2400.38,-56.2,119.67),
-- v3(2407.74,-36.63,122.29),
-- v3(2414.86,-17.71,119.43),
-- v3(2422.05,1.4,117.3),
-- v3(2430.18,23.03,116.04),
-- v3(2437.24,41.88,115.8),
-- v3(2443.12,61.55,113.11),
-- v3(2445.85,83.13,113.6),
-- v3(2445.94,105.25,115.97),
-- v3(2431.73,121.96,125.89),
-- v3(2433.39,143.7,129.19),
-- v3(2435.25,166.31,129.38),
-- v3(2439.07,212.83,141.32),
-- v3(2440.79,234.82,136.21),
-- v3(2442.57,257.68,133.62),
-- v3(2444.28,279.71,138.09),
-- v3(2445.97,301.65,140.9),
-- v3(2447.52,321.77,142.93),
-- v3(2452.19,382.46,135.87),
-- v3(2453.64,403.64,133.86),
-- v3(2455.01,426.04,131.25),
-- v3(2456.11,446.67,121.21),
-- v3(2456.99,468.11,128.27),
-- v3(2457.82,491.08,127.01),
-- v3(2458.47,513.87,124.57),
-- v3(2459.09,536.66,128.49),
-- v3(2459.42,558.65,133.45),
-- v3(2440.29,705.75,125.46),
-- v3(2439.48,728.6,115.95),
-- v3(2418.21,832.72,113.7),
-- v3(2405.07,866.03,105.42),
-- v3(2239.28,1118.51,75.86),
-- v3(2220.3,1126.36,81.49),
-- v3(2208.52,1145.76,90.32),
-- v3(2198.1,1163.87,93.77),
-- v3(2187.05,1183.91,91.52),
-- v3(2176.39,1204.03,90.31),
-- v3(2165.77,1224.17,81.51),
-- v3(2155.3,1244.05,80.02),
-- v3(2051.18,1381.48,90.93),
-- v3(2039.43,1398.74,97.96),
-- v3(2027.68,1418.16,97.98),
-- v3(2016.04,1437.76,89.51),
-- v3(2004.76,1456.88,88.39),
-- v3(1993.43,1476.32,88.1),
-- v3(1978.6,1512.32,82.43),
-- v3(1955.78,1551.71,80.24),
-- v3(1942.85,1568.24,82.48),
-- v3(1934.33,1589.06,80.63),
-- v3(1918.08,1635.59,77.54),
-- v3(1928.1,1655.89,70.59),
-- v3(1918.95,1573.86,88.46),
-- v3(1924.27,1534.46,91.24),
-- v3(1928.42,1512.15,84.38),
-- v3(1938.49,1490.82,92.65),
-- v3(1949.31,1473.45,102.38),
-- v3(1956.29,1453.1,111.38),
-- v3(1966.22,1434.55,119.24),
-- v3(1977.42,1414.9,130.17),
-- v3(1988.59,1395.34,132.66),
-- v3(2000.62,1376.34,133.14),
-- v3(2013.53,1357.6,128.21),
-- v3(2025.26,1341.05,121.77),
-- v3(2038.7,1322.09,121.79),
-- v3(2066.68,1282.63,120.01),
-- v3(2079.9,1263.99,119.27),
-- v3(2093.72,1244.05,122.87),
-- v3(2121.01,1196.89,121.51),
-- v3(2131.77,1176.54,131.01),
-- v3(2142.28,1156.62,134.73),
-- v3(2166.76,1110.26,118.63),
-- v3(2177.37,1090.17,128.52),
-- v3(2187.94,1070.16,134.38),
-- v3(2198.56,1050.05,136.73),
-- v3(2208.02,1032.12,140.25),
-- v3(2218.84,1011.62,143.59),
-- v3(2228.16,993.82,146.65),
-- v3(2237.8,973.95,145.99),
-- v3(2248.14,953.23,135.44),
-- v3(2258.11,934.72,127.8),
-- v3(2269.1,914.89,124.72),
-- v3(2280.1,895.07,134.78),
-- v3(2291.15,875.16,148.72),
-- v3(2302.19,855.26,164.97),
-- v3(2313.48,834.93,163.77),
-- v3(2324.81,814.51,161.7),
-- v3(2335.95,794.43,160.64),
-- v3(2347.24,774.1,156.41),
-- v3(2357.88,754.44,150.54),
-- v3(2367.92,734.93,145.46),
-- v3(2376.77,715.1,144.71),
-- v3(2380.36,692.72,141.8),
-- v3(2381.72,670.11,152.6),
-- v3(2383.14,647.75,164.85),
-- v3(2384.27,625.48,169.45),
-- v3(2384.11,603.68,168.92),
-- v3(2380.86,582.28,162.63),
-- v3(2377.32,562.02,158.07),
-- v3(2373.55,540.8,169.37),
-- v3(2369.59,518.6,184.92),
-- v3(2365.61,496.41,192.37),
-- v3(2360.08,474.11,182.74),
-- v3(2352.81,452.38,204.33),
-- v3(2342.62,431.98,221.85),
-- v3(2332.87,411.48,228.29),
-- v3(2324.27,391.01,244.76),
-- v3(2317.67,371.84,238.86),
-- v3(2310.98,350.86,243.11),
-- v3(2307.42,328.19,243.09),
-- v3(2304.4,306.24,240.75),
-- v3(2301.33,284.2,229.22),
-- v3(2294.15,262.98,217.43),
-- v3(2284.31,245.34,230.33),
-- v3(2271.86,226.55,241.21),
-- v3(2257.7,208.55,242.5),
-- v3(2243.12,194.0,241.17),
-- v3(2224.02,182.02,241.88),
-- v3(2203.26,171.31,237.54),
-- v3(2182.68,161.42,229.58),
-- v3(2163.61,148.22,226.07),
-- v3(2127.53,116.61,216.04),
-- v3(2111.6,100.51,204.07),
-- v3(2095.59,84.33,202.66),
-- v3(2084.13,63.65,188.49),
-- v3(2078.91,43.93,193.41),
-- v3(2063.9,26.83,202.38),
-- v3(2046.92,9.93,209.56),
-- v3(1995.83,-18.79,200.34),
-- v3(1977.5,-26.82,199.03),
-- v3(1959.06,-35.7,205.65),
-- v3(1940.93,-44.75,205.06),
-- v3(1922.3,-54.14,195.46),
-- v3(1902.03,-64.46,180.41),
-- v3(1881.41,-74.96,190.13),
-- v3(1804.61,-157.78,243.44),
-- v3(1805.94,-184.05,257.02),
-- v3(1813.95,-261.95,285.12),
-- v3(1793.79,-267.53,283.3),
-- v3(1762.43,-291.41,273.33),
-- v3(1745.45,-309.46,259.71),
-- v3(1654.5,-403.84,213.42),
-- v3(1639.84,-417.86,208.26),
-- v3(1604.85,-449.01,212.29),
-- v3(1581.94,-451.19,208.27),
-- v3(1562.09,-447.39,190.07),
-- v3(1540.17,-443.19,171.99),
-- v3(1520.32,-439.39,156.93),
-- v3(1500.57,-435.62,159.31),
-- v3(1480.19,-431.86,154.21),
-- v3(1441.8,-425.01,149.05),
-- v3(1419.84,-421.17,138.34),
-- v3(1397.89,-417.75,125.18),
-- v3(1339.68,-416.45,78.61),
-- v3(1403.2,-500.39,87.57),
-- v3(1414.02,-481.24,106.9),
-- v3(1425.99,-463.12,123.81),
-- v3(1447.31,-459.7,128.75),
-- v3(1468.31,-461.32,143.19),
-- v3(1490.12,-463.01,140.74),
-- v3(1511.94,-464.68,137.06),
-- v3(1533.58,-466.56,155.86),
-- v3(1556.49,-472.14,166.08),
-- v3(1637.1,-548.41,168.61),
-- v3(1625.37,-564.72,160.23),
-- v3(1578.63,-576.46,155.91),
-- v3(1557.13,-573.13,143.23),
-- v3(1517.06,-556.74,121.32),
-- v3(1489.37,-549.68,99.66),
-- v3(1441.32,-558.5,80.26),
-- v3(1427.66,-621.38,82.02),
-- v3(1450.48,-619.74,94.49),
-- v3(1472.34,-615.47,106.84),
-- v3(1493.41,-606.73,110.99),
-- v3(1513.93,-597.2,122.5),
-- v3(1590.34,-594.03,155.21),
-- v3(1609.93,-609.06,151.47),
-- v3(1648.41,-636.35,138.23),
-- v3(1714.38,-600.4,143.8),
-- v3(1735.13,-590.24,154.24),
-- v3(1783.34,-566.86,181.16),
-- v3(1805.52,-559.96,187.12),
-- v3(1825.31,-556.7,183.68),
-- v3(1920.37,-559.13,146.63),
-- v3(1943.28,-655.93,105.57),
-- v3(1988.57,-824.74,105.13),
-- v3(1995.37,-846.42,97.7),
-- v3(2016.07,-845.52,93.38),
-- v3(2072.13,-824.62,96.09),
-- v3(2128.86,-803.55,82.18),
-- v3(2270.98,-688.04,73.94),
-- v3(2313.79,-657.06,75.22),
-- v3(2336.27,-651.78,77.13),
-- v3(2387.2,-642.76,78.19),
-- v3(2407.2,-637.4,77.4),
-- v3(2449.12,-601.28,77.32),
-- v3(2427.53,-551.49,74.36),
-- v3(2420.59,-530.94,77.82),
-- v3(2406.37,-514.78,80.95),
-- v3(2387.34,-503.51,84.59),
-- v3(2364.62,-496.72,89.91),
-- v3(2342.09,-495.97,91.74),
-- v3(2324.86,-509.56,94.68),
-- v3(2309.46,-524.37,93.72),
-- v3(2294.79,-538.5,95.17),
-- v3(2279.5,-553.98,97.82),
-- v3(2265.52,-568.64,101.5),
-- v3(2250.63,-586.25,99.8),
-- v3(2236.6,-602.88,96.88),
-- v3(2178.46,-654.92,91.26),
-- v3(2159.8,-668.53,94.21),
-- v3(2142.06,-682.04,91.71),
-- v3(2104.39,-708.55,98.78),
-- v3(2087.18,-719.31,102.45),
-- v3(2069.71,-730.24,104.45),
-- v3(2052.36,-740.36,104.91),
-- v3(2019.31,-757.84,101.09),
-- v3(1998.97,-769.39,100.42),
-- v3(1981.86,-780.11,100.93),
-- v3(1952.15,-801.44,101.68),
-- v3(1934.82,-815.47,103.61),
-- v3(1918.97,-828.32,105.69),
-- v3(1901.0,-842.83,106.94),
-- v3(1883.5,-856.8,107.3),
-- v3(1865.5,-871.09,106.37),
-- v3(1845.85,-886.69,103.62),
-- v3(1827.77,-901.05,100.63),
-- v3(1811.87,-913.67,100.12),
-- v3(1794.09,-927.6,102.23),
-- v3(1775.89,-941.65,106.75),
-- v3(1758.8,-954.84,110.59),
-- v3(1722.77,-981.45,107.6),
-- v3(1703.98,-994.88,102.6),
-- v3(1685.18,-1007.78,96.92),
-- v3(1667.27,-1018.53,93.52),
-- v3(1648.84,-1027.68,90.09),
-- v3(1598.02,-1049.36,74.07),
-- v3(1578.22,-1058.5,69.92),
-- v3(1523.4,-1085.74,76.69),
-- v3(1505.56,-1095.44,81.04),
-- v3(1487.74,-1105.19,82.35),
-- v3(1442.55,-1130.8,72.97),
-- v3(1422.64,-1142.09,64.23),
-- v3(1404.2,-1152.55,54.6),
-- v3(1384.29,-1163.84,55.17),
-- v3(1364.29,-1175.19,57.36),
-- v3(1345.75,-1185.71,63.07),
-- v3(1328.14,-1195.69,65.88),
-- v3(1310.69,-1205.59,62.98),
-- v3(1293.83,-1217.28,54.24),
-- v3(1292.93,-1240.04,47.42),
-- v3(1292.16,-1261.29,43.78),
-- v3(1292.85,-1284.17,42.27),
-- v3(1293.96,-1306.96,44.97),
-- v3(1295.07,-1329.84,44.37),
-- v3(1297.51,-1370.61,48.08),
-- v3(1308.59,-1421.83,56.17),
-- v3(1314.45,-1443.94,53.81),
-- v3(1320.24,-1463.37,53.93),
-- v3(1326.0,-1482.7,52.07),
-- v3(1478.21,-1472.43,69.96),
-- v3(1635.76,-1419.19,99.98),
-- v3(1709.91,-1402.25,112.88),
-- v3(1732.19,-1397.22,113.39),
-- v3(1873.68,-1356.48,127.82),
-- v3(1924.4,-1340.13,138.04),
-- v3(1940.42,-1327.25,143.27),
-- v3(1947.38,-1305.96,144.46),
-- v3(1953.48,-1286.0,142.18),
-- v3(1958.32,-1263.55,139.18),
-- v3(1960.31,-1242.85,135.7),
-- v3(1962.36,-1222.76,132.05),
-- v3(1965.13,-1199.75,127.27),
-- v3(1969.02,-1179.48,123.34),
-- v3(1973.46,-1159.94,119.81),
-- v3(1978.18,-1139.34,115.64),
-- v3(1982.66,-1119.81,110.9),
-- v3(1988.83,-1100.78,105.52),
-- v3(1999.48,-1080.21,107.46),
-- v3(2010.61,-1059.89,106.78),
-- v3(2021.28,-1041.48,105.27),
-- v3(2035.27,-1022.87,103.93),
-- v3(2047.62,-1007.03,102.84),
-- v3(2060.4,-990.63,108.74),
-- v3(2067.5,-970.94,108.16),
-- v3(2066.33,-948.83,101.0),
-- v3(2080.29,-932.63,96.77),
-- v3(2082.82,-912.35,91.21),
-- v3(2100.95,-897.76,92.49),
-- v3(2120.69,-886.06,94.72),
-- v3(2141.32,-876.41,96.59),
-- v3(2160.21,-867.51,91.73),
-- v3(2180.74,-857.63,84.01),
-- v3(2201.59,-846.63,78.52),
-- v3(2220.7,-834.23,73.72),
-- v3(2238.11,-819.1,74.12),
-- v3(2255.27,-802.79,75.37),
-- v3(2271.86,-787.02,82.23),
-- v3(2288.45,-771.26,81.47),
-- v3(2306.0,-755.8,81.03),
-- v3(2323.57,-744.57,76.12),
-- v3(2344.84,-736.99,85.72),
-- v3(2365.61,-736.26,85.64),
-- v3(2388.41,-736.47,76.38),
-- v3(2411.31,-738.19,64.97),
-- v3(2430.71,-744.11,68.29),
-- v3(2453.07,-751.65,71.53),
-- v3(2475.17,-756.2,75.91),
-- v3(2497.51,-754.82,73.43),
-- v3(2519.45,-752.82,73.71),
-- v3(2541.15,-748.03,74.3),
-- v3(2560.77,-740.43,75.14),
-- v3(2584.93,-729.6,73.34),
-- v3(2605.55,-720.35,72.9),
-- v3(2626.02,-710.93,70.95),
-- v3(2647.16,-721.66,53.25),
-- v3(2634.72,-740.53,70.84),
-- v3(2623.57,-757.52,73.54),
-- v3(2611.78,-776.86,71.02),
-- v3(2600.31,-796.4,70.66),
-- v3(2584.21,-809.88,79.06),
-- v3(2563.37,-817.28,88.6),
-- v3(2544.77,-824.66,98.31),
-- v3(2524.35,-833.91,106.57),
-- v3(2504.16,-843.18,112.25),
-- v3(2485.97,-852.54,117.66),
-- v3(2466.16,-863.02,119.98),
-- v3(2446.1,-873.71,123.83),
-- v3(2426.45,-884.23,129.68),
-- v3(2405.42,-892.2,133.96),
-- v3(2384.3,-899.67,140.41),
-- v3(2362.65,-905.79,137.26),
-- v3(2340.36,-911.83,127.41),
-- v3(2318.74,-917.74,119.9),
-- v3(2297.22,-924.1,118.67),
-- v3(2275.77,-931.31,118.72),
-- v3(2254.43,-938.51,119.43),
-- v3(2234.68,-945.19,122.33),
-- v3(2215.86,-952.07,120.17),
-- v3(2194.84,-960.87,122.31),
-- v3(2174.07,-970.31,138.71),
-- v3(2153.54,-980.04,141.29),
-- v3(2134.93,-988.94,133.51),
-- v3(2114.26,-998.28,130.72),
-- v3(2093.17,-1007.15,119.02),
-- v3(2072.68,-1016.82,113.26),
-- v3(2070.62,-1037.59,123.62),
-- v3(2072.66,-1057.69,124.14),
-- v3(2061.54,-1077.03,125.2),
-- v3(2050.75,-1097.1,123.58),
-- v3(2039.44,-1116.1,120.26),
-- v3(2026.41,-1134.73,124.53),
-- v3(2014.8,-1151.23,129.1),
-- v3(2003.82,-1168.8,132.91),
-- v3(1994.1,-1189.19,134.27),
-- v3(1985.99,-1210.43,136.39),
-- v3(1980.74,-1232.33,139.33),
-- v3(1981.36,-1252.53,143.42),
-- v3(1986.49,-1273.27,148.89),
-- v3(1988.96,-1293.46,153.72),
-- v3(1990.01,-1313.6,159.23),
-- v3(1989.24,-1336.41,168.44),
-- v3(1986.0,-1357.66,168.87),
-- v3(1982.95,-1377.61,171.67),
-- v3(1979.88,-1397.67,168.7),
-- v3(1976.84,-1417.63,172.53),
-- v3(1973.37,-1440.15,170.21),
-- v3(1970.12,-1460.38,176.71),
-- v3(1966.91,-1480.42,183.88),
-- v3(1963.29,-1503.02,190.4),
-- v3(1956.49,-1545.46,185.06),
-- v3(1953.16,-1565.89,187.81),
-- v3(1949.05,-1585.55,183.26),
-- v3(1942.74,-1607.41,205.53),
-- v3(1935.35,-1628.87,203.67),
-- v3(1924.67,-1648.67,202.87),
-- v3(1900.42,-1683.08,194.98),
-- v3(1888.1,-1701.93,192.31),
-- v3(1876.84,-1721.6,190.45),
-- v3(1868.18,-1741.95,194.1),
-- v3(1860.42,-1763.7,194.04),
-- v3(1855.36,-1785.95,188.86),
-- v3(1850.61,-1808.09,184.26),
-- v3(1845.99,-1828.14,177.15),
-- v3(1839.81,-1849.98,166.64),
-- v3(1834.03,-1869.15,158.58),
-- v3(1827.39,-1890.75,158.72),
-- v3(1820.78,-1912.26,157.27),
-- v3(1814.11,-1933.95,152.58),
-- v3(1807.25,-1956.0,142.78),
-- v3(1779.08,-2004.19,130.63),
-- v3(1765.49,-2022.59,127.9),
-- v3(1754.34,-2039.45,125.29),
-- v3(1745.01,-2059.39,117.19),
-- v3(1738.47,-2081.23,112.16),
-- v3(1732.7,-2103.11,111.19),
-- v3(1726.73,-2125.04,109.96),
-- v3(1720.73,-2147.08,111.66),
-- v3(1715.42,-2166.75,113.09),
-- v3(1709.8,-2189.2,114.91),
-- v3(1705.04,-2211.49,114.74),
-- v3(1700.47,-2233.93,115.32),
-- v3(1713.77,-2355.8,106.59),
-- v3(1716.43,-2375.74,110.73),
-- v3(1708.35,-2396.9,106.88),
-- v3(1696.02,-2416.11,109.34),
-- v3(1684.69,-2435.78,95.37),
-- v3(1680.11,-2455.27,88.54),
-- v3(1679.73,-2477.86,83.96),
-- v3(1682.74,-2497.74,81.66),
-- v3(1695.16,-2539.76,80.95),
-- v3(1702.97,-2560.13,68.13),
-- v3(1716.45,-2578.02,58.05),
-- v3(1732.49,-2593.34,55.28),
-- v3(1739.49,-2613.78,43.35),
-- v3(1746.93,-2635.16,38.69),
-- v3(1757.02,-2658.74,34.46),
-- v3(1778.06,-2662.86,33.16),
-- v3(1797.96,-2651.33,30.6),
-- v3(1813.29,-2637.73,40.45),
-- v3(1830.25,-2622.35,48.6),
-- v3(1847.43,-2606.92,50.68),
-- v3(1862.6,-2592.99,49.53),
-- v3(1886.01,-2566.65,35.96),
-- v3(1900.54,-2548.56,56.18),
-- v3(1913.26,-2532.72,73.47),
-- v3(1927.78,-2514.63,79.14),
-- v3(1939.91,-2498.37,66.6),
-- v3(1952.21,-2481.63,58.36),
-- v3(1965.69,-2463.28,48.9),
-- v3(1977.86,-2446.59,46.78),
-- v3(1991.21,-2427.78,52.61),
-- v3(2002.82,-2411.38,59.52),
-- v3(2014.43,-2394.97,69.09),
-- v3(2026.09,-2378.49,71.74),
-- v3(2037.87,-2361.84,65.71),
-- v3(2049.59,-2345.28,60.3),
-- v3(2061.26,-2328.79,61.82),
-- v3(2073.17,-2311.96,55.42),
-- v3(2084.89,-2295.4,45.88),
-- v3(2096.7,-2278.72,40.87),
-- v3(2109.71,-2260.28,43.21),
-- v3(2121.44,-2243.51,41.7),
-- v3(2132.99,-2226.99,34.73),
-- v3(2144.83,-2210.06,42.1),
-- v3(2156.78,-2192.97,51.07),
-- v3(2169.88,-2174.24,60.1),
-- v3(2183.27,-2155.1,54.12),
-- v3(2196.42,-2136.91,43.15),
-- v3(2207.2,-2119.35,37.92),
-- v3(2210.24,-2097.59,38.5),
-- v3(2218.3,-2074.79,41.31),
-- v3(2236.9,-2061.75,39.54),
-- v3(2257.64,-2061.73,33.41),
-- v3(2281.07,-2062.13,27.67),
-- v3(2301.96,-2063.83,22.52),
-- v3(2322.71,-2066.02,15.82),
-- v3(2343.44,-2068.38,17.27),
-- v3(2364.44,-2070.99,20.59),
-- v3(2384.57,-2073.37,26.68),
-- v3(2407.71,-2075.48,28.96),
-- v3(2428.51,-2076.62,31.0),
-- v3(2449.27,-2076.42,30.07),
-- v3(2471.8,-2074.59,35.29),
-- v3(2493.8,-2066.99,46.68),
-- v3(2513.59,-2055.48,42.88),
-- v3(2531.42,-2044.11,46.29),
-- v3(2550.93,-2031.7,43.96),
-- v3(2568.52,-2019.96,31.43),
-- v3(2581.54,-2004.68,26.32),
-- v3(2594.34,-1985.26,21.08),
-- v3(2603.19,-1965.19,21.8),
-- v3(2610.96,-1945.95,20.99),
-- v3(2616.28,-1924.66,24.24),
-- v3(2619.61,-1903.22,23.55),
-- v3(2618.14,-1880.8,21.03),
-- v3(2611.79,-1861.0,21.74),
-- v3(2606.17,-1840.88,21.97),
-- v3(2602.64,-1818.87,17.57),
-- v3(2602.92,-1798.42,10.55),
-- v3(2607.68,-1778.61,16.4),
-- v3(2616.87,-1760.31,16.78),
-- v3(2625.86,-1742.13,16.85),
-- v3(2630.39,-1719.97,16.29),
-- v3(2611.23,-1710.79,18.01),
-- v3(2590.91,-1707.75,20.4),
-- v3(2570.24,-1699.21,26.13),
-- v3(2551.26,-1688.29,31.29),
-- v3(2535.98,-1674.71,28.14),
-- v3(2520.58,-1657.72,28.94),
-- v3(2507.06,-1638.81,31.68),
-- v3(2496.21,-1619.13,29.06),
-- v3(2489.61,-1598.27,27.61),
-- v3(2482.4,-1573.13,23.48),
-- v3(2475.3,-1548.46,16.26),
-- v3(2462.63,-1507.34,25.31),
-- v3(2456.87,-1487.65,35.03),
-- v3(2451.24,-1467.61,35.24),
-- v3(2445.83,-1447.09,56.6),
-- v3(2440.77,-1426.07,35.44),
-- v3(2436.89,-1405.91,35.87),
-- v3(2434.97,-1385.87,36.42),
-- v3(2435.16,-1365.49,38.13),
-- v3(2436.93,-1344.38,38.67),
-- v3(2439.69,-1324.11,37.86),
-- v3(2446.31,-1304.59,34.5),
-- v3(2453.38,-1285.01,28.47),
-- v3(2461.34,-1266.56,23.29),
-- v3(2471.03,-1248.62,22.66),
-- v3(2484.01,-1232.42,28.22),
-- v3(2500.65,-1216.5,5.98),
-- v3(2516.49,-1203.44,3.51),
-- v3(2534.65,-1189.44,7.8),
-- v3(2550.75,-1176.86,22.01),
-- v3(2567.45,-1163.43,29.25),
-- v3(2585.08,-1148.95,37.5),
-- v3(2599.8,-1134.11,37.58),
-- v3(2610.27,-1115.83,32.02),
-- v3(2617.49,-1097.08,35.89),
-- v3(2623.56,-1077.31,33.79),
-- v3(2627.79,-1054.31,29.21),
-- v3(2626.57,-1010.08,22.36),
-- v3(2625.08,-982.63,29.81),
-- v3(2624.08,-962.16,21.03),
-- v3(2623.62,-940.26,8.17),
-- v3(2624.97,-918.93,13.32),
-- v3(2629.78,-898.26,19.82),
-- v3(2638.25,-880.08,27.44),
-- v3(2650.12,-863.56,29.86),
-- v3(2665.28,-848.35,30.49),
-- v3(2682.56,-834.75,30.13),
-- v3(2702.97,-823.85,28.0),
-- v3(2721.49,-815.6,25.7),
-- v3(2739.7,-806.06,24.86),
-- v3(2758.57,-795.85,22.69),
-- v3(2800.98,-757.84,11.37),
-- v3(2804.52,-737.35,12.6),
-- v3(2722.41,-475.78,66.46),
-- v3(2735.29,-457.22,71.9),
-- v3(2763.83,-436.68,69.48),
-- v3(2856.91,-443.81,32.9),
-- v3(2851.81,-466.17,24.58),
-- v3(2835.1,-477.67,33.22),
-- v3(2815.31,-481.86,28.74),
-- v3(2789.05,-417.19,64.96),
-- v3(2794.57,-388.16,47.85),
-- v3(2796.54,-362.69,54.89),
-- v3(2793.98,-325.64,69.33),
-- v3(2791.32,-296.49,71.57),
-- v3(2787.56,-267.42,60.97),
-- v3(2772.65,-185.29,29.91),
-- v3(2719.02,108.85,39.51),
-- v3(2719.16,134.56,33.51),
-- v3(2719.93,161.16,65.45),
-- v3(2720.66,186.57,43.02),
-- v3(2721.27,216.02,64.64),
-- v3(2720.82,241.47,53.75),
-- v3(2720.29,268.56,75.12),
-- v3(2719.73,322.89,70.85),
-- v3(2719.56,348.49,73.59),
-- v3(2719.25,378.13,78.52),
-- v3(2717.49,448.67,82.93),
-- v3(2716.19,487.0,91.02),
-- v3(2714.11,559.04,84.95),
-- v3(2712.3,584.92,73.49),
-- v3(2710.43,610.19,75.99),
-- v3(2708.56,635.47,80.33),
-- v3(2706.75,663.15,81.74),
-- v3(2706.27,688.49,81.12),
-- v3(2707.09,724.91,72.4),
-- v3(2707.59,752.55,62.27),
-- v3(2707.65,779.45,60.54),
-- v3(2707.67,805.43,62.25),
-- v3(2707.68,835.11,72.21),
-- v3(2707.66,861.22,74.68),
-- v3(2707.64,890.9,54.68),
-- v3(2705.37,1006.76,13.92),
-- v3(2703.53,1060.06,22.16),
-- v3(2701.19,1144.37,20.0),
-- v3(2699.83,1189.0,19.38),
-- v3(2692.99,1478.07,25.03),
-- v3(2690.91,1597.75,25.06),
-- v3(2691.24,1706.63,25.19),
-- v3(2691.38,1736.03,24.98),
-- v3(2691.43,1762.27,14.42),
-- v3(2691.06,1792.72,23.49),
-- v3(2689.9,1819.06,28.22),
-- v3(2687.08,1848.12,33.55),
-- v3(2683.19,1873.64,38.16),
-- v3(2678.42,1903.21,42.89),
-- v3(2673.63,1932.94,39.16),
-- v3(2664.83,1988.73,43.53),
-- v3(2660.75,2017.35,41.16),
-- v3(2651.05,2089.09,43.5),
-- v3(2648.19,2114.42,34.75),
-- v3(2645.34,2144.58,32.28),
-- v3(2643.66,2170.47,23.23),
-- v3(2642.49,2200.75,27.83),
-- v3(2642.39,2227.59,39.0),
-- v3(2642.51,2252.79,36.34),
-- v3(2642.73,2279.79,30.98),
-- v3(2643.52,2305.28,31.66),
-- v3(2644.73,2331.2,33.68),
-- v3(2646.06,2358.02,35.5),
-- v3(2647.35,2383.93,38.53),
-- v3(2648.62,2409.4,42.68),
-- v3(2649.89,2435.02,43.1),
-- v3(2651.3,2463.33,42.9),
-- v3(2652.57,2488.8,36.11),
-- v3(2653.81,2518.78,40.12),
-- v3(2654.44,2544.26,45.16),
-- v3(2654.79,2571.21,53.24),
-- v3(2654.85,2596.65,56.93),
-- v3(2655.37,2621.8,66.74),
-- v3(2658.75,2664.99,75.87),
-- v3(2662.2,2691.16,65.73),
-- v3(2665.72,2717.78,43.46),
-- v3(2669.03,2742.76,39.48),
-- v3(2672.43,2768.49,37.71),
-- v3(2675.87,2794.51,41.05),
-- v3(2682.59,2845.37,40.37),
-- v3(2686.35,2873.77,36.46),
-- v3(2689.77,2899.65,36.53),
-- v3(2693.21,2925.67,36.99),
-- v3(2708.14,2988.11,36.67),
-- v3(2717.77,3011.71,43.81),
-- v3(2740.43,3057.69,61.97),
-- v3(2753.9,3081.08,67.58),
-- v3(2767.09,3103.77,69.65),
-- v3(2781.77,3129.92,68.66),
-- v3(2806.04,3174.94,72.05),
-- v3(2819.98,3200.83,74.56),
-- v3(2834.14,3227.11,61.49),
-- v3(2867.78,3289.57,71.65),
-- v3(2881.65,3316.17,79.87),
-- v3(2892.67,3338.83,78.81),
-- v3(2903.09,3363.22,71.77),
-- v3(2913.19,3391.31,74.02),
-- v3(2923.06,3419.31,57.49),
-- v3(2932.93,3447.31,63.94),
-- v3(2941.46,3471.49,65.66),
-- v3(2951.43,3499.77,66.7),
-- v3(2960.3,3524.94,67.56),
-- v3(2968.63,3548.56,70.56),
-- v3(2977.05,3572.46,71.2),
-- v3(2985.35,3596.09,70.87),
-- v3(2993.07,3621.17,70.56),
-- v3(2999.34,3646.19,70.42),
-- v3(3004.49,3672.06,70.88),
-- v3(3009.69,3701.59,70.48),
-- v3(3020.42,3762.88,70.08),
-- v3(3024.82,3787.98,68.17),
-- v3(3029.18,3813.7,66.73),
-- v3(3032.77,3839.71,62.4),
-- v3(3036.33,3866.02,62.88),
-- v3(3039.52,3890.86,68.17),
-- v3(3040.77,3917.07,74.48),
-- v3(3041.5,3942.26,73.49),
-- v3(3042.2,3968.5,70.49),
-- v3(3041.93,3997.28,69.85),
-- v3(3039.94,4022.83,62.84),
-- v3(3037.69,4049.41,64.88),
-- v3(3031.3,4115.33,62.02),
-- v3(3012.05,4240.68,59.23),
-- v3(3003.94,4266.12,58.69),
-- v3(2979.9,4327.2,58.07),
-- v3(2969.26,4350.53,56.09),
-- v3(2922.31,4454.06,48.34),
-- v3(2911.62,4478.52,48.55),
-- v3(2901.47,4502.39,48.59),
-- v3(2891.65,4526.08,46.0),
-- v3(2882.03,4549.69,49.07),
-- v3(2872.22,4574.2,47.8),
-- v3(2853.76,4620.44,49.28),
-- v3(2844.25,4644.26,48.86),
-- v3(2823.52,4697.81,46.96),
-- v3(2815.51,4722.97,47.04),
-- v3(2807.84,4747.28,47.04),
-- v3(2800.08,4771.89,47.06),
-- v3(2791.15,4800.21,46.9),
-- v3(2774.27,4853.71,42.26),
-- v3(2766.2,4879.31,36.9),
-- v3(2758.44,4903.91,34.07),
-- v3(2750.79,4928.24,33.0),
-- v3(2730.97,4995.42,34.09),
-- v3(2710.01,5063.64,41.65),
-- v3(2701.97,5088.78,41.86),
-- v3(2679.72,5158.31,43.48),
-- v3(2672.09,5182.16,44.07),
-- v3(2664.23,5206.72,42.91),
-- v3(2656.1,5232.13,43.27),
-- v3(2647.46,5259.12,44.45),
-- v3(2639.28,5284.68,43.07),
-- v3(2630.09,5313.39,43.21),
-- v3(2621.8,5339.24,42.93),
-- v3(2613.51,5365.09,41.23),
-- v3(2604.02,5393.38,42.01),
-- v3(2594.19,5420.76,43.99),
-- v3(2584.46,5447.69,44.17),
-- v3(2575.43,5472.65,41.7),
-- v3(2565.76,5499.12,46.23),
-- v3(2556.45,5524.45,48.58),
-- v3(2546.99,5550.2,45.43),
-- v3(2537.42,5576.23,46.79),
-- v3(2527.7,5602.69,45.23),
-- v3(2518.08,5628.86,45.61),
-- v3(2507.25,5657.45,45.98),
-- v3(2496.2,5682.71,47.45),
-- v3(2482.61,5706.18,50.56),
-- v3(2468.84,5728.32,52.23),
-- v3(2444.15,5766.96,53.09),
-- v3(2210.06,6067.58,60.53),
-- v3(2174.81,6106.7,63.35),
-- v3(2153.95,6126.16,62.86),
-- v3(2098.0,6178.83,89.26),
-- v3(2077.74,6194.58,104.5),
-- v3(2054.13,6211.81,87.27),
-- v3(2032.88,6227.3,57.87),
-- v3(1316.58,6535.78,13.94),
-- v3(1291.29,6539.01,12.19),
-- v3(1264.87,6541.55,5.46),
-- v3(1237.83,6543.72,16.84),
-- v3(1212.88,6545.67,6.97),
-- v3(1183.14,6547.83,3.93),
-- v3(1153.69,6549.93,20.61),
-- v3(1126.62,6551.68,18.27),
-- v3(1097.01,6553.52,14.15),
-- v3(1067.1,6555.33,12.22),
-- v3(1040.78,6556.91,11.47),
-- v3(1011.46,6558.67,9.06),
-- v3(981.85,6560.43,9.55),
-- v3(952.38,6562.17,12.04),
-- v3(926.8,6563.68,11.77),
-- v3(897.19,6565.43,10.42),
-- v3(867.72,6567.18,8.82),
-- v3(842.45,6568.76,8.62),
-- v3(816.96,6571.24,11.79),
-- v3(790.97,6574.74,6.06),
-- v3(766.07,6579.42,3.55),
-- v3(741.1,6584.54,3.15),
-- v3(672.21,6598.69,9.3),
-- v3(603.06,6615.66,15.43),
-- v3(539.73,6637.15,14.26),
-- v3(478.77,6670.98,10.56),
-- v3(455.53,6689.93,9.33),
-- v3(405.83,6739.46,5.58),
-- v3(331.87,6832.27,8.38),
-- v3(311.79,6879.88,8.74),
-- v3(301.29,6903.22,4.77),
-- v3(219.0,6982.17,3.98),
-- v3(197.22,6995.69,3.39),
-- v3(175.44,7009.21,10.36),
-- v3(153.66,7022.74,3.71),
-- v3(62.07,7119.53,12.92),
-- v3(53.19,7179.8,3.3),
-- v3(49.98,7207.25,3.81),
-- v3(73.75,7215.85,3.25),
-- v3(72.26,7190.31,2.59),
-- v3(77.98,7228.93,3.19),
-- v3(90.9,7142.33,21.29),
-- v3(121.93,7097.38,3.91),
-- v3(131.46,7104.76,2.53),
-- v3(116.01,7121.73,12.23),
-- v3(45.96,7013.97,9.21),
-- v3(31.08,6991.53,8.31),
-- v3(19.11,6967.59,11.42),
-- v3(8.23,6942.87,13.55),
-- v3(-12.5,6871.36,13.59),
-- v3(-84.72,6713.59,2.85),
-- v3(-99.24,6687.93,3.13),
-- v3(-112.77,6662.72,5.02),
-- v3(-139.17,6655.66,2.58),
-- v3(-198.01,6632.17,2.06),
-- v3(-263.98,6566.77,3.11),
-- v3(-285.18,6543.8,3.06),
-- v3(-314.36,6515.3,3.68),
-- v3(-620.21,6125.34,10.44),
-- v3(-617.83,6070.01,8.67),
-- v3(-691.92,5961.55,14.81),
-- v3(-719.5,5954.0,16.12),
-- v3(-837.52,5956.92,19.81),
-- v3(-868.65,5974.47,17.35),
-- v3(-862.15,5948.18,6.9),
-- v3(-844.34,5912.12,5.34),
-- v3(-831.79,5886.72,6.5),
-- v3(-827.62,5747.88,7.62),
-- v3(-869.67,5605.06,1.5),
-- v3(-880.23,5569.2,1.5),
-- v3(-889.83,5537.38,1.5),
-- v3(-912.27,5503.6,1.5),
-- v3(-935.46,5489.69,1.5),
-- v3(-962.31,5479.05,1.5),
-- v3(-987.19,5469.13,1.5),
-- v3(-1011.93,5457.81,1.5),
-- v3(-1165.12,5350.3,1.5),
-- v3(-1186.7,5337.17,1.5),
-- v3(-1210.8,5328.27,1.5),
-- v3(-1375.62,5214.44,1.5),
-- v3(-1385.8,5190.74,1.5),
-- v3(-1400.79,5170.53,1.5),
-- v3(-1423.26,5154.54,1.5),
-- v3(-1526.4,5113.01,1.5),
-- v3(-1548.72,5095.02,1.5),
-- v3(-1504.92,4886.31,1.5),
-- v3(-1478.02,4880.74,1.5),
-- v3(-1392.75,4880.67,1.5),
-- v3(-1291.06,4890.56,1.5),
-- v3(-1300.21,4817.47,144.41),
-- v3(-1318.9,4799.49,130.1),
-- v3(-1337.59,4781.55,92.37),
-- v3(-1184.29,5066.14,139.81),
-- v3(-1143.71,5092.89,132.24),
-- v3(-1121.09,5109.41,126.01),
-- v3(-1064.47,5150.82,125.55),
-- v3(-968.1,5221.04,110.69),
-- v3(-909.13,5271.68,85.53),
-- v3(-783.61,5350.3,62.41),
-- v3(-731.16,5363.57,61.15),
-- v3(-430.19,4830.9,215.02),
-- v3(-439.57,4854.28,210.22),
-- v3(-412.62,4857.29,204.82),
-- v3(-284.22,4733.13,217.14),
-- v3(-239.72,4675.72,203.08),
-- v3(-226.71,4650.97,200.63),
-- v3(-214.77,4627.92,192.86),
-- v3(-201.68,4603.38,176.25),
-- v3(-141.06,4553.89,119.03),
-- v3(-115.77,4544.57,102.49),
-- v3(-88.8,4534.63,83.28),
-- v3(-62.12,4524.34,73.5),
-- v3(-36.75,4513.2,91.61),
-- v3(-11.39,4502.0,86.27),
-- v3(16.18,4492.67,80.73),
-- v3(44.69,4486.41,69.97),
-- v3(69.19,4481.2,74.1),
-- v3(171.28,4459.42,89.34),
-- v3(236.27,4518.35,91.2),
-- v3(234.67,4545.92,107.56),
-- v3(233.28,4572.89,114.74),
-- v3(233.65,4598.18,121.23),
-- v3(234.28,4623.45,135.42),
-- v3(235.26,4653.37,152.99),
-- v3(243.35,4677.66,156.31),
-- v3(261.58,4695.44,168.77),
-- v3(284.1,4714.04,189.47),
-- v3(304.72,4731.26,199.43),
-- v3(325.43,4749.63,217.3),
-- v3(342.78,4768.9,244.3),
-- v3(351.32,4794.71,273.79),
-- v3(354.37,4819.53,292.25),
-- v3(356.66,4845.87,317.89),
-- v3(354.69,4870.95,340.27),
-- v3(352.23,4899.11,368.04),
-- v3(300.44,5010.54,446.29),
-- v3(280.37,5032.31,455.11),
-- v3(264.4,5052.09,480.7),
-- v3(249.87,5074.58,505.06),
-- v3(228.66,5111.33,511.74),
-- v3(192.22,5195.69,570.06),
-- v3(170.59,5246.43,577.6),
-- v3(158.62,5270.85,572.16),
-- v3(145.75,5297.2,553.98),
-- v3(133.59,5321.99,517.7),
-- v3(120.85,5347.76,481.93),
-- v3(108.1,5370.97,467.03),
-- v3(94.3,5395.48,452.16),
-- v3(80.45,5419.25,432.48),
-- v3(65.89,5440.73,416.45),
-- v3(50.17,5463.43,416.11),
-- v3(33.76,5486.86,412.71),
-- v3(18.69,5507.21,375.86),
-- v3(-47.81,5595.97,342.5),
-- v3(-62.05,5616.76,361.4),
-- v3(-77.41,5639.66,371.92),
-- v3(-90.6,5662.66,376.95),
-- v3(-103.26,5687.56,364.91),
-- v3(-114.69,5711.08,333.23),
-- v3(-136.14,5763.81,293.36),
-- v3(-138.39,5789.77,265.89),
-- v3(-136.95,5815.72,240.56),
-- v3(-134.01,5843.89,212.07),
-- v3(-129.3,5869.38,205.11),
-- v3(-119.77,5894.94,199.27),
-- v3(-104.85,5916.8,179.72),
-- v3(-85.03,5936.47,153.22),
-- v3(-63.1,5956.7,125.59),
-- v3(-43.55,5973.85,139.11),
-- v3(-20.84,5991.78,142.55),
-- v3(1.6,6008.09,147.98),
-- v3(22.84,6022.69,143.65),
-- v3(47.08,6038.61,156.34),
-- v3(70.16,6053.17,165.6),
-- v3(94.5,6068.53,168.6),
-- v3(147.43,6102.38,150.57),
-- v3(169.44,6116.81,166.92),
-- v3(236.83,6155.59,186.21),
-- v3(259.09,6167.3,196.95),
-- v3(282.31,6178.42,199.26),
-- v3(307.56,6189.84,203.11),
-- v3(330.94,6199.76,208.58),
-- v3(360.31,6209.95,220.77),
-- v3(409.6,6225.43,213.48),
-- v3(435.41,6231.95,219.44),
-- v3(463.61,6234.58,218.88),
-- v3(491.69,6233.93,206.24),
-- v3(517.37,6233.31,194.25),
-- v3(544.05,6233.08,177.68),
-- v3(572.7,6234.32,170.14),
-- v3(601.05,6235.79,155.0),
-- v3(681.92,6240.61,131.61),
-- v3(742.1,6241.57,131.29),
-- v3(770.27,6241.99,131.23),
-- v3(797.87,6242.39,137.43),
-- v3(824.05,6242.78,149.51),
-- v3(849.37,6243.16,160.57),
-- v3(909.07,6242.86,168.9),
-- v3(936.25,6241.72,148.99),
-- v3(1005.75,6237.06,126.24),
-- v3(1033.46,6234.91,141.12),
-- v3(1062.07,6232.61,152.09),
-- v3(1090.67,6230.24,161.3),
-- v3(1118.61,6227.22,159.83),
-- v3(1146.26,6223.85,151.43),
-- v3(1176.52,6220.16,148.8),
-- v3(1204.89,6216.69,146.28),
-- v3(1233.41,6213.21,137.29),
-- v3(1260.62,6209.89,141.37),
-- v3(1289.07,6206.39,151.49),
-- v3(1318.24,6202.8,135.0),
-- v3(1344.81,6199.53,104.52),
-- v3(1369.92,6196.44,96.93),
-- v3(1396.9,6193.12,98.51),
-- v3(1423.74,6189.81,82.82),
-- v3(1451.24,6185.66,115.88),
-- v3(1479.82,6180.17,152.33),
-- v3(1506.76,6173.39,182.62),
-- v3(1532.38,6166.43,186.11),
-- v3(1559.76,6157.38,174.12),
-- v3(1585.7,6146.59,169.5),
-- v3(1637.46,6124.82,175.84),
-- v3(1663.47,6113.89,170.86),
-- v3(1731.18,6085.21,173.23),
-- v3(1756.35,6074.53,153.66),
-- v3(1809.05,6052.11,163.51),
-- v3(1833.44,6041.73,173.31),
-- v3(1896.43,6014.81,163.66),
-- v3(1921.57,6003.05,153.64),
-- v3(1944.1,5989.7,133.04),
-- v3(1967.62,5974.87,124.58),
-- v3(1989.44,5961.11,133.27),
-- v3(2012.26,5946.32,158.7),
-- v3(2032.15,5929.68,179.34),
-- v3(2069.45,5894.92,163.72),
-- v3(2089.74,5876.0,160.69),
-- v3(2118.51,5847.54,174.37),
-- v3(2138.13,5826.84,153.58),
-- v3(2205.43,5731.44,144.24),
-- v3(2239.91,5662.68,71.61),
-- v3(2280.2,5580.82,45.47),
-- v3(2309.63,5502.28,67.58),
-- v3(2315.88,5474.52,76.76),
-- v3(2319.08,5449.22,84.55),
-- v3(2313.58,5421.82,98.01),
-- v3(2305.79,5396.01,113.03),
-- v3(2277.64,5334.79,115.31),
-- v3(2259.41,5315.27,109.75),
-- v3(2232.58,5305.06,119.07),
-- v3(2205.81,5303.18,123.17),
-- v3(2176.38,5304.96,108.78),
-- v3(2150.52,5306.55,107.06),
-- v3(2125.22,5307.89,112.76),
-- v3(2068.0,5309.17,116.47),
-- v3(2039.82,5307.68,125.81),
-- v3(2011.84,5303.88,120.68),
-- v3(1983.93,5298.32,111.77),
-- v3(1958.67,5291.33,115.66),
-- v3(1891.89,5264.24,101.85),
-- v3(1866.54,5251.81,90.72),
-- v3(1842.45,5237.84,75.35),
-- v3(1818.37,5223.37,68.12),
-- v3(1796.47,5207.56,84.7),
-- v3(1776.04,5190.21,95.77),
-- v3(1699.04,5115.79,112.49),
-- v3(1655.26,5072.69,81.26),
-- v3(1628.28,5038.56,79.6),
-- v3(1607.59,5006.07,80.24),
-- v3(1591.03,4972.69,64.02),
-- v3(1569.65,4926.81,68.8),
-- v3(1559.17,4901.07,75.12),
-- v3(1551.43,4874.24,77.72),
-- v3(1548.19,4847.15,75.69),
-- v3(1545.23,4821.3,72.6),
-- v3(1542.07,4793.72,82.89),
-- v3(1538.86,4766.78,85.03),
-- v3(1534.22,4739.87,87.14),
-- v3(1524.88,4712.78,96.9),
-- v3(1482.09,4674.7,97.2),
-- v3(1460.04,4660.1,86.11),
-- v3(1437.69,4648.71,76.39),
-- v3(1413.53,4639.66,85.82),
-- v3(1386.72,4630.23,97.81),
-- v3(1359.17,4621.83,99.17),
-- v3(1290.37,4622.62,119.53),
-- v3(1262.46,4624.84,102.09),
-- v3(1236.91,4624.81,91.97),
-- v3(1210.65,4623.77,81.74),
-- v3(1182.7,4624.04,71.6),
-- v3(1156.47,4626.85,77.46),
-- v3(1128.46,4632.22,82.95),
-- v3(1100.08,4639.2,97.95),
-- v3(1073.56,4644.51,120.11),
-- v3(1023.33,4650.7,123.11),
-- v3(998.05,4652.55,135.72),
-- v3(971.62,4653.57,154.38),
-- v3(946.05,4653.66,145.47),
-- v3(920.25,4650.49,130.14),
-- v3(894.22,4641.08,126.35),
-- v3(870.51,4626.66,120.68),
-- v3(847.49,4612.16,107.13),
-- v3(823.13,4596.82,86.0),
-- v3(766.11,4535.66,67.42),
-- v3(751.94,4513.6,83.98),
-- v3(728.07,4470.15,108.93),
-- v3(701.71,4427.83,113.02),
-- v3(679.36,4413.36,97.23),
-- v3(652.54,4408.91,102.86),
-- v3(629.83,4421.06,122.29),
-- v3(608.11,4436.2,111.31),
-- v3(586.32,4454.25,105.38),
-- v3(566.88,4470.86,108.13),
-- v3(544.57,4490.88,100.1),
-- v3(525.97,4509.75,122.67),
-- v3(510.01,4535.09,156.66),
-- v3(493.08,4590.58,187.2),
-- v3(485.34,4615.52,201.43),
-- v3(531.38,4713.16,212.13),
-- v3(555.56,4721.7,196.56),
-- v3(579.18,4730.04,195.14),
-- v3(603.13,4737.89,184.74),
-- v3(619.64,4759.98,196.38),
-- v3(633.49,4786.04,186.42),
-- v3(679.79,4855.48,196.0),
-- v3(703.39,4874.5,216.93),
-- v3(726.72,4893.17,233.95),
-- v3(750.05,4911.84,251.56),
-- v3(769.67,4927.73,265.37),
-- v3(809.24,4961.32,315.12),
-- v3(832.35,4982.98,319.48),
-- v3(854.07,5003.94,319.73),
-- v3(871.7,5021.85,326.19),
-- v3(897.7,5048.55,355.59),
-- v3(918.5,5070.07,382.76),
-- v3(962.13,5119.55,382.62),
-- v3(977.52,5142.98,352.54),
-- v3(992.07,5169.03,333.0),
-- v3(1004.44,5193.39,316.34),
-- v3(1036.07,5262.95,324.86),
-- v3(1042.61,5292.73,344.53),
-- v3(1049.05,5322.11,361.57),
-- v3(1069.33,5354.18,381.47),
-- v3(1091.39,5373.79,403.29),
-- v3(1109.34,5395.53,424.96),
-- v3(1114.7,5423.91,453.63),
-- v3(1112.52,5452.66,483.91),
-- v3(1110.27,5482.42,516.47),
-- v3(1121.64,5506.28,526.64),
-- v3(1168.49,5607.58,520.16),
-- v3(1162.92,5635.94,505.28),
-- v3(1133.1,5780.68,523.61),
-- v3(1114.32,5828.9,486.85),
-- v3(1103.89,5853.53,465.31),
-- v3(1092.61,5880.14,470.7),
-- v3(1082.25,5904.59,447.8),
-- v3(1070.98,5930.14,425.08),
-- v3(1059.63,5954.81,406.63),
-- v3(1046.27,5982.42,358.76),
-- v3(1032.27,6006.62,334.07),
-- v3(1015.09,6029.44,310.07),
-- v3(992.31,6047.12,274.86),
-- v3(904.49,6061.54,272.0),
-- v3(787.92,6062.04,296.85),
-- v3(759.78,6060.96,286.16),
-- v3(704.48,6055.2,332.08),
-- v3(677.38,6049.36,342.29),
-- v3(608.82,6019.56,386.18),
-- v3(584.0,6005.82,416.8),
-- v3(559.36,5992.18,425.45),
-- v3(532.71,5977.43,436.81),
-- v3(509.22,5964.32,445.41),
-- v3(455.97,5933.25,483.59),
-- v3(430.37,5917.32,473.56),
-- v3(407.45,5900.88,436.55),
-- v3(386.62,5884.24,419.38),
-- v3(342.08,5843.72,411.18),
-- v3(320.84,5823.22,412.21),
-- v3(301.87,5804.3,425.43),
-- v3(264.94,5761.62,472.79),
-- v3(252.58,5735.87,512.11),
-- v3(244.79,5708.44,558.29),
-- v3(236.61,5678.85,585.34),
-- v3(229.06,5651.56,562.56),
-- v3(221.19,5623.12,580.4),
-- v3(194.2,5525.5,529.5),
-- v3(186.85,5500.22,539.41),
-- v3(177.23,5473.34,533.03),
-- v3(171.22,5448.37,525.87),
-- v3(165.63,5420.11,493.12),
-- v3(160.53,5394.36,491.96),
-- v3(144.17,5368.64,503.85),
-- v3(106.02,5314.05,492.14),
-- v3(90.89,5289.69,496.26),
-- v3(92.14,5264.04,507.9),
-- v3(93.48,5236.33,502.26),
-- v3(94.72,5210.86,494.3),
-- v3(96.02,5185.21,482.77),
-- v3(98.47,5160.13,504.66),
-- v3(121.71,5034.62,453.36),
-- v3(127.03,5008.65,435.82),
-- v3(135.26,4983.38,394.3),
-- v3(168.05,4937.22,376.62),
-- v3(188.9,4916.18,366.89),
-- v3(215.9,4907.52,349.08),
-- v3(241.9,4906.13,325.8),
-- v3(273.55,4903.45,329.36),
-- v3(299.14,4901.27,351.28),
-- v3(324.23,4898.76,374.36),
-- v3(438.59,4888.55,336.37),
-- v3(580.09,4882.02,245.95),
-- v3(633.82,4879.41,215.79),
-- v3(747.0,4876.59,243.93),
-- v3(814.21,4879.24,236.64),
-- v3(841.38,4865.77,216.64),
-- v3(870.3,4853.34,238.21),
-- v3(929.51,4842.39,239.27),
-- v3(952.98,4854.94,227.81),
-- v3(983.67,4853.09,218.17),
-- v3(1060.42,4855.61,176.85),
-- v3(1082.11,4873.75,202.17),
-- v3(1103.61,4891.72,231.37),
-- v3(1125.2,4909.78,250.48),
-- v3(1200.81,4926.61,239.49),
-- v3(1228.11,4933.57,215.51),
-- v3(1245.71,4955.6,194.08),
-- v3(1256.29,4983.41,197.71),
-- v3(1261.08,5008.28,198.08),
-- v3(1266.29,5036.98,162.83),
-- v3(1272.35,5070.33,179.81),
-- v3(1282.61,5126.92,210.26),
-- v3(1271.59,5229.61,265.16),
-- v3(1265.38,5262.79,278.08),
-- v3(1260.0,5291.53,285.5),
-- v3(1248.02,5345.14,326.41),
-- v3(1243.39,5372.48,338.2),
-- v3(1247.66,5414.76,357.93),
-- v3(1242.91,5443.9,388.23),
-- v3(1229.86,5500.22,437.46),
-- v3(1200.34,5599.18,511.69),
-- v3(1189.94,5625.14,495.86),
-- v3(1050.6,5738.68,561.79),
-- v3(1026.07,5757.4,545.76),
-- v3(1004.29,5774.02,532.78),
-- v3(958.14,5809.04,571.64),
-- v3(933.31,5827.2,542.4),
-- v3(908.83,5842.92,517.39),
-- v3(880.54,5856.5,494.55),
-- v3(814.42,5878.62,468.29),
-- v3(786.27,5883.22,458.36),
-- v3(756.47,5885.89,473.07),
-- v3(686.01,5891.2,530.35),
-- v3(656.76,5892.39,521.1),
-- v3(579.29,5886.05,538.02),
-- v3(554.34,5880.65,564.13),
-- v3(525.33,5870.83,590.24),
-- v3(503.62,5856.78,605.9),
-- v3(482.9,5835.99,612.77),
-- v3(449.95,5798.59,602.13),
-- v3(431.33,5777.45,562.13),
-- v3(413.62,5757.34,550.25),
-- v3(393.82,5734.87,584.53),
-- v3(368.97,5704.83,609.82),
-- v3(356.67,5682.27,682.49),
-- v3(356.55,5513.21,692.35),
-- v3(456.88,5428.51,677.1),
-- v3(499.86,5419.94,619.75),
-- v3(557.16,5425.19,671.83),
-- v3(580.71,5433.73,703.14),
-- v3(555.94,5686.29,738.39),
-- v3(391.04,5579.68,698.0),
-- v3(378.9,5526.73,715.34),
-- v3(399.59,5410.88,626.36),
-- v3(410.76,5387.57,597.14),
-- v3(434.45,5376.03,588.99),
-- v3(566.11,5462.22,719.24),
-- v3(325.29,5623.82,674.25),
-- v3(256.93,5574.18,575.78),
-- v3(221.42,5517.61,534.71),
-- v3(169.45,5529.37,496.67),
-- v3(117.23,5630.65,488.36),
-- v3(77.81,5614.02,465.79),
-- v3(62.85,5539.05,400.9),
-- v3(64.71,5514.07,420.48),
-- v3(66.24,5488.92,440.85),
-- v3(41.98,5432.05,395.61),
-- v3(25.64,5410.16,394.07),
-- v3(4.13,5392.91,387.53),
-- v3(-22.13,5401.23,366.52),
-- v3(-39.72,5421.46,350.84),
-- v3(-42.84,5447.53,340.09),
-- v3(-43.25,5474.97,323.3),
-- v3(-85.89,5599.68,330.03),
-- v3(-104.88,5620.95,340.94),
-- v3(-122.56,5640.75,329.88),
-- v3(-149.79,5635.86,308.32),
-- v3(-183.53,5557.42,241.36),
-- v3(-182.83,5529.83,221.98),
-- v3(-206.53,5435.57,199.07),
-- v3(-223.39,5416.93,209.01),
-- v3(-247.65,5493.55,184.44),
-- v3(-249.21,5539.72,214.37),
-- v3(-346.2,5548.91,153.21),
-- v3(-343.86,5523.66,160.17),
-- v3(-341.19,5493.33,152.56),
-- v3(-336.38,5422.4,127.7),
-- v3(-344.45,5398.03,129.49),
-- v3(-366.5,5384.3,122.37),
-- v3(-390.19,5392.64,109.21),
-- v3(-500.21,5557.91,72.37),
-- v3(-630.5,5530.31,45.01),
-- v3(-855.08,5498.16,22.64),
-- v3(-933.01,5378.05,48.79),
-- v3(-922.11,5127.07,164.58),
-- v3(-928.89,5098.23,170.01),
-- v3(-934.66,5073.65,170.37),
-- v3(-962.62,4770.67,270.19),
-- v3(-971.65,4600.14,229.18),
-- v3(-975.52,4497.0,144.27),
-- v3(-973.33,4466.67,93.01),
-- v3(-906.6,4345.17,54.63),
-- v3(-883.97,4331.21,85.29),
-- v3(-815.79,4308.16,120.83),
-- v3(-746.06,4314.12,141.35),
-- v3(-715.31,4313.66,98.01),
-- v3(-679.82,4312.34,94.86),
-- v3(-652.1,4308.57,127.7),
-- v3(-621.57,4301.52,124.92),
-- v3(-596.59,4292.68,136.85),
-- v3(-533.09,4260.41,157.05),
-- v3(-509.07,4247.9,151.71),
-- v3(-482.67,4232.74,144.92),
-- v3(-470.11,4207.49,160.37),
-- v3(-466.43,4161.4,157.92),
-- v3(-464.47,4135.78,133.68),
-- v3(-462.11,4108.94,133.96),
-- v3(-447.83,4044.0,104.54),
-- v3(-424.38,4030.59,83.0),
-- v3(-398.27,4015.65,81.53),
-- v3(-383.96,3972.39,55.6),
-- v3(-406.13,3958.61,63.37),
-- v3(-429.82,3937.45,70.37),
-- v3(-437.71,3908.08,94.95),
-- v3(-446.72,3879.43,99.19),
-- v3(-450.63,3852.25,75.32),
-- v3(-427.41,3834.28,64.63),
-- v3(-400.03,3825.28,59.57),
-- v3(-374.36,3831.35,75.02),
-- v3(-348.42,3836.21,66.5),
-- v3(-319.02,3826.55,67.0),
-- v3(-289.98,3817.13,66.62),
-- v3(-274.35,3796.39,64.89),
-- v3(-282.82,3744.54,63.34),
-- v3(-286.87,3716.43,68.53),
-- v3(-295.84,3655.38,72.36),
-- v3(-292.33,3630.33,73.7),
-- v3(-265.46,3618.98,64.74),
-- v3(-235.74,3614.07,62.68),
-- v3(-206.52,3608.8,58.36),
-- v3(-150.44,3590.61,56.09),
-- v3(-130.73,3574.79,56.83),
-- v3(-114.24,3548.89,55.37),
-- v3(-92.82,3498.06,53.68),
-- v3(-85.37,3470.19,82.53),
-- v3(-77.89,3439.93,70.14),
-- v3(-71.77,3411.31,59.27),
-- v3(-103.81,3438.2,80.03),
-- v3(-167.93,3443.74,104.26),
-- v3(-177.63,3418.96,97.8),
-- v3(-167.62,3394.88,85.51),
-- v3(-160.45,3370.57,77.67),
-- v3(-153.73,3345.66,84.14),
-- v3(-161.23,3316.38,92.54),
-- v3(-175.88,3291.69,79.85),
-- v3(-206.21,3242.53,64.06),
-- v3(-229.0,3226.57,65.01),
-- v3(-252.58,3242.36,73.85),
-- v3(-318.58,3287.17,121.7),
-- v3(-341.95,3303.31,134.22),
-- v3(-366.48,3320.36,144.69),
-- v3(-406.54,3348.23,153.99),
-- v3(-430.58,3365.93,153.49),
-- v3(-453.87,3348.9,151.83),
-- v3(-472.61,3324.88,135.17),
-- v3(-490.06,3302.52,122.07),
-- v3(-507.64,3279.99,111.9),
-- v3(-524.78,3257.6,93.39),
-- v3(-542.4,3232.19,83.92),
-- v3(-558.85,3206.96,78.47),
-- v3(-573.92,3182.4,74.32),
-- v3(-588.96,3157.59,59.6),
-- v3(-605.7,3137.92,53.98),
-- v3(-629.61,3148.31,51.66),
-- v3(-640.21,3173.01,63.82),
-- v3(-642.83,3198.38,67.55),
-- v3(-645.35,3223.45,79.79),
-- v3(-648.69,3248.63,88.12),
-- v3(-696.17,3291.49,95.16),
-- v3(-717.38,3310.68,108.34),
-- v3(-776.99,3316.45,144.3),
-- v3(-795.63,3295.39,138.48),
-- v3(-814.72,3273.55,146.39),
-- v3(-833.48,3250.81,160.38),
-- v3(-852.35,3226.03,142.62),
-- v3(-867.41,3205.83,124.58),
-- v3(-884.88,3181.71,113.97),
-- v3(-923.15,3124.4,115.3),
-- v3(-948.93,3127.95,120.62),
-- v3(-998.2,3160.54,103.76),
-- v3(-1022.09,3177.31,88.69),
-- v3(-1044.83,3195.3,99.46),
-- v3(-1067.9,3215.32,96.0),
-- v3(-1117.62,3222.16,111.28),
-- v3(-1171.2,3163.69,116.01),
-- v3(-1193.08,3141.5,98.11),
-- v3(-1213.79,3121.44,83.69),
-- v3(-1235.54,3101.91,72.22),
-- v3(-1259.89,3085.03,92.61),
-- v3(-1312.29,3064.53,93.61),
-- v3(-1339.27,3065.33,103.28),
-- v3(-1335.23,3090.52,110.4),
-- v3(-1330.3,3119.63,123.61),
-- v3(-1325.26,3148.89,124.24),
-- v3(-1320.86,3174.43,128.8),
-- v3(-1315.82,3203.65,134.22),
-- v3(-1310.79,3232.87,136.72),
-- v3(-1306.0,3262.32,151.34),
-- v3(-1331.1,3274.11,170.57),
-- v3(-1362.41,3275.3,185.03),
-- v3(-1391.28,3272.73,183.03),
-- v3(-1421.46,3268.3,162.63),
-- v3(-1445.24,3277.55,146.34),
-- v3(-1468.99,3291.29,130.53),
-- v3(-1490.99,3303.51,114.61),
-- v3(-1507.51,3327.38,109.53),
-- v3(-1513.3,3355.61,140.25),
-- v3(-1524.85,3433.63,186.75),
-- v3(-1528.17,3463.79,192.16),
-- v3(-1533.86,3520.12,211.28),
-- v3(-1559.47,3530.08,189.14),
-- v3(-1589.86,3527.23,174.81),
-- v3(-1661.65,3520.67,157.2),
-- v3(-1691.81,3517.44,131.29),
-- v3(-1720.28,3513.03,120.87),
-- v3(-1748.79,3507.8,110.32),
-- v3(-1777.93,3501.07,96.55),
-- v3(-1801.82,3513.65,83.7),
-- v3(-1808.34,3541.49,90.64),
-- v3(-1814.38,3569.9,99.67),
-- v3(-1793.64,3618.7,131.81),
-- v3(-1805.2,3644.41,141.14),
-- v3(-1826.77,3660.57,135.08),
-- v3(-1859.0,3657.35,122.35),
-- v3(-1889.18,3654.59,140.16),
-- v3(-1958.9,3650.08,114.54),
-- v3(-1989.29,3648.99,105.61),
-- v3(-2017.93,3648.13,114.47),
-- v3(-2046.36,3647.67,126.88),
-- v3(-2076.24,3648.34,128.43),
-- v3(-2104.34,3650.56,134.79),
-- v3(-2133.58,3656.5,127.82),
-- v3(-2160.94,3666.82,129.48),
-- v3(-2185.81,3681.77,126.45),
-- v3(-2161.45,3695.83,141.53),
-- v3(-2109.69,3718.62,160.36),
-- v3(-2103.33,3743.18,156.12),
-- v3(-2113.48,3767.92,158.65),
-- v3(-2127.65,3792.96,160.68),
-- v3(-2152.63,3845.62,152.25),
-- v3(-2162.72,3872.4,132.87),
-- v3(-2171.0,3902.18,119.36),
-- v3(-2178.83,3947.36,99.02),
-- v3(-2182.7,3976.91,79.75),
-- v3(-2190.46,4043.31,92.66),
-- v3(-2193.34,4073.5,98.62),
-- v3(-2165.02,4050.07,110.8),
-- v3(-2133.91,4044.96,127.81),
-- v3(-2105.15,4046.91,144.11),
-- v3(-2059.15,4068.17,168.01),
-- v3(-2062.29,4097.0,154.73),
-- v3(-2065.52,4125.83,128.96),
-- v3(-2069.09,4192.06,119.09),
-- v3(-2067.68,4222.3,121.15),
-- v3(-2063.92,4252.91,129.12),
-- v3(-2044.52,4319.91,115.38),
-- v3(-2020.15,4304.14,114.27),
-- v3(-2020.11,4273.44,131.85),
-- v3(-2023.55,4245.01,146.38),
-- v3(-1991.14,4230.56,150.69),
-- v3(-1961.62,4236.58,140.73),
-- v3(-1935.75,4241.78,148.98),
-- v3(-1905.77,4247.73,155.39),
-- v3(-1840.15,4264.91,112.56),
-- v3(-1815.92,4276.61,88.02),
-- v3(-1792.13,4241.25,98.75),
-- v3(-1776.61,4217.71,125.77),
-- v3(-1746.78,4174.12,148.87),
-- v3(-1728.56,4147.77,163.26),
-- v3(-1714.33,4127.18,180.84),
-- v3(-1695.53,4108.2,185.14),
-- v3(-1666.79,4120.33,166.37),
-- v3(-1559.28,4190.41,94.83),
-- v3(-1500.07,4198.12,82.44),
-- v3(-1483.53,4173.71,94.94),
-- v3(-1466.23,4148.54,94.15),
-- v3(-1423.81,4088.95,189.57),
-- v3(-1396.3,4093.68,173.64),
-- v3(-1373.72,4110.88,102.49),
-- v3(-1328.73,4144.45,64.24),
-- v3(-1298.65,4166.83,109.77),
-- v3(-1273.23,4185.2,122.51),
-- v3(-1217.16,4223.43,143.84),
-- v3(-1192.76,4239.61,125.92),
-- v3(-1141.47,4190.34,170.88),
-- v3(-1124.77,4165.02,199.34),
-- v3(-1106.32,4137.04,207.06),
-- v3(-1090.55,4113.13,213.57),
-- v3(-1064.01,4108.15,198.52),
-- v3(-1050.85,4133.77,171.34),
-- v3(-1055.12,4160.32,146.72),
-- v3(-1013.6,4216.83,115.74),
-- v3(-987.62,4222.4,95.65),
-- v3(-961.65,4219.47,133.8),
-- v3(-935.42,4210.58,157.02),
-- v3(-909.23,4206.07,179.98),
-- v3(-881.09,4216.76,189.58),
-- v3(-853.25,4227.05,181.54),
-- v3(-829.6,4235.83,185.1),
-- v3(-778.19,4219.18,180.5),
-- v3(-750.7,4174.13,177.46),
-- v3(-722.47,4185.66,173.79),
-- v3(-672.39,4209.0,141.38),
-- v3(-640.26,4221.11,147.66),
-- v3(-610.19,4231.43,172.39),
-- v3(-586.19,4239.17,177.93),
-- v3(-557.21,4248.03,172.58),
-- v3(-502.73,4210.23,169.49),
-- v3(-502.97,4183.71,180.47),
-- v3(-522.72,4163.04,179.35),
-- v3(-548.82,4142.79,179.58),
-- v3(-573.87,4123.6,174.96),
-- v3(-598.51,4106.79,161.2),
-- v3(-617.68,4089.98,156.7),
-- v3(-624.15,4065.03,145.62),
-- v3(-613.15,4039.5,130.49),
-- v3(-597.59,4014.32,128.11),
-- v3(-582.02,3989.13,118.27),
-- v3(-542.66,3925.46,110.29),
-- v3(-526.9,3900.39,125.88),
-- v3(-509.38,3874.43,129.42),
-- v3(-530.21,3815.71,124.65),
-- v3(-554.31,3798.43,143.4),
-- v3(-572.21,3779.07,154.1),
-- v3(-555.47,3754.09,165.98),
-- v3(-528.07,3707.76,194.71),
-- v3(-512.95,3681.75,195.29),
-- v3(-497.84,3655.73,179.23),
-- v3(-484.57,3632.8,184.75),
-- v3(-470.17,3606.13,201.06),
-- v3(-458.62,3579.27,211.81),
-- v3(-451.64,3551.11,209.17),
-- v3(-482.37,3444.9,193.6),
-- v3(-529.12,3390.22,171.92),
-- v3(-551.83,3371.27,154.96),
-- v3(-578.92,3364.33,143.36),
-- v3(-636.51,3392.72,155.08),
-- v3(-630.89,3418.21,184.15),
-- v3(-641.98,3442.79,200.62),
-- v3(-639.49,3471.48,219.8),
-- v3(-633.43,3497.01,233.9),
-- v3(-627.45,3522.42,247.54),
-- v3(-621.08,3547.88,263.14),
-- v3(-612.79,3575.62,277.53),
-- v3(-605.13,3600.57,275.02),
-- v3(-597.43,3625.67,271.93),
-- v3(-589.73,3650.76,265.56),
-- v3(-581.46,3677.72,249.14),
-- v3(-573.76,3702.82,219.93),
-- v3(-575.65,3814.88,159.08),
-- v3(-591.16,3835.31,188.08),
-- v3(-618.99,3845.13,207.3),
-- v3(-649.11,3838.1,227.88),
-- v3(-672.62,3826.83,245.37),
-- v3(-687.74,3805.6,260.45),
-- v3(-705.15,3754.49,270.65),
-- v3(-707.62,3726.92,242.63),
-- v3(-695.05,3704.68,252.84),
-- v3(-678.7,3682.14,263.07),
-- v3(-691.24,3611.94,290.95),
-- v3(-740.65,3553.41,233.16),
-- v3(-779.89,3520.81,197.65),
-- v3(-804.28,3502.92,188.76),
-- v3(-830.62,3502.3,197.32),
-- v3(-874.55,3514.34,233.26),
-- v3(-892.57,3536.0,262.57),
-- v3(-902.76,3559.32,279.54),
-- v3(-904.03,3587.28,303.25),
-- v3(-896.69,3612.33,311.55),
-- v3(-889.67,3637.47,315.26),
-- v3(-873.16,3696.86,328.17),
-- v3(-855.9,3761.03,318.06),
-- v3(-849.13,3786.24,322.11),
-- v3(-841.93,3813.19,338.97),
-- v3(-835.29,3838.43,343.02),
-- v3(-841.89,3863.71,342.99),
-- v3(-867.27,3908.38,338.9),
-- v3(-891.61,3914.68,335.12),
-- v3(-916.1,3921.01,338.72),
-- v3(-963.33,3896.73,379.86),
-- v3(-987.07,3880.21,376.12),
-- v3(-991.94,3854.57,414.92),
-- v3(-1000.74,3803.27,402.18),
-- v3(-1004.9,3777.51,380.99),
-- v3(-1008.97,3751.73,369.55),
-- v3(-1041.4,3723.52,329.08),
-- v3(-1061.86,3708.11,319.13),
-- v3(-1101.77,3677.27,315.16),
-- v3(-1124.7,3663.09,314.16),
-- v3(-1150.69,3665.51,338.29),
-- v3(-1178.29,3670.16,366.69),
-- v3(-1185.69,3725.97,402.03),
-- v3(-1183.61,3751.99,427.19),
-- v3(-1179.48,3803.42,477.8),
-- v3(-1158.19,3867.36,464.25),
-- v3(-1131.49,3871.2,446.43),
-- v3(-1105.75,3866.2,438.45),
-- v3(-1147.1,3893.59,456.18),
-- v3(-1167.52,3910.5,437.18),
-- v3(-1189.4,3928.62,402.44),
-- v3(-1234.99,3966.24,287.6),
-- v3(-1263.35,3970.28,272.17),
-- v3(-1288.67,3968.34,280.27),
-- v3(-1308.24,3945.61,294.2),
-- v3(-1328.56,3923.05,336.16),
-- v3(-1349.09,3901.03,390.49),
-- v3(-1398.52,3849.72,400.9),
-- v3(-1420.66,3828.02,364.28),
-- v3(-1441.57,3807.72,318.98),
-- v3(-1463.65,3786.29,274.38),
-- v3(-1491.32,3787.86,254.56),
-- v3(-1519.97,3789.48,282.88),
-- v3(-1548.47,3791.1,270.92),
-- v3(-1566.14,3812.71,270.74),
-- v3(-1593.02,3845.78,286.08),
-- v3(-1603.97,3872.31,315.01),
-- v3(-1602.41,3897.46,333.8),
-- v3(-1600.82,3923.06,343.24),
-- v3(-1599.26,3948.22,331.56),
-- v3(-1597.64,3974.42,305.47),
-- v3(-1594.02,4037.31,228.65),
-- v3(-1591.77,4062.37,199.19),
-- v3(-1628.58,4104.57,198.77),
-- v3(-1712.28,4084.0,212.79),
-- v3(-1730.48,4062.26,241.96),
-- v3(-1749.88,4039.25,254.9),
-- v3(-1769.29,4016.24,260.95),
-- v3(-1787.76,3994.35,274.0),
-- v3(-1790.49,3968.6,275.62),
-- v3(-1788.64,3942.11,251.81),
-- v3(-1789.06,3916.82,231.41),
-- v3(-1807.53,3894.93,216.12),
-- v3(-1826.02,3872.79,213.06),
-- v3(-1859.77,3820.4,194.76),
-- v3(-1889.42,3821.99,190.22),
-- v3(-1916.72,3830.58,202.01),
-- v3(-1944.07,3840.3,218.71),
-- v3(-1954.1,3866.3,230.53),
-- v3(-1956.02,3892.87,230.31),
-- v3(-1949.7,3923.72,231.54),
-- v3(-1943.85,3950.38,227.05),
-- v3(-1938.03,3976.9,224.71),
-- v3(-1932.53,4001.96,227.36),
-- v3(-1927.06,4026.86,233.79),
-- v3(-1929.59,4084.39,225.57),
-- v3(-1945.29,4108.68,210.27),
-- v3(-1962.4,4134.76,189.67),
-- v3(-1980.33,4158.93,178.06),
-- v3(-2021.97,4141.06,152.29),
-- v3(-2040.46,4118.75,149.47),
-- v3(-2106.29,4021.67,134.3),
-- v3(-2121.71,4001.91,120.19),
-- v3(-2142.27,3979.49,104.81),
-- v3(-2190.98,3881.65,111.92),
-- v3(-2200.28,3854.0,128.35),
-- v3(-2223.14,3786.1,104.96),
-- v3(-2232.41,3758.67,93.24),
-- v3(-2225.87,3732.08,87.96),
-- v3(-2220.32,3706.59,101.46),
-- v3(-2220.0,3681.52,97.67),
-- v3(-2219.65,3626.84,101.86),
-- v3(-2253.17,3571.89,70.46),
-- v3(-2282.56,3558.09,68.96),
-- v3(-2307.98,3509.27,50.1),
-- v3(-2317.56,3485.16,41.69),
-- v3(-2328.58,3462.16,36.79),
-- v3(-2357.23,3402.77,31.42),
-- v3(-2593.3,3095.86,30.95),
-- v3(-2603.89,3039.15,32.97),
-- v3(-2629.18,2274.06,26.25),
-- v3(-2572.14,2261.81,37.54),
-- v3(-2545.79,2244.23,54.78),
-- v3(-2529.74,2224.21,62.85),
-- v3(-2508.86,2198.27,83.82),
-- v3(-2490.4,2175.55,102.89),
-- v3(-2474.37,2156.05,112.27),
-- v3(-2447.85,2151.03,113.37),
-- v3(-2427.94,2168.85,104.84),
-- v3(-2405.35,2189.08,91.59),
-- v3(-2383.59,2208.64,71.63),
-- v3(-2320.76,2241.96,33.49),
-- v3(-2296.29,2225.52,47.88),
-- v3(-2248.07,2193.11,65.41),
-- v3(-2222.72,2176.07,87.07),
-- v3(-2197.01,2158.44,108.8),
-- v3(-2171.31,2151.99,118.26),
-- v3(-2142.28,2189.86,109.86),
-- v3(-2122.77,2214.19,80.87),
-- v3(-2103.89,2237.66,59.34),
-- v3(-2087.94,2257.5,46.94),
-- v3(-2019.52,2253.58,64.15),
-- v3(-1970.88,2212.56,85.15),
-- v3(-1905.23,2199.89,95.3),
-- v3(-1880.57,2221.93,92.15),
-- v3(-1855.71,2240.01,86.08),
-- v3(-1805.91,2272.39,72.13),
-- v3(-1729.73,2311.11,72.64),
-- v3(-1737.66,2187.3,107.56),
-- v3(-1711.34,2173.24,109.12),
-- v3(-1685.14,2158.12,108.77),
-- v3(-1633.59,2126.47,84.03),
-- v3(-1608.5,2110.32,67.31),
-- v3(-1583.9,2093.45,70.01),
-- v3(-1559.74,2076.3,75.75),
-- v3(-1594.19,2017.73,95.09),
-- v3(-1625.93,1989.0,112.84),
-- v3(-1647.79,1969.8,121.0),
-- v3(-1686.13,1936.14,140.59),
-- v3(-1669.97,1909.44,135.86),
-- v3(-1651.33,1886.84,122.12),
-- v3(-1631.68,1863.17,136.37),
-- v3(-1610.98,1838.73,151.26),
-- v3(-1612.52,1813.01,161.06),
-- v3(-1661.94,1772.59,171.56),
-- v3(-1686.45,1756.68,174.23),
-- v3(-1713.95,1741.69,186.46),
-- v3(-1737.51,1727.02,188.87),
-- v3(-1665.79,1601.25,166.72),
-- v3(-1662.46,1574.0,183.29),
-- v3(-1713.94,1539.3,201.6),
-- v3(-1766.92,1502.64,197.61),
-- v3(-1791.49,1485.63,212.97),
-- v3(-1812.91,1468.36,223.27),
-- v3(-1794.42,1441.73,218.03),
-- v3(-1759.01,1384.2,188.31),
-- v3(-1744.31,1355.09,167.92),
-- v3(-1734.22,1331.98,160.0),
-- v3(-1722.44,1304.77,172.66),
-- v3(-1728.4,1280.47,181.42),
-- v3(-1766.22,1270.26,195.58),
-- v3(-1810.1,1255.2,211.29),
-- v3(-1858.25,1239.57,217.62),
-- v3(-1876.8,1219.02,223.41),
-- v3(-1867.95,1189.84,214.44),
-- v3(-1849.88,1123.84,219.42),
-- v3(-1844.17,1094.71,233.06),
-- v3(-1839.17,1064.15,223.42),
-- v3(-1891.61,1035.09,221.4),
-- v3(-1921.73,1030.01,232.21),
-- v3(-1952.08,1024.98,236.17),
-- v3(-1938.67,965.34,217.57),
-- v3(-1954.08,940.47,199.03),
-- v3(-1982.15,945.01,186.06),
-- v3(-1993.89,973.02,188.04),
-- v3(-1999.91,1003.15,193.86),
-- v3(-2005.86,1033.73,215.25),
-- v3(-2011.38,1058.98,233.59),
-- v3(-2018.21,1088.93,250.6),
-- v3(-2027.95,1114.93,262.92),
-- v3(-2059.26,1107.38,256.87),
-- v3(-2090.07,1099.62,260.07),
-- v3(-2146.47,1083.62,220.33),
-- v3(-2177.1,1074.52,216.33),
-- v3(-2245.14,1053.1,206.23),
-- v3(-2236.64,1081.48,198.18),
-- v3(-2224.69,1104.51,215.11),
-- v3(-2207.35,1167.81,272.53),
-- v3(-2216.78,1197.44,286.19),
-- v3(-2236.3,1239.85,310.06),
-- v3(-2258.33,1221.21,302.48),
-- v3(-2269.05,1196.92,283.4),
-- v3(-2294.18,1184.41,282.17),
-- v3(-2321.06,1174.06,275.23),
-- v3(-2348.36,1164.11,255.66),
-- v3(-2392.18,1151.13,259.48),
-- v3(-2416.96,1146.38,248.56),
-- v3(-2461.54,1194.56,234.89),
-- v3(-2458.43,1223.42,252.51),
-- v3(-2409.01,1274.13,310.19),
-- v3(-2410.2,1302.75,300.48),
-- v3(-2383.5,1314.24,327.81),
-- v3(-2389.55,1344.82,317.74),
-- v3(-2417.12,1371.34,295.05),
-- v3(-2437.99,1392.95,272.34),
-- v3(-2476.11,1439.73,225.44),
-- v3(-2463.49,1466.5,248.92),
-- v3(-2434.62,1478.38,269.5),
-- v3(-2406.3,1489.98,281.85),
-- v3(-2340.08,1469.32,302.14),
-- v3(-2317.66,1484.21,293.08),
-- v3(-2317.24,1511.52,275.39),
-- v3(-2355.76,1569.87,240.17),
-- v3(-2373.55,1593.94,236.33),
-- v3(-2390.75,1617.59,220.9),
-- v3(-2364.51,1617.34,240.86),
-- v3(-2317.04,1640.75,262.95),
-- v3(-2303.98,1669.11,258.61),
-- v3(-2292.25,1696.44,254.62),
-- v3(-2287.03,1730.11,251.67),
-- v3(-2317.0,1733.99,234.1),
-- v3(-2366.95,1756.56,206.37),
-- v3(-2393.39,1770.06,196.46),
-- v3(-2419.93,1784.65,182.02),
-- v3(-2452.13,1848.21,196.51),
-- v3(-2440.14,1900.56,195.91),
-- v3(-2483.37,1863.2,186.39),
-- v3(-2475.89,1838.45,175.91),
-- v3(-2420.57,1842.39,203.66),
-- v3(-2389.54,1854.3,216.68),
-- v3(-2361.75,1866.9,192.44),
-- v3(-2332.82,1840.14,209.68),
-- v3(-2337.6,1814.48,226.7),
-- v3(-2340.21,1719.45,221.55),
-- v3(-2305.73,1834.74,212.32),
-- v3(-2229.17,1884.23,210.64),
-- v3(-2218.11,1860.74,228.85),
-- v3(-2224.07,1833.79,241.41),
-- v3(-2229.64,1808.6,251.13),
-- v3(-2235.35,1782.82,258.75),
-- v3(-2241.05,1757.04,262.53),
-- v3(-2235.17,1721.5,263.53),
-- v3(-2218.07,1690.74,259.02),
-- v3(-2202.45,1663.28,252.59),
-- v3(-2141.79,1569.07,276.32),
-- v3(-2140.38,1618.25,252.25),
-- v3(-2143.23,1644.65,238.75),
-- v3(-2146.11,1671.34,227.52),
-- v3(-2134.14,1693.76,220.23),
-- v3(-2115.52,1717.04,216.58),
-- v3(-2097.22,1740.03,214.96),
-- v3(-2064.4,1788.67,212.15),
-- v3(-2053.87,1816.28,201.66),
-- v3(-2023.07,1812.56,196.12),
-- v3(-1976.88,1790.9,175.03),
-- v3(-1922.9,1730.64,184.81),
-- v3(-1925.52,1704.08,196.56),
-- v3(-1907.3,1680.86,207.78),
-- v3(-1888.82,1657.31,226.53),
-- v3(-1848.94,1625.08,231.3),
-- v3(-1822.78,1624.63,217.75),
-- v3(-1801.61,1648.26,216.11),
-- v3(-1783.88,1672.45,207.47),
-- v3(-1721.73,1793.22,191.5),
-- v3(-1695.24,1853.6,153.88),
-- v3(-1682.75,1882.07,151.44),
-- v3(-1660.12,1933.67,127.51),
-- v3(-1616.71,2034.53,104.65),
-- v3(-1602.06,2064.56,83.94),
-- v3(-1570.8,2114.86,64.29),
-- v3(-1553.35,2138.57,56.89),
-- v3(-1358.17,2122.97,64.7),
-- v3(-1357.47,2092.8,73.05),
-- v3(-1365.54,2063.14,91.45),
-- v3(-1352.76,2003.7,74.44),
-- v3(-1349.82,1976.58,72.15),
-- v3(-1351.34,1948.07,88.78),
-- v3(-1353.92,1920.82,101.84),
-- v3(-1356.42,1894.47,110.04),
-- v3(-1359.87,1868.08,117.23),
-- v3(-1372.08,1811.17,116.62),
-- v3(-1377.96,1786.27,120.84),
-- v3(-1392.22,1721.53,141.64),
-- v3(-1397.56,1696.81,160.56),
-- v3(-1412.33,1628.51,158.25),
-- v3(-1426.22,1564.92,132.02),
-- v3(-1433.81,1533.65,129.84),
-- v3(-1440.87,1507.79,139.1),
-- v3(-1447.53,1483.38,147.87),
-- v3(-1454.51,1457.81,142.59),
-- v3(-1462.05,1430.38,152.62),
-- v3(-1468.84,1405.68,153.18),
-- v3(-1475.43,1381.41,154.52),
-- v3(-1481.85,1355.58,150.23),
-- v3(-1487.37,1329.96,167.17),
-- v3(-1501.58,1266.63,199.57),
-- v3(-1508.9,1240.78,208.95),
-- v3(-1515.88,1216.38,207.5),
-- v3(-1523.47,1191.94,197.15),
-- v3(-1532.51,1167.25,181.76),
-- v3(-1542.21,1143.13,188.64),
-- v3(-1551.66,1119.41,194.52),
-- v3(-1561.03,1094.05,189.3),
-- v3(-1571.35,1065.96,174.6),
-- v3(-1580.73,1040.45,172.12),
-- v3(-1589.51,1016.74,172.77),
-- v3(-1619.1,950.23,168.17),
-- v3(-1630.75,925.61,170.64),
-- v3(-1642.36,902.78,172.15),
-- v3(-1655.76,878.56,164.43),
-- v3(-1668.96,856.02,164.98),
-- v3(-1682.92,833.43,162.14),
-- v3(-1696.52,811.88,158.61),
-- v3(-1715.97,792.98,161.54),
-- v3(-1744.22,783.15,154.61),
-- v3(-1855.47,694.02,136.71),
-- v3(-1868.41,666.99,129.16),
-- v3(-1875.91,634.56,134.32),
-- v3(-1868.76,603.25,141.48),
-- v3(-1854.18,577.88,148.23),
-- v3(-1834.49,560.58,153.94),
-- v3(-1811.19,541.65,156.06),
-- v3(-1794.44,520.61,148.96),
-- v3(-1724.22,524.78,141.43),
-- v3(-1694.75,528.12,149.15),
-- v3(-1674.63,551.5,145.71),
-- v3(-1713.55,585.8,160.63),
-- v3(-1732.24,603.16,163.63),
-- v3(-1737.0,651.04,173.15),
-- v3(-1733.39,677.8,165.95),
-- v3(-1708.93,690.21,166.84),
-- v3(-1683.46,687.89,178.97),
-- v3(-1663.87,671.1,176.12),
-- v3(-1643.25,653.44,168.32),
-- v3(-1597.0,613.82,152.97),
-- v3(-1508.4,615.8,152.99),
-- v3(-1498.71,641.01,162.39),
-- v3(-1518.88,660.63,174.21),
-- v3(-1539.46,675.94,189.97),
-- v3(-1597.58,717.08,191.81),
-- v3(-1620.56,729.75,190.16),
-- v3(-1638.75,750.56,182.86),
-- v3(-1647.07,775.67,177.44),
-- v3(-1642.92,802.33,183.52),
-- v3(-1602.1,825.11,186.49),
-- v3(-1579.18,813.6,186.49),
-- v3(-1556.26,802.09,187.16),
-- v3(-1531.73,789.77,185.07),
-- v3(-1509.24,777.77,188.12),
-- v3(-1489.27,761.85,200.35),
-- v3(-1361.5,715.8,185.25),
-- v3(-1376.47,773.82,197.87),
-- v3(-1396.99,811.51,199.28),
-- v3(-1411.14,837.51,197.45),
-- v3(-1426.15,865.2,196.43),
-- v3(-1546.78,981.96,181.16),
-- v3(-1556.64,1005.36,188.44),
-- v3(-1535.72,1096.78,196.52),
-- v3(-1486.24,1103.16,216.89),
-- v3(-1463.85,1090.65,216.38),
-- v3(-1441.06,1077.93,217.44),
-- v3(-1418.54,1065.65,237.78),
-- v3(-1393.86,1052.96,236.59),
-- v3(-1370.18,1041.3,239.59),
-- v3(-1347.15,1030.36,239.36),
-- v3(-1322.31,1018.66,257.06),
-- v3(-1273.35,1028.69,248.16),
-- v3(-1245.45,1038.7,259.61),
-- v3(-1216.36,1049.15,250.42),
-- v3(-1194.56,1067.82,237.82),
-- v3(-1199.35,1093.15,252.9),
-- v3(-1225.69,1106.87,259.97),
-- v3(-1297.1,1140.78,279.89),
-- v3(-1327.61,1155.2,270.24),
-- v3(-1362.06,1170.74,253.39),
-- v3(-1403.77,1200.93,233.48),
-- v3(-1418.66,1228.29,222.14),
-- v3(-1433.75,1256.02,210.98),
-- v3(-1427.67,1283.4,190.76),
-- v3(-1400.65,1298.02,190.05),
-- v3(-1372.95,1312.71,203.82),
-- v3(-1343.81,1323.39,222.73),
-- v3(-1318.11,1323.76,235.46),
-- v3(-1289.16,1315.02,245.42),
-- v3(-1260.98,1301.72,251.18),
-- v3(-1236.74,1289.07,257.28),
-- v3(-1198.16,1264.08,266.55),
-- v3(-1172.39,1247.37,272.73),
-- v3(-1150.67,1233.36,279.44),
-- v3(-1128.22,1218.93,271.76),
-- v3(-1101.81,1202.42,246.0),
-- v3(-868.47,1082.04,240.85),
-- v3(-839.91,1083.84,257.72),
-- v3(-837.5,1129.45,273.16),
-- v3(-865.59,1137.25,243.46),
-- v3(-966.43,1203.84,230.17),
-- v3(-988.98,1225.9,249.22),
-- v3(-1011.16,1246.28,264.9),
-- v3(-1030.04,1263.02,277.08),
-- v3(-1051.84,1282.49,284.74),
-- v3(-1074.9,1304.02,272.19),
-- v3(-1096.08,1325.03,254.4),
-- v3(-1134.54,1368.27,214.74),
-- v3(-1152.7,1391.28,195.99),
-- v3(-1191.89,1442.27,175.92),
-- v3(-1210.17,1466.25,187.01),
-- v3(-1228.74,1490.8,202.72),
-- v3(-1246.13,1514.63,196.84),
-- v3(-1262.65,1540.3,178.19),
-- v3(-1277.8,1566.27,170.33),
-- v3(-1292.11,1591.98,180.92),
-- v3(-1306.21,1617.33,176.03),
-- v3(-1320.92,1643.78,176.58),
-- v3(-1302.79,1702.25,186.08),
-- v3(-1293.26,1726.45,183.24),
-- v3(-1270.34,1742.04,181.75),
-- v3(-1240.33,1744.07,172.65),
-- v3(-1211.28,1739.77,169.2),
-- v3(-1184.83,1726.57,177.33),
-- v3(-1159.7,1708.87,192.78),
-- v3(-1135.98,1689.69,224.68),
-- v3(-1098.55,1642.3,249.7),
-- v3(-1081.4,1618.18,257.71),
-- v3(-1064.41,1593.94,262.97),
-- v3(-1047.43,1569.7,264.23),
-- v3(-1027.8,1542.41,256.16),
-- v3(-1009.76,1518.39,248.99),
-- v3(-991.7,1494.65,247.78),
-- v3(-973.68,1471.14,259.39),
-- v3(-955.64,1447.65,276.27),
-- v3(-939.79,1427.01,292.26),
-- v3(-900.97,1376.5,291.75),
-- v3(-885.21,1351.19,289.57),
-- v3(-877.08,1326.69,288.23),
-- v3(-872.37,1295.51,295.85),
-- v3(-862.37,1226.27,282.34),
-- v3(-856.56,1195.78,280.91),
-- v3(-849.02,1165.49,269.24),
-- v3(-803.45,1087.01,271.17),
-- v3(-781.19,1066.38,263.25),
-- v3(-757.09,1046.24,256.2),
-- v3(-517.39,939.35,249.42),
-- v3(-400.54,1010.47,295.14),
-- v3(-426.62,1023.02,307.77),
-- v3(-452.32,1035.35,308.17),
-- v3(-478.36,1046.52,309.21),
-- v3(-506.34,1056.47,307.62),
-- v3(-533.67,1067.39,293.29),
-- v3(-547.36,1095.22,304.75),
-- v3(-559.58,1120.05,305.86),
-- v3(-540.55,1139.65,319.09),
-- v3(-514.03,1133.95,318.29),
-- v3(-486.37,1129.34,319.84),
-- v3(-371.64,1111.51,320.51),
-- v3(-309.99,1101.91,288.99),
-- v3(-255.0,1111.73,278.11),
-- v3(-266.58,1166.32,300.31),
-- v3(-535.94,1180.79,318.42),
-- v3(-564.77,1185.62,317.36),
-- v3(-618.82,1231.51,293.6),
-- v3(-645.56,1244.24,279.13),
-- v3(-676.23,1250.72,275.58),
-- v3(-696.03,1269.57,287.51),
-- v3(-713.66,1306.06,301.81),
-- v3(-710.86,1352.39,307.7),
-- v3(-687.13,1373.22,307.07),
-- v3(-659.91,1378.23,300.34),
-- v3(-635.64,1367.14,295.6),
-- v3(-580.16,1340.31,298.12),
-- v3(-517.94,1318.85,301.78),
-- v3(-493.16,1311.68,309.57),
-- v3(-425.85,1292.86,321.68),
-- v3(-365.09,1277.36,335.77),
-- v3(-299.14,1270.04,331.68),
-- v3(-126.04,1376.35,310.27),
-- v3(-133.71,1418.35,295.06),
-- v3(-217.94,1396.85,310.39),
-- v3(-265.0,1374.29,338.63),
-- v3(-288.12,1362.84,341.59),
-- v3(-312.4,1354.05,350.49),
-- v3(-340.32,1363.03,342.18),
-- v3(-370.06,1372.45,335.22),
-- v3(-397.98,1381.29,324.67),
-- v3(-426.1,1390.25,298.86),
-- v3(-475.37,1406.3,317.38),
-- v3(-503.97,1416.29,347.67),
-- v3(-584.16,1448.42,332.74),
-- v3(-609.18,1461.44,312.38),
-- v3(-635.19,1477.3,310.35),
-- v3(-662.02,1495.73,305.11),
-- v3(-686.5,1512.79,286.71),
-- v3(-710.97,1529.85,259.56),
-- v3(-685.84,1581.78,247.1),
-- v3(-661.44,1597.36,262.09),
-- v3(-596.19,1619.95,304.92),
-- v3(-576.64,1644.31,288.01),
-- v3(-554.16,1666.4,285.85),
-- v3(-532.62,1681.77,296.89),
-- v3(-484.22,1676.37,332.13),
-- v3(-443.18,1683.6,326.02),
-- v3(-383.94,1700.03,281.12),
-- v3(-353.43,1708.49,260.75),
-- v3(-285.28,1722.02,241.8),
-- v3(-208.66,1726.23,245.88),
-- v3(-177.14,1725.78,247.14),
-- v3(-106.68,1727.11,258.75),
-- v3(-76.03,1730.47,261.07),
-- v3(-44.99,1736.36,249.07),
-- v3(30.18,1770.33,216.18),
-- v3(25.76,1799.7,214.24),
-- v3(-120.95,1827.36,208.48),
-- v3(-177.77,1829.16,214.27),
-- v3(-311.4,1841.54,198.33),
-- v3(-410.32,1865.24,213.01),
-- v3(-440.64,1874.3,231.37),
-- v3(-499.63,1897.18,233.26),
-- v3(-528.36,1910.54,212.73),
-- v3(-570.59,1949.22,192.63),
-- v3(-579.74,1983.77,176.83),
-- v3(-584.18,2039.99,187.88),
-- v3(-505.06,2042.6,206.13),
-- v3(-477.41,2042.83,215.3),
-- v3(-449.75,2043.37,209.85),
-- v3(-421.59,2044.39,187.15),
-- v3(-392.71,2045.44,168.26),
-- v3(-365.33,2046.28,154.6),
-- v3(-337.22,2047.12,142.11),
-- v3(-238.71,2050.08,142.38),
-- v3(-209.18,2050.67,142.42),
-- v3(-181.89,2051.2,159.16),
-- v3(-154.6,2051.72,180.13),
-- v3(-110.52,2052.62,186.0),
-- v3(-84.13,2053.16,169.53),
-- v3(-56.99,2053.71,165.23),
-- v3(-28.36,2054.38,165.8),
-- v3(41.68,2037.44,166.77),
-- v3(100.24,2009.73,159.75),
-- v3(129.87,2003.74,155.21),
-- v3(154.8,2005.66,139.22),
-- v3(181.13,2011.36,133.28),
-- v3(211.12,2017.94,132.54),
-- v3(241.11,2024.51,129.61),
-- v3(313.83,2041.01,121.91),
-- v3(436.63,2181.93,94.6),
-- v3(443.54,2265.03,86.47),
-- v3(429.77,2288.76,74.45),
-- v3(378.67,2315.57,60.42),
-- v3(354.26,2325.18,70.39),
-- v3(327.76,2331.84,79.97),
-- v3(277.09,2331.88,70.44),
-- v3(251.07,2332.21,71.2),
-- v3(142.56,2340.63,99.87),
-- v3(116.86,2342.75,112.74),
-- v3(90.86,2344.89,116.24),
-- v3(65.01,2347.03,123.23),
-- v3(38.11,2349.25,129.57),
-- v3(10.46,2351.42,131.23),
-- v3(-15.91,2352.55,134.32),
-- v3(-42.15,2353.29,139.19),
-- v3(-107.67,2354.78,133.89),
-- v3(-133.59,2355.14,127.58),
-- v3(-205.35,2354.98,105.3),
-- v3(-232.41,2354.71,96.78),
-- v3(-310.95,2352.74,121.39),
-- v3(-338.38,2351.89,114.73),
-- v3(-365.66,2351.06,115.62),
-- v3(-392.58,2350.86,133.15),
-- v3(-411.62,2334.11,144.57),
-- v3(-436.82,2317.47,129.39),
-- v3(-467.38,2307.22,115.58),
-- v3(-496.13,2307.47,120.59),
-- v3(-520.52,2313.61,112.14),
-- v3(-549.47,2327.73,89.83),
-- v3(-571.19,2351.45,77.66),
-- v3(-589.53,2403.23,71.98),
-- v3(-587.58,2433.58,72.29),
-- v3(-583.31,2458.22,59.57),
-- v3(-570.98,2501.32,51.75),
-- v3(-528.16,2559.25,54.43),
-- v3(-501.93,2564.18,63.81),
-- v3(-476.28,2569.01,75.18),
-- v3(-450.64,2573.83,86.79),
-- v3(-423.37,2578.96,87.54),
-- v3(-397.73,2583.78,89.37),
-- v3(-371.49,2588.72,88.67),
-- v3(-301.93,2601.81,72.54),
-- v3(-201.26,2605.82,52.36),
-- v3(-174.68,2603.3,62.45),
-- v3(-149.0,2600.85,85.91),
-- v3(-102.56,2596.44,100.71),
-- v3(-66.28,2592.99,97.27),
-- v3(20.48,2584.73,83.41),
-- v3(49.15,2582.01,78.49),
-- v3(79.17,2579.15,69.27),
-- v3(107.69,2576.44,60.33),
-- v3(136.06,2573.74,52.36),
-- v3(181.35,2539.34,52.88),
-- v3(198.02,2519.82,54.87),
-- v3(335.1,2378.49,60.54),
-- v3(383.11,2341.91,58.67),
-- v3(486.23,2273.49,69.5),
-- v3(541.19,2240.36,65.42),
-- v3(570.45,2247.41,64.79),
-- v3(655.43,2211.49,58.36),
-- v3(937.43,2059.9,61.47),
-- v3(1007.42,2045.51,56.06),
-- v3(1102.29,2032.92,57.26),
-- v3(1196.04,2055.59,64.4),
-- v3(1240.58,2100.87,71.87),
-- v3(1271.09,2150.35,79.37),
-- v3(1283.12,2178.48,83.05),
-- v3(1290.16,2206.34,84.6),
-- v3(1295.63,2236.8,83.8),
-- v3(1298.0,2262.49,88.14),
-- v3(1279.37,2332.0,79.01),
-- v3(1201.22,2401.4,65.3),
-- v3(813.17,2461.26,62.77),
-- v3(754.35,2126.89,62.09),
-- v3(924.34,2151.8,52.23),
-- v3(990.08,2170.9,49.7),
-- v3(1115.86,2200.27,49.52),
-- v3(1143.81,2193.51,47.29),
-- v3(1016.67,2339.94,50.63),
-- v3(947.36,2509.23,54.07),
-- v3(878.13,2566.32,64.72),
-- v3(853.27,2583.18,61.89),
-- v3(793.74,2617.0,48.93),
-- v3(790.71,2645.29,43.98),
-- v3(809.2,2716.29,40.78),
-- v3(829.18,2793.03,61.7),
-- v3(836.67,2822.2,59.61),
-- v3(843.46,2851.97,58.7),
-- v3(844.91,2882.05,57.97),
-- v3(791.81,2890.38,52.92),
-- v3(469.31,2864.2,45.92),
-- v3(415.48,2846.76,42.73),
-- v3(368.93,2888.34,50.57),
-- v3(374.1,2919.7,43.44),
-- v3(384.69,2948.72,41.44),
-- v3(399.34,2970.45,41.37),
-- v3(434.09,3000.14,40.95),
-- v3(415.04,3069.32,44.4),
-- v3(411.42,3099.41,43.74),
-- v3(409.4,3130.74,47.57),
-- v3(407.46,3163.34,51.43),
-- v3(408.1,3194.42,48.67),
-- v3(418.88,3276.72,51.58),
-- v3(431.36,3304.46,60.3),
-- v3(459.2,3365.62,64.34),
-- v3(471.73,3393.13,56.94),
-- v3(484.09,3420.25,58.3),
-- v3(505.89,3437.25,48.45),
-- v3(516.88,3412.4,68.61),
-- v3(521.79,3346.58,95.63),
-- v3(524.77,3309.8,76.38),
-- v3(548.36,3289.59,60.52),
-- v3(572.44,3268.97,51.12),
-- v3(594.91,3249.73,48.52),
-- v3(618.99,3229.11,39.14),
-- v3(638.5,3246.2,45.05),
-- v3(640.93,3273.78,52.53),
-- v3(633.83,3298.35,65.54),
-- v3(636.95,3342.59,70.94),
-- v3(652.24,3369.86,76.93),
-- v3(681.8,3414.58,66.8),
-- v3(707.69,3449.3,48.15),
-- v3(722.74,3469.45,40.05),
-- v3(740.98,3493.1,35.96),
-- v3(771.94,3499.87,33.46),
-- v3(794.33,3480.21,33.29),
-- v3(816.38,3460.83,40.88),
-- v3(840.81,3439.35,52.55),
-- v3(860.17,3422.33,68.08),
-- v3(879.88,3378.14,65.96),
-- v3(882.04,3352.59,52.87),
-- v3(889.83,3277.23,40.73),
-- v3(912.6,3257.99,40.2),
-- v3(975.72,3204.64,38.93),
-- v3(1002.26,3212.54,40.46),
-- v3(1033.54,3269.2,37.57),
-- v3(1042.81,3297.35,35.96),
-- v3(1068.89,3350.54,41.97),
-- v3(1084.61,3377.71,40.85),
-- v3(1138.45,3470.07,37.2),
-- v3(1153.4,3495.73,34.79),
-- v3(1178.85,3505.69,35.89),
-- v3(1204.5,3490.73,36.52),
-- v3(1230.16,3475.79,39.21),
-- v3(1305.42,3415.34,45.4),
-- v3(1312.55,3390.39,45.36),
-- v3(1319.83,3365.63,42.83),
-- v3(1327.39,3340.03,41.72),
-- v3(1354.17,3325.77,37.54),
-- v3(1376.77,3314.07,37.39),
-- v3(1403.34,3300.8,38.47),
-- v3(1467.38,3377.25,39.31),
-- v3(1474.82,3438.25,40.67),
-- v3(1465.4,3464.51,37.11),
-- v3(1979.03,3647.59,34.66),
-- v3(1997.68,3628.78,35.61),
-- v3(2019.43,3608.28,38.17),
-- v3(2037.04,3577.65,39.02),
-- v3(2040.7,3551.05,40.29),
-- v3(2045.9,3522.88,42.55),
-- v3(2062.57,3503.6,43.48),
-- v3(2101.04,3403.44,46.16),
-- v3(2111.3,3378.97,46.19),
-- v3(2161.4,3346.79,46.08),
-- v3(2183.5,3332.55,46.47),
-- v3(2208.87,3316.71,46.73),
-- v3(2265.91,3288.89,49.71),
-- v3(2284.81,3328.28,56.59),
-- v3(2293.21,3353.65,56.48),
-- v3(2272.83,3411.67,65.76),
-- v3(2247.29,3479.1,51.29),
-- v3(2239.66,3505.63,47.97),
-- v3(2249.32,3547.81,51.56),
-- v3(2255.42,3574.48,57.95),
-- v3(2261.82,3603.47,50.05),
-- v3(2292.57,3659.18,41.54),
-- v3(2322.27,3655.76,44.97),
-- v3(2346.34,3640.4,45.12),
-- v3(2363.69,3618.55,48.78),
-- v3(2380.11,3597.88,59.9),
-- v3(2422.13,3541.92,72.93),
-- v3(2428.58,3517.11,63.22),
-- v3(2424.34,3455.44,59.52),
-- v3(2434.39,3430.26,56.22),
-- v3(2463.55,3420.66,50.54),
-- v3(2499.44,3412.06,52.03),
-- v3(2528.54,3405.12,56.78),
-- v3(2560.1,3397.59,60.84),
-- v3(2582.54,3411.51,62.92),
-- v3(2595.66,3439.17,55.19),
-- v3(2594.05,3513.99,52.49),
-- v3(2578.81,3534.81,61.73),
-- v3(2562.41,3557.2,73.62),
-- v3(2515.74,3613.63,91.65),
-- v3(2503.44,3639.07,73.67),
-- v3(2501.93,3664.9,56.88),
-- v3(2500.19,3694.75,44.69),
-- v3(2498.43,3724.82,43.55),
-- v3(2497.55,3754.51,44.0),
-- v3(2529.83,3769.35,50.43),
-- v3(2562.01,3771.22,51.31),
-- v3(2610.51,3750.75,80.03),
-- v3(2622.17,3725.98,94.67),
-- v3(2620.89,3700.36,97.99),
-- v3(2630.43,3639.35,92.6),
-- v3(2649.43,3620.98,77.28),
-- v3(2673.73,3606.44,66.36),
-- v3(2697.1,3594.48,66.75),
-- v3(2724.66,3591.16,64.03),
-- v3(2753.79,3602.09,53.24),
-- v3(2805.84,3630.49,50.84),
-- v3(2762.69,3704.21,52.31),
-- v3(2734.61,3748.7,57.59),
-- v3(2688.45,3784.65,53.43),
-- v3(2661.36,3791.29,70.66),
-- v3(2632.3,3798.75,82.28),
-- v3(2605.57,3805.62,76.01),
-- v3(2580.02,3819.47,70.38),
-- v3(2547.01,3875.62,61.7),
-- v3(2532.84,3900.25,57.87),
-- v3(2519.91,3922.92,46.09),
-- v3(2506.91,3946.03,37.81),
-- v3(2587.31,4026.47,50.15),
-- v3(2661.73,4005.81,45.87),
-- v3(2689.58,3998.46,50.23),
-- v3(2716.99,3991.22,51.96),
-- v3(2781.68,3974.17,46.84),
-- v3(2810.39,3972.32,45.89),
-- v3(2859.6,4004.03,49.35),
-- v3(2856.21,4075.0,49.4),
-- v3(2831.33,4079.87,53.04),
-- v3(2756.92,4094.83,50.87),
-- v3(2729.91,4100.51,48.65),
-- v3(2704.26,4106.08,44.78),
-- v3(2678.79,4111.78,42.8),
-- v3(2652.92,4117.75,46.15),
-- v3(2630.1,4137.84,43.56),
-- v3(2616.7,4160.47,45.1),
-- v3(2601.51,4186.23,42.99),
-- v3(2599.39,4214.83,42.98),
-- v3(2621.33,4231.52,44.37),
-- v3(2677.11,4260.07,46.11),
-- v3(2702.63,4253.34,46.73),
-- v3(2729.67,4246.45,47.02),
-- v3(2757.2,4239.71,48.8),
-- v3(2783.34,4233.53,49.25),
-- v3(2782.99,4305.98,49.83),
-- v3(2756.49,4310.31,48.88),
-- v3(2735.57,4326.48,48.19),
-- v3(2717.14,4352.16,46.96),
-- v3(2684.21,4398.5,45.89),
-- v3(2649.05,4448.19,41.07),
-- v3(2784.87,4612.53,44.87),
-- v3(2789.61,4638.5,45.52),
-- v3(2807.93,4660.26,46.27),
-- v3(2865.66,4704.85,48.8),
-- v3(2886.93,4719.72,49.71),
-- v3(2907.87,4734.77,49.86),
-- v3(2925.11,4756.56,52.68),
-- v3(2949.0,4805.66,73.13),
-- v3(2961.39,4831.16,99.33),
-- v3(2973.44,4855.66,121.56),
-- v3(2984.98,4878.4,125.42),
-- v3(3005.71,4893.88,114.97),
-- v3(3026.77,4879.76,118.24),
-- v3(3048.23,4866.15,126.38),
-- v3(3079.36,4869.92,123.23),
-- v3(3109.04,4871.48,130.56),
-- v3(3138.94,4871.03,122.63),
-- v3(3164.09,4868.7,110.48),
-- v3(3187.84,4859.6,115.79),
-- v3(3205.32,4838.02,130.05),
-- v3(3221.36,4818.32,156.87),
-- v3(3237.53,4798.52,162.04),
-- v3(3238.51,4772.8,174.97),
-- v3(3233.29,4743.7,187.86),
-- v3(3226.89,4718.51,187.51),
-- v3(3209.05,4687.89,187.37),
-- v3(3186.59,4675.19,181.44),
-- v3(3164.02,4662.38,168.02),
-- v3(3129.93,4606.37,126.87),
-- v3(3122.06,4578.05,102.3),
-- v3(3114.11,4548.88,103.05),
-- v3(3106.21,4519.27,105.6),
-- v3(3098.68,4490.64,87.39),
-- v3(3120.24,4473.63,102.0),
-- v3(3148.94,4466.4,131.57),
-- v3(3179.8,4460.08,148.06),
-- v3(3208.87,4455.57,142.66),
-- v3(3237.94,4451.07,126.79),
-- v3(3267.84,4446.45,124.41),
-- v3(3295.17,4452.5,134.63),
-- v3(3316.87,4468.3,146.0),
-- v3(3338.6,4484.07,160.43),
-- v3(3368.76,4481.91,183.15),
-- v3(3417.46,4473.59,176.93),
-- v3(3446.25,4468.7,157.86),
-- v3(3473.39,4464.11,136.26),
-- v3(3529.16,4456.26,101.55),
-- v3(3546.3,4433.74,102.4),
-- v3(3563.04,4411.67,95.97),
-- v3(3569.74,4369.64,112.7),
-- v3(3548.67,4349.01,140.22),
-- v3(3530.18,4331.72,154.96),
-- v3(3508.98,4311.51,164.72),
-- v3(3487.67,4291.1,201.95),
-- v3(3466.37,4270.69,215.04),
-- v3(3423.15,4229.3,228.94),
-- v3(3401.7,4208.75,218.25),
-- v3(3380.54,4188.49,182.21),
-- v3(3358.08,4167.22,179.11),
-- v3(3335.26,4146.6,190.58),
-- v3(3253.98,4040.34,153.78),
-- v3(3276.12,4026.26,144.69),
-- v3(3303.09,4016.23,144.84),
-- v3(3329.83,4006.72,161.17),
-- v3(3360.22,3995.89,180.76),
-- v3(3388.68,3985.74,167.61),
-- v3(3415.77,3975.96,144.56),
-- v3(3442.8,3965.97,120.24),
-- v3(3466.36,3957.2,114.08),
-- v3(3495.05,3946.37,105.04),
-- v3(3522.23,3935.59,98.69),
-- v3(3531.79,3912.48,92.34),
-- v3(3516.8,3887.58,69.92),
-- v3(3497.98,3863.07,57.42),
-- v3(3474.25,3841.06,42.63),
-- v3(3448.05,3825.2,46.99),
-- v3(3425.19,3814.58,50.94),
-- v3(3397.49,3802.03,45.11),
-- v3(3370.69,3789.98,47.99),
-- v3(3264.33,3741.43,90.86),
-- v3(3236.07,3728.09,127.14),
-- v3(3156.22,3689.28,128.46),
-- v3(3133.63,3677.99,112.69),
-- v3(3105.33,3663.29,95.38),
-- v3(3078.4,3648.63,83.42),
-- v3(3055.47,3635.29,78.1),
-- v3(3033.98,3621.55,78.06),
-- v3(3013.68,3606.79,71.58),
-- v3(3025.03,3473.42,77.9),
-- v3(3104.25,3464.08,99.09),
-- v3(3155.75,3458.94,76.26),
-- v3(3182.29,3460.37,84.85),
-- v3(3212.15,3467.97,89.24),
-- v3(3241.6,3475.53,75.13),
-- v3(3266.93,3481.49,82.51),
-- v3(3297.3,3487.63,105.31),
-- v3(3327.89,3491.74,124.65),
-- v3(3361.04,3491.68,131.71),
-- v3(3391.81,3487.74,129.21),
-- v3(3419.77,3482.54,135.17),
-- v3(3447.63,3475.79,126.65),
-- v3(3503.6,3458.77,149.23),
-- v3(3530.88,3450.12,148.6),
-- v3(3555.76,3441.99,133.69),
-- v3(3579.95,3433.72,119.91),
-- v3(3626.17,3417.75,92.02),
-- v3(3653.96,3407.16,79.43),
-- v3(3681.85,3392.71,53.7),
-- v3(3697.2,3370.61,44.33),
-- v3(3650.75,3323.8,84.28),
-- v3(3623.05,3311.6,93.49),
-- v3(3594.99,3300.87,98.48),
-- v3(3565.99,3292.05,104.38),
-- v3(3547.68,3273.24,111.27),
-- v3(3526.25,3254.91,102.62),
-- v3(3497.12,3247.32,136.33),
-- v3(3468.39,3239.85,173.51),
-- v3(3438.08,3232.92,184.8),
-- v3(3336.26,3220.09,210.05),
-- v3(3306.37,3216.47,205.2),
-- v3(3275.34,3212.45,210.54),
-- v3(3245.0,3208.26,180.35),
-- v3(3213.49,3203.64,147.49),
-- v3(3184.09,3199.13,122.46),
-- v3(3154.69,3194.6,101.29),
-- v3(3123.47,3189.69,114.72),
-- v3(3093.17,3184.54,107.76),
-- v3(3063.28,3179.41,110.35),
-- v3(3032.16,3174.08,111.54),
-- v3(3003.09,3169.1,138.02),
-- v3(2861.33,3143.95,113.52),
-- v3(2738.05,3112.86,45.89),
-- v3(2708.25,3100.6,43.43),
-- v3(2680.23,3086.03,45.63),
-- v3(2652.52,3070.46,46.66),
-- v3(2628.96,3055.94,46.85),
-- v3(2571.98,2991.69,45.27),
-- v3(2559.28,2963.14,45.63),
-- v3(2551.28,2936.93,46.58),
-- v3(2545.54,2874.15,41.16),
-- v3(2548.24,2843.98,38.94),
-- v3(2614.52,2707.24,51.6),
-- v3(2698.37,2783.54,37.45),
-- v3(2715.97,2807.93,37.63),
-- v3(2733.77,2832.17,39.78),
-- v3(2743.23,2905.79,36.85),
-- v3(2759.3,2925.5,36.77),
-- v3(2788.73,2959.96,49.4),
-- v3(2811.53,2949.19,58.76),
-- v3(2809.65,2897.18,45.46),
-- v3(2808.57,2870.2,41.0),
-- v3(2816.57,2842.91,42.44),
-- v3(2822.18,2753.29,69.91),
-- v3(2821.65,2723.74,76.16),
-- v3(2833.09,2696.46,85.54),
-- v3(2857.73,2671.91,101.58),
-- v3(2880.3,2649.78,112.43),
-- v3(2906.54,2650.32,102.48),
-- v3(2982.09,2922.01,70.91),
-- v3(2993.15,2949.78,79.33),
-- v3(3001.91,2973.67,80.2),
-- v3(3034.62,3061.72,101.72),
-- v3(3046.62,3086.95,124.7),
-- v3(3161.91,3055.95,179.24),
-- v3(3160.79,3029.34,160.65),
-- v3(3154.48,3004.51,140.51),
-- v3(3148.55,2978.94,132.37),
-- v3(3143.46,2953.99,124.22),
-- v3(3138.28,2928.25,107.44),
-- v3(3132.5,2899.44,97.06),
-- v3(3128.82,2873.43,95.36),
-- v3(3127.61,2847.53,82.61),
-- v3(3127.61,2819.57,70.15),
-- v3(3128.03,2793.56,69.98),
-- v3(3128.53,2767.7,77.42),
-- v3(3129.06,2740.65,86.18),
-- v3(3129.63,2714.64,94.07),
-- v3(3117.37,2691.73,102.85),
-- v3(3103.3,2664.65,116.61),
-- v3(3117.96,2625.55,119.71),
-- v3(3144.33,2623.18,107.48),
-- v3(3170.49,2632.46,89.8),
-- v3(3189.31,2649.69,81.58),
-- v3(3208.06,2670.96,64.06),
-- v3(3254.47,2723.76,39.93),
-- v3(3270.75,2743.9,25.36),
-- v3(3299.76,2813.41,55.01),
-- v3(3307.04,2839.41,71.66),
-- v3(3301.4,2865.92,88.59),
-- v3(3265.45,2930.4,128.63),
-- v3(3250.64,2958.08,132.26),
-- v3(3238.18,2981.73,153.14),
-- v3(3243.58,3008.33,175.57),
-- v3(3272.51,3005.33,175.37),
-- v3(3298.28,2996.77,169.34),
-- v3(3326.25,2998.17,158.94),
-- v3(3353.4,3010.25,155.89),
-- v3(3376.42,3020.07,138.23),
-- v3(3403.51,3031.54,118.05),
-- v3(3432.35,3043.75,118.35),
-- v3(3455.77,3053.67,105.52),
-- v3(3480.16,3063.99,99.7),
-- v3(3507.45,3075.55,84.39),
-- v3(3486.8,3146.33,114.2),
-- v3(3475.16,3172.92,138.44),
-- v3(3463.34,3200.35,157.49),
-- v3(3480.84,3360.82,188.87),
-- v3(3510.87,3372.15,165.98),
-- v3(3535.57,3381.46,145.85),
-- v3(3562.25,3391.52,117.47),
-- v3(3591.89,3402.69,99.66),
-- v3(3670.22,3430.69,83.3),
-- v3(3688.95,3457.12,81.09),
-- v3(3713.59,3475.31,82.15),
-- v3(3735.89,3487.72,78.24),
-- v3(3761.48,3501.87,71.76),
-- v3(3786.23,3515.55,68.46),
-- v3(3808.62,3527.96,64.26),
-- v3(3832.07,3541.05,54.29),
-- v3(3855.9,3554.5,39.44),
-- v3(3877.28,3569.11,33.99),
-- v3(3899.45,3587.89,28.77),
-- v3(3919.29,3607.44,26.42),
-- v3(3885.45,3530.91,25.63),
-- v3(3874.41,3507.46,29.78),
-- v3(3861.99,3483.52,27.83),
-- v3(3849.11,3459.98,25.03),
-- v3(3835.13,3434.64,26.2),
-- v3(3822.61,3411.94,25.98),
-- v3(3809.57,3388.31,23.72),
-- v3(3797.07,3365.4,25.6),
-- v3(3784.31,3341.79,28.87),
-- v3(3771.68,3318.49,29.11),
-- v3(3732.31,3285.7,37.21),
-- v3(3703.9,3277.48,53.74),
-- v3(3674.87,3269.09,52.66),
-- v3(3657.05,3249.81,43.86),
-- v3(3643.8,3224.82,32.3),
-- v3(3631.86,3201.84,16.2),
-- v3(3619.99,3178.98,14.59),
-- v3(3623.56,3148.1,14.38),
-- v3(3617.53,3120.87,4.85),
-- v3(3605.59,3097.88,4.88),
-- v3(3579.61,3048.03,36.05),
-- v3(3566.94,3023.82,45.74),
-- v3(3535.16,2981.55,41.25),
-- v3(3517.02,2961.72,48.17),
-- v3(3459.29,2909.24,53.96),
-- v3(3439.23,2891.39,48.96),
-- v3(3419.61,2873.94,43.45),
-- v3(3370.48,2860.14,61.05),
-- v3(3337.53,2862.62,82.22),
-- v3(3273.01,2873.3,84.99),
-- v3(3243.47,2880.98,78.53),
-- v3(3217.88,2887.8,69.69),
-- v3(3188.64,2895.61,70.89),
-- v3(3158.56,2903.56,84.64),
-- v3(3109.44,2913.32,116.01),
-- v3(3048.67,2912.88,80.35),
-- v3(3042.37,2675.13,95.06),
-- v3(3056.46,2653.74,121.36),
-- v3(3081.18,2616.22,125.65),
-- v3(3097.58,2591.32,116.47),
-- v3(3113.8,2566.31,98.81),
-- v3(3130.46,2539.84,84.42),
-- v3(3160.5,2490.77,48.79),
-- v3(3176.06,2465.34,34.52),
-- v3(3158.73,2441.38,46.1),
-- v3(3132.44,2426.04,62.9),
-- v3(3107.1,2412.38,68.97),
-- v3(3058.15,2430.71,103.18),
-- v3(3033.43,2441.56,127.41),
-- v3(3008.84,2452.35,142.74),
-- v3(2984.94,2462.84,156.0),
-- v3(2961.18,2473.26,162.51),
-- v3(2931.37,2486.34,162.77),
-- v3(2907.49,2497.24,143.56),
-- v3(2879.46,2503.21,123.09),
-- v3(2849.3,2502.71,113.65),
-- v3(2823.33,2503.8,98.05),
-- v3(2791.33,2503.23,82.33),
-- v3(2760.0,2498.19,72.25),
-- v3(2734.6,2489.17,69.87),
-- v3(2706.47,2477.8,52.35),
-- v3(2683.2,2468.4,48.68),
-- v3(2621.29,2429.16,24.26),
-- v3(2670.65,2348.75,40.16),
-- v3(2687.01,2327.68,52.85),
-- v3(2705.64,2304.1,69.68),
-- v3(2724.14,2280.68,67.94),
-- v3(2742.64,2257.27,54.35),
-- v3(2759.18,2236.33,70.61),
-- v3(2777.8,2212.74,81.72),
-- v3(2795.91,2189.59,89.16),
-- v3(2814.14,2166.04,107.73),
-- v3(2834.38,2139.83,107.18),
-- v3(2852.48,2116.29,96.13),
-- v3(2867.76,2096.4,88.68),
-- v3(2885.72,2073.03,79.15),
-- v3(2929.44,2015.94,58.87),
-- v3(2945.02,1992.14,54.7),
-- v3(2921.08,1974.94,48.94),
-- v3(2893.9,1969.56,49.97),
-- v3(2868.23,1973.36,50.67),
-- v3(2841.22,1977.37,65.87),
-- v3(2815.41,1981.2,90.64),
-- v3(2788.99,1985.12,92.55),
-- v3(2762.75,1989.15,77.4),
-- v3(2735.82,1997.03,78.76),
-- v3(2712.08,2011.62,67.27),
-- v3(2629.46,2017.31,32.25),
-- v3(2598.82,2018.76,30.98),
-- v3(2568.38,2020.07,16.76),
-- v3(2536.29,2021.65,20.49),
-- v3(2507.54,2029.75,21.47),
-- v3(2452.01,2080.16,42.74),
-- v3(2433.71,2097.64,52.22),
-- v3(2413.84,2121.24,72.96),
-- v3(2406.09,2151.2,79.63),
-- v3(2402.9,2176.32,84.66),
-- v3(2398.45,2207.41,86.96),
-- v3(2392.84,2236.83,83.3),
-- v3(2387.25,2262.72,85.32),
-- v3(2379.57,2300.65,90.76),
-- v3(2378.85,2325.84,79.91),
-- v3(2379.67,2358.97,77.24),
-- v3(2375.88,2447.75,64.28),
-- v3(2371.12,2473.07,54.91),
-- v3(2347.6,2530.9,47.01),
-- v3(2332.23,2552.45,47.16),
-- v3(2314.81,2570.98,47.16),
-- v3(2290.95,2589.29,47.15),
-- v3(2264.26,2605.31,55.88),
-- v3(2239.91,2616.21,51.6),
-- v3(2211.12,2623.84,50.91),
-- v3(1989.83,2378.52,81.45),
-- v3(2036.82,2327.88,95.28),
-- v3(2052.76,2303.97,95.3),
-- v3(2054.96,2278.08,93.9),
-- v3(2039.18,2247.93,93.01),
-- v3(2022.51,2226.66,102.95),
-- v3(2004.04,2203.08,105.21),
-- v3(1985.56,2179.5,106.0),
-- v3(1975.15,2124.66,90.84),
-- v3(1998.8,2105.06,93.67),
-- v3(2021.94,2085.82,83.75),
-- v3(2045.56,2066.17,74.86),
-- v3(2065.12,2049.91,75.77),
-- v3(2084.98,2033.68,84.81),
-- v3(2096.63,2008.4,92.93),
-- v3(2080.53,1982.7,89.92),
-- v3(2065.59,1956.3,84.96),
-- v3(2052.96,1933.96,84.84),
-- v3(2039.39,1909.96,91.21),
-- v3(2024.25,1883.18,93.0),
-- v3(2009.11,1856.41,95.09),
-- v3(2023.93,1830.49,96.18),
-- v3(2050.71,1815.35,96.61),
-- v3(2074.17,1802.1,97.84),
-- v3(2100.98,1787.94,101.08),
-- v3(2156.89,1765.32,104.3),
-- v3(2150.93,1739.74,100.38),
-- v3(2136.3,1716.38,99.58),
-- v3(2127.74,1558.63,88.8),
-- v3(2159.74,1540.7,84.19),
-- v3(2185.81,1527.86,82.78),
-- v3(2329.94,1324.04,66.3),
-- v3(2405.0,1341.14,57.14),
-- v3(2426.2,1415.36,44.32),
-- v3(2406.5,1434.57,45.46),
-- v3(2363.25,1468.7,54.14),
-- v3(2282.12,1539.48,65.31),
-- v3(2271.45,1603.59,68.6),
-- v3(2328.82,1668.78,52.02),
-- v3(2348.69,1691.26,52.53),
-- v3(2365.34,1710.1,37.37),
-- v3(2412.68,1765.07,53.63),
-- v3(2458.73,1821.92,49.98),
-- v3(2452.1,1847.44,38.87),
-- v3(2432.64,1863.16,51.19),
-- v3(2409.38,1881.95,55.57),
-- v3(2375.24,1909.53,76.45),
-- v3(2351.65,1928.58,94.15),
-- v3(2330.78,1944.92,114.37),
-- v3(2266.1,1973.17,125.76),
-- v3(2249.68,1994.16,122.24),
-- v3(2265.88,2070.91,125.06),
-- v3(2279.97,2097.73,114.0),
-- v3(2294.41,2124.6,97.61),
-- v3(2308.72,2151.29,90.34),
-- v3(2322.19,2176.52,91.78),
-- v3(2336.35,2203.3,94.75),
-- v3(2361.43,2251.61,98.26),
-- v3(2353.03,2373.76,78.24),
-- v3(2291.11,2377.07,62.61),
-- v3(2199.19,2367.72,91.87),
-- v3(2182.77,2393.11,99.83),
-- v3(2177.35,2422.95,96.02),
-- v3(2165.0,2489.67,79.72),
-- v3(2155.81,2519.38,70.38),
-- v3(2138.78,2542.35,68.14),
-- v3(2044.43,2471.04,73.51),
-- v3(2089.09,2369.13,95.96),
-- v3(2096.05,2341.34,94.78),
-- v3(2117.16,2324.36,94.78),
-- v3(2144.73,2274.2,105.85),
-- v3(2133.31,2250.17,107.27),
-- v3(2115.96,2231.34,105.11),
-- v3(2089.57,2216.92,95.58),
-- v3(2076.67,2193.91,98.82),
-- v3(2091.23,2166.92,110.65),
-- v3(2110.13,2139.27,112.43),
-- v3(2129.82,2115.95,108.46),
-- v3(2152.24,2095.24,110.4),
-- v3(2160.09,2014.36,102.07),
-- v3(2164.43,1988.72,94.49),
-- v3(2170.78,1963.49,96.35),
-- v3(2179.68,1936.55,99.51),
-- v3(2187.97,1912.08,101.35),
-- v3(2196.27,1887.61,102.02),
-- v3(2204.52,1863.28,105.03),
-- v3(2213.38,1837.13,108.13),
-- v3(2221.68,1812.66,106.72),
-- v3(2229.88,1788.47,99.28),
-- v3(2238.23,1763.83,90.84),
-- v3(2256.84,1780.57,89.74),
-- v3(2277.0,1801.42,93.11),
-- v3(2300.43,1818.05,94.79),
-- v3(2333.8,1839.43,102.99),
-- v3(2360.79,1853.84,99.67),
-- v3(2383.17,1842.63,91.35),
-- v3(2393.56,1815.92,88.26),
-- v3(2449.46,1780.29,49.71),
-- v3(2473.73,1767.74,45.72),
-- v3(2490.52,1746.7,38.63),
-- v3(2490.76,1718.53,31.0),
-- v3(2491.07,1691.4,26.49),
-- v3(2518.06,1691.7,23.96),
-- v3(2465.87,1690.82,29.92),
-- v3(2409.73,1675.46,31.52),
-- v3(2389.3,1651.38,40.88),
-- v3(2371.08,1629.86,46.74),
-- v3(2396.8,1626.81,40.19),
-- v3(2461.73,1631.37,31.02),
-- v3(2488.27,1632.22,29.77),
-- v3(2511.44,1548.1,31.48),
-- v3(2485.04,1548.31,34.71),
-- v3(2458.49,1548.31,35.45),
-- v3(2391.27,1542.56,39.0),
-- v3(2370.19,1519.61,50.09),
-- v3(2492.97,1469.12,35.68),
-- v3(2475.34,1424.19,38.14),
-- v3(2379.84,1423.66,48.76),
-- v3(2371.57,1372.01,57.44),
-- v3(2431.84,1350.62,50.09),
-- v3(2459.88,1351.2,46.26),
-- v3(2477.12,1310.08,48.5),
-- v3(2432.72,1292.51,54.32),
-- v3(2406.19,1293.51,61.1),
-- v3(2315.36,1281.35,69.16),
-- v3(2360.64,1208.38,62.62),
-- v3(2387.54,1230.65,60.1),
-- v3(2385.31,1260.25,62.84),
-- v3(2332.02,1258.9,67.15),
-- v3(2396.32,1162.51,67.15),
-- v3(2427.42,1143.2,74.18),
-- v3(2453.66,1126.91,78.63),
-- v3(2478.11,1111.73,82.34),
-- v3(2484.63,1083.51,79.12),
-- v3(2490.58,1057.75,78.47),
-- v3(2503.17,1030.39,78.91),
-- v3(2527.46,1022.74,78.01),
-- v3(2560.31,1026.9,74.43),
-- v3(2585.49,1043.13,67.95),
-- v3(2611.03,1056.66,60.74),
-- v3(2638.86,1066.56,53.74),
-- v3(2684.08,991.18,30.52),
-- v3(2657.17,983.27,53.34),
-- v3(2628.4,975.93,68.66),
-- v3(2571.46,959.96,79.88),
-- v3(2602.11,852.33,86.0),
-- v3(2629.98,843.99,80.0),
-- v3(2659.04,850.8,78.65),
-- v3(2789.3,755.72,29.97),
-- v3(2769.19,737.09,47.48),
-- v3(2740.38,733.33,58.27),
-- v3(2668.39,733.75,86.46),
-- v3(2671.59,617.27,91.79),
-- v3(2741.1,567.13,69.97),
-- v3(2762.38,551.67,69.11),
-- v3(2766.57,524.7,77.23),
-- v3(2756.2,496.54,80.39),
-- v3(2354.45,591.05,177.08),
-- v3(2328.23,595.24,189.18),
-- v3(2298.24,599.86,202.51),
-- v3(2270.38,592.25,222.82),
-- v3(2252.88,568.95,240.64),
-- v3(2243.11,543.19,243.1),
-- v3(2237.57,517.92,242.04),
-- v3(2232.37,492.67,250.25),
-- v3(2238.06,434.01,273.09),
-- v3(2275.24,378.22,270.0),
-- v3(2246.37,346.99,258.3),
-- v3(2223.89,332.45,247.47),
-- v3(2198.75,316.19,241.24),
-- v3(2173.24,299.71,250.69),
-- v3(2161.67,265.64,243.87),
-- v3(2180.42,237.07,251.85),
-- v3(2203.54,219.95,254.63),
-- v3(2278.85,132.48,207.06),
-- v3(2270.88,107.3,222.21),
-- v3(2238.53,96.54,238.14),
-- v3(2108.24,-26.24,234.88),
-- v3(2104.57,-56.74,250.72),
-- v3(2101.39,-83.25,252.16),
-- v3(2036.52,-131.54,256.81),
-- v3(2006.73,-126.03,235.6),
-- v3(1977.16,-120.55,227.37),
-- v3(1947.17,-115.0,225.66),
-- v3(1920.98,-120.49,212.31),
-- v3(1915.38,-150.47,230.39),
-- v3(1894.4,-226.37,280.92),
-- v3(1711.78,-212.09,275.33),
-- v3(1683.61,-200.58,270.89),
-- v3(1635.4,-230.83,255.26),
-- v3(1628.55,-263.88,239.23),
-- v3(1635.92,-291.97,238.69),
-- v3(1576.25,-543.19,162.92),
-- v3(1550.1,-539.43,151.09),
-- v3(1555.03,-680.8,114.99),
-- v3(1496.09,-743.02,83.12),
-- v3(1178.28,-2617.38,27.78),
-- v3(1223.87,-2632.21,35.04),
-- v3(1245.53,-2654.25,25.77),
-- v3(1307.21,-2697.17,5.64),
-- v3(1306.51,-2670.78,30.45),
-- v3(1322.33,-2647.82,40.77),
-- v3(1341.05,-2626.45,44.72),
-- v3(1408.26,-2598.59,48.4),
-- v3(1461.82,-2642.17,45.83),
-- v3(1482.41,-2658.81,40.4),
-- v3(1506.3,-2677.77,31.67),
-- v3(1529.88,-2696.43,6.8),
-- v3(1552.88,-2677.79,38.03),
-- v3(1563.26,-2652.8,40.93),
-- v3(1585.38,-2589.0,55.27),
-- v3(1621.3,-2562.79,65.48),
-- v3(1651.02,-2567.62,64.52),
-- v3(1676.66,-2577.19,60.57),
-- v3(1692.33,-2598.25,52.11),
-- v3(1815.88,-2598.17,59.89),
-- v3(1792.75,-2585.06,69.35),
-- v3(1768.12,-2574.0,67.75),
-- v3(1744.71,-2555.98,68.08),
-- v3(1735.28,-2530.59,76.58),
-- v3(1724.58,-2501.4,92.82),
-- v3(1714.18,-2472.76,94.78),
-- v3(1725.1,-2448.88,92.77),
-- v3(1751.4,-2439.51,103.06),
-- v3(1775.91,-2430.77,115.38),
-- v3(1802.47,-2436.68,122.26),
-- v3(1826.38,-2447.86,113.79),
-- v3(1852.98,-2460.03,101.81),
-- v3(1880.78,-2455.7,110.49),
-- v3(1897.49,-2436.63,94.53),
-- v3(1903.57,-2410.79,83.94),
-- v3(1882.34,-2393.83,104.4),
-- v3(1858.29,-2383.3,129.78),
-- v3(1831.64,-2371.63,145.29),
-- v3(1806.88,-2360.85,144.47),
-- v3(1781.58,-2352.49,130.14),
-- v3(1752.65,-2347.44,119.42),
-- v3(1736.16,-2324.55,114.9),
-- v3(1742.4,-2299.77,122.14),
-- v3(1759.99,-2277.79,125.94),
-- v3(1782.08,-2254.69,127.26),
-- v3(1807.87,-2248.11,133.18),
-- v3(1837.05,-2251.68,150.02),
-- v3(1866.97,-2255.35,159.26),
-- v3(1893.62,-2258.63,148.22),
-- v3(1920.27,-2261.9,134.25),
-- v3(1981.71,-2288.48,110.9),
-- v3(2010.75,-2294.28,90.83),
-- v3(2041.31,-2298.64,72.2),
-- v3(2075.09,-2257.1,66.21),
-- v3(2059.36,-2234.22,74.08),
-- v3(2042.45,-2214.67,79.25),
-- v3(2021.74,-2191.68,75.81),
-- v3(1996.78,-2163.98,93.74),
-- v3(1975.46,-2140.4,105.83),
-- v3(1948.42,-2132.86,119.07),
-- v3(1922.47,-2133.27,141.81),
-- v3(1895.48,-2133.93,155.49),
-- v3(1868.49,-2134.67,156.3),
-- v3(1839.26,-2137.66,150.84),
-- v3(1810.34,-2126.48,136.3),
-- v3(1793.29,-2105.77,126.14),
-- v3(1790.86,-2078.39,120.05),
-- v3(1811.4,-2042.06,136.87),
-- v3(1833.03,-2018.44,144.67),
-- v3(1861.1,-2008.15,145.37),
-- v3(1888.25,-2008.26,158.02),
-- v3(1915.5,-2011.7,159.54),
-- v3(1937.65,-2027.32,149.85),
-- v3(1955.43,-2048.82,132.97),
-- v3(1984.61,-2057.21,118.37),
-- v3(2014.15,-2061.92,107.31),
-- v3(2041.45,-2073.09,99.08),
-- v3(2069.07,-2087.84,95.61),
-- v3(2095.52,-2101.75,96.07),
-- v3(2122.75,-2114.71,75.6),
-- v3(2148.9,-2125.79,67.56),
-- v3(2210.13,-2044.12,59.08),
-- v3(2184.7,-2027.97,71.47),
-- v3(2158.21,-2012.79,80.65),
-- v3(2135.07,-2000.3,89.39),
-- v3(2107.92,-1985.43,106.44),
-- v3(2081.46,-1970.63,118.3),
-- v3(2054.12,-1956.19,111.21),
-- v3(2028.93,-1943.61,111.16),
-- v3(2001.37,-1929.66,109.29),
-- v3(1973.9,-1914.72,126.05),
-- v3(1947.68,-1898.62,147.34),
-- v3(1926.49,-1883.15,163.23),
-- v3(1902.83,-1862.86,184.37),
-- v3(1878.63,-1839.56,193.62),
-- v3(1920.98,-1729.11,193.93),
-- v3(1951.4,-1729.6,178.51),
-- v3(1977.01,-1731.96,163.09),
-- v3(2008.27,-1735.05,159.29),
-- v3(2038.22,-1740.33,156.85),
-- v3(2067.64,-1751.6,161.97),
-- v3(2090.45,-1762.28,181.08),
-- v3(2117.36,-1774.89,188.16),
-- v3(2144.28,-1787.7,170.68),
-- v3(2172.37,-1801.23,142.21),
-- v3(2198.96,-1813.94,120.65),
-- v3(2222.62,-1825.1,110.28),
-- v3(2247.53,-1833.73,101.21),
-- v3(2263.55,-1855.27,92.81),
-- v3(2316.55,-1865.11,87.71),
-- v3(2395.51,-1858.16,72.0),
-- v3(2423.3,-1855.22,60.92),
-- v3(2447.4,-1842.32,52.75),
-- v3(2472.45,-1824.8,50.84),
-- v3(2492.97,-1808.24,47.56),
-- v3(2513.35,-1790.47,41.24),
-- v3(2532.34,-1772.67,34.72),
-- v3(2551.07,-1754.29,29.67),
-- v3(2569.15,-1736.42,22.82),
-- v3(2520.4,-1695.36,37.74),
-- v3(2458.49,-1659.5,40.47),
-- v3(2430.63,-1648.42,44.94),
-- v3(2406.6,-1639.08,51.49),
-- v3(2379.64,-1628.61,63.17),
-- v3(2350.53,-1624.05,75.43),
-- v3(2324.72,-1635.43,78.99),
-- v3(2298.85,-1633.71,89.77),
-- v3(2271.12,-1622.7,100.56),
-- v3(2203.17,-1594.33,143.21),
-- v3(2176.24,-1582.26,157.79),
-- v3(2147.09,-1575.06,173.01),
-- v3(2120.01,-1584.73,199.93),
-- v3(2094.78,-1592.95,214.68),
-- v3(2067.22,-1593.09,232.91),
-- v3(1969.28,-1615.04,229.46),
-- v3(1915.91,-1610.27,181.33),
-- v3(1889.75,-1592.56,154.44),
-- v3(1865.59,-1530.77,133.01),
-- v3(1871.47,-1501.44,133.07),
-- v3(1893.5,-1489.0,146.12),
-- v3(1916.02,-1477.08,160.78),
-- v3(1939.64,-1467.45,170.87),
-- v3(1996.8,-1452.6,182.96),
-- v3(2027.41,-1449.32,211.42),
-- v3(2064.85,-1447.25,211.68),
-- v3(2092.25,-1446.12,197.86),
-- v3(2119.85,-1445.02,175.21),
-- v3(2149.65,-1443.2,163.04),
-- v3(2175.84,-1439.84,146.32),
-- v3(2199.15,-1451.37,129.71),
-- v3(2220.58,-1466.53,129.55),
-- v3(2282.53,-1461.06,115.76),
-- v3(2313.11,-1461.77,100.85),
-- v3(2339.46,-1451.67,86.52),
-- v3(2348.39,-1425.64,79.83),
-- v3(2369.3,-1406.54,70.21),
-- v3(2393.16,-1386.13,59.27),
-- v3(2388.22,-1255.21,58.67),
-- v3(2363.74,-1242.45,66.58),
-- v3(2339.05,-1229.49,72.88),
-- v3(2315.95,-1217.06,80.85),
-- v3(2292.82,-1204.14,95.38),
-- v3(2270.08,-1190.6,111.12),
-- v3(2243.97,-1189.16,134.0),
-- v3(2217.48,-1188.56,154.7),
-- v3(2187.41,-1182.37,158.9),
-- v3(2157.98,-1171.93,162.0),
-- v3(2123.9,-1151.48,163.2),
-- v3(2097.98,-1125.85,150.24),
-- v3(2080.65,-1100.71,137.18),
-- v3(2202.28,-985.16,138.23),
-- v3(2241.24,-1020.17,131.0),
-- v3(2261.56,-1038.38,115.17),
-- v3(2281.13,-1055.57,99.69),
-- v3(2302.77,-1074.1,82.5),
-- v3(2324.71,-1092.89,67.25),
-- v3(2346.55,-1111.59,61.5),
-- v3(2365.7,-1127.99,54.79),
-- v3(2385.39,-1144.04,53.96),
-- v3(2408.58,-1158.6,49.15),
-- v3(2433.57,-1169.94,42.3),
-- v3(2461.56,-1177.66,32.55),
-- v3(2591.09,-1184.5,7.44),
-- v3(2605.21,-1207.4,4.08),
-- v3(2573.78,-1126.38,40.16),
-- v3(2554.02,-1109.33,41.89),
-- v3(2532.1,-1090.49,46.94),
-- v3(2512.36,-1073.18,54.11),
-- v3(2512.41,-1039.96,79.52),
-- v3(2517.94,-981.05,81.24),
-- v3(2495.62,-993.14,97.08),
-- v3(2481.34,-1015.16,104.4),
-- v3(2455.41,-1029.76,98.41),
-- v3(2432.44,-1014.82,105.93),
-- v3(2424.8,-989.55,124.48),
-- v3(2420.63,-959.53,136.79),
-- v3(2342.91,-884.01,118.81),
-- v3(2316.04,-885.49,101.0),
-- v3(2290.61,-894.24,99.8),
-- v3(2208.91,-1009.74,155.18),
-- v3(2192.77,-1097.42,163.74),
-- v3(2202.53,-1122.56,157.83),
-- v3(2219.36,-1142.22,145.37),
-- v3(2219.68,-1091.51,140.7),
-- v3(2244.23,-1073.54,116.26),
-- v3(2279.58,-1090.18,88.6),
-- v3(2271.53,-1115.48,83.59),
-- v3(2263.51,-1140.79,100.46),
-- v3(2325.64,-1190.86,71.95),
-- v3(2352.26,-1177.52,61.07),
-- v3(2390.5,-1178.47,53.61),
-- v3(2378.79,-1202.67,57.82),
-- v3(2419.8,-1252.83,47.26),
-- v3(2439.36,-1231.23,40.32),
-- v3(2467.7,-1329.15,7.44),
-- v3(2476.66,-1398.51,23.2),
-- v3(2481.04,-1424.35,13.48),
-- v3(2485.46,-1450.33,17.84),
-- v3(2490.37,-1478.95,21.89),
-- v3(2495.93,-1506.08,7.22),
-- v3(2503.67,-1533.18,5.64),
-- v3(2515.1,-1561.01,11.56),
-- v3(2526.5,-1585.58,12.48),
-- v3(2545.66,-1605.98,13.57),
-- v3(2568.61,-1623.33,13.32),
-- v3(2595.16,-1633.6,14.07),
-- v3(2622.1,-1635.14,18.89),
-- v3(2659.84,-1636.18,20.47),
-- v3(2652.34,-1686.43,18.21),
-- v3(2624.06,-1688.02,19.3),
-- v3(2595.17,-1680.85,21.09),
-- v3(2576.76,-1663.82,19.31),
-- v3(2552.68,-1643.13,20.91),
-- v3(2522.26,-1617.92,21.3),
-- v3(2465.75,-1606.95,36.67),
-- v3(2440.29,-1612.12,45.46),
-- v3(2414.19,-1600.9,60.56),
-- v3(2405.28,-1572.35,66.25),
-- v3(2394.76,-1538.46,78.4),
-- v3(2385.59,-1508.97,70.62),
-- v3(2376.81,-1481.04,66.9),
-- v3(2358.5,-1511.5,80.29),
-- v3(2340.51,-1533.47,98.67),
-- v3(2321.71,-1563.07,102.52),
-- v3(2297.66,-1548.22,117.32),
-- v3(2273.59,-1538.59,127.97),
-- v3(2244.68,-1527.01,141.75),
-- v3(2223.04,-1509.23,145.51),
-- v3(2222.13,-1542.82,161.88),
-- v3(2211.27,-1569.98,147.35),
-- v3(2180.7,-1553.69,164.3),
-- v3(2172.62,-1529.2,179.57),
-- v3(2164.39,-1504.27,173.94),
-- v3(2157.1,-1478.91,162.29),
-- v3(2083.05,-1470.65,216.6),
-- v3(2088.83,-1497.33,227.12),
-- v3(2094.33,-1524.37,218.16),
-- v3(2099.79,-1551.28,208.4),
-- v3(2034.54,-1614.48,238.16),
-- v3(2010.34,-1632.88,228.64),
-- v3(1986.43,-1651.32,215.42),
-- v3(1965.54,-1667.45,214.02),
-- v3(1936.16,-1705.72,192.5),
-- v3(1980.55,-1759.82,151.76),
-- v3(2000.31,-1782.79,134.07),
-- v3(2020.91,-1806.7,122.86),
-- v3(2041.22,-1824.96,140.43),
-- v3(2066.18,-1827.05,155.36),
-- v3(1996.81,-1817.32,121.61),
-- v3(1969.2,-1813.3,126.0),
-- v3(1948.21,-1828.65,135.13),
-- v3(1954.1,-1863.94,137.57),
-- v3(2065.9,-1933.44,119.54),
-- v3(2061.16,-1992.64,108.16),
-- v3(2037.3,-2009.14,99.86),
-- v3(2009.33,-2028.5,102.0),
-- v3(1979.43,-2023.57,117.25),
-- v3(2083.77,-2011.13,100.05),
-- v3(2110.29,-2024.64,88.13),
-- v3(2114.66,-2049.59,79.48),
-- v3(2089.8,-2069.18,83.64),
-- v3(2028.34,-2096.43,107.02),
-- v3(2007.83,-2113.48,118.22),
-- v3(1977.18,-2183.7,102.31),
-- v3(1965.96,-2210.71,121.81),
-- v3(1955.08,-2237.97,115.73),
-- v3(1916.42,-2235.44,143.63),
-- v3(1892.77,-2223.38,154.15),
-- v3(1868.86,-2211.16,167.27),
-- v3(1842.01,-2197.45,154.27),
-- v3(1818.5,-2185.44,142.79),
-- v3(1766.03,-2166.21,123.84),
-- v3(1754.16,-2189.91,127.47),
-- v3(1740.98,-2216.38,118.28),
-- v3(1739.92,-2245.45,120.95),
-- v3(1768.57,-2306.39,126.91),
-- v3(1793.15,-2318.62,125.59),
-- v3(1818.57,-2331.17,144.67),
-- v3(1843.43,-2341.66,143.49),
-- v3(1872.57,-2347.5,131.44),
-- v3(1899.42,-2347.67,124.41),
-- v3(1928.75,-2349.51,121.1),
-- v3(1953.45,-2355.8,100.45),
-- v3(1949.8,-2382.52,84.01),
-- v3(1932.26,-2435.5,68.86),
-- v3(1923.18,-2460.73,73.56),
-- v3(1817.51,-2490.24,93.31),
-- v3(1841.29,-2504.84,74.12),
-- v3(1861.95,-2526.25,56.27),
-- v3(1847.28,-2548.25,60.45),
-- v3(1829.11,-2565.87,73.78),
-- v3(1797.93,-2560.26,77.53),
-- v3(1779.71,-2541.37,83.72),
-- v3(1761.6,-2523.2,80.91),
-- v3(1600.75,-2636.12,43.16),
-- v3(1626.57,-2646.73,36.96),
-- v3(1650.52,-2656.69,31.37),
-- v3(1674.6,-2666.67,26.95),
-- v3(707.26,-2485.78,20.69),
-- v3(777.18,-1439.45,27.64),
-- v3(775.05,-1505.53,20.99),
-- v3(756.26,-1484.28,20.64),
-- v3(738.61,-1466.17,22.67),
-- v3(678.33,-2141.6,12.51),
-- v3(676.5,-2168.39,12.88),
-- v3(675.99,-2319.37,22.77),
-- v3(724.48,-2463.9,20.45),
-- v3(827.86,-2015.96,42.91),
-- v3(901.57,-2019.24,44.72),
-- v3(970.87,-2026.89,40.2),
-- v3(1041.02,-2033.51,51.02),
-- v3(1067.31,-2035.64,31.48),
-- v3(1127.67,-2040.47,31.5),
-- v3(916.73,-1976.97,46.11),
-- v3(894.4,-2045.22,49.0),
-- v3(865.52,-2044.83,47.23),
-- v3(865.39,-1839.63,37.58),
-- v3(867.45,-1872.86,69.54),
-- v3(926.45,-1915.46,40.62),
-- v3(924.4,-1885.98,38.1),
-- v3(922.4,-1857.1,48.13),
-- v3(920.47,-1829.27,49.73),
-- v3(977.74,-1808.85,40.69),
-- v3(979.46,-1837.3,40.35),
-- v3(1004.47,-1792.37,42.47),
-- v3(999.77,-1859.84,31.38),
-- v3(1005.39,-1818.47,41.77),
-- v3(1068.65,-1850.78,37.8),
-- v3(1070.45,-1832.53,80.95),
-- v3(1052.61,-1811.97,42.59),
-- v3(1062.4,-1810.81,42.59),
-- v3(1062.05,-1781.33,36.42),
-- v3(1049.11,-1797.44,35.9),
-- v3(1044.52,-1784.75,35.97),
-- v3(1036.52,-1816.45,34.23),
-- v3(1041.73,-1837.42,32.61),
-- v3(1046.26,-1865.85,30.35),
-- v3(1051.46,-1873.2,30.6),
-- v3(1083.05,-1893.67,36.39),
-- v3(1083.05,-1893.67,36.39),
-- v3(1081.94,-1914.59,35.33),
-- v3(1098.62,-1919.83,39.07),
-- v3(1130.26,-1953.79,34.5),
-- v3(1152.45,-1989.95,41.51),
-- v3(1156.26,-2006.73,42.7),
-- v3(1160.01,-2025.99,46.63),
-- v3(1152.41,-2049.38,44.23),
-- v3(1134.22,-2048.08,31.51),
-- v3(1112.91,-2053.47,31.5),
-- v3(1083.47,-2034.71,31.5),
-- v3(1115.76,-2015.33,49.3),
-- v3(1115.76,-2015.33,49.3),
-- v3(1102.05,-2008.34,48.22),
-- v3(1085.69,-1999.66,48.09),
-- v3(1076.18,-1994.23,48.46),
-- v3(1058.63,-1978.12,31.51),
-- v3(1065.32,-1968.97,31.51),
-- v3(1075.01,-1952.01,31.51),
-- v3(1080.2,-1938.91,31.98),
-- v3(1062.62,-1895.67,31.62),
-- v3(1063.05,-1907.65,31.51),
-- v3(1064.31,-1916.36,43.64),
-- v3(1062.87,-1931.11,31.53),
-- v3(1061.88,-1963.12,31.51),
-- v3(1052.01,-1962.62,31.51),
-- v3(1040.31,-1969.8,39.65),
-- v3(1037.58,-1992.9,43.2),
-- v3(1032.28,-1980.67,31.58),
-- v3(1003.15,-1965.83,31.39),
-- v3(988.82,-1960.92,31.22),
-- v3(980.03,-1952.97,31.31),
-- v3(991.13,-1950.43,31.35),
-- v3(1007.42,-1951.08,31.64),
-- v3(1011.82,-1939.27,34.39),
-- v3(1006.52,-1925.43,31.63),
-- v3(1010.68,-1907.96,31.19),
-- v3(988.08,-1935.43,38.01),
-- v3(996.29,-1907.88,49.78),
-- v3(969.22,-1907.51,62.2),
-- v3(924.7,-1936.37,40.62),
-- v3(916.77,-1870.36,49.76),
-- v3(982.6,-1865.7,31.58),
-- v3(987.43,-1794.06,31.73),
-- v3(988.72,-1781.1,31.74),
-- v3(985.96,-1815.14,31.65),
-- v3(973.55,-1819.28,31.63),
-- v3(963.59,-1815.57,31.57),
-- v3(1003.64,-1833.71,41.85),
-- v3(998.56,-1848.78,42.23),
-- v3(995.16,-1870.36,31.14),
-- v3(1004.75,-1868.96,31.38),
-- v3(1016.26,-1863.54,31.38),
-- v3(1017.36,-1850.57,31.51),
-- v3(1018.75,-1828.16,32.99),
-- v3(1020.08,-1806.79,34.34),
-- v3(1021.52,-1783.48,35.7),
-- v3(1021.35,-1769.83,35.94),
-- v3(1031.36,-1789.84,36.48),
-- v3(1043.47,-1799.89,35.41),
-- v3(1041.8,-1897.47,40.05),
-- v3(1042.79,-1915.61,40.1),
-- v3(1043.25,-1933.9,40.19),
-- v3(1043.25,-1933.9,40.19),
-- v3(1043.13,-1947.81,40.83),
-- v3(1079.87,-1977.79,48.32),
-- v3(1086.27,-1981.25,74.97),
-- v3(1083.64,-2016.51,54.54),
-- v3(1096.8,-2027.81,40.24),
-- v3(1112.22,-2036.09,31.48),
-- v3(1138.59,-2029.79,31.49),
-- v3(1131.58,-2028.57,37.47),
-- v3(1131.69,-2018.05,37.62),
-- v3(1140.28,-2020.57,31.51),
-- v3(1152.02,-2042.92,45.16),
-- v3(1169.98,-2046.34,44.97),
-- v3(1182.3,-2035.07,48.78),
-- v3(1131.26,-1828.43,29.85),
-- v3(1137.0,-1775.73,29.7),
-- v3(1141.2,-1794.72,29.78),
-- v3(1146.09,-1811.55,29.79),
-- v3(1115.89,-1766.7,29.77),
-- v3(1108.29,-1751.22,36.16),
-- v3(1088.19,-1715.85,29.91),
-- v3(1083.14,-1699.52,29.91),
-- v3(1078.09,-1683.18,29.91),
-- v3(1062.83,-1612.54,29.76),
-- v3(1060.86,-1594.82,29.51),
-- v3(1056.4,-1537.59,28.25),
-- v3(1051.99,-1475.1,28.91),
-- v3(1047.44,-1408.4,30.82),
-- v3(1042.61,-1359.15,33.23),
-- v3(1040.71,-1328.48,37.13),
-- v3(1040.08,-1294.75,40.52),
-- v3(1040.06,-1275.85,42.42),
-- v3(1042.56,-1248.86,44.51),
-- v3(1054.37,-1280.81,26.25),
-- v3(1054.85,-1299.35,26.96),
-- v3(1095.8,-1672.67,29.92),
-- v3(1089.26,-1634.52,29.92),
-- v3(1087.67,-1616.77,29.9),
-- v3(1086.52,-1594.16,29.69),
-- v3(1085.96,-1576.51,29.26),
-- v3(1084.94,-1544.2,28.46),
-- v3(1084.31,-1514.57,28.51),
-- v3(1076.05,-1310.3,27.51),
-- v3(1065.88,-1321.48,27.99),
-- v3(1066.85,-1348.06,29.07),
-- v3(1068.0,-1366.16,29.61),
-- v3(1070.56,-1399.34,29.94),
-- v3(1070.56,-1399.34,29.94),
-- v3(1007.92,-1433.55,35.54),
-- v3(874.88,-1490.9,14.99),
-- v3(868.53,-1471.36,10.8),
-- v3(924.81,-1607.26,44.56),
-- v3(977.86,-1751.88,31.71),
-- v3(735.88,-1581.59,9.68),
-- v3(724.27,-1499.32,20.42),
-- v3(739.0,-1491.77,21.17),
-- v3(763.68,-1467.29,21.39),
-- v3(758.46,-1441.74,28.81),
-- v3(754.55,-1414.82,27.03),
-- v3(756.55,-1396.76,39.72),
-- v3(758.46,-1380.98,39.1),
-- v3(739.76,-1370.65,36.23),
-- v3(733.01,-1386.47,27.0),
-- v3(730.87,-1401.46,27.0),
-- v3(773.67,-1411.0,27.18),
-- v3(720.96,-1413.67,26.85),
-- v3(711.32,-1401.18,26.85),
-- v3(712.47,-1384.58,26.8),
-- v3(706.78,-1369.22,26.55),
-- v3(704.43,-1345.7,26.04),
-- v3(715.06,-1351.58,26.17),
-- v3(727.64,-1366.08,26.84),
-- v3(721.16,-1374.84,26.77),
-- v3(720.27,-1389.52,26.84),
-- v3(696.54,-1410.03,23.62),
-- v3(696.54,-1410.03,23.62),
-- v3(690.88,-1396.65,23.94),
-- v3(686.2,-1378.67,24.35),
-- v3(682.62,-1361.18,24.64),
-- v3(678.58,-1338.75,24.84),
-- v3(677.74,-1320.78,24.83),
-- v3(677.12,-1292.01,24.94),
-- v3(676.67,-1273.57,24.98),
-- v3(673.88,-1198.05,25.09),
-- v3(587.68,-900.32,10.73),
-- v3(419.02,-1210.12,41.79),
-- v3(226.85,-1423.0,29.73),
-- v3(-238.96,-1505.05,38.25),
-- v3(-253.44,-1514.18,40.59),
-- v3(-240.56,-1488.92,38.25),
-- v3(-251.02,-1504.95,40.59),
-- v3(-241.83,-1517.55,42.17),
-- v3(-250.94,-1541.11,37.32),
-- v3(-160.02,-1733.52,30.6),
-- v3(-169.81,-1740.44,30.68),
-- v3(-178.99,-1742.27,30.73),
-- v3(-180.94,-1732.14,31.02),
-- v3(-179.01,-1717.16,31.51),
-- v3(-195.02,-1724.47,33.16),
-- v3(-195.02,-1724.47,33.16),
-- v3(-197.99,-1732.8,33.16),
-- v3(-205.5,-1724.67,33.16),
-- v3(-196.93,-1717.41,38.52),
-- v3(-192.67,-1708.34,38.18),
-- v3(-218.52,-1748.64,31.23),
-- v3(-207.91,-1759.49,25.24),
-- v3(-245.95,-1720.24,28.56),
-- v3(-261.7,-1708.25,26.18),
-- v3(-276.26,-1697.96,23.59),
-- v3(-290.78,-1688.02,21.58),
-- v3(-317.56,-1687.06,11.33),
-- v3(-306.88,-1697.75,16.89),
-- v3(-294.31,-1707.97,15.2),
-- v3(-282.83,-1717.82,19.78),
-- v3(-268.72,-1727.32,24.53),
-- v3(-253.76,-1736.34,19.68),
-- v3(-239.22,-1744.83,18.61),
-- v3(-226.17,-1763.98,10.36),
-- v3(-291.12,-1784.59,4.95),
-- v3(-321.28,-1757.2,3.62),
-- v3(-331.97,-1744.44,3.43),
-- v3(-351.75,-1720.34,4.03),
-- v3(-370.06,-1748.16,17.76),
-- v3(-337.06,-1776.67,18.51),
-- v3(-324.53,-1786.2,17.88),
-- v3(-311.47,-1794.84,18.81),
-- v3(-295.06,-1800.63,19.98),
-- v3(-339.7,-1793.58,22.24),
-- v3(-361.5,-1788.03,22.7),
-- v3(-373.71,-1773.8,21.0),
-- v3(-368.34,-1729.36,14.61),
-- v3(-396.0,-1808.77,22.09),
-- v3(-409.51,-1815.94,21.64),
-- v3(-427.52,-1825.82,22.22),
-- v3(-444.17,-1835.08,21.71),
-- v3(-458.19,-1842.88,20.27),
-- v3(-475.17,-1849.22,21.25),
-- v3(-509.72,-1859.71,27.05),
-- v3(-526.77,-1864.89,26.73),
-- v3(-569.96,-1877.34,28.15),
-- v3(-586.68,-1877.33,29.29),
-- v3(-604.68,-1875.21,29.94),
-- v3(-623.26,-1872.79,30.15),
-- v3(-639.69,-1870.22,30.8),
-- v3(-654.23,-1866.37,31.11),
-- v3(-668.77,-1854.08,30.94),
-- v3(-678.59,-1841.8,30.43),
-- v3(-689.48,-1828.09,29.71),
-- v3(-707.26,-1803.81,28.8),
-- v3(-718.44,-1787.93,29.57),
-- v3(-706.0,-1776.73,28.5),
-- v3(-697.21,-1790.15,28.89),
-- v3(-676.81,-1813.1,29.33),
-- v3(-667.05,-1825.64,29.55),
-- v3(-654.33,-1838.05,30.01),
-- v3(-622.2,-1853.9,29.49),
-- v3(-603.4,-1856.66,29.39),
-- v3(-540.12,-1855.24,26.08),
-- v3(-487.7,-1838.58,24.71),
-- v3(-450.35,-1819.15,21.73),
-- v3(-472.03,-1805.01,21.33),
-- v3(-487.54,-1804.73,21.79),
-- v3(-515.92,-1826.86,23.03),
-- v3(-553.95,-1848.48,24.83),
-- v3(-577.77,-1840.83,25.52),
-- v3(-591.91,-1835.27,25.71),
-- v3(-607.51,-1829.46,25.68),
-- v3(-622.92,-1823.57,25.59),
-- v3(-641.62,-1815.05,25.99),
-- v3(-657.24,-1806.22,26.41),
-- v3(-670.05,-1795.85,25.3),
-- v3(-653.65,-1780.65,25.13),
-- v3(-626.95,-1793.17,24.3),
-- v3(-530.71,-1819.34,23.21),
-- v3(-521.22,-1785.17,26.11),
-- v3(-536.1,-1778.0,22.0),
-- v3(-551.91,-1769.34,22.26),
-- v3(-566.19,-1759.47,31.63),
-- v3(-579.49,-1750.78,30.19),
-- v3(-594.88,-1745.99,34.6),
-- v3(-611.99,-1751.46,30.35),
-- v3(-643.65,-1763.57,24.75),
-- v3(-632.74,-1777.88,24.48),
-- v3(-613.23,-1775.62,42.83),
-- v3(-608.55,-1791.82,24.1),
-- v3(-591.94,-1794.38,23.45),
-- v3(-576.5,-1800.44,28.11),
-- v3(-559.7,-1808.39,29.71),
-- v3(-536.16,-1803.61,28.43),
-- v3(-548.81,-1790.44,28.2),
-- v3(-564.16,-1783.7,22.82),
-- v3(-738.53,-1708.41,29.79),
-- v3(-734.72,-1691.43,28.69),
-- v3(-730.77,-1672.9,27.66),
-- v3(-728.68,-1656.16,26.89),
-- v3(-721.96,-1642.6,25.96),
-- v3(-710.68,-1630.36,24.17),
-- v3(-682.19,-1647.99,24.98),
-- v3(-693.82,-1634.13,24.45),
-- v3(-681.41,-1665.25,25.62),
-- v3(-694.05,-1678.41,25.87),
-- v3(-713.8,-1682.09,26.34),
-- v3(-716.37,-1665.9,25.13),
-- v3(-707.23,-1653.27,25.1),
-- v3(-662.32,-1684.61,25.79),
-- v3(-641.46,-1682.55,25.58),
-- v3(-624.49,-1678.69,20.62),
-- v3(-606.09,-1673.77,26.92),
-- v3(-574.5,-1660.74,20.01),
-- v3(-562.02,-1651.38,19.68),
-- v3(-529.95,-1623.83,18.29),
-- v3(-503.33,-1599.7,12.42),
-- v3(-491.38,-1585.65,5.73),
-- v3(-472.65,-1540.62,9.56),
-- v3(-474.6,-1482.6,15.08),
-- v3(-484.87,-1446.76,20.41),
-- v3(-546.82,-1375.33,23.8),
-- v3(-571.02,-1366.05,23.14),
-- v3(-582.18,-1381.67,22.3),
-- v3(-591.03,-1400.48,21.28),
-- v3(-607.26,-1485.13,7.1),
-- v3(-618.07,-1539.11,14.71),
-- v3(-633.0,-1561.66,19.93),
-- v3(-641.19,-1576.45,25.39),
-- v3(-660.47,-1594.17,23.87),
-- v3(-636.43,-1476.88,11.52),
-- v3(-629.32,-1453.44,10.88),
-- v3(-624.98,-1437.4,11.49),
-- v3(-617.82,-1409.84,13.08),
-- v3(-613.04,-1394.53,13.43),
-- v3(-605.42,-1377.0,14.25),
-- v3(-597.97,-1363.12,16.37),
-- v3(-586.38,-1341.43,18.48),
-- v3(-578.9,-1326.72,18.95),
-- v3(-571.36,-1311.88,20.76),
-- v3(-563.82,-1296.71,20.3),
-- v3(-552.55,-1273.86,17.65),
-- v3(-544.87,-1258.27,22.29),
-- v3(-537.08,-1242.76,18.86),
-- v3(-527.72,-1225.25,23.3),
-- v3(-517.7,-1213.48,24.4),
-- v3(-501.18,-1209.94,20.71),
-- v3(-470.36,-1199.64,21.59),
-- v3(-454.15,-1199.39,22.66),
-- v3(-453.06,-1184.19,23.08),
-- v3(-457.76,-1168.23,24.44),
-- v3(-457.33,-1152.64,25.37),
-- v3(-455.25,-1135.97,27.83),
-- v3(-454.73,-1120.72,29.61),
-- v3(-505.44,-1088.49,24.11),
-- v3(-515.89,-1105.69,23.34),
-- v3(-512.73,-1121.4,22.54),
-- v3(-514.09,-1140.91,20.5),
-- v3(-520.19,-1155.25,20.24),
-- v3(-527.75,-1173.04,19.83),
-- v3(-538.02,-1197.17,18.61),
-- v3(-544.05,-1211.05,18.1),
-- v3(-560.33,-1235.73,16.15),
-- v3(-570.15,-1247.85,14.49),
-- v3(-584.12,-1265.1,13.9),
-- v3(-593.94,-1278.41,13.5),
-- v3(-600.42,-1294.63,13.0),
-- v3(-607.32,-1309.95,12.36),
-- v3(-614.12,-1324.98,12.13),
-- v3(-619.16,-1341.62,12.2),
-- v3(-625.26,-1363.12,12.36),
-- v3(-669.74,-1428.97,10.48),
-- v3(-681.91,-1418.76,5.5),
-- v3(-695.32,-1407.5,5.5),
-- v3(-705.96,-1301.16,17.0),
-- v3(-695.41,-1294.36,16.93),
-- v3(-670.02,-1268.26,11.17),
-- v3(-651.38,-1281.79,11.29),
-- v3(-645.86,-1296.99,11.16),
-- v3(-643.89,-1313.81,11.37),
-- v3(-665.08,-1382.28,12.14),
-- v3(-679.3,-1390.52,5.5),
-- v3(-679.3,-1390.52,5.5),
-- v3(-693.43,-1393.2,12.58),
-- v3(-735.16,-1451.57,5.5),
-- v3(-762.37,-1480.78,5.5),
-- v3(-754.15,-1494.69,5.5),
-- v3(-753.81,-1512.45,13.6),
-- v3(-747.65,-1520.44,14.04),
-- v3(-734.74,-1515.31,14.32),
-- v3(-906.53,-1658.56,7.0),
-- v3(-919.63,-1671.12,7.03),
-- v3(-932.66,-1684.39,7.02),
-- v3(-963.13,-1714.57,7.04),
-- v3(-976.63,-1726.7,7.04),
-- v3(-990.12,-1738.84,7.01),
-- v3(-730.51,-1470.28,5.5),
-- v3(-715.4,-1463.1,5.5),
-- v3(-706.61,-1447.06,5.5),
-- v3(-689.32,-1448.03,5.5),
-- v3(-689.32,-1448.03,5.5),
-- v3(-617.36,-1609.43,27.4),
-- v3(-603.26,-1615.89,41.55),
-- v3(-589.89,-1620.96,38.35),
-- v3(-575.69,-1622.28,38.35),
-- v3(-601.36,-1602.8,34.94),
-- v3(-614.65,-1603.44,27.25),
-- v3(-611.08,-1590.43,27.25),
-- v3(-596.6,-1585.64,27.25),
-- v3(-614.36,-1558.62,26.6),
-- v3(-591.06,-1601.34,34.53),
-- v3(-563.22,-1580.35,21.95),
-- v3(-549.38,-1584.36,19.78),
-- v3(-532.54,-1591.33,18.13),
-- v3(-516.29,-1596.13,15.48),
-- v3(-519.0,-1566.54,4.29),
-- v3(-532.27,-1558.13,3.89),
-- v3(-545.64,-1551.08,4.06),
-- v3(-562.98,-1542.28,1.7),
-- v3(-579.19,-1536.71,5.29),
-- v3(-560.46,-1493.26,8.95),
-- v3(-571.35,-1450.86,11.39),
-- v3(-571.09,-1431.69,13.72),
-- v3(-553.53,-1427.59,17.82),
-- v3(-537.64,-1429.57,19.32),
-- v3(-522.39,-1434.06,20.43),
-- v3(-538.57,-1414.17,20.1),
-- v3(-546.54,-1399.23,20.19),
-- v3(-559.33,-1385.95,20.99),
-- v3(-587.7,-1313.79,14.23),
-- v3(-581.89,-1296.8,14.02),
-- v3(-775.26,-1186.65,18.33),
-- v3(-817.65,-1175.7,8.95),
-- v3(-868.9,-1207.74,6.89),
-- v3(-933.93,-1236.57,6.38),
-- v3(-954.44,-1248.07,8.48),
-- v3(-999.63,-1278.45,6.48),
-- v3(-1010.99,-1295.01,6.68),
-- v3(-1020.04,-1310.38,6.49),
-- v3(-1029.53,-1325.83,5.94),
-- v3(-1034.99,-1339.83,5.97),
-- v3(-1040.72,-1354.62,10.59),
-- v3(-1046.74,-1370.61,17.59),
-- v3(-1052.25,-1385.2,11.62),
-- v3(-1057.48,-1399.77,5.92),
-- v3(-1062.56,-1418.93,5.92),
-- v3(-1064.3,-1434.42,5.92),
-- v3(-1049.15,-1427.74,5.92),
-- v3(-1039.73,-1410.99,10.32),
-- v3(-1032.95,-1393.94,14.49),
-- v3(-1023.09,-1360.11,14.62),
-- v3(-1027.7,-1374.77,17.0),
-- v3(-1017.44,-1341.37,5.8),
-- v3(-1005.49,-1356.56,5.98),
-- v3(-1011.67,-1374.88,5.71),
-- v3(-1015.73,-1391.16,5.72),
-- v3(-1019.79,-1410.32,5.81),
-- v3(-1026.02,-1425.47,5.8),
-- v3(-1042.48,-1476.78,15.3),
-- v3(-997.61,-1497.92,3.14),
-- v3(-943.44,-1521.87,5.53),
-- v3(-914.01,-1502.13,5.52),
-- v3(-905.04,-1532.05,5.52),
-- v3(-926.92,-1560.66,5.77),
-- v3(-934.21,-1574.04,5.67),
-- v3(-966.92,-1606.01,5.67),
-- v3(-979.13,-1617.71,5.77),
-- v3(-1095.32,-1735.04,5.13),
-- v3(-1128.82,-1766.12,4.83),
-- v3(-1210.03,-1843.2,3.72),
-- v3(-1226.4,-1836.62,3.05),
-- v3(-1238.67,-1823.66,2.65),
-- v3(-1250.28,-1810.9,2.65),
-- v3(-1251.74,-1794.03,2.78),
-- v3(-1243.92,-1780.9,2.96),
-- v3(-1208.98,-1753.67,4.48),
-- v3(-1175.73,-1734.36,4.73),
-- v3(-1154.84,-1720.91,4.67),
-- v3(-1139.71,-1710.6,4.77),
-- v3(-1138.53,-1689.38,4.87),
-- v3(-1160.57,-1682.32,4.89),
-- v3(-1218.72,-1719.51,4.96),
-- v3(-1232.27,-1730.87,4.92),
-- v3(-1252.87,-1764.47,3.03),
-- v3(-1282.16,-1754.07,2.65),
-- v3(-1303.06,-1722.95,2.68),
-- v3(-1320.2,-1699.67,2.68),
-- v3(-1339.98,-1673.3,2.65),
-- v3(-1357.81,-1648.09,2.61),
-- v3(-1371.8,-1626.42,7.06),
-- v3(-1380.95,-1610.93,2.65),
-- v3(-1401.91,-1571.31,2.62),
-- v3(-1419.4,-1534.13,2.59),
-- v3(-1435.44,-1499.58,2.66),
-- v3(-1482.48,-1489.9,2.56),
-- v3(-1503.01,-1440.96,0.71),
-- v3(-1488.62,-1416.64,2.39),
-- v3(-1498.89,-1373.62,2.64),
-- v3(-1521.97,-1285.83,2.45),
-- v3(-1526.62,-1271.29,2.54),
-- v3(-1532.92,-1251.63,2.68),
-- v3(-1538.11,-1235.39,2.68),
-- v3(-1544.32,-1221.42,2.45),
-- v3(-1557.67,-1200.95,1.84),
-- v3(-1565.78,-1185.46,2.28),
-- v3(-1581.4,-1145.98,2.74),
-- v3(-1565.01,-1115.17,4.22),
-- v3(-1544.14,-1078.27,5.69),
-- v3(-1525.51,-1045.6,6.04),
-- v3(-1516.47,-1029.71,6.34),
-- v3(-1507.69,-1013.35,6.68),
-- v3(-1493.96,-1001.94,6.91),
-- v3(-1502.27,-985.02,7.13),
-- v3(-1478.31,-998.13,6.85),
-- v3(-1480.59,-1016.43,11.15),
-- v3(-1496.01,-1027.06,14.41),
-- v3(-1487.93,-1046.98,6.22),
-- v3(-1419.47,-1086.27,3.76),
-- v3(-1390.34,-1125.04,4.85),
-- v3(-1388.48,-1250.17,4.86),
-- v3(-1367.44,-1293.46,4.94),
-- v3(-1358.01,-1308.01,4.95),
-- v3(-1344.83,-1386.4,4.97),
-- v3(-1362.21,-1385.59,3.66),
-- v3(-1377.48,-1396.19,4.69),
-- v3(-1386.68,-1424.57,4.27),
-- v3(-1431.73,-1482.39,3.07),
-- v3(-1352.37,-1409.54,5.06),
-- v3(-1346.74,-1509.84,4.81),
-- v3(-1336.84,-1558.92,4.85),
-- v3(-1241.64,-1527.36,4.79),
-- v3(-1230.49,-1542.97,4.85),
-- v3(-1231.72,-1559.63,4.71),
-- v3(-1281.58,-1596.4,4.6),
-- v3(-1301.03,-1611.21,4.64),
-- v3(-1315.95,-1622.57,4.81),
-- v3(-1291.86,-1676.77,3.84),
-- v3(-1271.18,-1702.32,3.9),
-- v3(-1285.27,-1713.28,3.13),
-- v3(-1225.96,-1771.76,3.39),
-- v3(-1206.83,-1801.46,4.4),
-- v3(-1194.44,-1788.64,19.92),
-- v3(-1184.9,-1773.45,8.99),
-- v3(-1171.02,-1719.51,4.74),
-- v3(-1106.57,-1686.62,4.79),
-- v3(-1197.72,-1516.37,9.01),
-- v3(-1224.54,-1478.61,8.33),
-- v3(-1243.09,-1451.69,8.91),
-- v3(-1302.73,-1351.55,13.51),
-- v3(-1309.52,-1321.9,10.61),
-- v3(-1319.19,-1301.37,5.51),
-- v3(-1327.19,-1283.64,5.53),
-- v3(-1325.4,-1210.18,5.22),
-- v3(-1308.63,-1204.16,5.21),
-- v3(-1295.21,-1193.33,5.44),
-- v3(-1294.68,-1148.56,6.06),
-- v3(-1295.84,-1131.35,6.5),
-- v3(-1352.76,-1031.55,8.4),
-- v3(-1386.42,-981.79,35.76),
-- v3(-1405.89,-953.36,10.16),
-- v3(-1427.3,-957.94,7.71),
-- v3(-1442.09,-969.2,7.88),
-- v3(-1458.38,-950.59,9.96),
-- v3(-1469.72,-939.73,14.39),
-- v3(-1483.88,-927.92,14.39),
-- v3(-1495.4,-917.87,16.38),
-- v3(-1509.3,-905.75,19.73),
-- v3(-1523.09,-893.73,18.06),
-- v3(-1558.46,-863.09,10.69),
-- v3(-1592.46,-889.35,10.17),
-- v3(-1572.18,-902.46,10.38),
-- v3(-1591.64,-920.96,9.56),
-- v3(-1615.86,-944.04,8.99),
-- v3(-1651.68,-977.54,7.92),
-- v3(-1665.72,-991.92,17.5),
-- v3(-1699.45,-1028.96,4.42),
-- v3(-1711.84,-1017.64,5.34),
-- v3(-1699.62,-1004.42,7.23),
-- v3(-1685.18,-989.18,7.46),
-- v3(-1671.42,-973.92,7.91),
-- v3(-1657.69,-958.22,8.16),
-- v3(-1641.4,-939.59,8.71),
-- v3(-1619.59,-913.44,9.34),
-- v3(-1607.1,-897.89,9.72),
-- v3(-1577.79,-858.56,10.64),
-- v3(-1590.91,-846.6,16.12),
-- v3(-1606.09,-849.39,10.59),
-- v3(-1618.5,-862.43,10.34),
-- v3(-1637.11,-881.99,9.56),
-- v3(-1670.18,-920.59,8.58),
-- v3(-1681.95,-935.57,8.19),
-- v3(-1704.08,-963.77,7.52),
-- v3(-1744.82,-985.12,5.54),
-- v3(-1694.58,-926.84,8.18),
-- v3(-1638.55,-909.44,9.17),
-- v3(-1614.24,-832.4,17.92),
-- v3(-1628.13,-819.36,17.89),
-- v3(-1643.06,-805.47,10.71),
-- v3(-1657.67,-811.76,10.67),
-- v3(-1714.18,-873.9,8.71),
-- v3(-1695.75,-858.47,9.23),
-- v3(-1653.36,-789.76,10.73),
-- v3(-1665.97,-777.62,10.68),
-- v3(-1678.78,-766.6,10.68),
-- v3(-1693.41,-754.71,10.68),
-- v3(-1706.82,-743.46,10.7),
-- v3(-1721.37,-731.23,10.75),
-- v3(-1735.95,-718.8,10.83),
-- v3(-1747.52,-708.59,21.89),
-- v3(-1755.32,-701.63,21.38),
-- v3(-1765.64,-692.47,23.4),
-- v3(-1774.53,-684.63,20.67),
-- v3(-1784.46,-675.94,25.21),
-- v3(-1794.95,-666.74,26.74),
-- v3(-1805.33,-657.65,23.28),
-- v3(-1816.28,-648.07,11.41),
-- v3(-1825.19,-640.26,11.31),
-- v3(-1835.01,-631.66,23.38),
-- v3(-1843.92,-623.86,26.63),
-- v3(-1851.71,-617.04,11.66),
-- v3(-1862.32,-607.75,14.44),
-- v3(-1870.1,-600.93,12.37),
-- v3(-1880.48,-591.84,26.39),
-- v3(-1890.75,-582.84,12.33),
-- v3(-1902.26,-572.76,23.39),
-- v3(-1912.98,-563.38,23.81),
-- v3(-1921.33,-556.06,12.56),
-- v3(-1929.57,-548.85,22.86),
-- v3(-1937.58,-541.83,26.34),
-- v3(-1947.51,-533.14,13.81),
-- v3(-1957.89,-524.04,26.29),
-- v3(-1967.37,-515.74,23.47),
-- v3(-1976.06,-508.13,23.76),
-- v3(-1983.62,-501.51,12.54),
-- v3(-1991.85,-494.3,17.92),
-- v3(-2001.1,-486.2,11.98),
-- v3(-2010.24,-478.19,11.98),
-- v3(-2020.96,-468.81,11.97),
-- v3(-2028.64,-462.09,11.98),
-- v3(-2036.87,-454.87,11.99),
-- v3(-2046.91,-446.08,11.99),
-- v3(-2057.75,-436.59,12.0),
-- v3(-2067.3,-428.39,10.81),
-- v3(-2083.31,-432.59,9.67),
-- v3(-2060.03,-467.21,12.13),
-- v3(-1997.37,-522.52,12.15),
-- v3(-1983.32,-534.95,12.16),
-- v3(-1959.62,-555.92,12.18),
-- v3(-1948.28,-565.96,12.18),
-- v3(-1934.35,-578.29,12.18),
-- v3(-1921.66,-589.52,12.18),
-- v3(-1909.62,-600.14,12.18),
-- v3(-1898.09,-610.19,12.18),
-- v3(-1884.98,-621.63,12.0),
-- v3(-1871.98,-632.94,11.64),
-- v3(-1857.59,-645.41,11.32),
-- v3(-1844.11,-657.09,10.97),
-- v3(-1830.18,-669.16,10.91),
-- v3(-1811.94,-684.96,10.91),
-- v3(-1799.82,-695.47,10.91),
-- v3(-1768.15,-722.78,10.77),
-- v3(-1755.84,-733.31,10.75),
-- v3(-1726.79,-758.16,10.74),
-- v3(-1692.62,-787.4,10.67),
-- v3(-1676.11,-852.65,9.5),
-- v3(-1693.78,-894.69,8.7),
-- v3(-1650.05,-862.02,9.72),
-- v3(-1668.34,-869.35,9.37),
-- v3(-1697.11,-807.16,10.13),
-- v3(-1714.93,-827.05,9.64),
-- v3(-1726.94,-815.95,9.66),
-- v3(-1720.52,-798.19,10.08),
-- v3(-1781.85,-741.46,10.08),
-- v3(-1802.9,-722.03,10.1),
-- v3(-1816.59,-709.47,10.16),
-- v3(-1842.17,-686.15,10.46),
-- v3(-1894.79,-643.85,11.0),
-- v3(-1959.16,-590.22,11.65),
-- v3(-2001.96,-551.92,12.07),
-- v3(-2015.24,-539.99,11.58),
-- v3(-2029.57,-527.02,10.85),
-- v3(-2043.78,-513.94,10.34),
-- v3(-2075.35,-484.86,9.24),
-- v3(-2088.76,-472.5,8.73),
-- v3(-2114.28,-449.0,8.21),
-- v3(-2126.16,-438.06,8.56),
-- v3(-2143.97,-421.65,12.52),
-- v3(-2156.84,-409.8,13.88),
-- v3(-2191.86,-405.71,16.85),
-- v3(-2200.42,-394.11,17.47),
-- v3(-2209.06,-383.45,18.0),
-- v3(-2216.94,-374.9,18.59),
-- v3(-2225.34,-367.02,17.47),
-- v3(-2243.3,-365.79,13.84),
-- v3(-2260.96,-377.69,9.44),
-- v3(-2253.34,-392.62,6.75),
-- v3(-2239.7,-402.6,6.35),
-- v3(-2213.48,-422.02,6.95),
-- v3(-2197.9,-433.98,8.07),
-- v3(-2183.78,-445.82,5.54),
-- v3(-2171.34,-458.52,2.84),
-- v3(-2159.67,-472.41,3.15),
-- v3(-2149.83,-484.11,3.22),
-- v3(-2139.12,-496.85,2.73),
-- v3(-2127.42,-510.91,2.65),
-- v3(-2116.4,-524.76,2.53),
-- v3(-2105.83,-538.76,5.24),
-- v3(-2095.24,-552.76,3.69),
-- v3(-2052.31,-599.73,3.6),
-- v3(-2015.25,-630.23,4.05),
-- v3(-2000.93,-642.74,4.1),
-- v3(-1963.97,-678.85,4.47),
-- v3(-1941.9,-702.39,4.8),
-- v3(-1930.02,-716.04,4.8),
-- v3(-1917.65,-730.26,4.88),
-- v3(-1905.48,-744.26,4.94),
-- v3(-1882.41,-770.78,5.4),
-- v3(-1870.73,-784.21,5.59),
-- v3(-1858.75,-797.98,5.59),
-- v3(-1846.84,-811.41,5.62),
-- v3(-1834.89,-823.58,5.86),
-- v3(-1819.76,-834.83,6.39),
-- v3(-1789.34,-845.3,8.34),
-- v3(-1803.39,-824.38,7.99),
-- v3(-1816.67,-811.37,7.51),
-- v3(-1838.33,-753.81,9.0),
-- v3(-1849.06,-738.99,9.25),
-- v3(-1866.69,-715.84,9.58),
-- v3(-1879.14,-701.03,9.57),
-- v3(-1891.2,-687.67,10.11),
-- v3(-1903.84,-674.23,10.1),
-- v3(-1939.67,-640.11,10.36),
-- v3(-1964.26,-616.8,9.37),
-- v3(-1996.23,-584.96,9.23),
-- v3(-2009.37,-571.39,10.03),
-- v3(-2023.36,-557.4,9.81),
-- v3(-2050.71,-533.62,8.47),
-- v3(-2090.68,-500.64,6.11),
-- v3(-2104.08,-487.96,5.29),
-- v3(-2118.22,-474.56,5.36),
-- v3(-2131.94,-461.56,5.78),
-- v3(-2146.52,-447.74,5.73),
-- v3(-2157.62,-437.22,8.58),
-- v3(-2166.76,-322.39,13.62),
-- v3(-2151.87,-311.6,13.5),
-- v3(-2137.99,-300.91,13.57),
-- v3(-2109.08,-275.33,16.87),
-- v3(-2094.56,-262.71,20.32),
-- v3(-2080.87,-250.95,23.01),
-- v3(-2068.8,-240.74,22.16),
-- v3(-2056.31,-231.79,26.04),
-- v3(-2042.93,-223.57,28.24),
-- v3(-2026.84,-214.05,29.48),
-- v3(-2013.12,-206.73,30.08),
-- v3(-1953.56,-207.26,34.12),
-- v3(-1937.46,-209.05,34.99),
-- v3(-1918.67,-211.15,36.27),
-- v3(-1888.51,-219.3,37.69),
-- v3(-1860.08,-239.42,39.63),
-- v3(-1820.22,-291.89,42.88),
-- v3(-1756.86,-352.99,46.49),
-- v3(-1715.96,-393.04,46.9),
-- v3(-1735.17,-422.55,44.45),
-- v3(-1761.37,-460.39,41.73),
-- v3(-1830.31,-426.5,44.49),
-- v3(-1887.15,-381.95,49.25),
-- v3(-1901.04,-369.67,49.87),
-- v3(-1925.56,-326.33,46.66),
-- v3(-1926.94,-307.2,45.31),
-- v3(-1922.17,-290.57,43.98),
-- v3(-1930.7,-240.87,38.09),
-- v3(-1945.24,-229.33,36.91),
-- v3(-1966.98,-215.53,35.22),
-- v3(-1984.04,-223.32,34.7),
-- v3(-1996.9,-236.16,31.51),
-- v3(-2007.08,-251.94,26.79),
-- v3(-2015.24,-267.09,32.89),
-- v3(-2024.68,-284.59,32.59),
-- v3(-2033.99,-298.69,25.6),
-- v3(-2044.66,-314.75,24.96),
-- v3(-2057.49,-334.04,14.08),
-- v3(-2143.42,-331.18,13.59),
-- v3(-2132.14,-319.55,13.76),
-- v3(-2084.43,-278.5,16.4),
-- v3(-2071.98,-269.12,22.67),
-- v3(-2055.27,-256.66,23.36),
-- v3(-2039.39,-245.37,25.34),
-- v3(-2012.18,-228.92,29.38),
-- v3(-1983.35,-193.63,30.48),
-- v3(-1999.87,-186.11,29.26),
-- v3(-2030.41,-175.45,27.44),
-- v3(-2044.33,-182.07,25.88),
-- v3(-2057.6,-189.5,24.57),
-- v3(-2069.7,-198.51,23.29),
-- v3(-2091.23,-219.71,35.34),
-- v3(-2113.22,-220.67,19.63),
-- v3(-2123.94,-232.36,18.35),
-- v3(-2130.93,-246.08,16.82),
-- v3(-2138.76,-261.56,15.4),
-- v3(-2146.59,-277.05,14.03),
-- v3(-2175.1,-347.9,13.67),
-- v3(-2066.53,-402.69,11.89),
-- v3(-2008.91,-450.2,11.96),
-- v3(-1892.85,-548.6,12.23),
-- v3(-1859.07,-577.41,12.06),
-- v3(-1837.54,-596.09,11.9),
-- v3(-1776.22,-650.83,11.07),
-- v3(-1719.51,-701.48,11.1),
-- v3(-1664.11,-747.93,10.72),
-- v3(-1618.81,-787.92,10.79),
-- v3(-1574.42,-827.53,10.75),
-- v3(-1546.59,-848.82,10.64),
-- v3(-1533.41,-836.52,12.14),
-- v3(-1545.86,-827.69,12.0),
-- v3(-1558.39,-818.96,12.02),
-- v3(-1592.41,-795.24,12.18),
-- v3(-1625.96,-747.2,11.93),
-- v3(-1636.4,-732.37,11.84),
-- v3(-1647.32,-716.77,11.76),
-- v3(-1664.13,-705.83,11.78),
-- v3(-1688.08,-689.18,11.81),
-- v3(-1702.37,-677.2,11.76),
-- v3(-1716.03,-663.92,11.26),
-- v3(-1830.53,-562.24,12.0),
-- v3(-1844.34,-551.1,12.08),
-- v3(-1869.98,-530.39,12.22),
-- v3(-1893.24,-511.5,12.31),
-- v3(-1969.17,-449.99,12.33),
-- v3(-1983.65,-439.12,12.26),
-- v3(-1999.89,-426.79,12.07),
-- v3(-2024.46,-408.06,11.66),
-- v3(-2062.56,-380.96,12.05),
	-- }
	-- local  function get_my_grid()
		-- for k,v in pairs(tp_pos.land_water) do
			-- if k.x == my_grid.x and k.y == my_grid.y then
				-- grid_tbl={}
				-- menu.notify("Current grid: "..tostring(k))
				-- for kk,vv in pairs(v) do
					-- grid_tbl[#grid_tbl+1]=vv
				-- end
				-- funcs.doo.req_model(0x15F8700D)
				-- popo_tbl={}
				-- for i =1,#grid_tbl do
					-- popo_tbl[#popo_tbl+1] = ped.create_ped(2, 0x15F8700D, grid_tbl[i], 0, false, false)
					-- entity.freeze_entity(popo_tbl[#popo_tbl], true)
				-- end
				-- for i =1,#new_tbl do
					-- if new_tbl[i].x<my_grid.x+100 and new_tbl[i].x>my_grid.x-100 and new_tbl[i].y<my_grid.y+100 and new_tbl[i].y>my_grid.y-100 then
						-- popo_tbl[#popo_tbl+1] = ped.create_ped(2, 0x15F8700D, new_tbl[i], 0, false, false)
						-- entity.freeze_entity(popo_tbl[#popo_tbl], true)
					-- end
				-- end
				-- break
			-- end
		-- end
	-- end 
	-- get_my_grid()
	-- while f.on do
		-- funcs.doo.yield_while_true(f.on and not funcs.is.vk_key_down("X"), 25)
		-- my_pos = funcs.ME._crds()
		-- my_pos.z=my_pos.z-ntv.get.ent_height(funcs.ME._ped())+1.5
		-- if my_grid ~= funcs.get.pos_100_v2(my_pos) then
			-- my_grid = funcs.get.pos_100_v2(my_pos)
			-- for i=1,#popo_tbl do
				-- funcs.doo.remove_ent(popo_tbl[i],1000)
			-- end
			-- get_my_grid()
		-- end
		-- if funcs.is.vk_key_down("X") or not_too_close(my_pos,new_tbl,grid_tbl,f.value) then
			-- file=io.open(path,"a")
			-- local x = funcs.get._2_dec(my_pos.x)
			-- local y = funcs.get._2_dec(my_pos.y)
			-- local z = funcs.get._2_dec(my_pos.z)
			-- msg='\nv3('..x..','..y..','..z..'),'
			-- menu.notify('v3('..x..','..y..','..z..')',__GV__,7,6)
			-- new_tbl[#new_tbl+1]=my_pos
			-- popo_tbl[#popo_tbl+1] = ped.create_ped(2, 0x15F8700D, my_pos, 0, false, false)
			-- entity.freeze_entity(popo_tbl[#popo_tbl], true)
			-- file:write(msg)
			-- file:close()
			-- funcs.doo.yield_while_true(f.on and funcs.is.vk_key_down("X"), 500)
		-- end
	-- end
	-- for i=1,#popo_tbl do
		-- funcs.doo.remove_ent(popo_tbl[i],1000)
	-- end
-- end)_G_save_pos.max,_G_save_pos.min,_G_save_pos.mod=500,5,5

-------------------------------------------------------------------------------------------------------------------------------------------------
end)

