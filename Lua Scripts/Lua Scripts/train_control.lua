-- MANUAL/release train_control
-- AUTOGENERATED CODE ON Thursday 8th, September 2022 AT 08:08:03 AM
local SCRIPT_SOURCE = "MANUAL"
local SCRIPT_BRANCH = "release"
local BRANCH_LAST_COMMIT = "f1b0b67ab98e53a48ee4d308165f18adbd09b517"
local SCRIPT_BRANCH_IDS = {"master","release"}
local SCRIPT_BRANCH_NAMES = {{"dev"},{"release"}}
-- END AUTOGENERATED CODE --

-- Train Control
-- Created By Jackz
local SCRIPT = "train_control"
VERSION = "1.1.6"


-- TEMPLATE: release/manual.lua --
-- Check for updates & auto-update:
function check_for_update(branch)
    async_http.init("jackz.me", "/stand/updatecheck.php?ucv=2&script=" .. SCRIPT .. "&v=" .. VERSION  .. "&branch=" .. (branch or "master") .. "&commit=" .. (BRANCH_LAST_COMMIT or ""), function(body, res_headaers, status_code)
        if status_code == 200 then
            local chunks = {}
            for substring in string.gmatch(body, "%S+") do
                table.insert(chunks, substring)
            end
            if chunks[1] == "OUTDATED" then
                download_script_update(branch, function()
                    util.toast(SCRIPT .. " was automatically updated to V" .. chunks[2] .. "\nRestart script to load new update.", TOAST_ALL)
                end, function()
                    util.toast(SCRIPT .. ": Failed to automatically update to V" .. chunks[2] .. ".\nPlease download latest update manually.\nhttps://jackz.me/stand/get-latest-zip", 2)
                end)
            end
        else
            util.toast(SCRIPT .. ": Could not auto update due to server error (HTTP " .. status_code .. ")\nPlease download latest update manually.\nhttps://jackz.me/stand/get-latest-zip", 2)
        end
    end)
    async_http.dispatch()
end
function download_script_update(branch, on_success, on_err)
    async_http.init("jackz.me", "/stand/get-lua.php?script=" .. SCRIPT .. "&source=manual&branch=" .. (branch or "master"), function(body, res_headers, status_code)
        if status_code == 200 then
            local file = io.open(filesystem.scripts_dir()  .. SCRIPT_RELPATH, "w")
            file:write(body:gsub("\r", "") .. "\n") -- have to strip out \r for some reason, or it makes two lines. ty windows
            file:close()
            if on_success then on_success() end
        else
            log("script update failed due to server error: " .. status_code .. "\n" .. body)
            if on_err then on_err(status_code, body) end
        end
    end, on_err)
    async_http.dispatch()
end
check_for_update(SCRIPT_BRANCH)

function download_lib_update(lib, on_success, on_error)
    local lockPath = filesystem.scripts_dir() .. "/lib/" .. lib .. ".lock"
    if filesystem.exists(lockPath) then
        if on_error then on_error() end
        util.log(SCRIPT_NAME .. ": Skipping lib update \" .. lib .. \", found update lockfile")
    end
    local lock = io.open(lockPath, "w")
    if lock == nil then
        util.toast(SCRIPT_NAME .. ": Could not create lockfile, skipping update", TOAST_ALL)
        if on_error then on_error() end
        return
    end
    lock:close()
    async_http.init("jackz.me", "/stand/get-lua.php?script=lib/" .. lib .. "&source=" .. SCRIPT_SOURCE .. "&branch=" .. (SCRIPT_BRANCH or "master"), function(result, res_headers, status_code)
        os.remove(lockPath)
        if status_code ~= 200 or result:startswith("<") or result == "" then
            util.toast("Lib returned invalid response for \"" .. lib .. "\"\nSee logs for details")
            util.log(string.format("%s: Lib \"%s\" returned: %s", SCRIPT_NAME, lib, result))
            if on_error then on_error() end
            return
        end
        local file = io.open(filesystem.scripts_dir() .. "/lib/" .. lib, "w")
        if file == nil then
            util.toast("Could not write lib file for: " .. lib .. "\nSee logs for details")
            util.log(string.format("%s: Resource \"%s\" file could not be created.", SCRIPT_NAME, lib))
            if on_error then on_error() end
            return
        end
        file:write(result:gsub("\r", "") .. "\n")
        file:close()
        util.toast(SCRIPT .. ": Automatically updated lib '" .. lib .. "'")
        if on_success then on_success() end
    end, function(e)
        util.toast(SCRIPT .. " cannot load: Library files are missing. (" .. lib .. ")", 10)
        os.remove(lockPath)
        if on_error then on_error() end
        util.stop_script()
    end)
    async_http.dispatch()
    return lockPath
end
function download_resources_update(filepath, destOverwritePath)
    local lockPath = filesystem.scripts_dir() .. "/lib/" .. filepath .. ".lock"
    if filesystem.exists(lockPath) then
        util.log(SCRIPT_NAME .. ": Skipping resource update \" .. lib .. \", found update lockfile")
    end
    local lock = io.open(lockPath, "w")
    if lock == nil then
        util.toast(SCRIPT_NAME .. ": Could not create lockfile, skipping update", TOAST_ALL)
        return
    end
    lock:close()
    async_http.init("jackz.me", "/stand/get-lua.php?script=resources/" .. filepath .. "&source=" .. SCRIPT_SOURCE .. "&branch=" .. (SCRIPT_BRANCH or "master"), function(result, res_headers, status_code)
        os.remove(lockPath)
        if status_code ~= 200 or result:startswith("<") then
            util.toast("Resource returned invalid response for \"" .. filepath .. "\"\nSee logs for details")
            util.log(string.format("%s: Resource \"%s\" returned: %s", SCRIPT_NAME, filepath, result))
            return
        end
        local file = io.open(filesystem.resources_dir() .. (destOverwritePath or filepath), "w")
        if file == nil then
            util.toast("Could not write resource file for: " .. filepath .. "\nSee logs for details")
            util.log(string.format("%s: Resource \"%s\" file could not be created.", SCRIPT_NAME, filepath))
            return
        end
        file:write(result:gsub("\r", "") .. "\n")
        file:close()
        util.toast(SCRIPT .. ": Automatically updated resource '" .. filepath .. "'")
    end, function(e)
        os.remove(lockPath)
        util.toast(SCRIPT .. " cannot load: Library files are missing. (" .. filepath .. ")", 10)
        util.stop_script()
    end)
    async_http.dispatch()
end

-- END TEMPLATE --
-- TEMPLATE: release/common.lua --
----------------------------------------------------------------
-- Version Check
function get_version_info(version)
    local major, minor, patch = version:match("(%d+)%.(%d+)%.(%d+)")
    return {
        major = tonumber(major) or 0,
        minor = tonumber(minor) or 0,
        patch = tonumber(patch) or 0
    }
end
function compare_version(a, b)
    local av = get_version_info(a)
    local bv = get_version_info(b)
    if av.major > bv.major then return 1
    elseif av.major < bv.major then return -1
    elseif av.minor > bv.minor then return 1
    elseif av.minor < bv.minor then return -1
    elseif av.patch > bv.patch then return 1
    elseif av.patch < bv.patch then return -1
    else return 0 end
end
local VERSION_FILE_PATH = filesystem.store_dir() .. "jackz_versions.txt"
if not filesystem.exists(VERSION_FILE_PATH) then
    local versionFile = io.open(VERSION_FILE_PATH, "w")
    if versionFile then
        versionFile:close()
    end
end
local versionFile = io.open(VERSION_FILE_PATH, "r+")
if versionFile then
    local versions = {}
    for line in versionFile:lines("l") do
        local script, version = line:match("(%g+): (%g+)")
        if script then
            versions[script] = version
        end
    end
    if versions[SCRIPT_NAME] == nil or compare_version(VERSION, versions[SCRIPT_NAME]) == 1 then
        if versions[SCRIPT_NAME] ~= nil then
            async_http.init("jackz.me", "/stand/changelog.php?raw=1&script=" .. SCRIPT_NAME .. "&since=" .. versions[SCRIPT_NAME] .. "&branch=" .. (SCRIPT_BRANCH or "master"), function(result)
                util.toast("Changelog for " .. SCRIPT_NAME .. " version " .. VERSION .. ":\n" .. result)
            end, function() util.log(SCRIPT_NAME ..": Could not get changelog") end)
            async_http.dispatch()
        end
        versions[SCRIPT_NAME] = VERSION
        versionFile:seek("set", 0)
        versionFile:write("# DO NOT EDIT ! File is used for changelogs\n")
        for script, version in pairs(versions) do
            versionFile:write(script .. ": " .. version .. "\n")
        end
    end
    versionFile:close()
else
    util.log(SCRIPT_NAME .. ": Failed to access to version file")
end
-- END Version Check
------------------------------------------------------------------
function show_busyspinner(text)
    HUD.BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING")
    HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text)
    HUD.END_TEXT_COMMAND_BUSYSPINNER_ON(2)
end

SCRIPT_META_LIST = menu.list(menu.my_root(), "Script Meta")
menu.divider(SCRIPT_META_LIST, SCRIPT_NAME .. " V" .. VERSION)
menu.hyperlink(SCRIPT_META_LIST, "View full changelog", "https://jackz.me/stand/changelog?html=1&script=" .. SCRIPT_NAME)
menu.hyperlink(SCRIPT_META_LIST, "Jackz's Guilded", "https://www.guilded.gg/i/k8bMDR7E?cid=918b2f61-989c-41c4-ba35-8fd0e289c35d&intent=chat", "Get help, submit suggestions, report bugs, or be with other users of my scripts")
menu.hyperlink(SCRIPT_META_LIST, "Github Source", "https://github.com/Jackzmc/lua-scripts", "View all my lua scripts on github")
if SCRIPT_SOURCE == "MANUAL" then
    menu.list_select(SCRIPT_META_LIST, "Release Channel", {SCRIPT_NAME.."channel"}, "Sets the release channel for updates for this script.\nChanging the channel from release may result in bugs.", SCRIPT_BRANCH_NAMES, 1, function(index, name)
        show_busyspinner("Downloading update...")
        download_script_update(SCRIPT_BRANCH_IDS[index], function()
            HUD.BUSYSPINNER_OFF()
            util.log(SCRIPT_NAME .. ": Released channel changed to " .. SCRIPT_BRANCH_IDS[index])
            util.toast("Release channel changed to " .. name .. " (" .. SCRIPT_BRANCH_IDS[index] .. ")\nReload to apply changes")
        end, function()
            util.toast("Failed to download latest version for release channel.")
        end)
    end)
else
    menu.readonly(SCRIPT_META_LIST, "Release Channel", "Use the manual version from https://jackz.me/stand/get-latest-zip to change the release channel.")
end
if _lang ~= nil then
    menu.hyperlink(SCRIPT_META_LIST, "Help Translate", "https://jackz.me/stand/translate/?script=" .. SCRIPT, "If you wish to help translate, this script has default translations fed via google translate, but you can edit them here:\nOnce you make changes, top right includes a save button to get a -CHANGES.json file, send that my way.")
    _lang.add_language_selector_to_menu(SCRIPT_META_LIST)
end
menu.readonly(SCRIPT_META_LIST, "Build Commit", BRANCH_LAST_COMMIT and BRANCH_LAST_COMMIT:sub(1,10) or "Dev Build")
menu.action(SCRIPT_META_LIST, "Upload Logs", {}, "Uploads the ~20 lines of your stand log (%appdata%\\Stand\\Log.txt) to hastebin.com.\nHastebin posts expire in upto 7 days.\n\nUploaded log can be accessed from \"Open Uploaded Log\" button below once pressed", function()
    local logs = io.open(filesystem.stand_dir() .. "Log.txt", "r")
    if logs then
        show_busyspinner("Uploading logs....")
        async_http.init("hastebin.com", "/documents", function(body)
            HUD.BUSYSPINNER_OFF()
            local url = "https://hastebin.com/" .. body:sub(9, -3)
            util.toast("Uploaded: " .. url)
            menu.hyperlink(SCRIPT_META_LIST, "Open Uploaded Log", url)
        end, function()
            util.toast("Failed to submit logs, network error")
            HUD.BUSYSPINNER_OFF() 
        end)
        logs:seek("end", -2048)
        local content = logs:read("*a")
        async_http.set_post("text/plain",
            string.format("Script: %s\nSource: %s\nBranch: %s\nVersion: %s\nCommit: %s\n%s", SCRIPT_NAME, SCRIPT_SOURCE or "UNK", SCRIPT_BRANCH or "UNK", VERSION or "UNK", BRANCH_LAST_COMMIT or "DEV BUILD", content)
        )
        async_http.dispatch()
        logs:close()
    else
        util.toast("Could not read your stand log file")
    end
end)

SCRIPT_DEBUG = SCRIPT_SOURCE == nil

function try_require(name, isOptional)
    local status, data = pcall(require, name)
    if status then
        return data
    else
        if SCRIPT_SOURCE == "REPO" then
            if isOptional then
                Log.debug("Missing optional dependency: " .. name)
            else
                util.toast("Missing a required depencency (\"" .. name .. "\"). Please install this from the repo > dependencies list")
                Log.severe("Missing required dependency:", name)
            end
        else
            local lockPath = download_lib_update(name, function()
                Log.log("Downloaded ", isOptional and "optional" or "required", "library:", name)
            end)
            while filesystem.exists(lockPath) do
                util.yield(500)
            end
            return require(name)
        end
        return nil
    end
end
-- END TEMPLATE --

util.require_natives(1627063482)

-- Models[1] && Models[2] are engines
local TRAIN_MODELS = {
    util.joaat("metrotrain"), util.joaat("freight"), util.joaat("freightcar"), util.joaat("freightcar2"), util.joaat("freightcont1"), util.joaat("freightcont2"), util.joaat("freightgrain"), util.joaat("tankercar")
}
local last_train = 0
local last_metro_f = 0
local last_metro_b = 0
local last_train_menu = 0
local globalTrainSpeed = 15
local globalTrainSpeedControlEnabled = false

show_busyspinner("Loading Train Models")
for _, model in ipairs(TRAIN_MODELS) do
    STREAMING.REQUEST_MODEL(model)
    while not STREAMING.HAS_MODEL_LOADED(model) do
        util.yield()
    end
end
HUD.BUSYSPINNER_OFF()

local spawnedMenu = menu.list(menu.my_root(), "Spawned Train Management", {}, "")
local function spawn_train(variation, pos, direction) 
    local train = VEHICLE.CREATE_MISSION_TRAIN(variation, pos.x, pos.y, pos.z, direction or false)
    local carts = {}
    for i = 0, 100 do
        local cart = VEHICLE.GET_TRAIN_CARRIAGE(train, i)
        if cart == 0 then
            break
        end
        table.insert(carts, cart)
    end
    last_train = train
    
    local posTrain = ENTITY.GET_ENTITY_COORDS(last_train)
    local netid = NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY(train)
    NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netid)
    NETWORK.SET_NETWORK_ID_CAN_MIGRATE(netid, false)
    -- Setup menu actions (set speed, delete, etc)
    local submenu = menu.list(spawnedMenu, "Train " .. last_train, {"train" .. last_train}, "") 
    menu.slider(submenu, "Set Speed", {"setspeedtrain" .. last_train}, "Sets this spawned train's speed. Values over +/- 80 will result in players sliding backwards. Reversing trains will look desynced to other players.", -250, 250, 10, 5, function(value, prev)
        VEHICLE.SET_TRAIN_CRUISE_SPEED(train, value)
        VEHICLE.SET_TRAIN_SPEED(train, value)
    end)

    menu.toggle(submenu, "Derail", {"derailtrain" .. last_train}, "Visually derails the train", function(on)
        VEHICLE.SET_RENDER_TRAIN_AS_DERAILED(train, on)
    end, false)

    menu.action(submenu, "Delete Engine", {"deleteengine" .. last_train}, "Deletes the spawned train's engine", function(v)
        entities.delete(train)
    end)

    menu.action(submenu, "Delete", {"deletetrain" .. last_train}, "Deletes the spawned train", function(v)
        for _, cart in ipairs(carts) do
            entities.delete(cart)
        end
        menu.delete(submenu)
    end)

    util.toast(string.format("Train spawned at (%.1f, %.1f, %.1f) variant %d", posTrain.x, posTrain.y, posTrain.z, variation))
    last_train_menu = submenu
    return train
end

-- MENU SETUP


menu.divider(menu.my_root(), "Train Spawning")

menu.click_slider(menu.my_root(), "Spawn Train", {"spawntrain"}, "Spawns a train with a certain variation\n22 = Metro\n23 = Long Train", 1, 25, 1, 1, function(variation)
    local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(players.user())
    local pos = ENTITY.GET_ENTITY_COORDS(ped, 1)

    spawn_train(variation - 1, pos)
end)

menu.action(menu.my_root(), "Spawn Metro Train", {"spawnmetro"}, "Spawn a metro train", function()
    local ped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(players.user())
    local pos = ENTITY.GET_ENTITY_COORDS(ped, 1)
    local metroFront = VEHICLE.CREATE_MISSION_TRAIN(21, pos.x, pos.y, pos.z, false)
    local metroBack = VEHICLE.CREATE_MISSION_TRAIN(21, pos.x, pos.y, pos.z, true)
    VEHICLE.SET_TRAIN_CRUISE_SPEED(metroFront, 15)
    util.yield(155)
    VEHICLE.SET_TRAIN_CRUISE_SPEED(metroBack, -15)
    VEHICLE.SET_TRAIN_SPEED(metroBack, -15)
    last_metro_f = metroFront
    last_metro_b = metroBack
    last_train = last_metro_f
end)

menu.slider(menu.my_root(), "Set Spawned Train Speed", {"setspawnedspeed"}, "Sets last spawned train's speed. Values over +/- 80 will result in players sliding backwards. Reversing trains will look desynced to other players.", -250, 250, 10, 5, function(value)
    VEHICLE.SET_TRAIN_CRUISE_SPEED(last_train, value)
    VEHICLE.SET_TRAIN_SPEED(last_train, value)
    if last_train == last_metro_f then
        VEHICLE.SET_TRAIN_CRUISE_SPEED(last_metro_b, -value)
        VEHICLE.SET_TRAIN_SPEED(last_metro_b, -value)
    end
end)

menu.action(menu.my_root(), "Delete Last Spawned Train", {"delltrain"}, "Deletes the last spawned train", function(v)
    if last_train > 0 then
        if last_train == last_metro_f then
            if last_metro_f > 0 then
                entities.delete(last_metro_f)
                last_metro_f = 0
            end
            if last_metro_b > 0 then
                entities.delete(last_metro_b)
                last_metro_b = 0
            end
            return
        end
        if not ENTITY.DOES_ENTITY_EXIST(last_train) then
            menu.delete(last_train_menu)
            last_train = 0
            last_train_menu = 0
            return
        end
        local carts = {}
        for i = 0, 100 do
            local cart = VEHICLE.GET_TRAIN_CARRIAGE(last_train, i)
            if cart == 0 then
                break
            end
            table.insert(carts, cart)
        end
        entities.delete(last_train)
        for _, cart in ipairs(carts) do
            entities.delete(cart)
        end
        menu.delete(last_train_menu)
        last_train = 0
        last_train_menu = 0
    end
end)

menu.divider(menu.my_root(), "Global")

menu.toggle(menu.my_root(), "Global Speed Enabled", {"enableglobalspeed", "trainspeed"}, "Should script control all trains? (Speed set below)", function(on)
    -- Should _probably_ check if the model is a ya know train but ehh
    globalTrainSpeedControlEnabled = on
end, globalTrainSpeedControlEnabled)

menu.slider(menu.my_root(), "Global Train Speed", {"settrainspeed", "trainspeed"}, "Sets all nearby train's speed. Values over +/- 80 will result in players sliding backwards. Reversing trains will look desynced to other players.", -250, 250, globalTrainSpeed, 5, function(value)
    globalTrainSpeed = value
end)

menu.action(menu.my_root(), "Delete All Trains", {"delalltrains"}, "Deletes all trains in the game", function(v)
    local vehicles = entities.get_all_vehicles_as_handles()
    local count = 0
    for _, vehicle in pairs(vehicles) do
        local vehicleModel = ENTITY.GET_ENTITY_MODEL(vehicle)
        for _, model in ipairs(TRAIN_MODELS) do
            -- Check if the vehicle is a train
            if model == vehicleModel then
                count = count + 1
                entities.delete(vehicle)
                break
            end
        end
    end
    util.toast("Deleted " .. count .. " trains")
end)

menu.toggle(menu.my_root(), "Derail Trains", {"setderailed"}, "Makes all trains render as derailed", function(on)
    local vehicles = entities.get_all_vehicles_as_handles()
    for _, vehicle in pairs(vehicles) do 
        local vehicleModel = ENTITY.GET_ENTITY_MODEL(vehicle)
        for _, model in ipairs(TRAIN_MODELS) do
            -- Check if the vehicle is a train
            if model == vehicleModel then
                VEHICLE.SET_RENDER_TRAIN_AS_DERAILED(vehicle, on)
            end
        end
    end
end, false)

util.on_stop(function(_)
    for _, model in ipairs(TRAIN_MODELS) do
        STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED(model)
    end
end)


local crazyTrains = false
menu.toggle(menu.my_root(), "Broken Trains", {}, "", function(on)
    crazyTrains = on
end, crazyTrains)


local textc = {
    r = 255,
    g = 255,
    b = 255,
    a = 0
}
local speed = 0.0
local tick = 0
local increment = 5.0
while true do
    if crazyTrains then
        directx.draw_text(0.2, 0.5, string.format("speed %3.0f %s", speed, (increment > 0.0 and " forward" or " backwards")), 1, 0.5, textc, false)
        tick = tick + 1
        if tick > 20 then
            speed = speed + increment
            if speed == 0.0 then
                speed = increment
            elseif speed >= 80.0 or speed <= -80.0 then
                increment = -increment
            end
            local vehicles = entities.get_all_vehicles_as_handles()
            for k, vehicle in pairs(vehicles) do
                VEHICLE.SET_TRAIN_CRUISE_SPEED(vehicle, speed)
                VEHICLE.SET_TRAIN_SPEED(vehicle, speed)
            end
            tick = 0
        end
    elseif globalTrainSpeedControlEnabled then
        for _, vehicle in pairs(entities.get_all_vehicles_as_handles()) do
            local model = ENTITY.GET_ENTITY_MODEL(vehicle)
            if model == TRAIN_MODELS[1] or model == TRAIN_MODELS[2] then --Only need to set speed for engine
                local netid = NETWORK.NETWORK_GET_NETWORK_ID_FROM_ENTITY(vehicle)
                NETWORK.SET_NETWORK_ID_CAN_MIGRATE(netid, true)
                NETWORK.NETWORK_REQUEST_CONTROL_OF_ENTITY(vehicle)
                NETWORK.NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netid)
                
                VEHICLE.SET_TRAIN_CRUISE_SPEED(vehicle, globalTrainSpeed)
                VEHICLE.SET_TRAIN_SPEED(vehicle, globalTrainSpeed)
            end
        end
    end
    util.yield()
end
